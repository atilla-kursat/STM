
ethernet_icmp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e208  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d04  0800e398  0800e398  0001e398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801109c  0801109c  00030090  2**0
                  CONTENTS
  4 .ARM          00000008  0801109c  0801109c  0002109c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080110a4  080110a4  00030090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080110a4  080110a4  000210a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080110a8  080110a8  000210a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080110ac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030090  2**0
                  CONTENTS
 10 .bss          000083a0  20000090  20000090  00030090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20008430  20008430  00030090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018c3a  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b14  00000000  00000000  00048cfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011d0  00000000  00000000  0004d810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001130  00000000  00000000  0004e9e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c780  00000000  00000000  0004fb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fa8e  00000000  00000000  0007c290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9042  00000000  00000000  0009bd1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00174d60  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f98  00000000  00000000  00174db0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e380 	.word	0x0800e380

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0800e380 	.word	0x0800e380

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	IP_ADDR4(&myIP,192,168,1,111);
 8000578:	4b05      	ldr	r3, [pc, #20]	; (8000590 <main+0x1c>)
 800057a:	4a06      	ldr	r2, [pc, #24]	; (8000594 <main+0x20>)
 800057c:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f000 fb81 	bl	8000c84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f809 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f871 	bl	800066c <MX_GPIO_Init>
  MX_LWIP_Init();
 800058a:	f002 fc55 	bl	8002e38 <MX_LWIP_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800058e:	e7fe      	b.n	800058e <main+0x1a>
 8000590:	200000ac 	.word	0x200000ac
 8000594:	6f01a8c0 	.word	0x6f01a8c0

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b094      	sub	sp, #80	; 0x50
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0320 	add.w	r3, r7, #32
 80005a2:	2230      	movs	r2, #48	; 0x30
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f00c fe92 	bl	800d2d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	f107 030c 	add.w	r3, r7, #12
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005bc:	2300      	movs	r3, #0
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	4b28      	ldr	r3, [pc, #160]	; (8000664 <SystemClock_Config+0xcc>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c4:	4a27      	ldr	r2, [pc, #156]	; (8000664 <SystemClock_Config+0xcc>)
 80005c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ca:	6413      	str	r3, [r2, #64]	; 0x40
 80005cc:	4b25      	ldr	r3, [pc, #148]	; (8000664 <SystemClock_Config+0xcc>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d8:	2300      	movs	r3, #0
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	4b22      	ldr	r3, [pc, #136]	; (8000668 <SystemClock_Config+0xd0>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a21      	ldr	r2, [pc, #132]	; (8000668 <SystemClock_Config+0xd0>)
 80005e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	4b1f      	ldr	r3, [pc, #124]	; (8000668 <SystemClock_Config+0xd0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f4:	2301      	movs	r3, #1
 80005f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fe:	2302      	movs	r3, #2
 8000600:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000602:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000606:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000608:	2308      	movs	r3, #8
 800060a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800060c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000610:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000612:	2302      	movs	r3, #2
 8000614:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000616:	2307      	movs	r3, #7
 8000618:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061a:	f107 0320 	add.w	r3, r7, #32
 800061e:	4618      	mov	r0, r3
 8000620:	f001 ff9a 	bl	8002558 <HAL_RCC_OscConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800062a:	f000 f863 	bl	80006f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062e:	230f      	movs	r3, #15
 8000630:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000632:	2302      	movs	r3, #2
 8000634:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800063a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800063e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000644:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000646:	f107 030c 	add.w	r3, r7, #12
 800064a:	2105      	movs	r1, #5
 800064c:	4618      	mov	r0, r3
 800064e:	f002 f9fb 	bl	8002a48 <HAL_RCC_ClockConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000658:	f000 f84c 	bl	80006f4 <Error_Handler>
  }
}
 800065c:	bf00      	nop
 800065e:	3750      	adds	r7, #80	; 0x50
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40023800 	.word	0x40023800
 8000668:	40007000 	.word	0x40007000

0800066c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800066c:	b480      	push	{r7}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	60fb      	str	r3, [r7, #12]
 8000676:	4b1e      	ldr	r3, [pc, #120]	; (80006f0 <MX_GPIO_Init+0x84>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a1d      	ldr	r2, [pc, #116]	; (80006f0 <MX_GPIO_Init+0x84>)
 800067c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <MX_GPIO_Init+0x84>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <MX_GPIO_Init+0x84>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a16      	ldr	r2, [pc, #88]	; (80006f0 <MX_GPIO_Init+0x84>)
 8000698:	f043 0304 	orr.w	r3, r3, #4
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <MX_GPIO_Init+0x84>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0304 	and.w	r3, r3, #4
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <MX_GPIO_Init+0x84>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a0f      	ldr	r2, [pc, #60]	; (80006f0 <MX_GPIO_Init+0x84>)
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <MX_GPIO_Init+0x84>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	603b      	str	r3, [r7, #0]
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_GPIO_Init+0x84>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a08      	ldr	r2, [pc, #32]	; (80006f0 <MX_GPIO_Init+0x84>)
 80006d0:	f043 0302 	orr.w	r3, r3, #2
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_GPIO_Init+0x84>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0302 	and.w	r3, r3, #2
 80006de:	603b      	str	r3, [r7, #0]
 80006e0:	683b      	ldr	r3, [r7, #0]

}
 80006e2:	bf00      	nop
 80006e4:	3714      	adds	r7, #20
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	40023800 	.word	0x40023800

080006f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f8:	b672      	cpsid	i
}
 80006fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006fc:	e7fe      	b.n	80006fc <Error_Handler+0x8>
	...

08000700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <HAL_MspInit+0x4c>)
 800070c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800070e:	4a0f      	ldr	r2, [pc, #60]	; (800074c <HAL_MspInit+0x4c>)
 8000710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000714:	6453      	str	r3, [r2, #68]	; 0x44
 8000716:	4b0d      	ldr	r3, [pc, #52]	; (800074c <HAL_MspInit+0x4c>)
 8000718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800071a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	603b      	str	r3, [r7, #0]
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <HAL_MspInit+0x4c>)
 8000728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072a:	4a08      	ldr	r2, [pc, #32]	; (800074c <HAL_MspInit+0x4c>)
 800072c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000730:	6413      	str	r3, [r2, #64]	; 0x40
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <HAL_MspInit+0x4c>)
 8000734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073a:	603b      	str	r3, [r7, #0]
 800073c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800073e:	2007      	movs	r0, #7
 8000740:	f000 fc06 	bl	8000f50 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000744:	bf00      	nop
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40023800 	.word	0x40023800

08000750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000754:	e7fe      	b.n	8000754 <NMI_Handler+0x4>

08000756 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800075a:	e7fe      	b.n	800075a <HardFault_Handler+0x4>

0800075c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000760:	e7fe      	b.n	8000760 <MemManage_Handler+0x4>

08000762 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000766:	e7fe      	b.n	8000766 <BusFault_Handler+0x4>

08000768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800076c:	e7fe      	b.n	800076c <UsageFault_Handler+0x4>

0800076e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr

0800078a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr

08000798 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800079c:	f000 fac4 	bl	8000d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80007a8:	4802      	ldr	r0, [pc, #8]	; (80007b4 <ETH_IRQHandler+0x10>)
 80007aa:	f000 fe51 	bl	8001450 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20004bd0 	.word	0x20004bd0

080007b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
	return 1;
 80007bc:	2301      	movs	r3, #1
}
 80007be:	4618      	mov	r0, r3
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <_kill>:

int _kill(int pid, int sig)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80007d2:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <_kill+0x20>)
 80007d4:	2216      	movs	r2, #22
 80007d6:	601a      	str	r2, [r3, #0]
	return -1;
 80007d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007dc:	4618      	mov	r0, r3
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	20008420 	.word	0x20008420

080007ec <_exit>:

void _exit (int status)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80007f4:	f04f 31ff 	mov.w	r1, #4294967295
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f7ff ffe5 	bl	80007c8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80007fe:	e7fe      	b.n	80007fe <_exit+0x12>

08000800 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af00      	add	r7, sp, #0
 8000806:	60f8      	str	r0, [r7, #12]
 8000808:	60b9      	str	r1, [r7, #8]
 800080a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	e00a      	b.n	8000828 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000812:	f3af 8000 	nop.w
 8000816:	4601      	mov	r1, r0
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	1c5a      	adds	r2, r3, #1
 800081c:	60ba      	str	r2, [r7, #8]
 800081e:	b2ca      	uxtb	r2, r1
 8000820:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	3301      	adds	r3, #1
 8000826:	617b      	str	r3, [r7, #20]
 8000828:	697a      	ldr	r2, [r7, #20]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	429a      	cmp	r2, r3
 800082e:	dbf0      	blt.n	8000812 <_read+0x12>
	}

return len;
 8000830:	687b      	ldr	r3, [r7, #4]
}
 8000832:	4618      	mov	r0, r3
 8000834:	3718      	adds	r7, #24
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	b086      	sub	sp, #24
 800083e:	af00      	add	r7, sp, #0
 8000840:	60f8      	str	r0, [r7, #12]
 8000842:	60b9      	str	r1, [r7, #8]
 8000844:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
 800084a:	e009      	b.n	8000860 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	1c5a      	adds	r2, r3, #1
 8000850:	60ba      	str	r2, [r7, #8]
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	4618      	mov	r0, r3
 8000856:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	3301      	adds	r3, #1
 800085e:	617b      	str	r3, [r7, #20]
 8000860:	697a      	ldr	r2, [r7, #20]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	429a      	cmp	r2, r3
 8000866:	dbf1      	blt.n	800084c <_write+0x12>
	}
	return len;
 8000868:	687b      	ldr	r3, [r7, #4]
}
 800086a:	4618      	mov	r0, r3
 800086c:	3718      	adds	r7, #24
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <_close>:

int _close(int file)
{
 8000872:	b480      	push	{r7}
 8000874:	b083      	sub	sp, #12
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
	return -1;
 800087a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800087e:	4618      	mov	r0, r3
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800088a:	b480      	push	{r7}
 800088c:	b083      	sub	sp, #12
 800088e:	af00      	add	r7, sp, #0
 8000890:	6078      	str	r0, [r7, #4]
 8000892:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800089a:	605a      	str	r2, [r3, #4]
	return 0;
 800089c:	2300      	movs	r3, #0
}
 800089e:	4618      	mov	r0, r3
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr

080008aa <_isatty>:

int _isatty(int file)
{
 80008aa:	b480      	push	{r7}
 80008ac:	b083      	sub	sp, #12
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	6078      	str	r0, [r7, #4]
	return 1;
 80008b2:	2301      	movs	r3, #1
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	607a      	str	r2, [r7, #4]
	return 0;
 80008cc:	2300      	movs	r3, #0
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3714      	adds	r7, #20
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
	...

080008dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008dc:	b480      	push	{r7}
 80008de:	b087      	sub	sp, #28
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008e4:	4a14      	ldr	r2, [pc, #80]	; (8000938 <_sbrk+0x5c>)
 80008e6:	4b15      	ldr	r3, [pc, #84]	; (800093c <_sbrk+0x60>)
 80008e8:	1ad3      	subs	r3, r2, r3
 80008ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008f0:	4b13      	ldr	r3, [pc, #76]	; (8000940 <_sbrk+0x64>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d102      	bne.n	80008fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <_sbrk+0x64>)
 80008fa:	4a12      	ldr	r2, [pc, #72]	; (8000944 <_sbrk+0x68>)
 80008fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <_sbrk+0x64>)
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4413      	add	r3, r2
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	429a      	cmp	r2, r3
 800090a:	d205      	bcs.n	8000918 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800090c:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <_sbrk+0x6c>)
 800090e:	220c      	movs	r2, #12
 8000910:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000912:	f04f 33ff 	mov.w	r3, #4294967295
 8000916:	e009      	b.n	800092c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <_sbrk+0x64>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <_sbrk+0x64>)
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4413      	add	r3, r2
 8000926:	4a06      	ldr	r2, [pc, #24]	; (8000940 <_sbrk+0x64>)
 8000928:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800092a:	68fb      	ldr	r3, [r7, #12]
}
 800092c:	4618      	mov	r0, r3
 800092e:	371c      	adds	r7, #28
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	20020000 	.word	0x20020000
 800093c:	00000400 	.word	0x00000400
 8000940:	200000b0 	.word	0x200000b0
 8000944:	20008430 	.word	0x20008430
 8000948:	20008420 	.word	0x20008420

0800094c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <SystemInit+0x20>)
 8000952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000956:	4a05      	ldr	r2, [pc, #20]	; (800096c <SystemInit+0x20>)
 8000958:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800095c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	e000ed00 	.word	0xe000ed00

08000970 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000970:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000974:	480d      	ldr	r0, [pc, #52]	; (80009ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000976:	490e      	ldr	r1, [pc, #56]	; (80009b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000978:	4a0e      	ldr	r2, [pc, #56]	; (80009b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800097a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800097c:	e002      	b.n	8000984 <LoopCopyDataInit>

0800097e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800097e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000980:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000982:	3304      	adds	r3, #4

08000984 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000984:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000986:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000988:	d3f9      	bcc.n	800097e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800098a:	4a0b      	ldr	r2, [pc, #44]	; (80009b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800098c:	4c0b      	ldr	r4, [pc, #44]	; (80009bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800098e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000990:	e001      	b.n	8000996 <LoopFillZerobss>

08000992 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000992:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000994:	3204      	adds	r2, #4

08000996 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000996:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000998:	d3fb      	bcc.n	8000992 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800099a:	f7ff ffd7 	bl	800094c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800099e:	f00c fc55 	bl	800d24c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009a2:	f7ff fde7 	bl	8000574 <main>
  bx  lr    
 80009a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80009b4:	080110ac 	.word	0x080110ac
  ldr r2, =_sbss
 80009b8:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80009bc:	20008430 	.word	0x20008430

080009c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009c0:	e7fe      	b.n	80009c0 <ADC_IRQHandler>

080009c2 <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 80009c2:	b480      	push	{r7}
 80009c4:	b083      	sub	sp, #12
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	6078      	str	r0, [r7, #4]
 80009ca:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d00b      	beq.n	80009ea <DP83848_RegisterBusIO+0x28>
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	68db      	ldr	r3, [r3, #12]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d007      	beq.n	80009ea <DP83848_RegisterBusIO+0x28>
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	689b      	ldr	r3, [r3, #8]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d003      	beq.n	80009ea <DP83848_RegisterBusIO+0x28>
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	691b      	ldr	r3, [r3, #16]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d102      	bne.n	80009f0 <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 80009ea:	f04f 33ff 	mov.w	r3, #4294967295
 80009ee:	e014      	b.n	8000a1a <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685a      	ldr	r2, [r3, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	68da      	ldr	r2, [r3, #12]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	689a      	ldr	r2, [r3, #8]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	691a      	ldr	r2, [r3, #16]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 8000a18:	2300      	movs	r3, #0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr

08000a26 <DP83848_Init>:
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  *         DP83848_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b086      	sub	sp, #24
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	2300      	movs	r3, #0
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d17c      	bne.n	8000b40 <DP83848_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	689b      	ldr	r3, [r3, #8]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d002      	beq.n	8000a54 <DP83848_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2220      	movs	r2, #32
 8000a58:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	617b      	str	r3, [r7, #20]
 8000a5e:	e01c      	b.n	8000a9a <DP83848_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	695b      	ldr	r3, [r3, #20]
 8000a64:	f107 0208 	add.w	r2, r7, #8
 8000a68:	2119      	movs	r1, #25
 8000a6a:	6978      	ldr	r0, [r7, #20]
 8000a6c:	4798      	blx	r3
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	da03      	bge.n	8000a7c <DP83848_Init+0x56>
       {
         status = DP83848_STATUS_READ_ERROR;
 8000a74:	f06f 0304 	mvn.w	r3, #4
 8000a78:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000a7a:	e00b      	b.n	8000a94 <DP83848_Init+0x6e>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	f003 031f 	and.w	r3, r3, #31
 8000a82:	697a      	ldr	r2, [r7, #20]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d105      	bne.n	8000a94 <DP83848_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	697a      	ldr	r2, [r7, #20]
 8000a8c:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	613b      	str	r3, [r7, #16]
         break;
 8000a92:	e005      	b.n	8000aa0 <DP83848_Init+0x7a>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	3301      	adds	r3, #1
 8000a98:	617b      	str	r3, [r7, #20]
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	2b1f      	cmp	r3, #31
 8000a9e:	d9df      	bls.n	8000a60 <DP83848_Init+0x3a>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2b1f      	cmp	r3, #31
 8000aa6:	d902      	bls.n	8000aae <DP83848_Init+0x88>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 8000aa8:	f06f 0302 	mvn.w	r3, #2
 8000aac:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d145      	bne.n	8000b40 <DP83848_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, DP83848_BCR, DP83848_BCR_SOFT_RESET) >= 0)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	691b      	ldr	r3, [r3, #16]
 8000ab8:	687a      	ldr	r2, [r7, #4]
 8000aba:	6810      	ldr	r0, [r2, #0]
 8000abc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4798      	blx	r3
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	db37      	blt.n	8000b3a <DP83848_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) >= 0)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	695b      	ldr	r3, [r3, #20]
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	6810      	ldr	r0, [r2, #0]
 8000ad2:	f107 0208 	add.w	r2, r7, #8
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	4798      	blx	r3
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	db28      	blt.n	8000b32 <DP83848_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	4798      	blx	r3
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occured  */
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8000aea:	e01c      	b.n	8000b26 <DP83848_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= DP83848_SW_RESET_TO)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	4798      	blx	r3
 8000af2:	4603      	mov	r3, r0
 8000af4:	461a      	mov	r2, r3
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000afe:	d80e      	bhi.n	8000b1e <DP83848_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) < 0)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	695b      	ldr	r3, [r3, #20]
 8000b04:	687a      	ldr	r2, [r7, #4]
 8000b06:	6810      	ldr	r0, [r2, #0]
 8000b08:	f107 0208 	add.w	r2, r7, #8
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4798      	blx	r3
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	da07      	bge.n	8000b26 <DP83848_Init+0x100>
               {
                 status = DP83848_STATUS_READ_ERROR;
 8000b16:	f06f 0304 	mvn.w	r3, #4
 8000b1a:	613b      	str	r3, [r7, #16]
                 break;
 8000b1c:	e010      	b.n	8000b40 <DP83848_Init+0x11a>
               }
             }
             else
             {
               status = DP83848_STATUS_RESET_TIMEOUT;
 8000b1e:	f06f 0301 	mvn.w	r3, #1
 8000b22:	613b      	str	r3, [r7, #16]
               break;
 8000b24:	e00c      	b.n	8000b40 <DP83848_Init+0x11a>
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8000b26:	68bb      	ldr	r3, [r7, #8]
 8000b28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d1dd      	bne.n	8000aec <DP83848_Init+0xc6>
 8000b30:	e006      	b.n	8000b40 <DP83848_Init+0x11a>
             }
           }
         }
         else
         {
           status = DP83848_STATUS_READ_ERROR;
 8000b32:	f06f 0304 	mvn.w	r3, #4
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	e002      	b.n	8000b40 <DP83848_Init+0x11a>
         }
       }
       else
       {
         status = DP83848_STATUS_WRITE_ERROR;
 8000b3a:	f06f 0303 	mvn.w	r3, #3
 8000b3e:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == DP83848_STATUS_OK)
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d112      	bne.n	8000b6c <DP83848_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	699b      	ldr	r3, [r3, #24]
 8000b4a:	4798      	blx	r3
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= DP83848_INIT_TO)
 8000b50:	bf00      	nop
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	699b      	ldr	r3, [r3, #24]
 8000b56:	4798      	blx	r3
 8000b58:	4603      	mov	r3, r0
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	1ad3      	subs	r3, r2, r3
 8000b60:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000b64:	d9f5      	bls.n	8000b52 <DP83848_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2201      	movs	r2, #1
 8000b6a:	605a      	str	r2, [r3, #4]
   }

   return status;
 8000b6c:	693b      	ldr	r3, [r7, #16]
 }
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3718      	adds	r7, #24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b084      	sub	sp, #16
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	695b      	ldr	r3, [r3, #20]
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	6810      	ldr	r0, [r2, #0]
 8000b8a:	f107 020c 	add.w	r2, r7, #12
 8000b8e:	2101      	movs	r1, #1
 8000b90:	4798      	blx	r3
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	da02      	bge.n	8000b9e <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 8000b98:	f06f 0304 	mvn.w	r3, #4
 8000b9c:	e06e      	b.n	8000c7c <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	695b      	ldr	r3, [r3, #20]
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	6810      	ldr	r0, [r2, #0]
 8000ba6:	f107 020c 	add.w	r2, r7, #12
 8000baa:	2101      	movs	r1, #1
 8000bac:	4798      	blx	r3
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	da02      	bge.n	8000bba <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 8000bb4:	f06f 0304 	mvn.w	r3, #4
 8000bb8:	e060      	b.n	8000c7c <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	f003 0304 	and.w	r3, r3, #4
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d101      	bne.n	8000bc8 <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	e059      	b.n	8000c7c <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	695b      	ldr	r3, [r3, #20]
 8000bcc:	687a      	ldr	r2, [r7, #4]
 8000bce:	6810      	ldr	r0, [r2, #0]
 8000bd0:	f107 020c 	add.w	r2, r7, #12
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4798      	blx	r3
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	da02      	bge.n	8000be4 <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 8000bde:	f06f 0304 	mvn.w	r3, #4
 8000be2:	e04b      	b.n	8000c7c <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d11b      	bne.n	8000c26 <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d006      	beq.n	8000c06 <DP83848_GetLinkState+0x90>
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8000c02:	2302      	movs	r3, #2
 8000c04:	e03a      	b.n	8000c7c <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8000c10:	2303      	movs	r3, #3
 8000c12:	e033      	b.n	8000c7c <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8000c1e:	2304      	movs	r3, #4
 8000c20:	e02c      	b.n	8000c7c <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8000c22:	2305      	movs	r3, #5
 8000c24:	e02a      	b.n	8000c7c <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	6810      	ldr	r0, [r2, #0]
 8000c2e:	f107 020c 	add.w	r2, r7, #12
 8000c32:	2110      	movs	r1, #16
 8000c34:	4798      	blx	r3
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	da02      	bge.n	8000c42 <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 8000c3c:	f06f 0304 	mvn.w	r3, #4
 8000c40:	e01c      	b.n	8000c7c <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d101      	bne.n	8000c50 <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 8000c4c:	2306      	movs	r3, #6
 8000c4e:	e015      	b.n	8000c7c <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f003 0306 	and.w	r3, r3, #6
 8000c56:	2b04      	cmp	r3, #4
 8000c58:	d101      	bne.n	8000c5e <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	e00e      	b.n	8000c7c <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	f003 0306 	and.w	r3, r3, #6
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d101      	bne.n	8000c6c <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	e007      	b.n	8000c7c <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	f003 0306 	and.w	r3, r3, #6
 8000c72:	2b06      	cmp	r3, #6
 8000c74:	d101      	bne.n	8000c7a <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8000c76:	2304      	movs	r3, #4
 8000c78:	e000      	b.n	8000c7c <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8000c7a:	2305      	movs	r3, #5
    }
  }
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c88:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <HAL_Init+0x40>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a0d      	ldr	r2, [pc, #52]	; (8000cc4 <HAL_Init+0x40>)
 8000c8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c94:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <HAL_Init+0x40>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a0a      	ldr	r2, [pc, #40]	; (8000cc4 <HAL_Init+0x40>)
 8000c9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca0:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <HAL_Init+0x40>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a07      	ldr	r2, [pc, #28]	; (8000cc4 <HAL_Init+0x40>)
 8000ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000caa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cac:	2003      	movs	r0, #3
 8000cae:	f000 f94f 	bl	8000f50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	f000 f808 	bl	8000cc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb8:	f7ff fd22 	bl	8000700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40023c00 	.word	0x40023c00

08000cc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <HAL_InitTick+0x54>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <HAL_InitTick+0x58>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	4619      	mov	r1, r3
 8000cda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f000 f967 	bl	8000fba <HAL_SYSTICK_Config>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e00e      	b.n	8000d14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2b0f      	cmp	r3, #15
 8000cfa:	d80a      	bhi.n	8000d12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	6879      	ldr	r1, [r7, #4]
 8000d00:	f04f 30ff 	mov.w	r0, #4294967295
 8000d04:	f000 f92f 	bl	8000f66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d08:	4a06      	ldr	r2, [pc, #24]	; (8000d24 <HAL_InitTick+0x5c>)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	e000      	b.n	8000d14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20000000 	.word	0x20000000
 8000d20:	20000008 	.word	0x20000008
 8000d24:	20000004 	.word	0x20000004

08000d28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_IncTick+0x20>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	461a      	mov	r2, r3
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_IncTick+0x24>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4413      	add	r3, r2
 8000d38:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <HAL_IncTick+0x24>)
 8000d3a:	6013      	str	r3, [r2, #0]
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	20000008 	.word	0x20000008
 8000d4c:	200000b4 	.word	0x200000b4

08000d50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return uwTick;
 8000d54:	4b03      	ldr	r3, [pc, #12]	; (8000d64 <HAL_GetTick+0x14>)
 8000d56:	681b      	ldr	r3, [r3, #0]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	200000b4 	.word	0x200000b4

08000d68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d70:	f7ff ffee 	bl	8000d50 <HAL_GetTick>
 8000d74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d80:	d005      	beq.n	8000d8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d82:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <HAL_Delay+0x44>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	461a      	mov	r2, r3
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d8e:	bf00      	nop
 8000d90:	f7ff ffde 	bl	8000d50 <HAL_GetTick>
 8000d94:	4602      	mov	r2, r0
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	68fa      	ldr	r2, [r7, #12]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d8f7      	bhi.n	8000d90 <HAL_Delay+0x28>
  {
  }
}
 8000da0:	bf00      	nop
 8000da2:	bf00      	nop
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000008 	.word	0x20000008

08000db0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dc6:	68ba      	ldr	r2, [r7, #8]
 8000dc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dcc:	4013      	ands	r3, r2
 8000dce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000de2:	4a04      	ldr	r2, [pc, #16]	; (8000df4 <__NVIC_SetPriorityGrouping+0x44>)
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	60d3      	str	r3, [r2, #12]
}
 8000de8:	bf00      	nop
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dfc:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <__NVIC_GetPriorityGrouping+0x18>)
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	0a1b      	lsrs	r3, r3, #8
 8000e02:	f003 0307 	and.w	r3, r3, #7
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	db0b      	blt.n	8000e3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	f003 021f 	and.w	r2, r3, #31
 8000e2c:	4907      	ldr	r1, [pc, #28]	; (8000e4c <__NVIC_EnableIRQ+0x38>)
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	095b      	lsrs	r3, r3, #5
 8000e34:	2001      	movs	r0, #1
 8000e36:	fa00 f202 	lsl.w	r2, r0, r2
 8000e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000e100 	.word	0xe000e100

08000e50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	6039      	str	r1, [r7, #0]
 8000e5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	db0a      	blt.n	8000e7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	490c      	ldr	r1, [pc, #48]	; (8000e9c <__NVIC_SetPriority+0x4c>)
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	0112      	lsls	r2, r2, #4
 8000e70:	b2d2      	uxtb	r2, r2
 8000e72:	440b      	add	r3, r1
 8000e74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e78:	e00a      	b.n	8000e90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	b2da      	uxtb	r2, r3
 8000e7e:	4908      	ldr	r1, [pc, #32]	; (8000ea0 <__NVIC_SetPriority+0x50>)
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	f003 030f 	and.w	r3, r3, #15
 8000e86:	3b04      	subs	r3, #4
 8000e88:	0112      	lsls	r2, r2, #4
 8000e8a:	b2d2      	uxtb	r2, r2
 8000e8c:	440b      	add	r3, r1
 8000e8e:	761a      	strb	r2, [r3, #24]
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	e000e100 	.word	0xe000e100
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b089      	sub	sp, #36	; 0x24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	f1c3 0307 	rsb	r3, r3, #7
 8000ebe:	2b04      	cmp	r3, #4
 8000ec0:	bf28      	it	cs
 8000ec2:	2304      	movcs	r3, #4
 8000ec4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	3304      	adds	r3, #4
 8000eca:	2b06      	cmp	r3, #6
 8000ecc:	d902      	bls.n	8000ed4 <NVIC_EncodePriority+0x30>
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	3b03      	subs	r3, #3
 8000ed2:	e000      	b.n	8000ed6 <NVIC_EncodePriority+0x32>
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43da      	mvns	r2, r3
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	401a      	ands	r2, r3
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eec:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef6:	43d9      	mvns	r1, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000efc:	4313      	orrs	r3, r2
         );
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3724      	adds	r7, #36	; 0x24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
	...

08000f0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f1c:	d301      	bcc.n	8000f22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e00f      	b.n	8000f42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f22:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <SysTick_Config+0x40>)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f2a:	210f      	movs	r1, #15
 8000f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f30:	f7ff ff8e 	bl	8000e50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f34:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <SysTick_Config+0x40>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f3a:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <SysTick_Config+0x40>)
 8000f3c:	2207      	movs	r2, #7
 8000f3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	e000e010 	.word	0xe000e010

08000f50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff ff29 	bl	8000db0 <__NVIC_SetPriorityGrouping>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b086      	sub	sp, #24
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	60b9      	str	r1, [r7, #8]
 8000f70:	607a      	str	r2, [r7, #4]
 8000f72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f78:	f7ff ff3e 	bl	8000df8 <__NVIC_GetPriorityGrouping>
 8000f7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	68b9      	ldr	r1, [r7, #8]
 8000f82:	6978      	ldr	r0, [r7, #20]
 8000f84:	f7ff ff8e 	bl	8000ea4 <NVIC_EncodePriority>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8e:	4611      	mov	r1, r2
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ff5d 	bl	8000e50 <__NVIC_SetPriority>
}
 8000f96:	bf00      	nop
 8000f98:	3718      	adds	r7, #24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff ff31 	bl	8000e14 <__NVIC_EnableIRQ>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff ffa2 	bl	8000f0c <SysTick_Config>
 8000fc8:	4603      	mov	r3, r0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d101      	bne.n	8000fe6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e06c      	b.n	80010c0 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d106      	bne.n	8000ffe <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2223      	movs	r2, #35	; 0x23
 8000ff4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f002 f9c3 	bl	8003384 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	4b31      	ldr	r3, [pc, #196]	; (80010c8 <HAL_ETH_Init+0xf4>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001006:	4a30      	ldr	r2, [pc, #192]	; (80010c8 <HAL_ETH_Init+0xf4>)
 8001008:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800100c:	6453      	str	r3, [r2, #68]	; 0x44
 800100e:	4b2e      	ldr	r3, [pc, #184]	; (80010c8 <HAL_ETH_Init+0xf4>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800101a:	4b2c      	ldr	r3, [pc, #176]	; (80010cc <HAL_ETH_Init+0xf8>)
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	4a2b      	ldr	r2, [pc, #172]	; (80010cc <HAL_ETH_Init+0xf8>)
 8001020:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001024:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001026:	4b29      	ldr	r3, [pc, #164]	; (80010cc <HAL_ETH_Init+0xf8>)
 8001028:	685a      	ldr	r2, [r3, #4]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	4927      	ldr	r1, [pc, #156]	; (80010cc <HAL_ETH_Init+0xf8>)
 8001030:	4313      	orrs	r3, r2
 8001032:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001034:	4b25      	ldr	r3, [pc, #148]	; (80010cc <HAL_ETH_Init+0xf8>)
 8001036:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	6812      	ldr	r2, [r2, #0]
 8001046:	f043 0301 	orr.w	r3, r3, #1
 800104a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800104e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001050:	f7ff fe7e 	bl	8000d50 <HAL_GetTick>
 8001054:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001056:	e011      	b.n	800107c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001058:	f7ff fe7a 	bl	8000d50 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001066:	d909      	bls.n	800107c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2204      	movs	r2, #4
 800106c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	22e0      	movs	r2, #224	; 0xe0
 8001074:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e021      	b.n	80010c0 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1e4      	bne.n	8001058 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f000 fe20 	bl	8001cd4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f000 fec7 	bl	8001e28 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f000 ff1d 	bl	8001eda <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	461a      	mov	r2, r3
 80010a6:	2100      	movs	r1, #0
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f000 fe85 	bl	8001db8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2210      	movs	r2, #16
 80010ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80010be:	2300      	movs	r3, #0
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40023800 	.word	0x40023800
 80010cc:	40013800 	.word	0x40013800

080010d0 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80010de:	2b10      	cmp	r3, #16
 80010e0:	d150      	bne.n	8001184 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2223      	movs	r2, #35	; 0x23
 80010e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2204      	movs	r2, #4
 80010ee:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f000 f939 	bl	8001368 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f042 0208 	orr.w	r2, r2, #8
 8001104:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800110e:	2001      	movs	r0, #1
 8001110:	f7ff fe2a 	bl	8000d68 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	68fa      	ldr	r2, [r7, #12]
 800111a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f042 0204 	orr.w	r2, r2, #4
 800112a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001134:	2001      	movs	r0, #1
 8001136:	f7ff fe17 	bl	8000d68 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	68fa      	ldr	r2, [r7, #12]
 8001140:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f000 fc66 	bl	8001a14 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001150:	699b      	ldr	r3, [r3, #24]
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	6812      	ldr	r2, [r2, #0]
 8001156:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800115a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800115e:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001168:	699b      	ldr	r3, [r3, #24]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	6812      	ldr	r2, [r2, #0]
 800116e:	f043 0302 	orr.w	r3, r3, #2
 8001172:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001176:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2223      	movs	r2, #35	; 0x23
 800117c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001180:	2300      	movs	r3, #0
 8001182:	e000      	b.n	8001186 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
  }
}
 8001186:	4618      	mov	r0, r3
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b084      	sub	sp, #16
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800119c:	2b23      	cmp	r3, #35	; 0x23
 800119e:	d14a      	bne.n	8001236 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2223      	movs	r2, #35	; 0x23
 80011a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	6812      	ldr	r2, [r2, #0]
 80011b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80011ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80011be:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	6812      	ldr	r2, [r2, #0]
 80011ce:	f023 0302 	bic.w	r3, r3, #2
 80011d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80011d6:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f022 0204 	bic.w	r2, r2, #4
 80011e6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80011f0:	2001      	movs	r0, #1
 80011f2:	f7ff fdb9 	bl	8000d68 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f000 fc08 	bl	8001a14 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f022 0208 	bic.w	r2, r2, #8
 8001212:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800121c:	2001      	movs	r0, #1
 800121e:	f7ff fda3 	bl	8000d68 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	68fa      	ldr	r2, [r7, #12]
 8001228:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2210      	movs	r2, #16
 800122e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001232:	2300      	movs	r3, #0
 8001234:	e000      	b.n	8001238 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
  }
}
 8001238:	4618      	mov	r0, r3
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d109      	bne.n	8001266 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001258:	f043 0201 	orr.w	r2, r3, #1
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e07c      	b.n	8001360 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800126c:	2b23      	cmp	r3, #35	; 0x23
 800126e:	d176      	bne.n	800135e <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001270:	2200      	movs	r2, #0
 8001272:	68b9      	ldr	r1, [r7, #8]
 8001274:	68f8      	ldr	r0, [r7, #12]
 8001276:	f000 fe9d 	bl	8001fb4 <ETH_Prepare_Tx_Descriptors>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d009      	beq.n	8001294 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001286:	f043 0202 	orr.w	r2, r3, #2
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e065      	b.n	8001360 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001294:	f3bf 8f4f 	dsb	sy
}
 8001298:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	3206      	adds	r2, #6
 80012a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012a6:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ac:	1c5a      	adds	r2, r3, #1
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	629a      	str	r2, [r3, #40]	; 0x28
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b6:	2b03      	cmp	r3, #3
 80012b8:	d904      	bls.n	80012c4 <HAL_ETH_Transmit+0x84>
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012be:	1f1a      	subs	r2, r3, #4
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	3106      	adds	r1, #6
 80012d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80012d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80012d8:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 80012da:	f7ff fd39 	bl	8000d50 <HAL_GetTick>
 80012de:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80012e0:	e037      	b.n	8001352 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012ea:	695b      	ldr	r3, [r3, #20]
 80012ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d011      	beq.n	8001318 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012fa:	f043 0208 	orr.w	r2, r3, #8
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800130c:	695a      	ldr	r2, [r3, #20]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e023      	b.n	8001360 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800131e:	d018      	beq.n	8001352 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001320:	f7ff fd16 	bl	8000d50 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	429a      	cmp	r2, r3
 800132e:	d302      	bcc.n	8001336 <HAL_ETH_Transmit+0xf6>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d10d      	bne.n	8001352 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800133c:	f043 0204 	orr.w	r2, r3, #4
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800134c:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e006      	b.n	8001360 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	dbc3      	blt.n	80012e2 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800135a:	2300      	movs	r3, #0
 800135c:	e000      	b.n	8001360 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
  }
}
 8001360:	4618      	mov	r0, r3
 8001362:	3718      	adds	r7, #24
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b088      	sub	sp, #32
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001374:	2301      	movs	r3, #1
 8001376:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800137c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69fa      	ldr	r2, [r7, #28]
 8001382:	3212      	adds	r2, #18
 8001384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001388:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800138e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001390:	e040      	b.n	8001414 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	6a1b      	ldr	r3, [r3, #32]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d112      	bne.n	80013c0 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800139a:	f107 030c 	add.w	r3, r7, #12
 800139e:	4618      	mov	r0, r3
 80013a0:	f002 f978 	bl	8003694 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d102      	bne.n	80013b0 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	74fb      	strb	r3, [r7, #19]
 80013ae:	e007      	b.n	80013c0 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	461a      	mov	r2, r3
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	461a      	mov	r2, r3
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80013c0:	7cfb      	ldrb	r3, [r7, #19]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d026      	beq.n	8001414 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d103      	bne.n	80013d6 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	4a1e      	ldr	r2, [pc, #120]	; (800144c <ETH_UpdateDescriptor+0xe4>)
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	e003      	b.n	80013de <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80013dc:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80013de:	f3bf 8f5f 	dmb	sy
}
 80013e2:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	3301      	adds	r3, #1
 80013f4:	61fb      	str	r3, [r7, #28]
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	2b03      	cmp	r3, #3
 80013fa:	d902      	bls.n	8001402 <ETH_UpdateDescriptor+0x9a>
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	3b04      	subs	r3, #4
 8001400:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	69fa      	ldr	r2, [r7, #28]
 8001406:	3212      	adds	r2, #18
 8001408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800140c:	617b      	str	r3, [r7, #20]
      desccount--;
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	3b01      	subs	r3, #1
 8001412:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d002      	beq.n	8001420 <ETH_UpdateDescriptor+0xb8>
 800141a:	7cfb      	ldrb	r3, [r7, #19]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1b8      	bne.n	8001392 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	429a      	cmp	r2, r3
 8001428:	d00c      	beq.n	8001444 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001432:	461a      	mov	r2, r3
 8001434:	2300      	movs	r3, #0
 8001436:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	69fa      	ldr	r2, [r7, #28]
 800143c:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001444:	bf00      	nop
 8001446:	3720      	adds	r7, #32
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	800045f8 	.word	0x800045f8

08001450 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001466:	2b40      	cmp	r3, #64	; 0x40
 8001468:	d112      	bne.n	8001490 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001472:	69db      	ldr	r3, [r3, #28]
 8001474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001478:	2b40      	cmp	r3, #64	; 0x40
 800147a:	d109      	bne.n	8001490 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001484:	461a      	mov	r2, r3
 8001486:	4b50      	ldr	r3, [pc, #320]	; (80015c8 <HAL_ETH_IRQHandler+0x178>)
 8001488:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f000 f8ac 	bl	80015e8 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d113      	bne.n	80014ca <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014aa:	69db      	ldr	r3, [r3, #28]
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d10a      	bne.n	80014ca <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014bc:	461a      	mov	r2, r3
 80014be:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80014c2:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f000 f885 	bl	80015d4 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014d2:	695b      	ldr	r3, [r3, #20]
 80014d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014dc:	d14c      	bne.n	8001578 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014e6:	69db      	ldr	r3, [r3, #28]
 80014e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014f0:	d142      	bne.n	8001578 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014f8:	f043 0208 	orr.w	r2, r3, #8
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800150a:	695b      	ldr	r3, [r3, #20]
 800150c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001510:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001514:	d11a      	bne.n	800154c <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800151e:	695a      	ldr	r2, [r3, #20]
 8001520:	4b2a      	ldr	r3, [pc, #168]	; (80015cc <HAL_ETH_IRQHandler+0x17c>)
 8001522:	4013      	ands	r3, r2
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001532:	69db      	ldr	r3, [r3, #28]
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	6812      	ldr	r2, [r2, #0]
 8001538:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 800153c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001540:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	22e0      	movs	r2, #224	; 0xe0
 8001546:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800154a:	e012      	b.n	8001572 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001554:	695a      	ldr	r2, [r3, #20]
 8001556:	f248 6380 	movw	r3, #34432	; 0x8680
 800155a:	4013      	ands	r3, r2
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800156a:	461a      	mov	r2, r3
 800156c:	f248 6380 	movw	r3, #34432	; 0x8680
 8001570:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f000 f842 	bl	80015fc <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800157e:	f003 0308 	and.w	r3, r3, #8
 8001582:	2b08      	cmp	r3, #8
 8001584:	d10e      	bne.n	80015a4 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f000 f83a 	bl	8001610 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80015a4:	4b0a      	ldr	r3, [pc, #40]	; (80015d0 <HAL_ETH_IRQHandler+0x180>)
 80015a6:	695b      	ldr	r3, [r3, #20]
 80015a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d006      	beq.n	80015be <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80015b0:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <HAL_ETH_IRQHandler+0x180>)
 80015b2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80015b6:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f000 f833 	bl	8001624 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	00010040 	.word	0x00010040
 80015cc:	007e2000 	.word	0x007e2000
 80015d0:	40013c00 	.word	0x40013c00

080015d4 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
 8001644:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	691b      	ldr	r3, [r3, #16]
 800164c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	f003 031c 	and.w	r3, r3, #28
 8001654:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	02db      	lsls	r3, r3, #11
 800165a:	b29b      	uxth	r3, r3
 800165c:	697a      	ldr	r2, [r7, #20]
 800165e:	4313      	orrs	r3, r2
 8001660:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	019b      	lsls	r3, r3, #6
 8001666:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800166a:	697a      	ldr	r2, [r7, #20]
 800166c:	4313      	orrs	r3, r2
 800166e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	f023 0302 	bic.w	r3, r3, #2
 8001676:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	f043 0301 	orr.w	r3, r3, #1
 800167e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	697a      	ldr	r2, [r7, #20]
 8001686:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001688:	f7ff fb62 	bl	8000d50 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800168e:	e00d      	b.n	80016ac <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001690:	f7ff fb5e 	bl	8000d50 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800169e:	d301      	bcc.n	80016a4 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e010      	b.n	80016c6 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1ec      	bne.n	8001690 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	695b      	ldr	r3, [r3, #20]
 80016bc:	b29b      	uxth	r3, r3
 80016be:	461a      	mov	r2, r3
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b086      	sub	sp, #24
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	60f8      	str	r0, [r7, #12]
 80016d6:	60b9      	str	r1, [r7, #8]
 80016d8:	607a      	str	r2, [r7, #4]
 80016da:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	f003 031c 	and.w	r3, r3, #28
 80016ea:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	02db      	lsls	r3, r3, #11
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	697a      	ldr	r2, [r7, #20]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	019b      	lsls	r3, r3, #6
 80016fc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001700:	697a      	ldr	r2, [r7, #20]
 8001702:	4313      	orrs	r3, r2
 8001704:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	f043 0302 	orr.w	r3, r3, #2
 800170c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	b29a      	uxth	r2, r3
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	697a      	ldr	r2, [r7, #20]
 8001726:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001728:	f7ff fb12 	bl	8000d50 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800172e:	e00d      	b.n	800174c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001730:	f7ff fb0e 	bl	8000d50 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800173e:	d301      	bcc.n	8001744 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e009      	b.n	8001758 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	691b      	ldr	r3, [r3, #16]
 800174a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1ec      	bne.n	8001730 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001756:	2300      	movs	r3, #0
}
 8001758:	4618      	mov	r0, r3
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d101      	bne.n	8001774 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e0d9      	b.n	8001928 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0310 	and.w	r3, r3, #16
 800177e:	2b00      	cmp	r3, #0
 8001780:	bf14      	ite	ne
 8001782:	2301      	movne	r3, #1
 8001784:	2300      	moveq	r3, #0
 8001786:	b2db      	uxtb	r3, r3
 8001788:	461a      	mov	r2, r3
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	bf0c      	ite	eq
 80017ac:	2301      	moveq	r3, #1
 80017ae:	2300      	movne	r3, #0
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	461a      	mov	r2, r3
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	bf14      	ite	ne
 80017c8:	2301      	movne	r3, #1
 80017ca:	2300      	moveq	r3, #0
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	bf0c      	ite	eq
 80017e2:	2301      	moveq	r3, #1
 80017e4:	2300      	movne	r3, #0
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	461a      	mov	r2, r3
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	bf14      	ite	ne
 80017fc:	2301      	movne	r3, #1
 80017fe:	2300      	moveq	r3, #0
 8001800:	b2db      	uxtb	r3, r3
 8001802:	461a      	mov	r2, r3
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800182e:	2b00      	cmp	r3, #0
 8001830:	bf0c      	ite	eq
 8001832:	2301      	moveq	r3, #1
 8001834:	2300      	movne	r3, #0
 8001836:	b2db      	uxtb	r3, r3
 8001838:	461a      	mov	r2, r3
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001848:	2b00      	cmp	r3, #0
 800184a:	bf0c      	ite	eq
 800184c:	2301      	moveq	r3, #1
 800184e:	2300      	movne	r3, #0
 8001850:	b2db      	uxtb	r3, r3
 8001852:	461a      	mov	r2, r3
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001862:	2b00      	cmp	r3, #0
 8001864:	bf14      	ite	ne
 8001866:	2301      	movne	r3, #1
 8001868:	2300      	moveq	r3, #0
 800186a:	b2db      	uxtb	r3, r3
 800186c:	461a      	mov	r2, r3
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800188a:	2b00      	cmp	r3, #0
 800188c:	bf14      	ite	ne
 800188e:	2301      	movne	r3, #1
 8001890:	2300      	moveq	r3, #0
 8001892:	b2db      	uxtb	r3, r3
 8001894:	461a      	mov	r2, r3
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	bf14      	ite	ne
 80018a8:	2301      	movne	r3, #1
 80018aa:	2300      	moveq	r3, #0
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	461a      	mov	r2, r3
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	bf0c      	ite	eq
 80018c4:	2301      	moveq	r3, #1
 80018c6:	2300      	movne	r3, #0
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	461a      	mov	r2, r3
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	0c1b      	lsrs	r3, r3, #16
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	bf14      	ite	ne
 80018fc:	2301      	movne	r3, #1
 80018fe:	2300      	moveq	r3, #0
 8001900:	b2db      	uxtb	r3, r3
 8001902:	461a      	mov	r2, r3
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001914:	2b00      	cmp	r3, #0
 8001916:	bf14      	ite	ne
 8001918:	2301      	movne	r3, #1
 800191a:	2300      	moveq	r3, #0
 800191c:	b2db      	uxtb	r3, r3
 800191e:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d101      	bne.n	8001948 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e00b      	b.n	8001960 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800194e:	2b10      	cmp	r3, #16
 8001950:	d105      	bne.n	800195e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001952:	6839      	ldr	r1, [r7, #0]
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f000 f883 	bl	8001a60 <ETH_SetMACConfig>

    return HAL_OK;
 800195a:	2300      	movs	r3, #0
 800195c:	e000      	b.n	8001960 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
  }
}
 8001960:	4618      	mov	r0, r3
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f023 031c 	bic.w	r3, r3, #28
 800197e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001980:	f001 fa4e 	bl	8002e20 <HAL_RCC_GetHCLKFreq>
 8001984:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	4a1d      	ldr	r2, [pc, #116]	; (8001a00 <HAL_ETH_SetMDIOClockRange+0x98>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d908      	bls.n	80019a0 <HAL_ETH_SetMDIOClockRange+0x38>
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	4a1c      	ldr	r2, [pc, #112]	; (8001a04 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d804      	bhi.n	80019a0 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f043 0308 	orr.w	r3, r3, #8
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	e027      	b.n	80019f0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	4a18      	ldr	r2, [pc, #96]	; (8001a04 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d908      	bls.n	80019ba <HAL_ETH_SetMDIOClockRange+0x52>
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	4a17      	ldr	r2, [pc, #92]	; (8001a08 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d204      	bcs.n	80019ba <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f043 030c 	orr.w	r3, r3, #12
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	e01a      	b.n	80019f0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	4a12      	ldr	r2, [pc, #72]	; (8001a08 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d303      	bcc.n	80019ca <HAL_ETH_SetMDIOClockRange+0x62>
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	4a11      	ldr	r2, [pc, #68]	; (8001a0c <HAL_ETH_SetMDIOClockRange+0xa4>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d911      	bls.n	80019ee <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	4a0f      	ldr	r2, [pc, #60]	; (8001a0c <HAL_ETH_SetMDIOClockRange+0xa4>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d908      	bls.n	80019e4 <HAL_ETH_SetMDIOClockRange+0x7c>
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	4a0e      	ldr	r2, [pc, #56]	; (8001a10 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d804      	bhi.n	80019e4 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f043 0304 	orr.w	r3, r3, #4
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	e005      	b.n	80019f0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f043 0310 	orr.w	r3, r3, #16
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	e000      	b.n	80019f0 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80019ee:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	611a      	str	r2, [r3, #16]
}
 80019f8:	bf00      	nop
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	01312cff 	.word	0x01312cff
 8001a04:	02160ebf 	.word	0x02160ebf
 8001a08:	03938700 	.word	0x03938700
 8001a0c:	05f5e0ff 	.word	0x05f5e0ff
 8001a10:	08f0d17f 	.word	0x08f0d17f

08001a14 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	6812      	ldr	r2, [r2, #0]
 8001a2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a32:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a36:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a44:	2001      	movs	r0, #1
 8001a46:	f7ff f98f 	bl	8000d68 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a54:	6193      	str	r3, [r2, #24]
}
 8001a56:	bf00      	nop
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
	...

08001a60 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	4b51      	ldr	r3, [pc, #324]	; (8001bbc <ETH_SetMACConfig+0x15c>)
 8001a76:	4013      	ands	r3, r2
 8001a78:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	7c1b      	ldrb	r3, [r3, #16]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d102      	bne.n	8001a88 <ETH_SetMACConfig+0x28>
 8001a82:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001a86:	e000      	b.n	8001a8a <ETH_SetMACConfig+0x2a>
 8001a88:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	7c5b      	ldrb	r3, [r3, #17]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d102      	bne.n	8001a98 <ETH_SetMACConfig+0x38>
 8001a92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a96:	e000      	b.n	8001a9a <ETH_SetMACConfig+0x3a>
 8001a98:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001a9a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001aa0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	7fdb      	ldrb	r3, [r3, #31]
 8001aa6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001aa8:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001aae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	7f92      	ldrb	r2, [r2, #30]
 8001ab4:	2a00      	cmp	r2, #0
 8001ab6:	d102      	bne.n	8001abe <ETH_SetMACConfig+0x5e>
 8001ab8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001abc:	e000      	b.n	8001ac0 <ETH_SetMACConfig+0x60>
 8001abe:	2200      	movs	r2, #0
                        macconf->Speed |
 8001ac0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	7f1b      	ldrb	r3, [r3, #28]
 8001ac6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ac8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001ace:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	791b      	ldrb	r3, [r3, #4]
 8001ad4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001ad6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001ade:	2a00      	cmp	r2, #0
 8001ae0:	d102      	bne.n	8001ae8 <ETH_SetMACConfig+0x88>
 8001ae2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ae6:	e000      	b.n	8001aea <ETH_SetMACConfig+0x8a>
 8001ae8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001aea:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	7bdb      	ldrb	r3, [r3, #15]
 8001af0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001af2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001af8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b00:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001b02:	4313      	orrs	r3, r2
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b1a:	2001      	movs	r0, #1
 8001b1c:	f7ff f924 	bl	8000d68 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001b30:	68fa      	ldr	r2, [r7, #12]
 8001b32:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001b36:	4013      	ands	r3, r2
 8001b38:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b3e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001b46:	2a00      	cmp	r2, #0
 8001b48:	d101      	bne.n	8001b4e <ETH_SetMACConfig+0xee>
 8001b4a:	2280      	movs	r2, #128	; 0x80
 8001b4c:	e000      	b.n	8001b50 <ETH_SetMACConfig+0xf0>
 8001b4e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001b50:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001b56:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001b5e:	2a01      	cmp	r2, #1
 8001b60:	d101      	bne.n	8001b66 <ETH_SetMACConfig+0x106>
 8001b62:	2208      	movs	r2, #8
 8001b64:	e000      	b.n	8001b68 <ETH_SetMACConfig+0x108>
 8001b66:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001b68:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001b70:	2a01      	cmp	r2, #1
 8001b72:	d101      	bne.n	8001b78 <ETH_SetMACConfig+0x118>
 8001b74:	2204      	movs	r2, #4
 8001b76:	e000      	b.n	8001b7a <ETH_SetMACConfig+0x11a>
 8001b78:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001b7a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001b82:	2a01      	cmp	r2, #1
 8001b84:	d101      	bne.n	8001b8a <ETH_SetMACConfig+0x12a>
 8001b86:	2202      	movs	r2, #2
 8001b88:	e000      	b.n	8001b8c <ETH_SetMACConfig+0x12c>
 8001b8a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	68fa      	ldr	r2, [r7, #12]
 8001b9a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ba4:	2001      	movs	r0, #1
 8001ba6:	f7ff f8df 	bl	8000d68 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	619a      	str	r2, [r3, #24]
}
 8001bb2:	bf00      	nop
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	ff20810f 	.word	0xff20810f

08001bc0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	4b3d      	ldr	r3, [pc, #244]	; (8001cd0 <ETH_SetDMAConfig+0x110>)
 8001bda:	4013      	ands	r3, r2
 8001bdc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	7b1b      	ldrb	r3, [r3, #12]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d102      	bne.n	8001bec <ETH_SetDMAConfig+0x2c>
 8001be6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001bea:	e000      	b.n	8001bee <ETH_SetDMAConfig+0x2e>
 8001bec:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	7b5b      	ldrb	r3, [r3, #13]
 8001bf2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001bf4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001bf6:	683a      	ldr	r2, [r7, #0]
 8001bf8:	7f52      	ldrb	r2, [r2, #29]
 8001bfa:	2a00      	cmp	r2, #0
 8001bfc:	d102      	bne.n	8001c04 <ETH_SetDMAConfig+0x44>
 8001bfe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c02:	e000      	b.n	8001c06 <ETH_SetDMAConfig+0x46>
 8001c04:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001c06:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	7b9b      	ldrb	r3, [r3, #14]
 8001c0c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001c0e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001c14:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	7f1b      	ldrb	r3, [r3, #28]
 8001c1a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001c1c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	7f9b      	ldrb	r3, [r3, #30]
 8001c22:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001c24:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001c2a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c32:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001c34:	4313      	orrs	r3, r2
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c44:	461a      	mov	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c56:	2001      	movs	r0, #1
 8001c58:	f7ff f886 	bl	8000d68 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c64:	461a      	mov	r2, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	791b      	ldrb	r3, [r3, #4]
 8001c6e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001c74:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001c7a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001c80:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c88:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001c8a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c90:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001c92:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001c98:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	6812      	ldr	r2, [r2, #0]
 8001c9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ca2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ca6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cb4:	2001      	movs	r0, #1
 8001cb6:	f7ff f857 	bl	8000d68 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6013      	str	r3, [r2, #0]
}
 8001cc8:	bf00      	nop
 8001cca:	3710      	adds	r7, #16
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	f8de3f23 	.word	0xf8de3f23

08001cd4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b0a6      	sub	sp, #152	; 0x98
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001cec:	2300      	movs	r3, #0
 8001cee:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001d04:	2300      	movs	r3, #0
 8001d06:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001d10:	2300      	movs	r3, #0
 8001d12:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001d14:	2300      	movs	r3, #0
 8001d16:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001d24:	2300      	movs	r3, #0
 8001d26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001d30:	2300      	movs	r3, #0
 8001d32:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001d36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d3a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001d3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d40:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001d42:	2300      	movs	r3, #0
 8001d44:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001d48:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7ff fe86 	bl	8001a60 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001d54:	2301      	movs	r3, #1
 8001d56:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001d62:	2301      	movs	r3, #1
 8001d64:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001d66:	2300      	movs	r3, #0
 8001d68:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001d70:	2300      	movs	r3, #0
 8001d72:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001d76:	2300      	movs	r3, #0
 8001d78:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001d80:	2301      	movs	r3, #1
 8001d82:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001d84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d88:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001d8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d8e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001d90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d94:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001d96:	2301      	movs	r3, #1
 8001d98:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001da0:	2300      	movs	r3, #0
 8001da2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001da4:	f107 0308 	add.w	r3, r7, #8
 8001da8:	4619      	mov	r1, r3
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff ff08 	bl	8001bc0 <ETH_SetDMAConfig>
}
 8001db0:	bf00      	nop
 8001db2:	3798      	adds	r7, #152	; 0x98
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b087      	sub	sp, #28
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3305      	adds	r3, #5
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	021b      	lsls	r3, r3, #8
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	3204      	adds	r2, #4
 8001dd0:	7812      	ldrb	r2, [r2, #0]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001dd6:	68ba      	ldr	r2, [r7, #8]
 8001dd8:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <ETH_MACAddressConfig+0x68>)
 8001dda:	4413      	add	r3, r2
 8001ddc:	461a      	mov	r2, r3
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	3303      	adds	r3, #3
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	061a      	lsls	r2, r3, #24
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	3302      	adds	r3, #2
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	041b      	lsls	r3, r3, #16
 8001df2:	431a      	orrs	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3301      	adds	r3, #1
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	021b      	lsls	r3, r3, #8
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	7812      	ldrb	r2, [r2, #0]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001e06:	68ba      	ldr	r2, [r7, #8]
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <ETH_MACAddressConfig+0x6c>)
 8001e0a:	4413      	add	r3, r2
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	6013      	str	r3, [r2, #0]
}
 8001e12:	bf00      	nop
 8001e14:	371c      	adds	r7, #28
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	40028040 	.word	0x40028040
 8001e24:	40028044 	.word	0x40028044

08001e28 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e30:	2300      	movs	r3, #0
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	e03e      	b.n	8001eb4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68d9      	ldr	r1, [r3, #12]
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	440b      	add	r3, r1
 8001e46:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	2200      	movs	r2, #0
 8001e52:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001e60:	68b9      	ldr	r1, [r7, #8]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	3206      	adds	r2, #6
 8001e68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d80c      	bhi.n	8001e98 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68d9      	ldr	r1, [r3, #12]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	1c5a      	adds	r2, r3, #1
 8001e86:	4613      	mov	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4413      	add	r3, r2
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	440b      	add	r3, r1
 8001e90:	461a      	mov	r2, r3
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	60da      	str	r2, [r3, #12]
 8001e96:	e004      	b.n	8001ea2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2b03      	cmp	r3, #3
 8001eb8:	d9bd      	bls.n	8001e36 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68da      	ldr	r2, [r3, #12]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ecc:	611a      	str	r2, [r3, #16]
}
 8001ece:	bf00      	nop
 8001ed0:	3714      	adds	r7, #20
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b085      	sub	sp, #20
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	e046      	b.n	8001f76 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6919      	ldr	r1, [r3, #16]
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	440b      	add	r3, r1
 8001ef8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	2200      	movs	r2, #0
 8001f04:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	2200      	movs	r2, #0
 8001f16:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001f24:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001f2c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001f3a:	68b9      	ldr	r1, [r7, #8]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	3212      	adds	r2, #18
 8001f42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d80c      	bhi.n	8001f66 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6919      	ldr	r1, [r3, #16]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	1c5a      	adds	r2, r3, #1
 8001f54:	4613      	mov	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	440b      	add	r3, r1
 8001f5e:	461a      	mov	r2, r3
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	60da      	str	r2, [r3, #12]
 8001f64:	e004      	b.n	8001f70 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	3301      	adds	r3, #1
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2b03      	cmp	r3, #3
 8001f7a:	d9b5      	bls.n	8001ee8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	691a      	ldr	r2, [r3, #16]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fa6:	60da      	str	r2, [r3, #12]
}
 8001fa8:	bf00      	nop
 8001faa:	3714      	adds	r7, #20
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b08d      	sub	sp, #52	; 0x34
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	3318      	adds	r3, #24
 8001fc4:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fde:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8001fea:	6a3b      	ldr	r3, [r7, #32]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001ff2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ff6:	d007      	beq.n	8002008 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002008:	2302      	movs	r3, #2
 800200a:	e103      	b.n	8002214 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 800200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200e:	3301      	adds	r3, #1
 8002010:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	461a      	mov	r2, r3
 8002018:	6a3b      	ldr	r3, [r7, #32]
 800201a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800201c:	6a3b      	ldr	r3, [r7, #32]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002024:	f023 031f 	bic.w	r3, r3, #31
 8002028:	69fa      	ldr	r2, [r7, #28]
 800202a:	6852      	ldr	r2, [r2, #4]
 800202c:	431a      	orrs	r2, r3
 800202e:	6a3b      	ldr	r3, [r7, #32]
 8002030:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	d008      	beq.n	8002050 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800203e:	6a3b      	ldr	r3, [r7, #32]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	431a      	orrs	r2, r3
 800204c:	6a3b      	ldr	r3, [r7, #32]
 800204e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0320 	and.w	r3, r3, #32
 8002058:	2b00      	cmp	r3, #0
 800205a:	d008      	beq.n	800206e <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 800205c:	6a3b      	ldr	r3, [r7, #32]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	431a      	orrs	r2, r3
 800206a:	6a3b      	ldr	r3, [r7, #32]
 800206c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0304 	and.w	r3, r3, #4
 8002076:	2b00      	cmp	r3, #0
 8002078:	d005      	beq.n	8002086 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800207a:	6a3b      	ldr	r3, [r7, #32]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002082:	6a3b      	ldr	r3, [r7, #32]
 8002084:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002086:	6a3b      	ldr	r3, [r7, #32]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800208e:	6a3b      	ldr	r3, [r7, #32]
 8002090:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002092:	f3bf 8f5f 	dmb	sy
}
 8002096:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002098:	6a3b      	ldr	r3, [r7, #32]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80020a0:	6a3b      	ldr	r3, [r7, #32]
 80020a2:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80020a4:	e084      	b.n	80021b0 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80020a6:	6a3b      	ldr	r3, [r7, #32]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80020ae:	6a3b      	ldr	r3, [r7, #32]
 80020b0:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d006      	beq.n	80020c6 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80020b8:	6a3b      	ldr	r3, [r7, #32]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80020c0:	6a3b      	ldr	r3, [r7, #32]
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	e005      	b.n	80020d2 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80020c6:	6a3b      	ldr	r3, [r7, #32]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80020ce:	6a3b      	ldr	r3, [r7, #32]
 80020d0:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80020d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d4:	3301      	adds	r3, #1
 80020d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020da:	2b03      	cmp	r3, #3
 80020dc:	d902      	bls.n	80020e4 <ETH_Prepare_Tx_Descriptors+0x130>
 80020de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e0:	3b04      	subs	r3, #4
 80020e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ec:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80020ee:	6a3b      	ldr	r3, [r7, #32]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80020f6:	6a3b      	ldr	r3, [r7, #32]
 80020f8:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80020fa:	6a3b      	ldr	r3, [r7, #32]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002102:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002106:	d007      	beq.n	8002118 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800210c:	3304      	adds	r3, #4
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d029      	beq.n	800216c <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002124:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002126:	2300      	movs	r3, #0
 8002128:	62bb      	str	r3, [r7, #40]	; 0x28
 800212a:	e019      	b.n	8002160 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 800212c:	f3bf 8f5f 	dmb	sy
}
 8002130:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002132:	6a3b      	ldr	r3, [r7, #32]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800213a:	6a3b      	ldr	r3, [r7, #32]
 800213c:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800213e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002140:	3301      	adds	r3, #1
 8002142:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002146:	2b03      	cmp	r3, #3
 8002148:	d902      	bls.n	8002150 <ETH_Prepare_Tx_Descriptors+0x19c>
 800214a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800214c:	3b04      	subs	r3, #4
 800214e:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002158:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800215a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800215c:	3301      	adds	r3, #1
 800215e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002160:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	429a      	cmp	r2, r3
 8002166:	d3e1      	bcc.n	800212c <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8002168:	2302      	movs	r3, #2
 800216a:	e053      	b.n	8002214 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	3301      	adds	r3, #1
 8002170:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	461a      	mov	r2, r3
 800217e:	6a3b      	ldr	r3, [r7, #32]
 8002180:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002182:	6a3b      	ldr	r3, [r7, #32]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800218a:	f023 031f 	bic.w	r3, r3, #31
 800218e:	69fa      	ldr	r2, [r7, #28]
 8002190:	6852      	ldr	r2, [r2, #4]
 8002192:	431a      	orrs	r2, r3
 8002194:	6a3b      	ldr	r3, [r7, #32]
 8002196:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	3301      	adds	r3, #1
 800219c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800219e:	f3bf 8f5f 	dmb	sy
}
 80021a2:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80021a4:	6a3b      	ldr	r3, [r7, #32]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80021ac:	6a3b      	ldr	r3, [r7, #32]
 80021ae:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f47f af76 	bne.w	80020a6 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d006      	beq.n	80021ce <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80021c0:	6a3b      	ldr	r3, [r7, #32]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80021c8:	6a3b      	ldr	r3, [r7, #32]
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	e005      	b.n	80021da <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80021ce:	6a3b      	ldr	r3, [r7, #32]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80021d6:	6a3b      	ldr	r3, [r7, #32]
 80021d8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80021da:	6a3b      	ldr	r3, [r7, #32]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80021e2:	6a3b      	ldr	r3, [r7, #32]
 80021e4:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021ea:	6979      	ldr	r1, [r7, #20]
 80021ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ee:	3304      	adds	r3, #4
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	440b      	add	r3, r1
 80021f4:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021fa:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80021fc:	b672      	cpsid	i
}
 80021fe:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	4413      	add	r3, r2
 8002208:	1c5a      	adds	r2, r3, #1
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800220e:	b662      	cpsie	i
}
 8002210:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3734      	adds	r7, #52	; 0x34
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002220:	b480      	push	{r7}
 8002222:	b089      	sub	sp, #36	; 0x24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800222e:	2300      	movs	r3, #0
 8002230:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002232:	2300      	movs	r3, #0
 8002234:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
 800223a:	e16b      	b.n	8002514 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800223c:	2201      	movs	r2, #1
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	4013      	ands	r3, r2
 800224e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	429a      	cmp	r2, r3
 8002256:	f040 815a 	bne.w	800250e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	2b01      	cmp	r3, #1
 8002264:	d005      	beq.n	8002272 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800226e:	2b02      	cmp	r3, #2
 8002270:	d130      	bne.n	80022d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	2203      	movs	r2, #3
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43db      	mvns	r3, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4013      	ands	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	68da      	ldr	r2, [r3, #12]
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4313      	orrs	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022a8:	2201      	movs	r2, #1
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	091b      	lsrs	r3, r3, #4
 80022be:	f003 0201 	and.w	r2, r3, #1
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f003 0303 	and.w	r3, r3, #3
 80022dc:	2b03      	cmp	r3, #3
 80022de:	d017      	beq.n	8002310 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	2203      	movs	r2, #3
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4013      	ands	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 0303 	and.w	r3, r3, #3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d123      	bne.n	8002364 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	08da      	lsrs	r2, r3, #3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3208      	adds	r2, #8
 8002324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002328:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	220f      	movs	r2, #15
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4013      	ands	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	691a      	ldr	r2, [r3, #16]
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4313      	orrs	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	08da      	lsrs	r2, r3, #3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	3208      	adds	r2, #8
 800235e:	69b9      	ldr	r1, [r7, #24]
 8002360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	2203      	movs	r2, #3
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f003 0203 	and.w	r2, r3, #3
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f000 80b4 	beq.w	800250e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	4b60      	ldr	r3, [pc, #384]	; (800252c <HAL_GPIO_Init+0x30c>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	4a5f      	ldr	r2, [pc, #380]	; (800252c <HAL_GPIO_Init+0x30c>)
 80023b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023b4:	6453      	str	r3, [r2, #68]	; 0x44
 80023b6:	4b5d      	ldr	r3, [pc, #372]	; (800252c <HAL_GPIO_Init+0x30c>)
 80023b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023c2:	4a5b      	ldr	r2, [pc, #364]	; (8002530 <HAL_GPIO_Init+0x310>)
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	089b      	lsrs	r3, r3, #2
 80023c8:	3302      	adds	r3, #2
 80023ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	220f      	movs	r2, #15
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43db      	mvns	r3, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4013      	ands	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a52      	ldr	r2, [pc, #328]	; (8002534 <HAL_GPIO_Init+0x314>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d02b      	beq.n	8002446 <HAL_GPIO_Init+0x226>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a51      	ldr	r2, [pc, #324]	; (8002538 <HAL_GPIO_Init+0x318>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d025      	beq.n	8002442 <HAL_GPIO_Init+0x222>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a50      	ldr	r2, [pc, #320]	; (800253c <HAL_GPIO_Init+0x31c>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d01f      	beq.n	800243e <HAL_GPIO_Init+0x21e>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a4f      	ldr	r2, [pc, #316]	; (8002540 <HAL_GPIO_Init+0x320>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d019      	beq.n	800243a <HAL_GPIO_Init+0x21a>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a4e      	ldr	r2, [pc, #312]	; (8002544 <HAL_GPIO_Init+0x324>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d013      	beq.n	8002436 <HAL_GPIO_Init+0x216>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a4d      	ldr	r2, [pc, #308]	; (8002548 <HAL_GPIO_Init+0x328>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d00d      	beq.n	8002432 <HAL_GPIO_Init+0x212>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a4c      	ldr	r2, [pc, #304]	; (800254c <HAL_GPIO_Init+0x32c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d007      	beq.n	800242e <HAL_GPIO_Init+0x20e>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a4b      	ldr	r2, [pc, #300]	; (8002550 <HAL_GPIO_Init+0x330>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d101      	bne.n	800242a <HAL_GPIO_Init+0x20a>
 8002426:	2307      	movs	r3, #7
 8002428:	e00e      	b.n	8002448 <HAL_GPIO_Init+0x228>
 800242a:	2308      	movs	r3, #8
 800242c:	e00c      	b.n	8002448 <HAL_GPIO_Init+0x228>
 800242e:	2306      	movs	r3, #6
 8002430:	e00a      	b.n	8002448 <HAL_GPIO_Init+0x228>
 8002432:	2305      	movs	r3, #5
 8002434:	e008      	b.n	8002448 <HAL_GPIO_Init+0x228>
 8002436:	2304      	movs	r3, #4
 8002438:	e006      	b.n	8002448 <HAL_GPIO_Init+0x228>
 800243a:	2303      	movs	r3, #3
 800243c:	e004      	b.n	8002448 <HAL_GPIO_Init+0x228>
 800243e:	2302      	movs	r3, #2
 8002440:	e002      	b.n	8002448 <HAL_GPIO_Init+0x228>
 8002442:	2301      	movs	r3, #1
 8002444:	e000      	b.n	8002448 <HAL_GPIO_Init+0x228>
 8002446:	2300      	movs	r3, #0
 8002448:	69fa      	ldr	r2, [r7, #28]
 800244a:	f002 0203 	and.w	r2, r2, #3
 800244e:	0092      	lsls	r2, r2, #2
 8002450:	4093      	lsls	r3, r2
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4313      	orrs	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002458:	4935      	ldr	r1, [pc, #212]	; (8002530 <HAL_GPIO_Init+0x310>)
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	089b      	lsrs	r3, r3, #2
 800245e:	3302      	adds	r3, #2
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002466:	4b3b      	ldr	r3, [pc, #236]	; (8002554 <HAL_GPIO_Init+0x334>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	43db      	mvns	r3, r3
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	4013      	ands	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	4313      	orrs	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800248a:	4a32      	ldr	r2, [pc, #200]	; (8002554 <HAL_GPIO_Init+0x334>)
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002490:	4b30      	ldr	r3, [pc, #192]	; (8002554 <HAL_GPIO_Init+0x334>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	43db      	mvns	r3, r3
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4013      	ands	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d003      	beq.n	80024b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024b4:	4a27      	ldr	r2, [pc, #156]	; (8002554 <HAL_GPIO_Init+0x334>)
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024ba:	4b26      	ldr	r3, [pc, #152]	; (8002554 <HAL_GPIO_Init+0x334>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	43db      	mvns	r3, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4013      	ands	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	4313      	orrs	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024de:	4a1d      	ldr	r2, [pc, #116]	; (8002554 <HAL_GPIO_Init+0x334>)
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024e4:	4b1b      	ldr	r3, [pc, #108]	; (8002554 <HAL_GPIO_Init+0x334>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	43db      	mvns	r3, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	4313      	orrs	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002508:	4a12      	ldr	r2, [pc, #72]	; (8002554 <HAL_GPIO_Init+0x334>)
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	3301      	adds	r3, #1
 8002512:	61fb      	str	r3, [r7, #28]
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	2b0f      	cmp	r3, #15
 8002518:	f67f ae90 	bls.w	800223c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800251c:	bf00      	nop
 800251e:	bf00      	nop
 8002520:	3724      	adds	r7, #36	; 0x24
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	40023800 	.word	0x40023800
 8002530:	40013800 	.word	0x40013800
 8002534:	40020000 	.word	0x40020000
 8002538:	40020400 	.word	0x40020400
 800253c:	40020800 	.word	0x40020800
 8002540:	40020c00 	.word	0x40020c00
 8002544:	40021000 	.word	0x40021000
 8002548:	40021400 	.word	0x40021400
 800254c:	40021800 	.word	0x40021800
 8002550:	40021c00 	.word	0x40021c00
 8002554:	40013c00 	.word	0x40013c00

08002558 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e267      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	d075      	beq.n	8002662 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002576:	4b88      	ldr	r3, [pc, #544]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 030c 	and.w	r3, r3, #12
 800257e:	2b04      	cmp	r3, #4
 8002580:	d00c      	beq.n	800259c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002582:	4b85      	ldr	r3, [pc, #532]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800258a:	2b08      	cmp	r3, #8
 800258c:	d112      	bne.n	80025b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800258e:	4b82      	ldr	r3, [pc, #520]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002596:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800259a:	d10b      	bne.n	80025b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800259c:	4b7e      	ldr	r3, [pc, #504]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d05b      	beq.n	8002660 <HAL_RCC_OscConfig+0x108>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d157      	bne.n	8002660 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e242      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025bc:	d106      	bne.n	80025cc <HAL_RCC_OscConfig+0x74>
 80025be:	4b76      	ldr	r3, [pc, #472]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a75      	ldr	r2, [pc, #468]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 80025c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c8:	6013      	str	r3, [r2, #0]
 80025ca:	e01d      	b.n	8002608 <HAL_RCC_OscConfig+0xb0>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025d4:	d10c      	bne.n	80025f0 <HAL_RCC_OscConfig+0x98>
 80025d6:	4b70      	ldr	r3, [pc, #448]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a6f      	ldr	r2, [pc, #444]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 80025dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	4b6d      	ldr	r3, [pc, #436]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a6c      	ldr	r2, [pc, #432]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 80025e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ec:	6013      	str	r3, [r2, #0]
 80025ee:	e00b      	b.n	8002608 <HAL_RCC_OscConfig+0xb0>
 80025f0:	4b69      	ldr	r3, [pc, #420]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a68      	ldr	r2, [pc, #416]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 80025f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025fa:	6013      	str	r3, [r2, #0]
 80025fc:	4b66      	ldr	r3, [pc, #408]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a65      	ldr	r2, [pc, #404]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 8002602:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002606:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d013      	beq.n	8002638 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002610:	f7fe fb9e 	bl	8000d50 <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002618:	f7fe fb9a 	bl	8000d50 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b64      	cmp	r3, #100	; 0x64
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e207      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800262a:	4b5b      	ldr	r3, [pc, #364]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d0f0      	beq.n	8002618 <HAL_RCC_OscConfig+0xc0>
 8002636:	e014      	b.n	8002662 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002638:	f7fe fb8a 	bl	8000d50 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002640:	f7fe fb86 	bl	8000d50 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b64      	cmp	r3, #100	; 0x64
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e1f3      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002652:	4b51      	ldr	r3, [pc, #324]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1f0      	bne.n	8002640 <HAL_RCC_OscConfig+0xe8>
 800265e:	e000      	b.n	8002662 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002660:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d063      	beq.n	8002736 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800266e:	4b4a      	ldr	r3, [pc, #296]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 030c 	and.w	r3, r3, #12
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00b      	beq.n	8002692 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800267a:	4b47      	ldr	r3, [pc, #284]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002682:	2b08      	cmp	r3, #8
 8002684:	d11c      	bne.n	80026c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002686:	4b44      	ldr	r3, [pc, #272]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d116      	bne.n	80026c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002692:	4b41      	ldr	r3, [pc, #260]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d005      	beq.n	80026aa <HAL_RCC_OscConfig+0x152>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d001      	beq.n	80026aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e1c7      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026aa:	4b3b      	ldr	r3, [pc, #236]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	4937      	ldr	r1, [pc, #220]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026be:	e03a      	b.n	8002736 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d020      	beq.n	800270a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026c8:	4b34      	ldr	r3, [pc, #208]	; (800279c <HAL_RCC_OscConfig+0x244>)
 80026ca:	2201      	movs	r2, #1
 80026cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ce:	f7fe fb3f 	bl	8000d50 <HAL_GetTick>
 80026d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026d6:	f7fe fb3b 	bl	8000d50 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e1a8      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e8:	4b2b      	ldr	r3, [pc, #172]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0f0      	beq.n	80026d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f4:	4b28      	ldr	r3, [pc, #160]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	4925      	ldr	r1, [pc, #148]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 8002704:	4313      	orrs	r3, r2
 8002706:	600b      	str	r3, [r1, #0]
 8002708:	e015      	b.n	8002736 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800270a:	4b24      	ldr	r3, [pc, #144]	; (800279c <HAL_RCC_OscConfig+0x244>)
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002710:	f7fe fb1e 	bl	8000d50 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002718:	f7fe fb1a 	bl	8000d50 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e187      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800272a:	4b1b      	ldr	r3, [pc, #108]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1f0      	bne.n	8002718 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0308 	and.w	r3, r3, #8
 800273e:	2b00      	cmp	r3, #0
 8002740:	d036      	beq.n	80027b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d016      	beq.n	8002778 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800274a:	4b15      	ldr	r3, [pc, #84]	; (80027a0 <HAL_RCC_OscConfig+0x248>)
 800274c:	2201      	movs	r2, #1
 800274e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002750:	f7fe fafe 	bl	8000d50 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002758:	f7fe fafa 	bl	8000d50 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e167      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800276a:	4b0b      	ldr	r3, [pc, #44]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 800276c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d0f0      	beq.n	8002758 <HAL_RCC_OscConfig+0x200>
 8002776:	e01b      	b.n	80027b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002778:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <HAL_RCC_OscConfig+0x248>)
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800277e:	f7fe fae7 	bl	8000d50 <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002784:	e00e      	b.n	80027a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002786:	f7fe fae3 	bl	8000d50 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d907      	bls.n	80027a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e150      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
 8002798:	40023800 	.word	0x40023800
 800279c:	42470000 	.word	0x42470000
 80027a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027a4:	4b88      	ldr	r3, [pc, #544]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 80027a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1ea      	bne.n	8002786 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 8097 	beq.w	80028ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027be:	2300      	movs	r3, #0
 80027c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027c2:	4b81      	ldr	r3, [pc, #516]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10f      	bne.n	80027ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	60bb      	str	r3, [r7, #8]
 80027d2:	4b7d      	ldr	r3, [pc, #500]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	4a7c      	ldr	r2, [pc, #496]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 80027d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027dc:	6413      	str	r3, [r2, #64]	; 0x40
 80027de:	4b7a      	ldr	r3, [pc, #488]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e6:	60bb      	str	r3, [r7, #8]
 80027e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ea:	2301      	movs	r3, #1
 80027ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ee:	4b77      	ldr	r3, [pc, #476]	; (80029cc <HAL_RCC_OscConfig+0x474>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d118      	bne.n	800282c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027fa:	4b74      	ldr	r3, [pc, #464]	; (80029cc <HAL_RCC_OscConfig+0x474>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a73      	ldr	r2, [pc, #460]	; (80029cc <HAL_RCC_OscConfig+0x474>)
 8002800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002804:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002806:	f7fe faa3 	bl	8000d50 <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800280c:	e008      	b.n	8002820 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800280e:	f7fe fa9f 	bl	8000d50 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e10c      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002820:	4b6a      	ldr	r3, [pc, #424]	; (80029cc <HAL_RCC_OscConfig+0x474>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0f0      	beq.n	800280e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d106      	bne.n	8002842 <HAL_RCC_OscConfig+0x2ea>
 8002834:	4b64      	ldr	r3, [pc, #400]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 8002836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002838:	4a63      	ldr	r2, [pc, #396]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 800283a:	f043 0301 	orr.w	r3, r3, #1
 800283e:	6713      	str	r3, [r2, #112]	; 0x70
 8002840:	e01c      	b.n	800287c <HAL_RCC_OscConfig+0x324>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	2b05      	cmp	r3, #5
 8002848:	d10c      	bne.n	8002864 <HAL_RCC_OscConfig+0x30c>
 800284a:	4b5f      	ldr	r3, [pc, #380]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 800284c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284e:	4a5e      	ldr	r2, [pc, #376]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 8002850:	f043 0304 	orr.w	r3, r3, #4
 8002854:	6713      	str	r3, [r2, #112]	; 0x70
 8002856:	4b5c      	ldr	r3, [pc, #368]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 8002858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285a:	4a5b      	ldr	r2, [pc, #364]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 800285c:	f043 0301 	orr.w	r3, r3, #1
 8002860:	6713      	str	r3, [r2, #112]	; 0x70
 8002862:	e00b      	b.n	800287c <HAL_RCC_OscConfig+0x324>
 8002864:	4b58      	ldr	r3, [pc, #352]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 8002866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002868:	4a57      	ldr	r2, [pc, #348]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 800286a:	f023 0301 	bic.w	r3, r3, #1
 800286e:	6713      	str	r3, [r2, #112]	; 0x70
 8002870:	4b55      	ldr	r3, [pc, #340]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 8002872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002874:	4a54      	ldr	r2, [pc, #336]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 8002876:	f023 0304 	bic.w	r3, r3, #4
 800287a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d015      	beq.n	80028b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002884:	f7fe fa64 	bl	8000d50 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800288a:	e00a      	b.n	80028a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800288c:	f7fe fa60 	bl	8000d50 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	f241 3288 	movw	r2, #5000	; 0x1388
 800289a:	4293      	cmp	r3, r2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e0cb      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028a2:	4b49      	ldr	r3, [pc, #292]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 80028a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d0ee      	beq.n	800288c <HAL_RCC_OscConfig+0x334>
 80028ae:	e014      	b.n	80028da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b0:	f7fe fa4e 	bl	8000d50 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028b6:	e00a      	b.n	80028ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028b8:	f7fe fa4a 	bl	8000d50 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e0b5      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ce:	4b3e      	ldr	r3, [pc, #248]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 80028d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1ee      	bne.n	80028b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028da:	7dfb      	ldrb	r3, [r7, #23]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d105      	bne.n	80028ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e0:	4b39      	ldr	r3, [pc, #228]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 80028e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e4:	4a38      	ldr	r2, [pc, #224]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 80028e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 80a1 	beq.w	8002a38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028f6:	4b34      	ldr	r3, [pc, #208]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 030c 	and.w	r3, r3, #12
 80028fe:	2b08      	cmp	r3, #8
 8002900:	d05c      	beq.n	80029bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	2b02      	cmp	r3, #2
 8002908:	d141      	bne.n	800298e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800290a:	4b31      	ldr	r3, [pc, #196]	; (80029d0 <HAL_RCC_OscConfig+0x478>)
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002910:	f7fe fa1e 	bl	8000d50 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002918:	f7fe fa1a 	bl	8000d50 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e087      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800292a:	4b27      	ldr	r3, [pc, #156]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1f0      	bne.n	8002918 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69da      	ldr	r2, [r3, #28]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002944:	019b      	lsls	r3, r3, #6
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294c:	085b      	lsrs	r3, r3, #1
 800294e:	3b01      	subs	r3, #1
 8002950:	041b      	lsls	r3, r3, #16
 8002952:	431a      	orrs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002958:	061b      	lsls	r3, r3, #24
 800295a:	491b      	ldr	r1, [pc, #108]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 800295c:	4313      	orrs	r3, r2
 800295e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002960:	4b1b      	ldr	r3, [pc, #108]	; (80029d0 <HAL_RCC_OscConfig+0x478>)
 8002962:	2201      	movs	r2, #1
 8002964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002966:	f7fe f9f3 	bl	8000d50 <HAL_GetTick>
 800296a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800296c:	e008      	b.n	8002980 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800296e:	f7fe f9ef 	bl	8000d50 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e05c      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002980:	4b11      	ldr	r3, [pc, #68]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0f0      	beq.n	800296e <HAL_RCC_OscConfig+0x416>
 800298c:	e054      	b.n	8002a38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800298e:	4b10      	ldr	r3, [pc, #64]	; (80029d0 <HAL_RCC_OscConfig+0x478>)
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002994:	f7fe f9dc 	bl	8000d50 <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800299c:	f7fe f9d8 	bl	8000d50 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e045      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ae:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1f0      	bne.n	800299c <HAL_RCC_OscConfig+0x444>
 80029ba:	e03d      	b.n	8002a38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d107      	bne.n	80029d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e038      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
 80029c8:	40023800 	.word	0x40023800
 80029cc:	40007000 	.word	0x40007000
 80029d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029d4:	4b1b      	ldr	r3, [pc, #108]	; (8002a44 <HAL_RCC_OscConfig+0x4ec>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d028      	beq.n	8002a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d121      	bne.n	8002a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d11a      	bne.n	8002a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a04:	4013      	ands	r3, r2
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d111      	bne.n	8002a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1a:	085b      	lsrs	r3, r3, #1
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d107      	bne.n	8002a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d001      	beq.n	8002a38 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e000      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3718      	adds	r7, #24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	40023800 	.word	0x40023800

08002a48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e0cc      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a5c:	4b68      	ldr	r3, [pc, #416]	; (8002c00 <HAL_RCC_ClockConfig+0x1b8>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0307 	and.w	r3, r3, #7
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d90c      	bls.n	8002a84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6a:	4b65      	ldr	r3, [pc, #404]	; (8002c00 <HAL_RCC_ClockConfig+0x1b8>)
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a72:	4b63      	ldr	r3, [pc, #396]	; (8002c00 <HAL_RCC_ClockConfig+0x1b8>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0307 	and.w	r3, r3, #7
 8002a7a:	683a      	ldr	r2, [r7, #0]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d001      	beq.n	8002a84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e0b8      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d020      	beq.n	8002ad2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d005      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a9c:	4b59      	ldr	r3, [pc, #356]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	4a58      	ldr	r2, [pc, #352]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002aa6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0308 	and.w	r3, r3, #8
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d005      	beq.n	8002ac0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ab4:	4b53      	ldr	r3, [pc, #332]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	4a52      	ldr	r2, [pc, #328]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002aba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002abe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ac0:	4b50      	ldr	r3, [pc, #320]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	494d      	ldr	r1, [pc, #308]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d044      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d107      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae6:	4b47      	ldr	r3, [pc, #284]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d119      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e07f      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d003      	beq.n	8002b06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b02:	2b03      	cmp	r3, #3
 8002b04:	d107      	bne.n	8002b16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b06:	4b3f      	ldr	r3, [pc, #252]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d109      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e06f      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b16:	4b3b      	ldr	r3, [pc, #236]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e067      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b26:	4b37      	ldr	r3, [pc, #220]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f023 0203 	bic.w	r2, r3, #3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	4934      	ldr	r1, [pc, #208]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b38:	f7fe f90a 	bl	8000d50 <HAL_GetTick>
 8002b3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3e:	e00a      	b.n	8002b56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b40:	f7fe f906 	bl	8000d50 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e04f      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b56:	4b2b      	ldr	r3, [pc, #172]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 020c 	and.w	r2, r3, #12
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d1eb      	bne.n	8002b40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b68:	4b25      	ldr	r3, [pc, #148]	; (8002c00 <HAL_RCC_ClockConfig+0x1b8>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d20c      	bcs.n	8002b90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b76:	4b22      	ldr	r3, [pc, #136]	; (8002c00 <HAL_RCC_ClockConfig+0x1b8>)
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7e:	4b20      	ldr	r3, [pc, #128]	; (8002c00 <HAL_RCC_ClockConfig+0x1b8>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d001      	beq.n	8002b90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e032      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0304 	and.w	r3, r3, #4
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d008      	beq.n	8002bae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b9c:	4b19      	ldr	r3, [pc, #100]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	4916      	ldr	r1, [pc, #88]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0308 	and.w	r3, r3, #8
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d009      	beq.n	8002bce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bba:	4b12      	ldr	r3, [pc, #72]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	490e      	ldr	r1, [pc, #56]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bce:	f000 f821 	bl	8002c14 <HAL_RCC_GetSysClockFreq>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	091b      	lsrs	r3, r3, #4
 8002bda:	f003 030f 	and.w	r3, r3, #15
 8002bde:	490a      	ldr	r1, [pc, #40]	; (8002c08 <HAL_RCC_ClockConfig+0x1c0>)
 8002be0:	5ccb      	ldrb	r3, [r1, r3]
 8002be2:	fa22 f303 	lsr.w	r3, r2, r3
 8002be6:	4a09      	ldr	r2, [pc, #36]	; (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002be8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bea:	4b09      	ldr	r3, [pc, #36]	; (8002c10 <HAL_RCC_ClockConfig+0x1c8>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7fe f86a 	bl	8000cc8 <HAL_InitTick>

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40023c00 	.word	0x40023c00
 8002c04:	40023800 	.word	0x40023800
 8002c08:	08010e44 	.word	0x08010e44
 8002c0c:	20000000 	.word	0x20000000
 8002c10:	20000004 	.word	0x20000004

08002c14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c18:	b094      	sub	sp, #80	; 0x50
 8002c1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	647b      	str	r3, [r7, #68]	; 0x44
 8002c20:	2300      	movs	r3, #0
 8002c22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c24:	2300      	movs	r3, #0
 8002c26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c2c:	4b79      	ldr	r3, [pc, #484]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f003 030c 	and.w	r3, r3, #12
 8002c34:	2b08      	cmp	r3, #8
 8002c36:	d00d      	beq.n	8002c54 <HAL_RCC_GetSysClockFreq+0x40>
 8002c38:	2b08      	cmp	r3, #8
 8002c3a:	f200 80e1 	bhi.w	8002e00 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d002      	beq.n	8002c48 <HAL_RCC_GetSysClockFreq+0x34>
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	d003      	beq.n	8002c4e <HAL_RCC_GetSysClockFreq+0x3a>
 8002c46:	e0db      	b.n	8002e00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c48:	4b73      	ldr	r3, [pc, #460]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c4a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002c4c:	e0db      	b.n	8002e06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c4e:	4b73      	ldr	r3, [pc, #460]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x208>)
 8002c50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c52:	e0d8      	b.n	8002e06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c54:	4b6f      	ldr	r3, [pc, #444]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c5c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c5e:	4b6d      	ldr	r3, [pc, #436]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d063      	beq.n	8002d32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c6a:	4b6a      	ldr	r3, [pc, #424]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	099b      	lsrs	r3, r3, #6
 8002c70:	2200      	movs	r2, #0
 8002c72:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c74:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c7c:	633b      	str	r3, [r7, #48]	; 0x30
 8002c7e:	2300      	movs	r3, #0
 8002c80:	637b      	str	r3, [r7, #52]	; 0x34
 8002c82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c86:	4622      	mov	r2, r4
 8002c88:	462b      	mov	r3, r5
 8002c8a:	f04f 0000 	mov.w	r0, #0
 8002c8e:	f04f 0100 	mov.w	r1, #0
 8002c92:	0159      	lsls	r1, r3, #5
 8002c94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c98:	0150      	lsls	r0, r2, #5
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	4621      	mov	r1, r4
 8002ca0:	1a51      	subs	r1, r2, r1
 8002ca2:	6139      	str	r1, [r7, #16]
 8002ca4:	4629      	mov	r1, r5
 8002ca6:	eb63 0301 	sbc.w	r3, r3, r1
 8002caa:	617b      	str	r3, [r7, #20]
 8002cac:	f04f 0200 	mov.w	r2, #0
 8002cb0:	f04f 0300 	mov.w	r3, #0
 8002cb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cb8:	4659      	mov	r1, fp
 8002cba:	018b      	lsls	r3, r1, #6
 8002cbc:	4651      	mov	r1, sl
 8002cbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cc2:	4651      	mov	r1, sl
 8002cc4:	018a      	lsls	r2, r1, #6
 8002cc6:	4651      	mov	r1, sl
 8002cc8:	ebb2 0801 	subs.w	r8, r2, r1
 8002ccc:	4659      	mov	r1, fp
 8002cce:	eb63 0901 	sbc.w	r9, r3, r1
 8002cd2:	f04f 0200 	mov.w	r2, #0
 8002cd6:	f04f 0300 	mov.w	r3, #0
 8002cda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ce2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ce6:	4690      	mov	r8, r2
 8002ce8:	4699      	mov	r9, r3
 8002cea:	4623      	mov	r3, r4
 8002cec:	eb18 0303 	adds.w	r3, r8, r3
 8002cf0:	60bb      	str	r3, [r7, #8]
 8002cf2:	462b      	mov	r3, r5
 8002cf4:	eb49 0303 	adc.w	r3, r9, r3
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	f04f 0200 	mov.w	r2, #0
 8002cfe:	f04f 0300 	mov.w	r3, #0
 8002d02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d06:	4629      	mov	r1, r5
 8002d08:	024b      	lsls	r3, r1, #9
 8002d0a:	4621      	mov	r1, r4
 8002d0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d10:	4621      	mov	r1, r4
 8002d12:	024a      	lsls	r2, r1, #9
 8002d14:	4610      	mov	r0, r2
 8002d16:	4619      	mov	r1, r3
 8002d18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d24:	f7fd faa4 	bl	8000270 <__aeabi_uldivmod>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d30:	e058      	b.n	8002de4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d32:	4b38      	ldr	r3, [pc, #224]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	099b      	lsrs	r3, r3, #6
 8002d38:	2200      	movs	r2, #0
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	4611      	mov	r1, r2
 8002d3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d42:	623b      	str	r3, [r7, #32]
 8002d44:	2300      	movs	r3, #0
 8002d46:	627b      	str	r3, [r7, #36]	; 0x24
 8002d48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d4c:	4642      	mov	r2, r8
 8002d4e:	464b      	mov	r3, r9
 8002d50:	f04f 0000 	mov.w	r0, #0
 8002d54:	f04f 0100 	mov.w	r1, #0
 8002d58:	0159      	lsls	r1, r3, #5
 8002d5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d5e:	0150      	lsls	r0, r2, #5
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	4641      	mov	r1, r8
 8002d66:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d6a:	4649      	mov	r1, r9
 8002d6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d84:	ebb2 040a 	subs.w	r4, r2, sl
 8002d88:	eb63 050b 	sbc.w	r5, r3, fp
 8002d8c:	f04f 0200 	mov.w	r2, #0
 8002d90:	f04f 0300 	mov.w	r3, #0
 8002d94:	00eb      	lsls	r3, r5, #3
 8002d96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d9a:	00e2      	lsls	r2, r4, #3
 8002d9c:	4614      	mov	r4, r2
 8002d9e:	461d      	mov	r5, r3
 8002da0:	4643      	mov	r3, r8
 8002da2:	18e3      	adds	r3, r4, r3
 8002da4:	603b      	str	r3, [r7, #0]
 8002da6:	464b      	mov	r3, r9
 8002da8:	eb45 0303 	adc.w	r3, r5, r3
 8002dac:	607b      	str	r3, [r7, #4]
 8002dae:	f04f 0200 	mov.w	r2, #0
 8002db2:	f04f 0300 	mov.w	r3, #0
 8002db6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dba:	4629      	mov	r1, r5
 8002dbc:	028b      	lsls	r3, r1, #10
 8002dbe:	4621      	mov	r1, r4
 8002dc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dc4:	4621      	mov	r1, r4
 8002dc6:	028a      	lsls	r2, r1, #10
 8002dc8:	4610      	mov	r0, r2
 8002dca:	4619      	mov	r1, r3
 8002dcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dce:	2200      	movs	r2, #0
 8002dd0:	61bb      	str	r3, [r7, #24]
 8002dd2:	61fa      	str	r2, [r7, #28]
 8002dd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dd8:	f7fd fa4a 	bl	8000270 <__aeabi_uldivmod>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	460b      	mov	r3, r1
 8002de0:	4613      	mov	r3, r2
 8002de2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002de4:	4b0b      	ldr	r3, [pc, #44]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	0c1b      	lsrs	r3, r3, #16
 8002dea:	f003 0303 	and.w	r3, r3, #3
 8002dee:	3301      	adds	r3, #1
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002df4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002df6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dfc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dfe:	e002      	b.n	8002e06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e00:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e02:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3750      	adds	r7, #80	; 0x50
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e12:	bf00      	nop
 8002e14:	40023800 	.word	0x40023800
 8002e18:	00f42400 	.word	0x00f42400
 8002e1c:	007a1200 	.word	0x007a1200

08002e20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e24:	4b03      	ldr	r3, [pc, #12]	; (8002e34 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e26:	681b      	ldr	r3, [r3, #0]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	20000000 	.word	0x20000000

08002e38 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8002e3e:	4b8d      	ldr	r3, [pc, #564]	; (8003074 <MX_LWIP_Init+0x23c>)
 8002e40:	22c0      	movs	r2, #192	; 0xc0
 8002e42:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8002e44:	4b8b      	ldr	r3, [pc, #556]	; (8003074 <MX_LWIP_Init+0x23c>)
 8002e46:	22a8      	movs	r2, #168	; 0xa8
 8002e48:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8002e4a:	4b8a      	ldr	r3, [pc, #552]	; (8003074 <MX_LWIP_Init+0x23c>)
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 8002e50:	4b88      	ldr	r3, [pc, #544]	; (8003074 <MX_LWIP_Init+0x23c>)
 8002e52:	226f      	movs	r2, #111	; 0x6f
 8002e54:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8002e56:	4b88      	ldr	r3, [pc, #544]	; (8003078 <MX_LWIP_Init+0x240>)
 8002e58:	22ff      	movs	r2, #255	; 0xff
 8002e5a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8002e5c:	4b86      	ldr	r3, [pc, #536]	; (8003078 <MX_LWIP_Init+0x240>)
 8002e5e:	22ff      	movs	r2, #255	; 0xff
 8002e60:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8002e62:	4b85      	ldr	r3, [pc, #532]	; (8003078 <MX_LWIP_Init+0x240>)
 8002e64:	22ff      	movs	r2, #255	; 0xff
 8002e66:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8002e68:	4b83      	ldr	r3, [pc, #524]	; (8003078 <MX_LWIP_Init+0x240>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8002e6e:	4b83      	ldr	r3, [pc, #524]	; (800307c <MX_LWIP_Init+0x244>)
 8002e70:	22c0      	movs	r2, #192	; 0xc0
 8002e72:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8002e74:	4b81      	ldr	r3, [pc, #516]	; (800307c <MX_LWIP_Init+0x244>)
 8002e76:	22a8      	movs	r2, #168	; 0xa8
 8002e78:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8002e7a:	4b80      	ldr	r3, [pc, #512]	; (800307c <MX_LWIP_Init+0x244>)
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 111;
 8002e80:	4b7e      	ldr	r3, [pc, #504]	; (800307c <MX_LWIP_Init+0x244>)
 8002e82:	226f      	movs	r2, #111	; 0x6f
 8002e84:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8002e86:	f000 fc63 	bl	8003750 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8002e8a:	4b7a      	ldr	r3, [pc, #488]	; (8003074 <MX_LWIP_Init+0x23c>)
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	061a      	lsls	r2, r3, #24
 8002e90:	4b78      	ldr	r3, [pc, #480]	; (8003074 <MX_LWIP_Init+0x23c>)
 8002e92:	785b      	ldrb	r3, [r3, #1]
 8002e94:	041b      	lsls	r3, r3, #16
 8002e96:	431a      	orrs	r2, r3
 8002e98:	4b76      	ldr	r3, [pc, #472]	; (8003074 <MX_LWIP_Init+0x23c>)
 8002e9a:	789b      	ldrb	r3, [r3, #2]
 8002e9c:	021b      	lsls	r3, r3, #8
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	4a74      	ldr	r2, [pc, #464]	; (8003074 <MX_LWIP_Init+0x23c>)
 8002ea2:	78d2      	ldrb	r2, [r2, #3]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	061a      	lsls	r2, r3, #24
 8002ea8:	4b72      	ldr	r3, [pc, #456]	; (8003074 <MX_LWIP_Init+0x23c>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	0619      	lsls	r1, r3, #24
 8002eae:	4b71      	ldr	r3, [pc, #452]	; (8003074 <MX_LWIP_Init+0x23c>)
 8002eb0:	785b      	ldrb	r3, [r3, #1]
 8002eb2:	041b      	lsls	r3, r3, #16
 8002eb4:	4319      	orrs	r1, r3
 8002eb6:	4b6f      	ldr	r3, [pc, #444]	; (8003074 <MX_LWIP_Init+0x23c>)
 8002eb8:	789b      	ldrb	r3, [r3, #2]
 8002eba:	021b      	lsls	r3, r3, #8
 8002ebc:	430b      	orrs	r3, r1
 8002ebe:	496d      	ldr	r1, [pc, #436]	; (8003074 <MX_LWIP_Init+0x23c>)
 8002ec0:	78c9      	ldrb	r1, [r1, #3]
 8002ec2:	430b      	orrs	r3, r1
 8002ec4:	021b      	lsls	r3, r3, #8
 8002ec6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	4b69      	ldr	r3, [pc, #420]	; (8003074 <MX_LWIP_Init+0x23c>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	0619      	lsls	r1, r3, #24
 8002ed2:	4b68      	ldr	r3, [pc, #416]	; (8003074 <MX_LWIP_Init+0x23c>)
 8002ed4:	785b      	ldrb	r3, [r3, #1]
 8002ed6:	041b      	lsls	r3, r3, #16
 8002ed8:	4319      	orrs	r1, r3
 8002eda:	4b66      	ldr	r3, [pc, #408]	; (8003074 <MX_LWIP_Init+0x23c>)
 8002edc:	789b      	ldrb	r3, [r3, #2]
 8002ede:	021b      	lsls	r3, r3, #8
 8002ee0:	430b      	orrs	r3, r1
 8002ee2:	4964      	ldr	r1, [pc, #400]	; (8003074 <MX_LWIP_Init+0x23c>)
 8002ee4:	78c9      	ldrb	r1, [r1, #3]
 8002ee6:	430b      	orrs	r3, r1
 8002ee8:	0a1b      	lsrs	r3, r3, #8
 8002eea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	4b60      	ldr	r3, [pc, #384]	; (8003074 <MX_LWIP_Init+0x23c>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	0619      	lsls	r1, r3, #24
 8002ef6:	4b5f      	ldr	r3, [pc, #380]	; (8003074 <MX_LWIP_Init+0x23c>)
 8002ef8:	785b      	ldrb	r3, [r3, #1]
 8002efa:	041b      	lsls	r3, r3, #16
 8002efc:	4319      	orrs	r1, r3
 8002efe:	4b5d      	ldr	r3, [pc, #372]	; (8003074 <MX_LWIP_Init+0x23c>)
 8002f00:	789b      	ldrb	r3, [r3, #2]
 8002f02:	021b      	lsls	r3, r3, #8
 8002f04:	430b      	orrs	r3, r1
 8002f06:	495b      	ldr	r1, [pc, #364]	; (8003074 <MX_LWIP_Init+0x23c>)
 8002f08:	78c9      	ldrb	r1, [r1, #3]
 8002f0a:	430b      	orrs	r3, r1
 8002f0c:	0e1b      	lsrs	r3, r3, #24
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	4a5b      	ldr	r2, [pc, #364]	; (8003080 <MX_LWIP_Init+0x248>)
 8002f12:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8002f14:	4b58      	ldr	r3, [pc, #352]	; (8003078 <MX_LWIP_Init+0x240>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	061a      	lsls	r2, r3, #24
 8002f1a:	4b57      	ldr	r3, [pc, #348]	; (8003078 <MX_LWIP_Init+0x240>)
 8002f1c:	785b      	ldrb	r3, [r3, #1]
 8002f1e:	041b      	lsls	r3, r3, #16
 8002f20:	431a      	orrs	r2, r3
 8002f22:	4b55      	ldr	r3, [pc, #340]	; (8003078 <MX_LWIP_Init+0x240>)
 8002f24:	789b      	ldrb	r3, [r3, #2]
 8002f26:	021b      	lsls	r3, r3, #8
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	4a53      	ldr	r2, [pc, #332]	; (8003078 <MX_LWIP_Init+0x240>)
 8002f2c:	78d2      	ldrb	r2, [r2, #3]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	061a      	lsls	r2, r3, #24
 8002f32:	4b51      	ldr	r3, [pc, #324]	; (8003078 <MX_LWIP_Init+0x240>)
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	0619      	lsls	r1, r3, #24
 8002f38:	4b4f      	ldr	r3, [pc, #316]	; (8003078 <MX_LWIP_Init+0x240>)
 8002f3a:	785b      	ldrb	r3, [r3, #1]
 8002f3c:	041b      	lsls	r3, r3, #16
 8002f3e:	4319      	orrs	r1, r3
 8002f40:	4b4d      	ldr	r3, [pc, #308]	; (8003078 <MX_LWIP_Init+0x240>)
 8002f42:	789b      	ldrb	r3, [r3, #2]
 8002f44:	021b      	lsls	r3, r3, #8
 8002f46:	430b      	orrs	r3, r1
 8002f48:	494b      	ldr	r1, [pc, #300]	; (8003078 <MX_LWIP_Init+0x240>)
 8002f4a:	78c9      	ldrb	r1, [r1, #3]
 8002f4c:	430b      	orrs	r3, r1
 8002f4e:	021b      	lsls	r3, r3, #8
 8002f50:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002f54:	431a      	orrs	r2, r3
 8002f56:	4b48      	ldr	r3, [pc, #288]	; (8003078 <MX_LWIP_Init+0x240>)
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	0619      	lsls	r1, r3, #24
 8002f5c:	4b46      	ldr	r3, [pc, #280]	; (8003078 <MX_LWIP_Init+0x240>)
 8002f5e:	785b      	ldrb	r3, [r3, #1]
 8002f60:	041b      	lsls	r3, r3, #16
 8002f62:	4319      	orrs	r1, r3
 8002f64:	4b44      	ldr	r3, [pc, #272]	; (8003078 <MX_LWIP_Init+0x240>)
 8002f66:	789b      	ldrb	r3, [r3, #2]
 8002f68:	021b      	lsls	r3, r3, #8
 8002f6a:	430b      	orrs	r3, r1
 8002f6c:	4942      	ldr	r1, [pc, #264]	; (8003078 <MX_LWIP_Init+0x240>)
 8002f6e:	78c9      	ldrb	r1, [r1, #3]
 8002f70:	430b      	orrs	r3, r1
 8002f72:	0a1b      	lsrs	r3, r3, #8
 8002f74:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	4b3f      	ldr	r3, [pc, #252]	; (8003078 <MX_LWIP_Init+0x240>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	0619      	lsls	r1, r3, #24
 8002f80:	4b3d      	ldr	r3, [pc, #244]	; (8003078 <MX_LWIP_Init+0x240>)
 8002f82:	785b      	ldrb	r3, [r3, #1]
 8002f84:	041b      	lsls	r3, r3, #16
 8002f86:	4319      	orrs	r1, r3
 8002f88:	4b3b      	ldr	r3, [pc, #236]	; (8003078 <MX_LWIP_Init+0x240>)
 8002f8a:	789b      	ldrb	r3, [r3, #2]
 8002f8c:	021b      	lsls	r3, r3, #8
 8002f8e:	430b      	orrs	r3, r1
 8002f90:	4939      	ldr	r1, [pc, #228]	; (8003078 <MX_LWIP_Init+0x240>)
 8002f92:	78c9      	ldrb	r1, [r1, #3]
 8002f94:	430b      	orrs	r3, r1
 8002f96:	0e1b      	lsrs	r3, r3, #24
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	4a3a      	ldr	r2, [pc, #232]	; (8003084 <MX_LWIP_Init+0x24c>)
 8002f9c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8002f9e:	4b37      	ldr	r3, [pc, #220]	; (800307c <MX_LWIP_Init+0x244>)
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	061a      	lsls	r2, r3, #24
 8002fa4:	4b35      	ldr	r3, [pc, #212]	; (800307c <MX_LWIP_Init+0x244>)
 8002fa6:	785b      	ldrb	r3, [r3, #1]
 8002fa8:	041b      	lsls	r3, r3, #16
 8002faa:	431a      	orrs	r2, r3
 8002fac:	4b33      	ldr	r3, [pc, #204]	; (800307c <MX_LWIP_Init+0x244>)
 8002fae:	789b      	ldrb	r3, [r3, #2]
 8002fb0:	021b      	lsls	r3, r3, #8
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	4a31      	ldr	r2, [pc, #196]	; (800307c <MX_LWIP_Init+0x244>)
 8002fb6:	78d2      	ldrb	r2, [r2, #3]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	061a      	lsls	r2, r3, #24
 8002fbc:	4b2f      	ldr	r3, [pc, #188]	; (800307c <MX_LWIP_Init+0x244>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	0619      	lsls	r1, r3, #24
 8002fc2:	4b2e      	ldr	r3, [pc, #184]	; (800307c <MX_LWIP_Init+0x244>)
 8002fc4:	785b      	ldrb	r3, [r3, #1]
 8002fc6:	041b      	lsls	r3, r3, #16
 8002fc8:	4319      	orrs	r1, r3
 8002fca:	4b2c      	ldr	r3, [pc, #176]	; (800307c <MX_LWIP_Init+0x244>)
 8002fcc:	789b      	ldrb	r3, [r3, #2]
 8002fce:	021b      	lsls	r3, r3, #8
 8002fd0:	430b      	orrs	r3, r1
 8002fd2:	492a      	ldr	r1, [pc, #168]	; (800307c <MX_LWIP_Init+0x244>)
 8002fd4:	78c9      	ldrb	r1, [r1, #3]
 8002fd6:	430b      	orrs	r3, r1
 8002fd8:	021b      	lsls	r3, r3, #8
 8002fda:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	4b26      	ldr	r3, [pc, #152]	; (800307c <MX_LWIP_Init+0x244>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	0619      	lsls	r1, r3, #24
 8002fe6:	4b25      	ldr	r3, [pc, #148]	; (800307c <MX_LWIP_Init+0x244>)
 8002fe8:	785b      	ldrb	r3, [r3, #1]
 8002fea:	041b      	lsls	r3, r3, #16
 8002fec:	4319      	orrs	r1, r3
 8002fee:	4b23      	ldr	r3, [pc, #140]	; (800307c <MX_LWIP_Init+0x244>)
 8002ff0:	789b      	ldrb	r3, [r3, #2]
 8002ff2:	021b      	lsls	r3, r3, #8
 8002ff4:	430b      	orrs	r3, r1
 8002ff6:	4921      	ldr	r1, [pc, #132]	; (800307c <MX_LWIP_Init+0x244>)
 8002ff8:	78c9      	ldrb	r1, [r1, #3]
 8002ffa:	430b      	orrs	r3, r1
 8002ffc:	0a1b      	lsrs	r3, r3, #8
 8002ffe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003002:	431a      	orrs	r2, r3
 8003004:	4b1d      	ldr	r3, [pc, #116]	; (800307c <MX_LWIP_Init+0x244>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	0619      	lsls	r1, r3, #24
 800300a:	4b1c      	ldr	r3, [pc, #112]	; (800307c <MX_LWIP_Init+0x244>)
 800300c:	785b      	ldrb	r3, [r3, #1]
 800300e:	041b      	lsls	r3, r3, #16
 8003010:	4319      	orrs	r1, r3
 8003012:	4b1a      	ldr	r3, [pc, #104]	; (800307c <MX_LWIP_Init+0x244>)
 8003014:	789b      	ldrb	r3, [r3, #2]
 8003016:	021b      	lsls	r3, r3, #8
 8003018:	430b      	orrs	r3, r1
 800301a:	4918      	ldr	r1, [pc, #96]	; (800307c <MX_LWIP_Init+0x244>)
 800301c:	78c9      	ldrb	r1, [r1, #3]
 800301e:	430b      	orrs	r3, r1
 8003020:	0e1b      	lsrs	r3, r3, #24
 8003022:	4313      	orrs	r3, r2
 8003024:	4a18      	ldr	r2, [pc, #96]	; (8003088 <MX_LWIP_Init+0x250>)
 8003026:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003028:	4b18      	ldr	r3, [pc, #96]	; (800308c <MX_LWIP_Init+0x254>)
 800302a:	9302      	str	r3, [sp, #8]
 800302c:	4b18      	ldr	r3, [pc, #96]	; (8003090 <MX_LWIP_Init+0x258>)
 800302e:	9301      	str	r3, [sp, #4]
 8003030:	2300      	movs	r3, #0
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	4b14      	ldr	r3, [pc, #80]	; (8003088 <MX_LWIP_Init+0x250>)
 8003036:	4a13      	ldr	r2, [pc, #76]	; (8003084 <MX_LWIP_Init+0x24c>)
 8003038:	4911      	ldr	r1, [pc, #68]	; (8003080 <MX_LWIP_Init+0x248>)
 800303a:	4816      	ldr	r0, [pc, #88]	; (8003094 <MX_LWIP_Init+0x25c>)
 800303c:	f001 f874 	bl	8004128 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003040:	4814      	ldr	r0, [pc, #80]	; (8003094 <MX_LWIP_Init+0x25c>)
 8003042:	f001 fa27 	bl	8004494 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8003046:	4b13      	ldr	r3, [pc, #76]	; (8003094 <MX_LWIP_Init+0x25c>)
 8003048:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800304c:	089b      	lsrs	r3, r3, #2
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b00      	cmp	r3, #0
 8003056:	d003      	beq.n	8003060 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003058:	480e      	ldr	r0, [pc, #56]	; (8003094 <MX_LWIP_Init+0x25c>)
 800305a:	f001 fa2b 	bl	80044b4 <netif_set_up>
 800305e:	e002      	b.n	8003066 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003060:	480c      	ldr	r0, [pc, #48]	; (8003094 <MX_LWIP_Init+0x25c>)
 8003062:	f001 fa93 	bl	800458c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8003066:	490c      	ldr	r1, [pc, #48]	; (8003098 <MX_LWIP_Init+0x260>)
 8003068:	480a      	ldr	r0, [pc, #40]	; (8003094 <MX_LWIP_Init+0x25c>)
 800306a:	f001 fb25 	bl	80046b8 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800306e:	bf00      	nop
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	200000f8 	.word	0x200000f8
 8003078:	200000fc 	.word	0x200000fc
 800307c:	20000100 	.word	0x20000100
 8003080:	200000ec 	.word	0x200000ec
 8003084:	200000f0 	.word	0x200000f0
 8003088:	200000f4 	.word	0x200000f4
 800308c:	0800d0a1 	.word	0x0800d0a1
 8003090:	080032e5 	.word	0x080032e5
 8003094:	200000b8 	.word	0x200000b8
 8003098:	0800309d 	.word	0x0800309d

0800309c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80030b8:	2300      	movs	r3, #0
 80030ba:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80030bc:	4b40      	ldr	r3, [pc, #256]	; (80031c0 <low_level_init+0x110>)
 80030be:	4a41      	ldr	r2, [pc, #260]	; (80031c4 <low_level_init+0x114>)
 80030c0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80030c2:	2300      	movs	r3, #0
 80030c4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80030c6:	2380      	movs	r3, #128	; 0x80
 80030c8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80030ca:	23e1      	movs	r3, #225	; 0xe1
 80030cc:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x12;
 80030ce:	2312      	movs	r3, #18
 80030d0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x9D;
 80030d2:	239d      	movs	r3, #157	; 0x9d
 80030d4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x85;
 80030d6:	2385      	movs	r3, #133	; 0x85
 80030d8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80030da:	4a39      	ldr	r2, [pc, #228]	; (80031c0 <low_level_init+0x110>)
 80030dc:	f107 0308 	add.w	r3, r7, #8
 80030e0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80030e2:	4b37      	ldr	r3, [pc, #220]	; (80031c0 <low_level_init+0x110>)
 80030e4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80030e8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80030ea:	4b35      	ldr	r3, [pc, #212]	; (80031c0 <low_level_init+0x110>)
 80030ec:	4a36      	ldr	r2, [pc, #216]	; (80031c8 <low_level_init+0x118>)
 80030ee:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80030f0:	4b33      	ldr	r3, [pc, #204]	; (80031c0 <low_level_init+0x110>)
 80030f2:	4a36      	ldr	r2, [pc, #216]	; (80031cc <low_level_init+0x11c>)
 80030f4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80030f6:	4b32      	ldr	r3, [pc, #200]	; (80031c0 <low_level_init+0x110>)
 80030f8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80030fc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80030fe:	4830      	ldr	r0, [pc, #192]	; (80031c0 <low_level_init+0x110>)
 8003100:	f7fd ff68 	bl	8000fd4 <HAL_ETH_Init>
 8003104:	4603      	mov	r3, r0
 8003106:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003108:	2238      	movs	r2, #56	; 0x38
 800310a:	2100      	movs	r1, #0
 800310c:	4830      	ldr	r0, [pc, #192]	; (80031d0 <low_level_init+0x120>)
 800310e:	f00a f8df 	bl	800d2d0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8003112:	4b2f      	ldr	r3, [pc, #188]	; (80031d0 <low_level_init+0x120>)
 8003114:	2221      	movs	r2, #33	; 0x21
 8003116:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003118:	4b2d      	ldr	r3, [pc, #180]	; (80031d0 <low_level_init+0x120>)
 800311a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800311e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8003120:	4b2b      	ldr	r3, [pc, #172]	; (80031d0 <low_level_init+0x120>)
 8003122:	2200      	movs	r2, #0
 8003124:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8003126:	482b      	ldr	r0, [pc, #172]	; (80031d4 <low_level_init+0x124>)
 8003128:	f000 fec6 	bl	8003eb8 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2206      	movs	r2, #6
 8003130:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003134:	4b22      	ldr	r3, [pc, #136]	; (80031c0 <low_level_init+0x110>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	781a      	ldrb	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003140:	4b1f      	ldr	r3, [pc, #124]	; (80031c0 <low_level_init+0x110>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	785a      	ldrb	r2, [r3, #1]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800314c:	4b1c      	ldr	r3, [pc, #112]	; (80031c0 <low_level_init+0x110>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	789a      	ldrb	r2, [r3, #2]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003158:	4b19      	ldr	r3, [pc, #100]	; (80031c0 <low_level_init+0x110>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	78da      	ldrb	r2, [r3, #3]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003164:	4b16      	ldr	r3, [pc, #88]	; (80031c0 <low_level_init+0x110>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	791a      	ldrb	r2, [r3, #4]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003170:	4b13      	ldr	r3, [pc, #76]	; (80031c0 <low_level_init+0x110>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	795a      	ldrb	r2, [r3, #5]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003182:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800318a:	f043 030a 	orr.w	r3, r3, #10
 800318e:	b2da      	uxtb	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 8003196:	4910      	ldr	r1, [pc, #64]	; (80031d8 <low_level_init+0x128>)
 8003198:	4810      	ldr	r0, [pc, #64]	; (80031dc <low_level_init+0x12c>)
 800319a:	f7fd fc12 	bl	80009c2 <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 800319e:	480f      	ldr	r0, [pc, #60]	; (80031dc <low_level_init+0x12c>)
 80031a0:	f7fd fc41 	bl	8000a26 <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 80031a4:	7bfb      	ldrb	r3, [r7, #15]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d103      	bne.n	80031b2 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f9e6 	bl	800357c <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80031b0:	e001      	b.n	80031b6 <low_level_init+0x106>
    Error_Handler();
 80031b2:	f7fd fa9f 	bl	80006f4 <Error_Handler>
}
 80031b6:	bf00      	nop
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	20004bd0 	.word	0x20004bd0
 80031c4:	40028000 	.word	0x40028000
 80031c8:	20004b30 	.word	0x20004b30
 80031cc:	20004a90 	.word	0x20004a90
 80031d0:	20004c80 	.word	0x20004c80
 80031d4:	08010e54 	.word	0x08010e54
 80031d8:	2000000c 	.word	0x2000000c
 80031dc:	20004cb8 	.word	0x20004cb8

080031e0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b092      	sub	sp, #72	; 0x48
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80031ea:	2300      	movs	r3, #0
 80031ec:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80031ee:	2300      	movs	r3, #0
 80031f0:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80031f2:	2300      	movs	r3, #0
 80031f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80031f8:	f107 030c 	add.w	r3, r7, #12
 80031fc:	2230      	movs	r2, #48	; 0x30
 80031fe:	2100      	movs	r1, #0
 8003200:	4618      	mov	r0, r3
 8003202:	f00a f865 	bl	800d2d0 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8003206:	f107 030c 	add.w	r3, r7, #12
 800320a:	2230      	movs	r2, #48	; 0x30
 800320c:	2100      	movs	r1, #0
 800320e:	4618      	mov	r0, r3
 8003210:	f00a f85e 	bl	800d2d0 <memset>

  for(q = p; q != NULL; q = q->next)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	643b      	str	r3, [r7, #64]	; 0x40
 8003218:	e045      	b.n	80032a6 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800321a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800321c:	2b03      	cmp	r3, #3
 800321e:	d902      	bls.n	8003226 <low_level_output+0x46>
      return ERR_IF;
 8003220:	f06f 030b 	mvn.w	r3, #11
 8003224:	e055      	b.n	80032d2 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8003226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003228:	6859      	ldr	r1, [r3, #4]
 800322a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800322c:	4613      	mov	r3, r2
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	4413      	add	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	3348      	adds	r3, #72	; 0x48
 8003236:	443b      	add	r3, r7
 8003238:	3b3c      	subs	r3, #60	; 0x3c
 800323a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800323c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800323e:	895b      	ldrh	r3, [r3, #10]
 8003240:	4619      	mov	r1, r3
 8003242:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003244:	4613      	mov	r3, r2
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	4413      	add	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	3348      	adds	r3, #72	; 0x48
 800324e:	443b      	add	r3, r7
 8003250:	3b38      	subs	r3, #56	; 0x38
 8003252:	6019      	str	r1, [r3, #0]

    if(i>0)
 8003254:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003256:	2b00      	cmp	r3, #0
 8003258:	d011      	beq.n	800327e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800325a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800325c:	1e5a      	subs	r2, r3, #1
 800325e:	f107 000c 	add.w	r0, r7, #12
 8003262:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003264:	460b      	mov	r3, r1
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	440b      	add	r3, r1
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	18c1      	adds	r1, r0, r3
 800326e:	4613      	mov	r3, r2
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	4413      	add	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	3348      	adds	r3, #72	; 0x48
 8003278:	443b      	add	r3, r7
 800327a:	3b34      	subs	r3, #52	; 0x34
 800327c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800327e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d109      	bne.n	800329a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8003286:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003288:	4613      	mov	r3, r2
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	4413      	add	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	3348      	adds	r3, #72	; 0x48
 8003292:	443b      	add	r3, r7
 8003294:	3b34      	subs	r3, #52	; 0x34
 8003296:	2200      	movs	r2, #0
 8003298:	601a      	str	r2, [r3, #0]
    }

    i++;
 800329a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800329c:	3301      	adds	r3, #1
 800329e:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80032a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	643b      	str	r3, [r7, #64]	; 0x40
 80032a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1b6      	bne.n	800321a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	891b      	ldrh	r3, [r3, #8]
 80032b0:	461a      	mov	r2, r3
 80032b2:	4b0a      	ldr	r3, [pc, #40]	; (80032dc <low_level_output+0xfc>)
 80032b4:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80032b6:	4a09      	ldr	r2, [pc, #36]	; (80032dc <low_level_output+0xfc>)
 80032b8:	f107 030c 	add.w	r3, r7, #12
 80032bc:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80032be:	4a07      	ldr	r2, [pc, #28]	; (80032dc <low_level_output+0xfc>)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 80032c4:	2214      	movs	r2, #20
 80032c6:	4905      	ldr	r1, [pc, #20]	; (80032dc <low_level_output+0xfc>)
 80032c8:	4805      	ldr	r0, [pc, #20]	; (80032e0 <low_level_output+0x100>)
 80032ca:	f7fd ffb9 	bl	8001240 <HAL_ETH_Transmit>

  return errval;
 80032ce:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3748      	adds	r7, #72	; 0x48
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	20004c80 	.word	0x20004c80
 80032e0:	20004bd0 	.word	0x20004bd0

080032e4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d106      	bne.n	8003300 <ethernetif_init+0x1c>
 80032f2:	4b0e      	ldr	r3, [pc, #56]	; (800332c <ethernetif_init+0x48>)
 80032f4:	f240 126b 	movw	r2, #363	; 0x16b
 80032f8:	490d      	ldr	r1, [pc, #52]	; (8003330 <ethernetif_init+0x4c>)
 80032fa:	480e      	ldr	r0, [pc, #56]	; (8003334 <ethernetif_init+0x50>)
 80032fc:	f009 fff0 	bl	800d2e0 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2273      	movs	r2, #115	; 0x73
 8003304:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2274      	movs	r2, #116	; 0x74
 800330c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a09      	ldr	r2, [pc, #36]	; (8003338 <ethernetif_init+0x54>)
 8003314:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a08      	ldr	r2, [pc, #32]	; (800333c <ethernetif_init+0x58>)
 800331a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f7ff fec7 	bl	80030b0 <low_level_init>

  return ERR_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	0800e398 	.word	0x0800e398
 8003330:	0800e3b4 	.word	0x0800e3b4
 8003334:	0800e3c4 	.word	0x0800e3c4
 8003338:	0800b541 	.word	0x0800b541
 800333c:	080031e1 	.word	0x080031e1

08003340 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800334c:	68f9      	ldr	r1, [r7, #12]
 800334e:	4807      	ldr	r0, [pc, #28]	; (800336c <pbuf_free_custom+0x2c>)
 8003350:	f000 fe94 	bl	800407c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8003354:	4b06      	ldr	r3, [pc, #24]	; (8003370 <pbuf_free_custom+0x30>)
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d102      	bne.n	8003362 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800335c:	4b04      	ldr	r3, [pc, #16]	; (8003370 <pbuf_free_custom+0x30>)
 800335e:	2200      	movs	r2, #0
 8003360:	701a      	strb	r2, [r3, #0]
  }
}
 8003362:	bf00      	nop
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	08010e54 	.word	0x08010e54
 8003370:	20004a8c 	.word	0x20004a8c

08003374 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003378:	f7fd fcea 	bl	8000d50 <HAL_GetTick>
 800337c:	4603      	mov	r3, r0
}
 800337e:	4618      	mov	r0, r3
 8003380:	bd80      	pop	{r7, pc}
	...

08003384 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b08e      	sub	sp, #56	; 0x38
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800338c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	605a      	str	r2, [r3, #4]
 8003396:	609a      	str	r2, [r3, #8]
 8003398:	60da      	str	r2, [r3, #12]
 800339a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a4a      	ldr	r2, [pc, #296]	; (80034cc <HAL_ETH_MspInit+0x148>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	f040 808d 	bne.w	80034c2 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80033a8:	2300      	movs	r3, #0
 80033aa:	623b      	str	r3, [r7, #32]
 80033ac:	4b48      	ldr	r3, [pc, #288]	; (80034d0 <HAL_ETH_MspInit+0x14c>)
 80033ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b0:	4a47      	ldr	r2, [pc, #284]	; (80034d0 <HAL_ETH_MspInit+0x14c>)
 80033b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033b6:	6313      	str	r3, [r2, #48]	; 0x30
 80033b8:	4b45      	ldr	r3, [pc, #276]	; (80034d0 <HAL_ETH_MspInit+0x14c>)
 80033ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c0:	623b      	str	r3, [r7, #32]
 80033c2:	6a3b      	ldr	r3, [r7, #32]
 80033c4:	2300      	movs	r3, #0
 80033c6:	61fb      	str	r3, [r7, #28]
 80033c8:	4b41      	ldr	r3, [pc, #260]	; (80034d0 <HAL_ETH_MspInit+0x14c>)
 80033ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033cc:	4a40      	ldr	r2, [pc, #256]	; (80034d0 <HAL_ETH_MspInit+0x14c>)
 80033ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033d2:	6313      	str	r3, [r2, #48]	; 0x30
 80033d4:	4b3e      	ldr	r3, [pc, #248]	; (80034d0 <HAL_ETH_MspInit+0x14c>)
 80033d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033dc:	61fb      	str	r3, [r7, #28]
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	2300      	movs	r3, #0
 80033e2:	61bb      	str	r3, [r7, #24]
 80033e4:	4b3a      	ldr	r3, [pc, #232]	; (80034d0 <HAL_ETH_MspInit+0x14c>)
 80033e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e8:	4a39      	ldr	r2, [pc, #228]	; (80034d0 <HAL_ETH_MspInit+0x14c>)
 80033ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80033ee:	6313      	str	r3, [r2, #48]	; 0x30
 80033f0:	4b37      	ldr	r3, [pc, #220]	; (80034d0 <HAL_ETH_MspInit+0x14c>)
 80033f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033f8:	61bb      	str	r3, [r7, #24]
 80033fa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033fc:	2300      	movs	r3, #0
 80033fe:	617b      	str	r3, [r7, #20]
 8003400:	4b33      	ldr	r3, [pc, #204]	; (80034d0 <HAL_ETH_MspInit+0x14c>)
 8003402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003404:	4a32      	ldr	r2, [pc, #200]	; (80034d0 <HAL_ETH_MspInit+0x14c>)
 8003406:	f043 0304 	orr.w	r3, r3, #4
 800340a:	6313      	str	r3, [r2, #48]	; 0x30
 800340c:	4b30      	ldr	r3, [pc, #192]	; (80034d0 <HAL_ETH_MspInit+0x14c>)
 800340e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003410:	f003 0304 	and.w	r3, r3, #4
 8003414:	617b      	str	r3, [r7, #20]
 8003416:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003418:	2300      	movs	r3, #0
 800341a:	613b      	str	r3, [r7, #16]
 800341c:	4b2c      	ldr	r3, [pc, #176]	; (80034d0 <HAL_ETH_MspInit+0x14c>)
 800341e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003420:	4a2b      	ldr	r2, [pc, #172]	; (80034d0 <HAL_ETH_MspInit+0x14c>)
 8003422:	f043 0301 	orr.w	r3, r3, #1
 8003426:	6313      	str	r3, [r2, #48]	; 0x30
 8003428:	4b29      	ldr	r3, [pc, #164]	; (80034d0 <HAL_ETH_MspInit+0x14c>)
 800342a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	613b      	str	r3, [r7, #16]
 8003432:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003434:	2300      	movs	r3, #0
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	4b25      	ldr	r3, [pc, #148]	; (80034d0 <HAL_ETH_MspInit+0x14c>)
 800343a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343c:	4a24      	ldr	r2, [pc, #144]	; (80034d0 <HAL_ETH_MspInit+0x14c>)
 800343e:	f043 0302 	orr.w	r3, r3, #2
 8003442:	6313      	str	r3, [r2, #48]	; 0x30
 8003444:	4b22      	ldr	r3, [pc, #136]	; (80034d0 <HAL_ETH_MspInit+0x14c>)
 8003446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003450:	2332      	movs	r3, #50	; 0x32
 8003452:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003454:	2302      	movs	r3, #2
 8003456:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003458:	2300      	movs	r3, #0
 800345a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800345c:	2303      	movs	r3, #3
 800345e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003460:	230b      	movs	r3, #11
 8003462:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003464:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003468:	4619      	mov	r1, r3
 800346a:	481a      	ldr	r0, [pc, #104]	; (80034d4 <HAL_ETH_MspInit+0x150>)
 800346c:	f7fe fed8 	bl	8002220 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8003470:	2386      	movs	r3, #134	; 0x86
 8003472:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003474:	2302      	movs	r3, #2
 8003476:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003478:	2300      	movs	r3, #0
 800347a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800347c:	2303      	movs	r3, #3
 800347e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003480:	230b      	movs	r3, #11
 8003482:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003484:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003488:	4619      	mov	r1, r3
 800348a:	4813      	ldr	r0, [pc, #76]	; (80034d8 <HAL_ETH_MspInit+0x154>)
 800348c:	f7fe fec8 	bl	8002220 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8003490:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003494:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003496:	2302      	movs	r3, #2
 8003498:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349a:	2300      	movs	r3, #0
 800349c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800349e:	2303      	movs	r3, #3
 80034a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80034a2:	230b      	movs	r3, #11
 80034a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034aa:	4619      	mov	r1, r3
 80034ac:	480b      	ldr	r0, [pc, #44]	; (80034dc <HAL_ETH_MspInit+0x158>)
 80034ae:	f7fe feb7 	bl	8002220 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 80034b2:	2200      	movs	r2, #0
 80034b4:	2100      	movs	r1, #0
 80034b6:	203d      	movs	r0, #61	; 0x3d
 80034b8:	f7fd fd55 	bl	8000f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80034bc:	203d      	movs	r0, #61	; 0x3d
 80034be:	f7fd fd6e 	bl	8000f9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80034c2:	bf00      	nop
 80034c4:	3738      	adds	r7, #56	; 0x38
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	40028000 	.word	0x40028000
 80034d0:	40023800 	.word	0x40023800
 80034d4:	40020800 	.word	0x40020800
 80034d8:	40020000 	.word	0x40020000
 80034dc:	40020400 	.word	0x40020400

080034e0 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80034e4:	4802      	ldr	r0, [pc, #8]	; (80034f0 <ETH_PHY_IO_Init+0x10>)
 80034e6:	f7fe fa3f 	bl	8001968 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	20004bd0 	.word	0x20004bd0

080034f4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0
  return 0;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68ba      	ldr	r2, [r7, #8]
 8003514:	68f9      	ldr	r1, [r7, #12]
 8003516:	4807      	ldr	r0, [pc, #28]	; (8003534 <ETH_PHY_IO_ReadReg+0x30>)
 8003518:	f7fe f88e 	bl	8001638 <HAL_ETH_ReadPHYRegister>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d002      	beq.n	8003528 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8003522:	f04f 33ff 	mov.w	r3, #4294967295
 8003526:	e000      	b.n	800352a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	20004bd0 	.word	0x20004bd0

08003538 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	68f9      	ldr	r1, [r7, #12]
 800354a:	4807      	ldr	r0, [pc, #28]	; (8003568 <ETH_PHY_IO_WriteReg+0x30>)
 800354c:	f7fe f8bf 	bl	80016ce <HAL_ETH_WritePHYRegister>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d002      	beq.n	800355c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8003556:	f04f 33ff 	mov.w	r3, #4294967295
 800355a:	e000      	b.n	800355e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	20004bd0 	.word	0x20004bd0

0800356c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003570:	f7fd fbee 	bl	8000d50 <HAL_GetTick>
 8003574:	4603      	mov	r3, r0
}
 8003576:	4618      	mov	r0, r3
 8003578:	bd80      	pop	{r7, pc}
	...

0800357c <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b0a0      	sub	sp, #128	; 0x80
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8003584:	f107 030c 	add.w	r3, r7, #12
 8003588:	2264      	movs	r2, #100	; 0x64
 800358a:	2100      	movs	r1, #0
 800358c:	4618      	mov	r0, r3
 800358e:	f009 fe9f 	bl	800d2d0 <memset>
  int32_t PHYLinkState = 0;
 8003592:	2300      	movs	r3, #0
 8003594:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8003596:	2300      	movs	r3, #0
 8003598:	67fb      	str	r3, [r7, #124]	; 0x7c
 800359a:	2300      	movs	r3, #0
 800359c:	67bb      	str	r3, [r7, #120]	; 0x78
 800359e:	2300      	movs	r3, #0
 80035a0:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = DP83848_GetLinkState(&DP83848);
 80035a2:	483a      	ldr	r0, [pc, #232]	; (800368c <ethernet_link_check_state+0x110>)
 80035a4:	f7fd fae7 	bl	8000b76 <DP83848_GetLinkState>
 80035a8:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80035b0:	089b      	lsrs	r3, r3, #2
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00c      	beq.n	80035d6 <ethernet_link_check_state+0x5a>
 80035bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035be:	2b01      	cmp	r3, #1
 80035c0:	dc09      	bgt.n	80035d6 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 80035c2:	4833      	ldr	r0, [pc, #204]	; (8003690 <ethernet_link_check_state+0x114>)
 80035c4:	f7fd fde3 	bl	800118e <HAL_ETH_Stop>
    netif_set_down(netif);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 ffdf 	bl	800458c <netif_set_down>
    netif_set_link_down(netif);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f001 f842 	bl	8004658 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 80035d4:	e055      	b.n	8003682 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d14e      	bne.n	8003682 <ethernet_link_check_state+0x106>
 80035e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	dd4b      	ble.n	8003682 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 80035ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035ec:	3b02      	subs	r3, #2
 80035ee:	2b03      	cmp	r3, #3
 80035f0:	d82a      	bhi.n	8003648 <ethernet_link_check_state+0xcc>
 80035f2:	a201      	add	r2, pc, #4	; (adr r2, 80035f8 <ethernet_link_check_state+0x7c>)
 80035f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f8:	08003609 	.word	0x08003609
 80035fc:	0800361b 	.word	0x0800361b
 8003600:	0800362b 	.word	0x0800362b
 8003604:	0800363b 	.word	0x0800363b
      duplex = ETH_FULLDUPLEX_MODE;
 8003608:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800360c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800360e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003612:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8003614:	2301      	movs	r3, #1
 8003616:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8003618:	e017      	b.n	800364a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800361a:	2300      	movs	r3, #0
 800361c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800361e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003622:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8003624:	2301      	movs	r3, #1
 8003626:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8003628:	e00f      	b.n	800364a <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800362a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800362e:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8003630:	2300      	movs	r3, #0
 8003632:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8003634:	2301      	movs	r3, #1
 8003636:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8003638:	e007      	b.n	800364a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800363a:	2300      	movs	r3, #0
 800363c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800363e:	2300      	movs	r3, #0
 8003640:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8003642:	2301      	movs	r3, #1
 8003644:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8003646:	e000      	b.n	800364a <ethernet_link_check_state+0xce>
      break;
 8003648:	bf00      	nop
    if(linkchanged)
 800364a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800364c:	2b00      	cmp	r3, #0
 800364e:	d018      	beq.n	8003682 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8003650:	f107 030c 	add.w	r3, r7, #12
 8003654:	4619      	mov	r1, r3
 8003656:	480e      	ldr	r0, [pc, #56]	; (8003690 <ethernet_link_check_state+0x114>)
 8003658:	f7fe f882 	bl	8001760 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800365c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800365e:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8003660:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003662:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8003664:	f107 030c 	add.w	r3, r7, #12
 8003668:	4619      	mov	r1, r3
 800366a:	4809      	ldr	r0, [pc, #36]	; (8003690 <ethernet_link_check_state+0x114>)
 800366c:	f7fe f962 	bl	8001934 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8003670:	4807      	ldr	r0, [pc, #28]	; (8003690 <ethernet_link_check_state+0x114>)
 8003672:	f7fd fd2d 	bl	80010d0 <HAL_ETH_Start>
      netif_set_up(netif);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 ff1c 	bl	80044b4 <netif_set_up>
      netif_set_link_up(netif);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 ffb7 	bl	80045f0 <netif_set_link_up>
}
 8003682:	bf00      	nop
 8003684:	3780      	adds	r7, #128	; 0x80
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	20004cb8 	.word	0x20004cb8
 8003690:	20004bd0 	.word	0x20004bd0

08003694 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af02      	add	r7, sp, #8
 800369a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800369c:	4812      	ldr	r0, [pc, #72]	; (80036e8 <HAL_ETH_RxAllocateCallback+0x54>)
 800369e:	f000 fc7f 	bl	8003fa0 <memp_malloc_pool>
 80036a2:	60f8      	str	r0, [r7, #12]
  if (p)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d014      	beq.n	80036d4 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f103 0220 	add.w	r2, r3, #32
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4a0d      	ldr	r2, [pc, #52]	; (80036ec <HAL_ETH_RxAllocateCallback+0x58>)
 80036b8:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80036c2:	9201      	str	r2, [sp, #4]
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2241      	movs	r2, #65	; 0x41
 80036ca:	2100      	movs	r1, #0
 80036cc:	2000      	movs	r0, #0
 80036ce:	f001 f999 	bl	8004a04 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80036d2:	e005      	b.n	80036e0 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80036d4:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <HAL_ETH_RxAllocateCallback+0x5c>)
 80036d6:	2201      	movs	r2, #1
 80036d8:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	601a      	str	r2, [r3, #0]
}
 80036e0:	bf00      	nop
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	08010e54 	.word	0x08010e54
 80036ec:	08003341 	.word	0x08003341
 80036f0:	20004a8c 	.word	0x20004a8c

080036f4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	4603      	mov	r3, r0
 80036fc:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80036fe:	88fb      	ldrh	r3, [r7, #6]
 8003700:	021b      	lsls	r3, r3, #8
 8003702:	b21a      	sxth	r2, r3
 8003704:	88fb      	ldrh	r3, [r7, #6]
 8003706:	0a1b      	lsrs	r3, r3, #8
 8003708:	b29b      	uxth	r3, r3
 800370a:	b21b      	sxth	r3, r3
 800370c:	4313      	orrs	r3, r2
 800370e:	b21b      	sxth	r3, r3
 8003710:	b29b      	uxth	r3, r3
}
 8003712:	4618      	mov	r0, r3
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800371e:	b480      	push	{r7}
 8003720:	b083      	sub	sp, #12
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	061a      	lsls	r2, r3, #24
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	021b      	lsls	r3, r3, #8
 800372e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003732:	431a      	orrs	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	0a1b      	lsrs	r3, r3, #8
 8003738:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800373c:	431a      	orrs	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	0e1b      	lsrs	r3, r3, #24
 8003742:	4313      	orrs	r3, r2
}
 8003744:	4618      	mov	r0, r3
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8003756:	2300      	movs	r3, #0
 8003758:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800375a:	f000 f8d5 	bl	8003908 <mem_init>
  memp_init();
 800375e:	f000 fbdb 	bl	8003f18 <memp_init>
  pbuf_init();
  netif_init();
 8003762:	f000 fcd9 	bl	8004118 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8003766:	f007 f8e5 	bl	800a934 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800376a:	f001 fe7f 	bl	800546c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800376e:	f007 f899 	bl	800a8a4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8003772:	bf00      	nop
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
	...

0800377c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	4603      	mov	r3, r0
 8003784:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8003786:	4b05      	ldr	r3, [pc, #20]	; (800379c <ptr_to_mem+0x20>)
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	88fb      	ldrh	r3, [r7, #6]
 800378c:	4413      	add	r3, r2
}
 800378e:	4618      	mov	r0, r3
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	20005344 	.word	0x20005344

080037a0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80037a8:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <mem_to_ptr+0x20>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	b29b      	uxth	r3, r3
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	20005344 	.word	0x20005344

080037c4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80037c4:	b590      	push	{r4, r7, lr}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80037cc:	4b45      	ldr	r3, [pc, #276]	; (80038e4 <plug_holes+0x120>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d206      	bcs.n	80037e4 <plug_holes+0x20>
 80037d6:	4b44      	ldr	r3, [pc, #272]	; (80038e8 <plug_holes+0x124>)
 80037d8:	f240 12df 	movw	r2, #479	; 0x1df
 80037dc:	4943      	ldr	r1, [pc, #268]	; (80038ec <plug_holes+0x128>)
 80037de:	4844      	ldr	r0, [pc, #272]	; (80038f0 <plug_holes+0x12c>)
 80037e0:	f009 fd7e 	bl	800d2e0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80037e4:	4b43      	ldr	r3, [pc, #268]	; (80038f4 <plug_holes+0x130>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d306      	bcc.n	80037fc <plug_holes+0x38>
 80037ee:	4b3e      	ldr	r3, [pc, #248]	; (80038e8 <plug_holes+0x124>)
 80037f0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80037f4:	4940      	ldr	r1, [pc, #256]	; (80038f8 <plug_holes+0x134>)
 80037f6:	483e      	ldr	r0, [pc, #248]	; (80038f0 <plug_holes+0x12c>)
 80037f8:	f009 fd72 	bl	800d2e0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	791b      	ldrb	r3, [r3, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d006      	beq.n	8003812 <plug_holes+0x4e>
 8003804:	4b38      	ldr	r3, [pc, #224]	; (80038e8 <plug_holes+0x124>)
 8003806:	f240 12e1 	movw	r2, #481	; 0x1e1
 800380a:	493c      	ldr	r1, [pc, #240]	; (80038fc <plug_holes+0x138>)
 800380c:	4838      	ldr	r0, [pc, #224]	; (80038f0 <plug_holes+0x12c>)
 800380e:	f009 fd67 	bl	800d2e0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	881b      	ldrh	r3, [r3, #0]
 8003816:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800381a:	d906      	bls.n	800382a <plug_holes+0x66>
 800381c:	4b32      	ldr	r3, [pc, #200]	; (80038e8 <plug_holes+0x124>)
 800381e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8003822:	4937      	ldr	r1, [pc, #220]	; (8003900 <plug_holes+0x13c>)
 8003824:	4832      	ldr	r0, [pc, #200]	; (80038f0 <plug_holes+0x12c>)
 8003826:	f009 fd5b 	bl	800d2e0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	881b      	ldrh	r3, [r3, #0]
 800382e:	4618      	mov	r0, r3
 8003830:	f7ff ffa4 	bl	800377c <ptr_to_mem>
 8003834:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	429a      	cmp	r2, r3
 800383c:	d024      	beq.n	8003888 <plug_holes+0xc4>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	791b      	ldrb	r3, [r3, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d120      	bne.n	8003888 <plug_holes+0xc4>
 8003846:	4b2b      	ldr	r3, [pc, #172]	; (80038f4 <plug_holes+0x130>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	429a      	cmp	r2, r3
 800384e:	d01b      	beq.n	8003888 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8003850:	4b2c      	ldr	r3, [pc, #176]	; (8003904 <plug_holes+0x140>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	429a      	cmp	r2, r3
 8003858:	d102      	bne.n	8003860 <plug_holes+0x9c>
      lfree = mem;
 800385a:	4a2a      	ldr	r2, [pc, #168]	; (8003904 <plug_holes+0x140>)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	881a      	ldrh	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	881b      	ldrh	r3, [r3, #0]
 800386c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003870:	d00a      	beq.n	8003888 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	881b      	ldrh	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f7ff ff80 	bl	800377c <ptr_to_mem>
 800387c:	4604      	mov	r4, r0
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f7ff ff8e 	bl	80037a0 <mem_to_ptr>
 8003884:	4603      	mov	r3, r0
 8003886:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	885b      	ldrh	r3, [r3, #2]
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff ff75 	bl	800377c <ptr_to_mem>
 8003892:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8003894:	68ba      	ldr	r2, [r7, #8]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	429a      	cmp	r2, r3
 800389a:	d01f      	beq.n	80038dc <plug_holes+0x118>
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	791b      	ldrb	r3, [r3, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d11b      	bne.n	80038dc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80038a4:	4b17      	ldr	r3, [pc, #92]	; (8003904 <plug_holes+0x140>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d102      	bne.n	80038b4 <plug_holes+0xf0>
      lfree = pmem;
 80038ae:	4a15      	ldr	r2, [pc, #84]	; (8003904 <plug_holes+0x140>)
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	881a      	ldrh	r2, [r3, #0]
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	881b      	ldrh	r3, [r3, #0]
 80038c0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80038c4:	d00a      	beq.n	80038dc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	881b      	ldrh	r3, [r3, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7ff ff56 	bl	800377c <ptr_to_mem>
 80038d0:	4604      	mov	r4, r0
 80038d2:	68b8      	ldr	r0, [r7, #8]
 80038d4:	f7ff ff64 	bl	80037a0 <mem_to_ptr>
 80038d8:	4603      	mov	r3, r0
 80038da:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80038dc:	bf00      	nop
 80038de:	3714      	adds	r7, #20
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd90      	pop	{r4, r7, pc}
 80038e4:	20005344 	.word	0x20005344
 80038e8:	0800e3ec 	.word	0x0800e3ec
 80038ec:	0800e41c 	.word	0x0800e41c
 80038f0:	0800e434 	.word	0x0800e434
 80038f4:	20005348 	.word	0x20005348
 80038f8:	0800e45c 	.word	0x0800e45c
 80038fc:	0800e478 	.word	0x0800e478
 8003900:	0800e494 	.word	0x0800e494
 8003904:	2000534c 	.word	0x2000534c

08003908 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800390e:	4b18      	ldr	r3, [pc, #96]	; (8003970 <mem_init+0x68>)
 8003910:	3303      	adds	r3, #3
 8003912:	f023 0303 	bic.w	r3, r3, #3
 8003916:	461a      	mov	r2, r3
 8003918:	4b16      	ldr	r3, [pc, #88]	; (8003974 <mem_init+0x6c>)
 800391a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800391c:	4b15      	ldr	r3, [pc, #84]	; (8003974 <mem_init+0x6c>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003928:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8003936:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800393a:	f7ff ff1f 	bl	800377c <ptr_to_mem>
 800393e:	4603      	mov	r3, r0
 8003940:	4a0d      	ldr	r2, [pc, #52]	; (8003978 <mem_init+0x70>)
 8003942:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8003944:	4b0c      	ldr	r3, [pc, #48]	; (8003978 <mem_init+0x70>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2201      	movs	r2, #1
 800394a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800394c:	4b0a      	ldr	r3, [pc, #40]	; (8003978 <mem_init+0x70>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003954:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8003956:	4b08      	ldr	r3, [pc, #32]	; (8003978 <mem_init+0x70>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800395e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8003960:	4b04      	ldr	r3, [pc, #16]	; (8003974 <mem_init+0x6c>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a05      	ldr	r2, [pc, #20]	; (800397c <mem_init+0x74>)
 8003966:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8003968:	bf00      	nop
 800396a:	3708      	adds	r7, #8
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	20004cf0 	.word	0x20004cf0
 8003974:	20005344 	.word	0x20005344
 8003978:	20005348 	.word	0x20005348
 800397c:	2000534c 	.word	0x2000534c

08003980 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f7ff ff09 	bl	80037a0 <mem_to_ptr>
 800398e:	4603      	mov	r3, r0
 8003990:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f7ff fef0 	bl	800377c <ptr_to_mem>
 800399c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	885b      	ldrh	r3, [r3, #2]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7ff feea 	bl	800377c <ptr_to_mem>
 80039a8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	881b      	ldrh	r3, [r3, #0]
 80039ae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80039b2:	d818      	bhi.n	80039e6 <mem_link_valid+0x66>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	885b      	ldrh	r3, [r3, #2]
 80039b8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80039bc:	d813      	bhi.n	80039e6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80039c2:	8afa      	ldrh	r2, [r7, #22]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d004      	beq.n	80039d2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	881b      	ldrh	r3, [r3, #0]
 80039cc:	8afa      	ldrh	r2, [r7, #22]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d109      	bne.n	80039e6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80039d2:	4b08      	ldr	r3, [pc, #32]	; (80039f4 <mem_link_valid+0x74>)
 80039d4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d006      	beq.n	80039ea <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	885b      	ldrh	r3, [r3, #2]
 80039e0:	8afa      	ldrh	r2, [r7, #22]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d001      	beq.n	80039ea <mem_link_valid+0x6a>
    return 0;
 80039e6:	2300      	movs	r3, #0
 80039e8:	e000      	b.n	80039ec <mem_link_valid+0x6c>
  }
  return 1;
 80039ea:	2301      	movs	r3, #1
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3718      	adds	r7, #24
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	20005348 	.word	0x20005348

080039f8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d04c      	beq.n	8003aa0 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f003 0303 	and.w	r3, r3, #3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d007      	beq.n	8003a20 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8003a10:	4b25      	ldr	r3, [pc, #148]	; (8003aa8 <mem_free+0xb0>)
 8003a12:	f240 2273 	movw	r2, #627	; 0x273
 8003a16:	4925      	ldr	r1, [pc, #148]	; (8003aac <mem_free+0xb4>)
 8003a18:	4825      	ldr	r0, [pc, #148]	; (8003ab0 <mem_free+0xb8>)
 8003a1a:	f009 fc61 	bl	800d2e0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003a1e:	e040      	b.n	8003aa2 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	3b08      	subs	r3, #8
 8003a24:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8003a26:	4b23      	ldr	r3, [pc, #140]	; (8003ab4 <mem_free+0xbc>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d306      	bcc.n	8003a3e <mem_free+0x46>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f103 020c 	add.w	r2, r3, #12
 8003a36:	4b20      	ldr	r3, [pc, #128]	; (8003ab8 <mem_free+0xc0>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d907      	bls.n	8003a4e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8003a3e:	4b1a      	ldr	r3, [pc, #104]	; (8003aa8 <mem_free+0xb0>)
 8003a40:	f240 227f 	movw	r2, #639	; 0x27f
 8003a44:	491d      	ldr	r1, [pc, #116]	; (8003abc <mem_free+0xc4>)
 8003a46:	481a      	ldr	r0, [pc, #104]	; (8003ab0 <mem_free+0xb8>)
 8003a48:	f009 fc4a 	bl	800d2e0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003a4c:	e029      	b.n	8003aa2 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	791b      	ldrb	r3, [r3, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d107      	bne.n	8003a66 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8003a56:	4b14      	ldr	r3, [pc, #80]	; (8003aa8 <mem_free+0xb0>)
 8003a58:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8003a5c:	4918      	ldr	r1, [pc, #96]	; (8003ac0 <mem_free+0xc8>)
 8003a5e:	4814      	ldr	r0, [pc, #80]	; (8003ab0 <mem_free+0xb8>)
 8003a60:	f009 fc3e 	bl	800d2e0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003a64:	e01d      	b.n	8003aa2 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f7ff ff8a 	bl	8003980 <mem_link_valid>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d107      	bne.n	8003a82 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8003a72:	4b0d      	ldr	r3, [pc, #52]	; (8003aa8 <mem_free+0xb0>)
 8003a74:	f240 2295 	movw	r2, #661	; 0x295
 8003a78:	4912      	ldr	r1, [pc, #72]	; (8003ac4 <mem_free+0xcc>)
 8003a7a:	480d      	ldr	r0, [pc, #52]	; (8003ab0 <mem_free+0xb8>)
 8003a7c:	f009 fc30 	bl	800d2e0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003a80:	e00f      	b.n	8003aa2 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8003a88:	4b0f      	ldr	r3, [pc, #60]	; (8003ac8 <mem_free+0xd0>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d202      	bcs.n	8003a98 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8003a92:	4a0d      	ldr	r2, [pc, #52]	; (8003ac8 <mem_free+0xd0>)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f7ff fe93 	bl	80037c4 <plug_holes>
 8003a9e:	e000      	b.n	8003aa2 <mem_free+0xaa>
    return;
 8003aa0:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	0800e3ec 	.word	0x0800e3ec
 8003aac:	0800e4c0 	.word	0x0800e4c0
 8003ab0:	0800e434 	.word	0x0800e434
 8003ab4:	20005344 	.word	0x20005344
 8003ab8:	20005348 	.word	0x20005348
 8003abc:	0800e4e4 	.word	0x0800e4e4
 8003ac0:	0800e500 	.word	0x0800e500
 8003ac4:	0800e528 	.word	0x0800e528
 8003ac8:	2000534c 	.word	0x2000534c

08003acc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b088      	sub	sp, #32
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8003ad8:	887b      	ldrh	r3, [r7, #2]
 8003ada:	3303      	adds	r3, #3
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	f023 0303 	bic.w	r3, r3, #3
 8003ae2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8003ae4:	8bfb      	ldrh	r3, [r7, #30]
 8003ae6:	2b0b      	cmp	r3, #11
 8003ae8:	d801      	bhi.n	8003aee <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8003aea:	230c      	movs	r3, #12
 8003aec:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8003aee:	8bfb      	ldrh	r3, [r7, #30]
 8003af0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003af4:	d803      	bhi.n	8003afe <mem_trim+0x32>
 8003af6:	8bfa      	ldrh	r2, [r7, #30]
 8003af8:	887b      	ldrh	r3, [r7, #2]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d201      	bcs.n	8003b02 <mem_trim+0x36>
    return NULL;
 8003afe:	2300      	movs	r3, #0
 8003b00:	e0cc      	b.n	8003c9c <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8003b02:	4b68      	ldr	r3, [pc, #416]	; (8003ca4 <mem_trim+0x1d8>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d304      	bcc.n	8003b16 <mem_trim+0x4a>
 8003b0c:	4b66      	ldr	r3, [pc, #408]	; (8003ca8 <mem_trim+0x1dc>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d306      	bcc.n	8003b24 <mem_trim+0x58>
 8003b16:	4b65      	ldr	r3, [pc, #404]	; (8003cac <mem_trim+0x1e0>)
 8003b18:	f240 22d1 	movw	r2, #721	; 0x2d1
 8003b1c:	4964      	ldr	r1, [pc, #400]	; (8003cb0 <mem_trim+0x1e4>)
 8003b1e:	4865      	ldr	r0, [pc, #404]	; (8003cb4 <mem_trim+0x1e8>)
 8003b20:	f009 fbde 	bl	800d2e0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8003b24:	4b5f      	ldr	r3, [pc, #380]	; (8003ca4 <mem_trim+0x1d8>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d304      	bcc.n	8003b38 <mem_trim+0x6c>
 8003b2e:	4b5e      	ldr	r3, [pc, #376]	; (8003ca8 <mem_trim+0x1dc>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d301      	bcc.n	8003b3c <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	e0af      	b.n	8003c9c <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	3b08      	subs	r3, #8
 8003b40:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8003b42:	69b8      	ldr	r0, [r7, #24]
 8003b44:	f7ff fe2c 	bl	80037a0 <mem_to_ptr>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	881a      	ldrh	r2, [r3, #0]
 8003b50:	8afb      	ldrh	r3, [r7, #22]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	3b08      	subs	r3, #8
 8003b58:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8003b5a:	8bfa      	ldrh	r2, [r7, #30]
 8003b5c:	8abb      	ldrh	r3, [r7, #20]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d906      	bls.n	8003b70 <mem_trim+0xa4>
 8003b62:	4b52      	ldr	r3, [pc, #328]	; (8003cac <mem_trim+0x1e0>)
 8003b64:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8003b68:	4953      	ldr	r1, [pc, #332]	; (8003cb8 <mem_trim+0x1ec>)
 8003b6a:	4852      	ldr	r0, [pc, #328]	; (8003cb4 <mem_trim+0x1e8>)
 8003b6c:	f009 fbb8 	bl	800d2e0 <iprintf>
  if (newsize > size) {
 8003b70:	8bfa      	ldrh	r2, [r7, #30]
 8003b72:	8abb      	ldrh	r3, [r7, #20]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d901      	bls.n	8003b7c <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	e08f      	b.n	8003c9c <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8003b7c:	8bfa      	ldrh	r2, [r7, #30]
 8003b7e:	8abb      	ldrh	r3, [r7, #20]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d101      	bne.n	8003b88 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	e089      	b.n	8003c9c <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	881b      	ldrh	r3, [r3, #0]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7ff fdf5 	bl	800377c <ptr_to_mem>
 8003b92:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	791b      	ldrb	r3, [r3, #4]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d13f      	bne.n	8003c1c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	881b      	ldrh	r3, [r3, #0]
 8003ba0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003ba4:	d106      	bne.n	8003bb4 <mem_trim+0xe8>
 8003ba6:	4b41      	ldr	r3, [pc, #260]	; (8003cac <mem_trim+0x1e0>)
 8003ba8:	f240 22f5 	movw	r2, #757	; 0x2f5
 8003bac:	4943      	ldr	r1, [pc, #268]	; (8003cbc <mem_trim+0x1f0>)
 8003bae:	4841      	ldr	r0, [pc, #260]	; (8003cb4 <mem_trim+0x1e8>)
 8003bb0:	f009 fb96 	bl	800d2e0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	881b      	ldrh	r3, [r3, #0]
 8003bb8:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8003bba:	8afa      	ldrh	r2, [r7, #22]
 8003bbc:	8bfb      	ldrh	r3, [r7, #30]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	3308      	adds	r3, #8
 8003bc4:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8003bc6:	4b3e      	ldr	r3, [pc, #248]	; (8003cc0 <mem_trim+0x1f4>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d106      	bne.n	8003bde <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8003bd0:	89fb      	ldrh	r3, [r7, #14]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7ff fdd2 	bl	800377c <ptr_to_mem>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	4a39      	ldr	r2, [pc, #228]	; (8003cc0 <mem_trim+0x1f4>)
 8003bdc:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8003bde:	89fb      	ldrh	r3, [r7, #14]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7ff fdcb 	bl	800377c <ptr_to_mem>
 8003be6:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	2200      	movs	r2, #0
 8003bec:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	89ba      	ldrh	r2, [r7, #12]
 8003bf2:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	8afa      	ldrh	r2, [r7, #22]
 8003bf8:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	89fa      	ldrh	r2, [r7, #14]
 8003bfe:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	881b      	ldrh	r3, [r3, #0]
 8003c04:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003c08:	d047      	beq.n	8003c9a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	881b      	ldrh	r3, [r3, #0]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7ff fdb4 	bl	800377c <ptr_to_mem>
 8003c14:	4602      	mov	r2, r0
 8003c16:	89fb      	ldrh	r3, [r7, #14]
 8003c18:	8053      	strh	r3, [r2, #2]
 8003c1a:	e03e      	b.n	8003c9a <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8003c1c:	8bfb      	ldrh	r3, [r7, #30]
 8003c1e:	f103 0214 	add.w	r2, r3, #20
 8003c22:	8abb      	ldrh	r3, [r7, #20]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d838      	bhi.n	8003c9a <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8003c28:	8afa      	ldrh	r2, [r7, #22]
 8003c2a:	8bfb      	ldrh	r3, [r7, #30]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	3308      	adds	r3, #8
 8003c32:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	881b      	ldrh	r3, [r3, #0]
 8003c38:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003c3c:	d106      	bne.n	8003c4c <mem_trim+0x180>
 8003c3e:	4b1b      	ldr	r3, [pc, #108]	; (8003cac <mem_trim+0x1e0>)
 8003c40:	f240 3216 	movw	r2, #790	; 0x316
 8003c44:	491d      	ldr	r1, [pc, #116]	; (8003cbc <mem_trim+0x1f0>)
 8003c46:	481b      	ldr	r0, [pc, #108]	; (8003cb4 <mem_trim+0x1e8>)
 8003c48:	f009 fb4a 	bl	800d2e0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8003c4c:	89fb      	ldrh	r3, [r7, #14]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7ff fd94 	bl	800377c <ptr_to_mem>
 8003c54:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8003c56:	4b1a      	ldr	r3, [pc, #104]	; (8003cc0 <mem_trim+0x1f4>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d202      	bcs.n	8003c66 <mem_trim+0x19a>
      lfree = mem2;
 8003c60:	4a17      	ldr	r2, [pc, #92]	; (8003cc0 <mem_trim+0x1f4>)
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	881a      	ldrh	r2, [r3, #0]
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	8afa      	ldrh	r2, [r7, #22]
 8003c78:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	89fa      	ldrh	r2, [r7, #14]
 8003c7e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	881b      	ldrh	r3, [r3, #0]
 8003c84:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003c88:	d007      	beq.n	8003c9a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	881b      	ldrh	r3, [r3, #0]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7ff fd74 	bl	800377c <ptr_to_mem>
 8003c94:	4602      	mov	r2, r0
 8003c96:	89fb      	ldrh	r3, [r7, #14]
 8003c98:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8003c9a:	687b      	ldr	r3, [r7, #4]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3720      	adds	r7, #32
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	20005344 	.word	0x20005344
 8003ca8:	20005348 	.word	0x20005348
 8003cac:	0800e3ec 	.word	0x0800e3ec
 8003cb0:	0800e55c 	.word	0x0800e55c
 8003cb4:	0800e434 	.word	0x0800e434
 8003cb8:	0800e574 	.word	0x0800e574
 8003cbc:	0800e594 	.word	0x0800e594
 8003cc0:	2000534c 	.word	0x2000534c

08003cc4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b088      	sub	sp, #32
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	4603      	mov	r3, r0
 8003ccc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8003cce:	88fb      	ldrh	r3, [r7, #6]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d101      	bne.n	8003cd8 <mem_malloc+0x14>
    return NULL;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	e0d9      	b.n	8003e8c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8003cd8:	88fb      	ldrh	r3, [r7, #6]
 8003cda:	3303      	adds	r3, #3
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	f023 0303 	bic.w	r3, r3, #3
 8003ce2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8003ce4:	8bbb      	ldrh	r3, [r7, #28]
 8003ce6:	2b0b      	cmp	r3, #11
 8003ce8:	d801      	bhi.n	8003cee <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8003cea:	230c      	movs	r3, #12
 8003cec:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8003cee:	8bbb      	ldrh	r3, [r7, #28]
 8003cf0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003cf4:	d803      	bhi.n	8003cfe <mem_malloc+0x3a>
 8003cf6:	8bba      	ldrh	r2, [r7, #28]
 8003cf8:	88fb      	ldrh	r3, [r7, #6]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d201      	bcs.n	8003d02 <mem_malloc+0x3e>
    return NULL;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	e0c4      	b.n	8003e8c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8003d02:	4b64      	ldr	r3, [pc, #400]	; (8003e94 <mem_malloc+0x1d0>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7ff fd4a 	bl	80037a0 <mem_to_ptr>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	83fb      	strh	r3, [r7, #30]
 8003d10:	e0b4      	b.n	8003e7c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8003d12:	8bfb      	ldrh	r3, [r7, #30]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7ff fd31 	bl	800377c <ptr_to_mem>
 8003d1a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	791b      	ldrb	r3, [r3, #4]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f040 80a4 	bne.w	8003e6e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	881b      	ldrh	r3, [r3, #0]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	8bfb      	ldrh	r3, [r7, #30]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	f1a3 0208 	sub.w	r2, r3, #8
 8003d34:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8003d36:	429a      	cmp	r2, r3
 8003d38:	f0c0 8099 	bcc.w	8003e6e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	881b      	ldrh	r3, [r3, #0]
 8003d40:	461a      	mov	r2, r3
 8003d42:	8bfb      	ldrh	r3, [r7, #30]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	f1a3 0208 	sub.w	r2, r3, #8
 8003d4a:	8bbb      	ldrh	r3, [r7, #28]
 8003d4c:	3314      	adds	r3, #20
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d333      	bcc.n	8003dba <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8003d52:	8bfa      	ldrh	r2, [r7, #30]
 8003d54:	8bbb      	ldrh	r3, [r7, #28]
 8003d56:	4413      	add	r3, r2
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	3308      	adds	r3, #8
 8003d5c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8003d5e:	8a7b      	ldrh	r3, [r7, #18]
 8003d60:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003d64:	d106      	bne.n	8003d74 <mem_malloc+0xb0>
 8003d66:	4b4c      	ldr	r3, [pc, #304]	; (8003e98 <mem_malloc+0x1d4>)
 8003d68:	f240 3287 	movw	r2, #903	; 0x387
 8003d6c:	494b      	ldr	r1, [pc, #300]	; (8003e9c <mem_malloc+0x1d8>)
 8003d6e:	484c      	ldr	r0, [pc, #304]	; (8003ea0 <mem_malloc+0x1dc>)
 8003d70:	f009 fab6 	bl	800d2e0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8003d74:	8a7b      	ldrh	r3, [r7, #18]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7ff fd00 	bl	800377c <ptr_to_mem>
 8003d7c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	881a      	ldrh	r2, [r3, #0]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8bfa      	ldrh	r2, [r7, #30]
 8003d90:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	8a7a      	ldrh	r2, [r7, #18]
 8003d96:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	881b      	ldrh	r3, [r3, #0]
 8003da2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003da6:	d00b      	beq.n	8003dc0 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	881b      	ldrh	r3, [r3, #0]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7ff fce5 	bl	800377c <ptr_to_mem>
 8003db2:	4602      	mov	r2, r0
 8003db4:	8a7b      	ldrh	r3, [r7, #18]
 8003db6:	8053      	strh	r3, [r2, #2]
 8003db8:	e002      	b.n	8003dc0 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8003dc0:	4b34      	ldr	r3, [pc, #208]	; (8003e94 <mem_malloc+0x1d0>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d127      	bne.n	8003e1a <mem_malloc+0x156>
          struct mem *cur = lfree;
 8003dca:	4b32      	ldr	r3, [pc, #200]	; (8003e94 <mem_malloc+0x1d0>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8003dd0:	e005      	b.n	8003dde <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	881b      	ldrh	r3, [r3, #0]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7ff fcd0 	bl	800377c <ptr_to_mem>
 8003ddc:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	791b      	ldrb	r3, [r3, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d004      	beq.n	8003df0 <mem_malloc+0x12c>
 8003de6:	4b2f      	ldr	r3, [pc, #188]	; (8003ea4 <mem_malloc+0x1e0>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	69ba      	ldr	r2, [r7, #24]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d1f0      	bne.n	8003dd2 <mem_malloc+0x10e>
          }
          lfree = cur;
 8003df0:	4a28      	ldr	r2, [pc, #160]	; (8003e94 <mem_malloc+0x1d0>)
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8003df6:	4b27      	ldr	r3, [pc, #156]	; (8003e94 <mem_malloc+0x1d0>)
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	4b2a      	ldr	r3, [pc, #168]	; (8003ea4 <mem_malloc+0x1e0>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d00b      	beq.n	8003e1a <mem_malloc+0x156>
 8003e02:	4b24      	ldr	r3, [pc, #144]	; (8003e94 <mem_malloc+0x1d0>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	791b      	ldrb	r3, [r3, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d006      	beq.n	8003e1a <mem_malloc+0x156>
 8003e0c:	4b22      	ldr	r3, [pc, #136]	; (8003e98 <mem_malloc+0x1d4>)
 8003e0e:	f240 32b5 	movw	r2, #949	; 0x3b5
 8003e12:	4925      	ldr	r1, [pc, #148]	; (8003ea8 <mem_malloc+0x1e4>)
 8003e14:	4822      	ldr	r0, [pc, #136]	; (8003ea0 <mem_malloc+0x1dc>)
 8003e16:	f009 fa63 	bl	800d2e0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8003e1a:	8bba      	ldrh	r2, [r7, #28]
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	4413      	add	r3, r2
 8003e20:	3308      	adds	r3, #8
 8003e22:	4a20      	ldr	r2, [pc, #128]	; (8003ea4 <mem_malloc+0x1e0>)
 8003e24:	6812      	ldr	r2, [r2, #0]
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d906      	bls.n	8003e38 <mem_malloc+0x174>
 8003e2a:	4b1b      	ldr	r3, [pc, #108]	; (8003e98 <mem_malloc+0x1d4>)
 8003e2c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8003e30:	491e      	ldr	r1, [pc, #120]	; (8003eac <mem_malloc+0x1e8>)
 8003e32:	481b      	ldr	r0, [pc, #108]	; (8003ea0 <mem_malloc+0x1dc>)
 8003e34:	f009 fa54 	bl	800d2e0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	f003 0303 	and.w	r3, r3, #3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d006      	beq.n	8003e50 <mem_malloc+0x18c>
 8003e42:	4b15      	ldr	r3, [pc, #84]	; (8003e98 <mem_malloc+0x1d4>)
 8003e44:	f240 32bb 	movw	r2, #955	; 0x3bb
 8003e48:	4919      	ldr	r1, [pc, #100]	; (8003eb0 <mem_malloc+0x1ec>)
 8003e4a:	4815      	ldr	r0, [pc, #84]	; (8003ea0 <mem_malloc+0x1dc>)
 8003e4c:	f009 fa48 	bl	800d2e0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	f003 0303 	and.w	r3, r3, #3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d006      	beq.n	8003e68 <mem_malloc+0x1a4>
 8003e5a:	4b0f      	ldr	r3, [pc, #60]	; (8003e98 <mem_malloc+0x1d4>)
 8003e5c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8003e60:	4914      	ldr	r1, [pc, #80]	; (8003eb4 <mem_malloc+0x1f0>)
 8003e62:	480f      	ldr	r0, [pc, #60]	; (8003ea0 <mem_malloc+0x1dc>)
 8003e64:	f009 fa3c 	bl	800d2e0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	3308      	adds	r3, #8
 8003e6c:	e00e      	b.n	8003e8c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8003e6e:	8bfb      	ldrh	r3, [r7, #30]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7ff fc83 	bl	800377c <ptr_to_mem>
 8003e76:	4603      	mov	r3, r0
 8003e78:	881b      	ldrh	r3, [r3, #0]
 8003e7a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8003e7c:	8bfa      	ldrh	r2, [r7, #30]
 8003e7e:	8bbb      	ldrh	r3, [r7, #28]
 8003e80:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8003e84:	429a      	cmp	r2, r3
 8003e86:	f4ff af44 	bcc.w	8003d12 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3720      	adds	r7, #32
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	2000534c 	.word	0x2000534c
 8003e98:	0800e3ec 	.word	0x0800e3ec
 8003e9c:	0800e594 	.word	0x0800e594
 8003ea0:	0800e434 	.word	0x0800e434
 8003ea4:	20005348 	.word	0x20005348
 8003ea8:	0800e5a8 	.word	0x0800e5a8
 8003eac:	0800e5c4 	.word	0x0800e5c4
 8003eb0:	0800e5f4 	.word	0x0800e5f4
 8003eb4:	0800e624 	.word	0x0800e624

08003eb8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	3303      	adds	r3, #3
 8003ece:	f023 0303 	bic.w	r3, r3, #3
 8003ed2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	60fb      	str	r3, [r7, #12]
 8003ed8:	e011      	b.n	8003efe <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	881b      	ldrh	r3, [r3, #0]
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	3301      	adds	r3, #1
 8003efc:	60fb      	str	r3, [r7, #12]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	885b      	ldrh	r3, [r3, #2]
 8003f02:	461a      	mov	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4293      	cmp	r3, r2
 8003f08:	dbe7      	blt.n	8003eda <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8003f0a:	bf00      	nop
 8003f0c:	bf00      	nop
 8003f0e:	3714      	adds	r7, #20
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8003f1e:	2300      	movs	r3, #0
 8003f20:	80fb      	strh	r3, [r7, #6]
 8003f22:	e009      	b.n	8003f38 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8003f24:	88fb      	ldrh	r3, [r7, #6]
 8003f26:	4a08      	ldr	r2, [pc, #32]	; (8003f48 <memp_init+0x30>)
 8003f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7ff ffc3 	bl	8003eb8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8003f32:	88fb      	ldrh	r3, [r7, #6]
 8003f34:	3301      	adds	r3, #1
 8003f36:	80fb      	strh	r3, [r7, #6]
 8003f38:	88fb      	ldrh	r3, [r7, #6]
 8003f3a:	2b09      	cmp	r3, #9
 8003f3c:	d9f2      	bls.n	8003f24 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8003f3e:	bf00      	nop
 8003f40:	bf00      	nop
 8003f42:	3708      	adds	r7, #8
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	08010ed8 	.word	0x08010ed8

08003f4c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d012      	beq.n	8003f88 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	6812      	ldr	r2, [r2, #0]
 8003f6a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f003 0303 	and.w	r3, r3, #3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d006      	beq.n	8003f84 <do_memp_malloc_pool+0x38>
 8003f76:	4b07      	ldr	r3, [pc, #28]	; (8003f94 <do_memp_malloc_pool+0x48>)
 8003f78:	f44f 728c 	mov.w	r2, #280	; 0x118
 8003f7c:	4906      	ldr	r1, [pc, #24]	; (8003f98 <do_memp_malloc_pool+0x4c>)
 8003f7e:	4807      	ldr	r0, [pc, #28]	; (8003f9c <do_memp_malloc_pool+0x50>)
 8003f80:	f009 f9ae 	bl	800d2e0 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	e000      	b.n	8003f8a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	0800e648 	.word	0x0800e648
 8003f98:	0800e678 	.word	0x0800e678
 8003f9c:	0800e69c 	.word	0x0800e69c

08003fa0 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d106      	bne.n	8003fbc <memp_malloc_pool+0x1c>
 8003fae:	4b0a      	ldr	r3, [pc, #40]	; (8003fd8 <memp_malloc_pool+0x38>)
 8003fb0:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8003fb4:	4909      	ldr	r1, [pc, #36]	; (8003fdc <memp_malloc_pool+0x3c>)
 8003fb6:	480a      	ldr	r0, [pc, #40]	; (8003fe0 <memp_malloc_pool+0x40>)
 8003fb8:	f009 f992 	bl	800d2e0 <iprintf>
  if (desc == NULL) {
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <memp_malloc_pool+0x26>
    return NULL;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	e003      	b.n	8003fce <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f7ff ffc0 	bl	8003f4c <do_memp_malloc_pool>
 8003fcc:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	0800e648 	.word	0x0800e648
 8003fdc:	0800e6c4 	.word	0x0800e6c4
 8003fe0:	0800e69c 	.word	0x0800e69c

08003fe4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	4603      	mov	r3, r0
 8003fec:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8003fee:	79fb      	ldrb	r3, [r7, #7]
 8003ff0:	2b09      	cmp	r3, #9
 8003ff2:	d908      	bls.n	8004006 <memp_malloc+0x22>
 8003ff4:	4b0a      	ldr	r3, [pc, #40]	; (8004020 <memp_malloc+0x3c>)
 8003ff6:	f240 1257 	movw	r2, #343	; 0x157
 8003ffa:	490a      	ldr	r1, [pc, #40]	; (8004024 <memp_malloc+0x40>)
 8003ffc:	480a      	ldr	r0, [pc, #40]	; (8004028 <memp_malloc+0x44>)
 8003ffe:	f009 f96f 	bl	800d2e0 <iprintf>
 8004002:	2300      	movs	r3, #0
 8004004:	e008      	b.n	8004018 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8004006:	79fb      	ldrb	r3, [r7, #7]
 8004008:	4a08      	ldr	r2, [pc, #32]	; (800402c <memp_malloc+0x48>)
 800400a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800400e:	4618      	mov	r0, r3
 8004010:	f7ff ff9c 	bl	8003f4c <do_memp_malloc_pool>
 8004014:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8004016:	68fb      	ldr	r3, [r7, #12]
}
 8004018:	4618      	mov	r0, r3
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	0800e648 	.word	0x0800e648
 8004024:	0800e6d8 	.word	0x0800e6d8
 8004028:	0800e69c 	.word	0x0800e69c
 800402c:	08010ed8 	.word	0x08010ed8

08004030 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	f003 0303 	and.w	r3, r3, #3
 8004040:	2b00      	cmp	r3, #0
 8004042:	d006      	beq.n	8004052 <do_memp_free_pool+0x22>
 8004044:	4b0a      	ldr	r3, [pc, #40]	; (8004070 <do_memp_free_pool+0x40>)
 8004046:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800404a:	490a      	ldr	r1, [pc, #40]	; (8004074 <do_memp_free_pool+0x44>)
 800404c:	480a      	ldr	r0, [pc, #40]	; (8004078 <do_memp_free_pool+0x48>)
 800404e:	f009 f947 	bl	800d2e0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8004068:	bf00      	nop
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	0800e648 	.word	0x0800e648
 8004074:	0800e6f8 	.word	0x0800e6f8
 8004078:	0800e69c 	.word	0x0800e69c

0800407c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d106      	bne.n	800409a <memp_free_pool+0x1e>
 800408c:	4b0a      	ldr	r3, [pc, #40]	; (80040b8 <memp_free_pool+0x3c>)
 800408e:	f240 1295 	movw	r2, #405	; 0x195
 8004092:	490a      	ldr	r1, [pc, #40]	; (80040bc <memp_free_pool+0x40>)
 8004094:	480a      	ldr	r0, [pc, #40]	; (80040c0 <memp_free_pool+0x44>)
 8004096:	f009 f923 	bl	800d2e0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d007      	beq.n	80040b0 <memp_free_pool+0x34>
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d004      	beq.n	80040b0 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80040a6:	6839      	ldr	r1, [r7, #0]
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f7ff ffc1 	bl	8004030 <do_memp_free_pool>
 80040ae:	e000      	b.n	80040b2 <memp_free_pool+0x36>
    return;
 80040b0:	bf00      	nop
}
 80040b2:	3708      	adds	r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	0800e648 	.word	0x0800e648
 80040bc:	0800e6c4 	.word	0x0800e6c4
 80040c0:	0800e69c 	.word	0x0800e69c

080040c4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	4603      	mov	r3, r0
 80040cc:	6039      	str	r1, [r7, #0]
 80040ce:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80040d0:	79fb      	ldrb	r3, [r7, #7]
 80040d2:	2b09      	cmp	r3, #9
 80040d4:	d907      	bls.n	80040e6 <memp_free+0x22>
 80040d6:	4b0c      	ldr	r3, [pc, #48]	; (8004108 <memp_free+0x44>)
 80040d8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80040dc:	490b      	ldr	r1, [pc, #44]	; (800410c <memp_free+0x48>)
 80040de:	480c      	ldr	r0, [pc, #48]	; (8004110 <memp_free+0x4c>)
 80040e0:	f009 f8fe 	bl	800d2e0 <iprintf>
 80040e4:	e00c      	b.n	8004100 <memp_free+0x3c>

  if (mem == NULL) {
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d008      	beq.n	80040fe <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80040ec:	79fb      	ldrb	r3, [r7, #7]
 80040ee:	4a09      	ldr	r2, [pc, #36]	; (8004114 <memp_free+0x50>)
 80040f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040f4:	6839      	ldr	r1, [r7, #0]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7ff ff9a 	bl	8004030 <do_memp_free_pool>
 80040fc:	e000      	b.n	8004100 <memp_free+0x3c>
    return;
 80040fe:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8004100:	3708      	adds	r7, #8
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	0800e648 	.word	0x0800e648
 800410c:	0800e718 	.word	0x0800e718
 8004110:	0800e69c 	.word	0x0800e69c
 8004114:	08010ed8 	.word	0x08010ed8

08004118 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800411c:	bf00      	nop
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
	...

08004128 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
 8004134:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d108      	bne.n	800414e <netif_add+0x26>
 800413c:	4b57      	ldr	r3, [pc, #348]	; (800429c <netif_add+0x174>)
 800413e:	f240 1227 	movw	r2, #295	; 0x127
 8004142:	4957      	ldr	r1, [pc, #348]	; (80042a0 <netif_add+0x178>)
 8004144:	4857      	ldr	r0, [pc, #348]	; (80042a4 <netif_add+0x17c>)
 8004146:	f009 f8cb 	bl	800d2e0 <iprintf>
 800414a:	2300      	movs	r3, #0
 800414c:	e0a2      	b.n	8004294 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800414e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004150:	2b00      	cmp	r3, #0
 8004152:	d108      	bne.n	8004166 <netif_add+0x3e>
 8004154:	4b51      	ldr	r3, [pc, #324]	; (800429c <netif_add+0x174>)
 8004156:	f44f 7294 	mov.w	r2, #296	; 0x128
 800415a:	4953      	ldr	r1, [pc, #332]	; (80042a8 <netif_add+0x180>)
 800415c:	4851      	ldr	r0, [pc, #324]	; (80042a4 <netif_add+0x17c>)
 800415e:	f009 f8bf 	bl	800d2e0 <iprintf>
 8004162:	2300      	movs	r3, #0
 8004164:	e096      	b.n	8004294 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d101      	bne.n	8004170 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800416c:	4b4f      	ldr	r3, [pc, #316]	; (80042ac <netif_add+0x184>)
 800416e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8004176:	4b4d      	ldr	r3, [pc, #308]	; (80042ac <netif_add+0x184>)
 8004178:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d101      	bne.n	8004184 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8004180:	4b4a      	ldr	r3, [pc, #296]	; (80042ac <netif_add+0x184>)
 8004182:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	4a45      	ldr	r2, [pc, #276]	; (80042b0 <netif_add+0x188>)
 800419a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6a3a      	ldr	r2, [r7, #32]
 80041b4:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80041b6:	4b3f      	ldr	r3, [pc, #252]	; (80042b4 <netif_add+0x18c>)
 80041b8:	781a      	ldrb	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041c4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	68b9      	ldr	r1, [r7, #8]
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f000 f917 	bl	8004400 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80041d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	4798      	blx	r3
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <netif_add+0xba>
    return NULL;
 80041de:	2300      	movs	r3, #0
 80041e0:	e058      	b.n	8004294 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80041e8:	2bff      	cmp	r3, #255	; 0xff
 80041ea:	d103      	bne.n	80041f4 <netif_add+0xcc>
        netif->num = 0;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80041f4:	2300      	movs	r3, #0
 80041f6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80041f8:	4b2f      	ldr	r3, [pc, #188]	; (80042b8 <netif_add+0x190>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	617b      	str	r3, [r7, #20]
 80041fe:	e02b      	b.n	8004258 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	429a      	cmp	r2, r3
 8004206:	d106      	bne.n	8004216 <netif_add+0xee>
 8004208:	4b24      	ldr	r3, [pc, #144]	; (800429c <netif_add+0x174>)
 800420a:	f240 128b 	movw	r2, #395	; 0x18b
 800420e:	492b      	ldr	r1, [pc, #172]	; (80042bc <netif_add+0x194>)
 8004210:	4824      	ldr	r0, [pc, #144]	; (80042a4 <netif_add+0x17c>)
 8004212:	f009 f865 	bl	800d2e0 <iprintf>
        num_netifs++;
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	3301      	adds	r3, #1
 800421a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	2bff      	cmp	r3, #255	; 0xff
 8004220:	dd06      	ble.n	8004230 <netif_add+0x108>
 8004222:	4b1e      	ldr	r3, [pc, #120]	; (800429c <netif_add+0x174>)
 8004224:	f240 128d 	movw	r2, #397	; 0x18d
 8004228:	4925      	ldr	r1, [pc, #148]	; (80042c0 <netif_add+0x198>)
 800422a:	481e      	ldr	r0, [pc, #120]	; (80042a4 <netif_add+0x17c>)
 800422c:	f009 f858 	bl	800d2e0 <iprintf>
        if (netif2->num == netif->num) {
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800423c:	429a      	cmp	r2, r3
 800423e:	d108      	bne.n	8004252 <netif_add+0x12a>
          netif->num++;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004246:	3301      	adds	r3, #1
 8004248:	b2da      	uxtb	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8004250:	e005      	b.n	800425e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	617b      	str	r3, [r7, #20]
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1d0      	bne.n	8004200 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1be      	bne.n	80041e2 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800426a:	2bfe      	cmp	r3, #254	; 0xfe
 800426c:	d103      	bne.n	8004276 <netif_add+0x14e>
    netif_num = 0;
 800426e:	4b11      	ldr	r3, [pc, #68]	; (80042b4 <netif_add+0x18c>)
 8004270:	2200      	movs	r2, #0
 8004272:	701a      	strb	r2, [r3, #0]
 8004274:	e006      	b.n	8004284 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800427c:	3301      	adds	r3, #1
 800427e:	b2da      	uxtb	r2, r3
 8004280:	4b0c      	ldr	r3, [pc, #48]	; (80042b4 <netif_add+0x18c>)
 8004282:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8004284:	4b0c      	ldr	r3, [pc, #48]	; (80042b8 <netif_add+0x190>)
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800428c:	4a0a      	ldr	r2, [pc, #40]	; (80042b8 <netif_add+0x190>)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8004292:	68fb      	ldr	r3, [r7, #12]
}
 8004294:	4618      	mov	r0, r3
 8004296:	3718      	adds	r7, #24
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	0800e734 	.word	0x0800e734
 80042a0:	0800e7c8 	.word	0x0800e7c8
 80042a4:	0800e784 	.word	0x0800e784
 80042a8:	0800e7e4 	.word	0x0800e7e4
 80042ac:	08010f40 	.word	0x08010f40
 80042b0:	080046db 	.word	0x080046db
 80042b4:	200082bc 	.word	0x200082bc
 80042b8:	200082b4 	.word	0x200082b4
 80042bc:	0800e808 	.word	0x0800e808
 80042c0:	0800e81c 	.word	0x0800e81c

080042c4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80042ce:	6839      	ldr	r1, [r7, #0]
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f002 fc13 	bl	8006afc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80042d6:	6839      	ldr	r1, [r7, #0]
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f006 fcb5 	bl	800ac48 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
 80042de:	6839      	ldr	r1, [r7, #0]
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f001 f893 	bl	800540c <raw_netif_ip_addr_changed>
#endif /* LWIP_RAW */
}
 80042e6:	bf00      	nop
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
	...

080042f0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d106      	bne.n	8004310 <netif_do_set_ipaddr+0x20>
 8004302:	4b1d      	ldr	r3, [pc, #116]	; (8004378 <netif_do_set_ipaddr+0x88>)
 8004304:	f240 12cb 	movw	r2, #459	; 0x1cb
 8004308:	491c      	ldr	r1, [pc, #112]	; (800437c <netif_do_set_ipaddr+0x8c>)
 800430a:	481d      	ldr	r0, [pc, #116]	; (8004380 <netif_do_set_ipaddr+0x90>)
 800430c:	f008 ffe8 	bl	800d2e0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d106      	bne.n	8004324 <netif_do_set_ipaddr+0x34>
 8004316:	4b18      	ldr	r3, [pc, #96]	; (8004378 <netif_do_set_ipaddr+0x88>)
 8004318:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800431c:	4917      	ldr	r1, [pc, #92]	; (800437c <netif_do_set_ipaddr+0x8c>)
 800431e:	4818      	ldr	r0, [pc, #96]	; (8004380 <netif_do_set_ipaddr+0x90>)
 8004320:	f008 ffde 	bl	800d2e0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	3304      	adds	r3, #4
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	429a      	cmp	r2, r3
 8004330:	d01c      	beq.n	800436c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	3304      	adds	r3, #4
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8004342:	f107 0314 	add.w	r3, r7, #20
 8004346:	4619      	mov	r1, r3
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f7ff ffbb 	bl	80042c4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d002      	beq.n	800435a <netif_do_set_ipaddr+0x6a>
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	e000      	b.n	800435c <netif_do_set_ipaddr+0x6c>
 800435a:	2300      	movs	r3, #0
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8004360:	2101      	movs	r1, #1
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f000 f8d2 	bl	800450c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8004368:	2301      	movs	r3, #1
 800436a:	e000      	b.n	800436e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3718      	adds	r7, #24
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	0800e734 	.word	0x0800e734
 800437c:	0800e84c 	.word	0x0800e84c
 8004380:	0800e784 	.word	0x0800e784

08004384 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	3308      	adds	r3, #8
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	429a      	cmp	r2, r3
 800439c:	d00a      	beq.n	80043b4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d002      	beq.n	80043aa <netif_do_set_netmask+0x26>
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	e000      	b.n	80043ac <netif_do_set_netmask+0x28>
 80043aa:	2300      	movs	r3, #0
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80043b0:	2301      	movs	r3, #1
 80043b2:	e000      	b.n	80043b6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3714      	adds	r7, #20
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b085      	sub	sp, #20
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	60f8      	str	r0, [r7, #12]
 80043ca:	60b9      	str	r1, [r7, #8]
 80043cc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	330c      	adds	r3, #12
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d00a      	beq.n	80043f2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d002      	beq.n	80043e8 <netif_do_set_gw+0x26>
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	e000      	b.n	80043ea <netif_do_set_gw+0x28>
 80043e8:	2300      	movs	r3, #0
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80043ee:	2301      	movs	r3, #1
 80043f0:	e000      	b.n	80043f4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3714      	adds	r7, #20
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b088      	sub	sp, #32
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
 800440c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800440e:	2300      	movs	r3, #0
 8004410:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8004412:	2300      	movs	r3, #0
 8004414:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d101      	bne.n	8004420 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800441c:	4b1c      	ldr	r3, [pc, #112]	; (8004490 <netif_set_addr+0x90>)
 800441e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8004426:	4b1a      	ldr	r3, [pc, #104]	; (8004490 <netif_set_addr+0x90>)
 8004428:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d101      	bne.n	8004434 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8004430:	4b17      	ldr	r3, [pc, #92]	; (8004490 <netif_set_addr+0x90>)
 8004432:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <netif_set_addr+0x42>
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <netif_set_addr+0x46>
 8004442:	2301      	movs	r3, #1
 8004444:	e000      	b.n	8004448 <netif_set_addr+0x48>
 8004446:	2300      	movs	r3, #0
 8004448:	617b      	str	r3, [r7, #20]
  if (remove) {
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d006      	beq.n	800445e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004450:	f107 0310 	add.w	r3, r7, #16
 8004454:	461a      	mov	r2, r3
 8004456:	68b9      	ldr	r1, [r7, #8]
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f7ff ff49 	bl	80042f0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800445e:	69fa      	ldr	r2, [r7, #28]
 8004460:	6879      	ldr	r1, [r7, #4]
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	f7ff ff8e 	bl	8004384 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	6839      	ldr	r1, [r7, #0]
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f7ff ffa8 	bl	80043c2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d106      	bne.n	8004486 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004478:	f107 0310 	add.w	r3, r7, #16
 800447c:	461a      	mov	r2, r3
 800447e:	68b9      	ldr	r1, [r7, #8]
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f7ff ff35 	bl	80042f0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8004486:	bf00      	nop
 8004488:	3720      	adds	r7, #32
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	08010f40 	.word	0x08010f40

08004494 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800449c:	4a04      	ldr	r2, [pc, #16]	; (80044b0 <netif_set_default+0x1c>)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80044a2:	bf00      	nop
 80044a4:	370c      	adds	r7, #12
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	200082b8 	.word	0x200082b8

080044b4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d107      	bne.n	80044d2 <netif_set_up+0x1e>
 80044c2:	4b0f      	ldr	r3, [pc, #60]	; (8004500 <netif_set_up+0x4c>)
 80044c4:	f44f 7254 	mov.w	r2, #848	; 0x350
 80044c8:	490e      	ldr	r1, [pc, #56]	; (8004504 <netif_set_up+0x50>)
 80044ca:	480f      	ldr	r0, [pc, #60]	; (8004508 <netif_set_up+0x54>)
 80044cc:	f008 ff08 	bl	800d2e0 <iprintf>
 80044d0:	e013      	b.n	80044fa <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d10c      	bne.n	80044fa <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80044e6:	f043 0301 	orr.w	r3, r3, #1
 80044ea:	b2da      	uxtb	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80044f2:	2103      	movs	r1, #3
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 f809 	bl	800450c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80044fa:	3708      	adds	r7, #8
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	0800e734 	.word	0x0800e734
 8004504:	0800e8bc 	.word	0x0800e8bc
 8004508:	0800e784 	.word	0x0800e784

0800450c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	460b      	mov	r3, r1
 8004516:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d106      	bne.n	800452c <netif_issue_reports+0x20>
 800451e:	4b18      	ldr	r3, [pc, #96]	; (8004580 <netif_issue_reports+0x74>)
 8004520:	f240 326d 	movw	r2, #877	; 0x36d
 8004524:	4917      	ldr	r1, [pc, #92]	; (8004584 <netif_issue_reports+0x78>)
 8004526:	4818      	ldr	r0, [pc, #96]	; (8004588 <netif_issue_reports+0x7c>)
 8004528:	f008 feda 	bl	800d2e0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004532:	f003 0304 	and.w	r3, r3, #4
 8004536:	2b00      	cmp	r3, #0
 8004538:	d01e      	beq.n	8004578 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004540:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004544:	2b00      	cmp	r3, #0
 8004546:	d017      	beq.n	8004578 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004548:	78fb      	ldrb	r3, [r7, #3]
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d013      	beq.n	800457a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	3304      	adds	r3, #4
 8004556:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00e      	beq.n	800457a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004562:	f003 0308 	and.w	r3, r3, #8
 8004566:	2b00      	cmp	r3, #0
 8004568:	d007      	beq.n	800457a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	3304      	adds	r3, #4
 800456e:	4619      	mov	r1, r3
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f007 fad3 	bl	800bb1c <etharp_request>
 8004576:	e000      	b.n	800457a <netif_issue_reports+0x6e>
    return;
 8004578:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800457a:	3708      	adds	r7, #8
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	0800e734 	.word	0x0800e734
 8004584:	0800e8d8 	.word	0x0800e8d8
 8004588:	0800e784 	.word	0x0800e784

0800458c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d107      	bne.n	80045aa <netif_set_down+0x1e>
 800459a:	4b12      	ldr	r3, [pc, #72]	; (80045e4 <netif_set_down+0x58>)
 800459c:	f240 329b 	movw	r2, #923	; 0x39b
 80045a0:	4911      	ldr	r1, [pc, #68]	; (80045e8 <netif_set_down+0x5c>)
 80045a2:	4812      	ldr	r0, [pc, #72]	; (80045ec <netif_set_down+0x60>)
 80045a4:	f008 fe9c 	bl	800d2e0 <iprintf>
 80045a8:	e019      	b.n	80045de <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d012      	beq.n	80045de <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80045be:	f023 0301 	bic.w	r3, r3, #1
 80045c2:	b2da      	uxtb	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80045d0:	f003 0308 	and.w	r3, r3, #8
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d002      	beq.n	80045de <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f006 fe5d 	bl	800b298 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80045de:	3708      	adds	r7, #8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	0800e734 	.word	0x0800e734
 80045e8:	0800e8fc 	.word	0x0800e8fc
 80045ec:	0800e784 	.word	0x0800e784

080045f0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d107      	bne.n	800460e <netif_set_link_up+0x1e>
 80045fe:	4b13      	ldr	r3, [pc, #76]	; (800464c <netif_set_link_up+0x5c>)
 8004600:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8004604:	4912      	ldr	r1, [pc, #72]	; (8004650 <netif_set_link_up+0x60>)
 8004606:	4813      	ldr	r0, [pc, #76]	; (8004654 <netif_set_link_up+0x64>)
 8004608:	f008 fe6a 	bl	800d2e0 <iprintf>
 800460c:	e01b      	b.n	8004646 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004614:	f003 0304 	and.w	r3, r3, #4
 8004618:	2b00      	cmp	r3, #0
 800461a:	d114      	bne.n	8004646 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004622:	f043 0304 	orr.w	r3, r3, #4
 8004626:	b2da      	uxtb	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800462e:	2103      	movs	r1, #3
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f7ff ff6b 	bl	800450c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	69db      	ldr	r3, [r3, #28]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d003      	beq.n	8004646 <netif_set_link_up+0x56>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	69db      	ldr	r3, [r3, #28]
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	0800e734 	.word	0x0800e734
 8004650:	0800e91c 	.word	0x0800e91c
 8004654:	0800e784 	.word	0x0800e784

08004658 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d107      	bne.n	8004676 <netif_set_link_down+0x1e>
 8004666:	4b11      	ldr	r3, [pc, #68]	; (80046ac <netif_set_link_down+0x54>)
 8004668:	f240 4206 	movw	r2, #1030	; 0x406
 800466c:	4910      	ldr	r1, [pc, #64]	; (80046b0 <netif_set_link_down+0x58>)
 800466e:	4811      	ldr	r0, [pc, #68]	; (80046b4 <netif_set_link_down+0x5c>)
 8004670:	f008 fe36 	bl	800d2e0 <iprintf>
 8004674:	e017      	b.n	80046a6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800467c:	f003 0304 	and.w	r3, r3, #4
 8004680:	2b00      	cmp	r3, #0
 8004682:	d010      	beq.n	80046a6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800468a:	f023 0304 	bic.w	r3, r3, #4
 800468e:	b2da      	uxtb	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d003      	beq.n	80046a6 <netif_set_link_down+0x4e>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80046a6:	3708      	adds	r7, #8
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	0800e734 	.word	0x0800e734
 80046b0:	0800e940 	.word	0x0800e940
 80046b4:	0800e784 	.word	0x0800e784

080046b8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d002      	beq.n	80046ce <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	61da      	str	r2, [r3, #28]
  }
}
 80046ce:	bf00      	nop
 80046d0:	370c      	adds	r7, #12
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr

080046da <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80046da:	b480      	push	{r7}
 80046dc:	b085      	sub	sp, #20
 80046de:	af00      	add	r7, sp, #0
 80046e0:	60f8      	str	r0, [r7, #12]
 80046e2:	60b9      	str	r1, [r7, #8]
 80046e4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80046e6:	f06f 030b 	mvn.w	r3, #11
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3714      	adds	r7, #20
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
	...

080046f8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	4603      	mov	r3, r0
 8004700:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8004702:	79fb      	ldrb	r3, [r7, #7]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d013      	beq.n	8004730 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8004708:	4b0d      	ldr	r3, [pc, #52]	; (8004740 <netif_get_by_index+0x48>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	60fb      	str	r3, [r7, #12]
 800470e:	e00c      	b.n	800472a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004716:	3301      	adds	r3, #1
 8004718:	b2db      	uxtb	r3, r3
 800471a:	79fa      	ldrb	r2, [r7, #7]
 800471c:	429a      	cmp	r2, r3
 800471e:	d101      	bne.n	8004724 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	e006      	b.n	8004732 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	60fb      	str	r3, [r7, #12]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1ef      	bne.n	8004710 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3714      	adds	r7, #20
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	200082b4 	.word	0x200082b4

08004744 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8004744:	b480      	push	{r7}
 8004746:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8004748:	4b03      	ldr	r3, [pc, #12]	; (8004758 <pbuf_pool_is_empty+0x14>)
 800474a:	2201      	movs	r2, #1
 800474c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800474e:	bf00      	nop
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr
 8004758:	200082bd 	.word	0x200082bd

0800475c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800475c:	b480      	push	{r7}
 800475e:	b085      	sub	sp, #20
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	4611      	mov	r1, r2
 8004768:	461a      	mov	r2, r3
 800476a:	460b      	mov	r3, r1
 800476c:	80fb      	strh	r3, [r7, #6]
 800476e:	4613      	mov	r3, r2
 8004770:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	88fa      	ldrh	r2, [r7, #6]
 8004782:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	88ba      	ldrh	r2, [r7, #4]
 8004788:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800478a:	8b3b      	ldrh	r3, [r7, #24]
 800478c:	b2da      	uxtb	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	7f3a      	ldrb	r2, [r7, #28]
 8004796:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2201      	movs	r2, #1
 800479c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	73da      	strb	r2, [r3, #15]
}
 80047a4:	bf00      	nop
 80047a6:	3714      	adds	r7, #20
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b08c      	sub	sp, #48	; 0x30
 80047b4:	af02      	add	r7, sp, #8
 80047b6:	4603      	mov	r3, r0
 80047b8:	71fb      	strb	r3, [r7, #7]
 80047ba:	460b      	mov	r3, r1
 80047bc:	80bb      	strh	r3, [r7, #4]
 80047be:	4613      	mov	r3, r2
 80047c0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80047c2:	79fb      	ldrb	r3, [r7, #7]
 80047c4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80047c6:	887b      	ldrh	r3, [r7, #2]
 80047c8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80047cc:	d07f      	beq.n	80048ce <pbuf_alloc+0x11e>
 80047ce:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80047d2:	f300 80c8 	bgt.w	8004966 <pbuf_alloc+0x1b6>
 80047d6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80047da:	d010      	beq.n	80047fe <pbuf_alloc+0x4e>
 80047dc:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80047e0:	f300 80c1 	bgt.w	8004966 <pbuf_alloc+0x1b6>
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d002      	beq.n	80047ee <pbuf_alloc+0x3e>
 80047e8:	2b41      	cmp	r3, #65	; 0x41
 80047ea:	f040 80bc 	bne.w	8004966 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80047ee:	887a      	ldrh	r2, [r7, #2]
 80047f0:	88bb      	ldrh	r3, [r7, #4]
 80047f2:	4619      	mov	r1, r3
 80047f4:	2000      	movs	r0, #0
 80047f6:	f000 f8d1 	bl	800499c <pbuf_alloc_reference>
 80047fa:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80047fc:	e0bd      	b.n	800497a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80047fe:	2300      	movs	r3, #0
 8004800:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8004802:	2300      	movs	r3, #0
 8004804:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8004806:	88bb      	ldrh	r3, [r7, #4]
 8004808:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800480a:	2009      	movs	r0, #9
 800480c:	f7ff fbea 	bl	8003fe4 <memp_malloc>
 8004810:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d109      	bne.n	800482c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8004818:	f7ff ff94 	bl	8004744 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481e:	2b00      	cmp	r3, #0
 8004820:	d002      	beq.n	8004828 <pbuf_alloc+0x78>
            pbuf_free(p);
 8004822:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004824:	f000 faa8 	bl	8004d78 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8004828:	2300      	movs	r3, #0
 800482a:	e0a7      	b.n	800497c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800482c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800482e:	3303      	adds	r3, #3
 8004830:	b29b      	uxth	r3, r3
 8004832:	f023 0303 	bic.w	r3, r3, #3
 8004836:	b29b      	uxth	r3, r3
 8004838:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800483c:	b29b      	uxth	r3, r3
 800483e:	8b7a      	ldrh	r2, [r7, #26]
 8004840:	4293      	cmp	r3, r2
 8004842:	bf28      	it	cs
 8004844:	4613      	movcs	r3, r2
 8004846:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8004848:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800484a:	3310      	adds	r3, #16
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	4413      	add	r3, r2
 8004850:	3303      	adds	r3, #3
 8004852:	f023 0303 	bic.w	r3, r3, #3
 8004856:	4618      	mov	r0, r3
 8004858:	89f9      	ldrh	r1, [r7, #14]
 800485a:	8b7a      	ldrh	r2, [r7, #26]
 800485c:	2300      	movs	r3, #0
 800485e:	9301      	str	r3, [sp, #4]
 8004860:	887b      	ldrh	r3, [r7, #2]
 8004862:	9300      	str	r3, [sp, #0]
 8004864:	460b      	mov	r3, r1
 8004866:	4601      	mov	r1, r0
 8004868:	6938      	ldr	r0, [r7, #16]
 800486a:	f7ff ff77 	bl	800475c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f003 0303 	and.w	r3, r3, #3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d006      	beq.n	8004888 <pbuf_alloc+0xd8>
 800487a:	4b42      	ldr	r3, [pc, #264]	; (8004984 <pbuf_alloc+0x1d4>)
 800487c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004880:	4941      	ldr	r1, [pc, #260]	; (8004988 <pbuf_alloc+0x1d8>)
 8004882:	4842      	ldr	r0, [pc, #264]	; (800498c <pbuf_alloc+0x1dc>)
 8004884:	f008 fd2c 	bl	800d2e0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8004888:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800488a:	3303      	adds	r3, #3
 800488c:	f023 0303 	bic.w	r3, r3, #3
 8004890:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8004894:	d106      	bne.n	80048a4 <pbuf_alloc+0xf4>
 8004896:	4b3b      	ldr	r3, [pc, #236]	; (8004984 <pbuf_alloc+0x1d4>)
 8004898:	f44f 7281 	mov.w	r2, #258	; 0x102
 800489c:	493c      	ldr	r1, [pc, #240]	; (8004990 <pbuf_alloc+0x1e0>)
 800489e:	483b      	ldr	r0, [pc, #236]	; (800498c <pbuf_alloc+0x1dc>)
 80048a0:	f008 fd1e 	bl	800d2e0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80048a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d102      	bne.n	80048b0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	627b      	str	r3, [r7, #36]	; 0x24
 80048ae:	e002      	b.n	80048b6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80048ba:	8b7a      	ldrh	r2, [r7, #26]
 80048bc:	89fb      	ldrh	r3, [r7, #14]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80048c2:	2300      	movs	r3, #0
 80048c4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80048c6:	8b7b      	ldrh	r3, [r7, #26]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d19e      	bne.n	800480a <pbuf_alloc+0x5a>
      break;
 80048cc:	e055      	b.n	800497a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80048ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80048d0:	3303      	adds	r3, #3
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	f023 0303 	bic.w	r3, r3, #3
 80048d8:	b29a      	uxth	r2, r3
 80048da:	88bb      	ldrh	r3, [r7, #4]
 80048dc:	3303      	adds	r3, #3
 80048de:	b29b      	uxth	r3, r3
 80048e0:	f023 0303 	bic.w	r3, r3, #3
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	4413      	add	r3, r2
 80048e8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80048ea:	8b3b      	ldrh	r3, [r7, #24]
 80048ec:	3310      	adds	r3, #16
 80048ee:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80048f0:	8b3a      	ldrh	r2, [r7, #24]
 80048f2:	88bb      	ldrh	r3, [r7, #4]
 80048f4:	3303      	adds	r3, #3
 80048f6:	f023 0303 	bic.w	r3, r3, #3
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d306      	bcc.n	800490c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80048fe:	8afa      	ldrh	r2, [r7, #22]
 8004900:	88bb      	ldrh	r3, [r7, #4]
 8004902:	3303      	adds	r3, #3
 8004904:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8004908:	429a      	cmp	r2, r3
 800490a:	d201      	bcs.n	8004910 <pbuf_alloc+0x160>
        return NULL;
 800490c:	2300      	movs	r3, #0
 800490e:	e035      	b.n	800497c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8004910:	8afb      	ldrh	r3, [r7, #22]
 8004912:	4618      	mov	r0, r3
 8004914:	f7ff f9d6 	bl	8003cc4 <mem_malloc>
 8004918:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800491a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491c:	2b00      	cmp	r3, #0
 800491e:	d101      	bne.n	8004924 <pbuf_alloc+0x174>
        return NULL;
 8004920:	2300      	movs	r3, #0
 8004922:	e02b      	b.n	800497c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8004924:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004926:	3310      	adds	r3, #16
 8004928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800492a:	4413      	add	r3, r2
 800492c:	3303      	adds	r3, #3
 800492e:	f023 0303 	bic.w	r3, r3, #3
 8004932:	4618      	mov	r0, r3
 8004934:	88b9      	ldrh	r1, [r7, #4]
 8004936:	88ba      	ldrh	r2, [r7, #4]
 8004938:	2300      	movs	r3, #0
 800493a:	9301      	str	r3, [sp, #4]
 800493c:	887b      	ldrh	r3, [r7, #2]
 800493e:	9300      	str	r3, [sp, #0]
 8004940:	460b      	mov	r3, r1
 8004942:	4601      	mov	r1, r0
 8004944:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004946:	f7ff ff09 	bl	800475c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f003 0303 	and.w	r3, r3, #3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d010      	beq.n	8004978 <pbuf_alloc+0x1c8>
 8004956:	4b0b      	ldr	r3, [pc, #44]	; (8004984 <pbuf_alloc+0x1d4>)
 8004958:	f44f 7291 	mov.w	r2, #290	; 0x122
 800495c:	490d      	ldr	r1, [pc, #52]	; (8004994 <pbuf_alloc+0x1e4>)
 800495e:	480b      	ldr	r0, [pc, #44]	; (800498c <pbuf_alloc+0x1dc>)
 8004960:	f008 fcbe 	bl	800d2e0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8004964:	e008      	b.n	8004978 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8004966:	4b07      	ldr	r3, [pc, #28]	; (8004984 <pbuf_alloc+0x1d4>)
 8004968:	f240 1227 	movw	r2, #295	; 0x127
 800496c:	490a      	ldr	r1, [pc, #40]	; (8004998 <pbuf_alloc+0x1e8>)
 800496e:	4807      	ldr	r0, [pc, #28]	; (800498c <pbuf_alloc+0x1dc>)
 8004970:	f008 fcb6 	bl	800d2e0 <iprintf>
      return NULL;
 8004974:	2300      	movs	r3, #0
 8004976:	e001      	b.n	800497c <pbuf_alloc+0x1cc>
      break;
 8004978:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800497c:	4618      	mov	r0, r3
 800497e:	3728      	adds	r7, #40	; 0x28
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	0800e964 	.word	0x0800e964
 8004988:	0800e994 	.word	0x0800e994
 800498c:	0800e9c4 	.word	0x0800e9c4
 8004990:	0800e9ec 	.word	0x0800e9ec
 8004994:	0800ea20 	.word	0x0800ea20
 8004998:	0800ea4c 	.word	0x0800ea4c

0800499c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af02      	add	r7, sp, #8
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	460b      	mov	r3, r1
 80049a6:	807b      	strh	r3, [r7, #2]
 80049a8:	4613      	mov	r3, r2
 80049aa:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80049ac:	883b      	ldrh	r3, [r7, #0]
 80049ae:	2b41      	cmp	r3, #65	; 0x41
 80049b0:	d009      	beq.n	80049c6 <pbuf_alloc_reference+0x2a>
 80049b2:	883b      	ldrh	r3, [r7, #0]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d006      	beq.n	80049c6 <pbuf_alloc_reference+0x2a>
 80049b8:	4b0f      	ldr	r3, [pc, #60]	; (80049f8 <pbuf_alloc_reference+0x5c>)
 80049ba:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80049be:	490f      	ldr	r1, [pc, #60]	; (80049fc <pbuf_alloc_reference+0x60>)
 80049c0:	480f      	ldr	r0, [pc, #60]	; (8004a00 <pbuf_alloc_reference+0x64>)
 80049c2:	f008 fc8d 	bl	800d2e0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80049c6:	2008      	movs	r0, #8
 80049c8:	f7ff fb0c 	bl	8003fe4 <memp_malloc>
 80049cc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d101      	bne.n	80049d8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80049d4:	2300      	movs	r3, #0
 80049d6:	e00b      	b.n	80049f0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80049d8:	8879      	ldrh	r1, [r7, #2]
 80049da:	887a      	ldrh	r2, [r7, #2]
 80049dc:	2300      	movs	r3, #0
 80049de:	9301      	str	r3, [sp, #4]
 80049e0:	883b      	ldrh	r3, [r7, #0]
 80049e2:	9300      	str	r3, [sp, #0]
 80049e4:	460b      	mov	r3, r1
 80049e6:	6879      	ldr	r1, [r7, #4]
 80049e8:	68f8      	ldr	r0, [r7, #12]
 80049ea:	f7ff feb7 	bl	800475c <pbuf_init_alloced_pbuf>
  return p;
 80049ee:	68fb      	ldr	r3, [r7, #12]
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	0800e964 	.word	0x0800e964
 80049fc:	0800ea68 	.word	0x0800ea68
 8004a00:	0800e9c4 	.word	0x0800e9c4

08004a04 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b088      	sub	sp, #32
 8004a08:	af02      	add	r7, sp, #8
 8004a0a:	607b      	str	r3, [r7, #4]
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	73fb      	strb	r3, [r7, #15]
 8004a10:	460b      	mov	r3, r1
 8004a12:	81bb      	strh	r3, [r7, #12]
 8004a14:	4613      	mov	r3, r2
 8004a16:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8004a18:	7bfb      	ldrb	r3, [r7, #15]
 8004a1a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8004a1c:	8a7b      	ldrh	r3, [r7, #18]
 8004a1e:	3303      	adds	r3, #3
 8004a20:	f023 0203 	bic.w	r2, r3, #3
 8004a24:	89bb      	ldrh	r3, [r7, #12]
 8004a26:	441a      	add	r2, r3
 8004a28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d901      	bls.n	8004a32 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	e018      	b.n	8004a64 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8004a32:	6a3b      	ldr	r3, [r7, #32]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d007      	beq.n	8004a48 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8004a38:	8a7b      	ldrh	r3, [r7, #18]
 8004a3a:	3303      	adds	r3, #3
 8004a3c:	f023 0303 	bic.w	r3, r3, #3
 8004a40:	6a3a      	ldr	r2, [r7, #32]
 8004a42:	4413      	add	r3, r2
 8004a44:	617b      	str	r3, [r7, #20]
 8004a46:	e001      	b.n	8004a4c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	89b9      	ldrh	r1, [r7, #12]
 8004a50:	89ba      	ldrh	r2, [r7, #12]
 8004a52:	2302      	movs	r3, #2
 8004a54:	9301      	str	r3, [sp, #4]
 8004a56:	897b      	ldrh	r3, [r7, #10]
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	6979      	ldr	r1, [r7, #20]
 8004a5e:	f7ff fe7d 	bl	800475c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8004a62:	687b      	ldr	r3, [r7, #4]
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3718      	adds	r7, #24
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	460b      	mov	r3, r1
 8004a76:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d106      	bne.n	8004a8c <pbuf_realloc+0x20>
 8004a7e:	4b3a      	ldr	r3, [pc, #232]	; (8004b68 <pbuf_realloc+0xfc>)
 8004a80:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8004a84:	4939      	ldr	r1, [pc, #228]	; (8004b6c <pbuf_realloc+0x100>)
 8004a86:	483a      	ldr	r0, [pc, #232]	; (8004b70 <pbuf_realloc+0x104>)
 8004a88:	f008 fc2a 	bl	800d2e0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	891b      	ldrh	r3, [r3, #8]
 8004a90:	887a      	ldrh	r2, [r7, #2]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d263      	bcs.n	8004b5e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	891a      	ldrh	r2, [r3, #8]
 8004a9a:	887b      	ldrh	r3, [r7, #2]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8004aa0:	887b      	ldrh	r3, [r7, #2]
 8004aa2:	817b      	strh	r3, [r7, #10]
  q = p;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8004aa8:	e018      	b.n	8004adc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	895b      	ldrh	r3, [r3, #10]
 8004aae:	897a      	ldrh	r2, [r7, #10]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	891a      	ldrh	r2, [r3, #8]
 8004ab8:	893b      	ldrh	r3, [r7, #8]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d106      	bne.n	8004adc <pbuf_realloc+0x70>
 8004ace:	4b26      	ldr	r3, [pc, #152]	; (8004b68 <pbuf_realloc+0xfc>)
 8004ad0:	f240 12af 	movw	r2, #431	; 0x1af
 8004ad4:	4927      	ldr	r1, [pc, #156]	; (8004b74 <pbuf_realloc+0x108>)
 8004ad6:	4826      	ldr	r0, [pc, #152]	; (8004b70 <pbuf_realloc+0x104>)
 8004ad8:	f008 fc02 	bl	800d2e0 <iprintf>
  while (rem_len > q->len) {
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	895b      	ldrh	r3, [r3, #10]
 8004ae0:	897a      	ldrh	r2, [r7, #10]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d8e1      	bhi.n	8004aaa <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	7b1b      	ldrb	r3, [r3, #12]
 8004aea:	f003 030f 	and.w	r3, r3, #15
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d121      	bne.n	8004b36 <pbuf_realloc+0xca>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	895b      	ldrh	r3, [r3, #10]
 8004af6:	897a      	ldrh	r2, [r7, #10]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d01c      	beq.n	8004b36 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	7b5b      	ldrb	r3, [r3, #13]
 8004b00:	f003 0302 	and.w	r3, r3, #2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d116      	bne.n	8004b36 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	685a      	ldr	r2, [r3, #4]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	897b      	ldrh	r3, [r7, #10]
 8004b14:	4413      	add	r3, r2
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	4619      	mov	r1, r3
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f7fe ffd6 	bl	8003acc <mem_trim>
 8004b20:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d106      	bne.n	8004b36 <pbuf_realloc+0xca>
 8004b28:	4b0f      	ldr	r3, [pc, #60]	; (8004b68 <pbuf_realloc+0xfc>)
 8004b2a:	f240 12bd 	movw	r2, #445	; 0x1bd
 8004b2e:	4912      	ldr	r1, [pc, #72]	; (8004b78 <pbuf_realloc+0x10c>)
 8004b30:	480f      	ldr	r0, [pc, #60]	; (8004b70 <pbuf_realloc+0x104>)
 8004b32:	f008 fbd5 	bl	800d2e0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	897a      	ldrh	r2, [r7, #10]
 8004b3a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	895a      	ldrh	r2, [r3, #10]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d004      	beq.n	8004b56 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4618      	mov	r0, r3
 8004b52:	f000 f911 	bl	8004d78 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	e000      	b.n	8004b60 <pbuf_realloc+0xf4>
    return;
 8004b5e:	bf00      	nop

}
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	0800e964 	.word	0x0800e964
 8004b6c:	0800ea7c 	.word	0x0800ea7c
 8004b70:	0800e9c4 	.word	0x0800e9c4
 8004b74:	0800ea94 	.word	0x0800ea94
 8004b78:	0800eaac 	.word	0x0800eaac

08004b7c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b086      	sub	sp, #24
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	4613      	mov	r3, r2
 8004b88:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d106      	bne.n	8004b9e <pbuf_add_header_impl+0x22>
 8004b90:	4b2b      	ldr	r3, [pc, #172]	; (8004c40 <pbuf_add_header_impl+0xc4>)
 8004b92:	f240 12df 	movw	r2, #479	; 0x1df
 8004b96:	492b      	ldr	r1, [pc, #172]	; (8004c44 <pbuf_add_header_impl+0xc8>)
 8004b98:	482b      	ldr	r0, [pc, #172]	; (8004c48 <pbuf_add_header_impl+0xcc>)
 8004b9a:	f008 fba1 	bl	800d2e0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d003      	beq.n	8004bac <pbuf_add_header_impl+0x30>
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004baa:	d301      	bcc.n	8004bb0 <pbuf_add_header_impl+0x34>
    return 1;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e043      	b.n	8004c38 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <pbuf_add_header_impl+0x3e>
    return 0;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	e03e      	b.n	8004c38 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	891a      	ldrh	r2, [r3, #8]
 8004bc2:	8a7b      	ldrh	r3, [r7, #18]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	8a7a      	ldrh	r2, [r7, #18]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d901      	bls.n	8004bd2 <pbuf_add_header_impl+0x56>
    return 1;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e032      	b.n	8004c38 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	7b1b      	ldrb	r3, [r3, #12]
 8004bd6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8004bd8:	8a3b      	ldrh	r3, [r7, #16]
 8004bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00c      	beq.n	8004bfc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	425b      	negs	r3, r3
 8004bea:	4413      	add	r3, r2
 8004bec:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	3310      	adds	r3, #16
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d20d      	bcs.n	8004c14 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e01d      	b.n	8004c38 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8004bfc:	79fb      	ldrb	r3, [r7, #7]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d006      	beq.n	8004c10 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	685a      	ldr	r2, [r3, #4]
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	425b      	negs	r3, r3
 8004c0a:	4413      	add	r3, r2
 8004c0c:	617b      	str	r3, [r7, #20]
 8004c0e:	e001      	b.n	8004c14 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e011      	b.n	8004c38 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	895a      	ldrh	r2, [r3, #10]
 8004c1e:	8a7b      	ldrh	r3, [r7, #18]
 8004c20:	4413      	add	r3, r2
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	891a      	ldrh	r2, [r3, #8]
 8004c2c:	8a7b      	ldrh	r3, [r7, #18]
 8004c2e:	4413      	add	r3, r2
 8004c30:	b29a      	uxth	r2, r3
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	811a      	strh	r2, [r3, #8]


  return 0;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3718      	adds	r7, #24
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	0800e964 	.word	0x0800e964
 8004c44:	0800eac8 	.word	0x0800eac8
 8004c48:	0800e9c4 	.word	0x0800e9c4

08004c4c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8004c56:	2200      	movs	r2, #0
 8004c58:	6839      	ldr	r1, [r7, #0]
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f7ff ff8e 	bl	8004b7c <pbuf_add_header_impl>
 8004c60:	4603      	mov	r3, r0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3708      	adds	r7, #8
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
	...

08004c6c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d106      	bne.n	8004c8a <pbuf_remove_header+0x1e>
 8004c7c:	4b20      	ldr	r3, [pc, #128]	; (8004d00 <pbuf_remove_header+0x94>)
 8004c7e:	f240 224b 	movw	r2, #587	; 0x24b
 8004c82:	4920      	ldr	r1, [pc, #128]	; (8004d04 <pbuf_remove_header+0x98>)
 8004c84:	4820      	ldr	r0, [pc, #128]	; (8004d08 <pbuf_remove_header+0x9c>)
 8004c86:	f008 fb2b 	bl	800d2e0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d003      	beq.n	8004c98 <pbuf_remove_header+0x2c>
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c96:	d301      	bcc.n	8004c9c <pbuf_remove_header+0x30>
    return 1;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e02c      	b.n	8004cf6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <pbuf_remove_header+0x3a>
    return 0;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	e027      	b.n	8004cf6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	895b      	ldrh	r3, [r3, #10]
 8004cae:	89fa      	ldrh	r2, [r7, #14]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d908      	bls.n	8004cc6 <pbuf_remove_header+0x5a>
 8004cb4:	4b12      	ldr	r3, [pc, #72]	; (8004d00 <pbuf_remove_header+0x94>)
 8004cb6:	f240 2255 	movw	r2, #597	; 0x255
 8004cba:	4914      	ldr	r1, [pc, #80]	; (8004d0c <pbuf_remove_header+0xa0>)
 8004cbc:	4812      	ldr	r0, [pc, #72]	; (8004d08 <pbuf_remove_header+0x9c>)
 8004cbe:	f008 fb0f 	bl	800d2e0 <iprintf>
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e017      	b.n	8004cf6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685a      	ldr	r2, [r3, #4]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	441a      	add	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	895a      	ldrh	r2, [r3, #10]
 8004cdc:	89fb      	ldrh	r3, [r7, #14]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	b29a      	uxth	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	891a      	ldrh	r2, [r3, #8]
 8004cea:	89fb      	ldrh	r3, [r7, #14]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3710      	adds	r7, #16
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	0800e964 	.word	0x0800e964
 8004d04:	0800eac8 	.word	0x0800eac8
 8004d08:	0800e9c4 	.word	0x0800e9c4
 8004d0c:	0800ead4 	.word	0x0800ead4

08004d10 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	460b      	mov	r3, r1
 8004d1a:	807b      	strh	r3, [r7, #2]
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8004d20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	da08      	bge.n	8004d3a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8004d28:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004d2c:	425b      	negs	r3, r3
 8004d2e:	4619      	mov	r1, r3
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f7ff ff9b 	bl	8004c6c <pbuf_remove_header>
 8004d36:	4603      	mov	r3, r0
 8004d38:	e007      	b.n	8004d4a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8004d3a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004d3e:	787a      	ldrb	r2, [r7, #1]
 8004d40:	4619      	mov	r1, r3
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f7ff ff1a 	bl	8004b7c <pbuf_add_header_impl>
 8004d48:	4603      	mov	r3, r0
  }
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3708      	adds	r7, #8
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b082      	sub	sp, #8
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8004d5e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004d62:	2201      	movs	r2, #1
 8004d64:	4619      	mov	r1, r3
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f7ff ffd2 	bl	8004d10 <pbuf_header_impl>
 8004d6c:	4603      	mov	r3, r0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
	...

08004d78 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b086      	sub	sp, #24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10b      	bne.n	8004d9e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d106      	bne.n	8004d9a <pbuf_free+0x22>
 8004d8c:	4b38      	ldr	r3, [pc, #224]	; (8004e70 <pbuf_free+0xf8>)
 8004d8e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8004d92:	4938      	ldr	r1, [pc, #224]	; (8004e74 <pbuf_free+0xfc>)
 8004d94:	4838      	ldr	r0, [pc, #224]	; (8004e78 <pbuf_free+0x100>)
 8004d96:	f008 faa3 	bl	800d2e0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	e063      	b.n	8004e66 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8004da2:	e05c      	b.n	8004e5e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	7b9b      	ldrb	r3, [r3, #14]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d106      	bne.n	8004dba <pbuf_free+0x42>
 8004dac:	4b30      	ldr	r3, [pc, #192]	; (8004e70 <pbuf_free+0xf8>)
 8004dae:	f240 22f1 	movw	r2, #753	; 0x2f1
 8004db2:	4932      	ldr	r1, [pc, #200]	; (8004e7c <pbuf_free+0x104>)
 8004db4:	4830      	ldr	r0, [pc, #192]	; (8004e78 <pbuf_free+0x100>)
 8004db6:	f008 fa93 	bl	800d2e0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	7b9b      	ldrb	r3, [r3, #14]
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	b2da      	uxtb	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	739a      	strb	r2, [r3, #14]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	7b9b      	ldrb	r3, [r3, #14]
 8004dca:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8004dcc:	7dbb      	ldrb	r3, [r7, #22]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d143      	bne.n	8004e5a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	7b1b      	ldrb	r3, [r3, #12]
 8004ddc:	f003 030f 	and.w	r3, r3, #15
 8004de0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	7b5b      	ldrb	r3, [r3, #13]
 8004de6:	f003 0302 	and.w	r3, r3, #2
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d011      	beq.n	8004e12 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d106      	bne.n	8004e08 <pbuf_free+0x90>
 8004dfa:	4b1d      	ldr	r3, [pc, #116]	; (8004e70 <pbuf_free+0xf8>)
 8004dfc:	f240 22ff 	movw	r2, #767	; 0x2ff
 8004e00:	491f      	ldr	r1, [pc, #124]	; (8004e80 <pbuf_free+0x108>)
 8004e02:	481d      	ldr	r0, [pc, #116]	; (8004e78 <pbuf_free+0x100>)
 8004e04:	f008 fa6c 	bl	800d2e0 <iprintf>
        pc->custom_free_function(p);
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	4798      	blx	r3
 8004e10:	e01d      	b.n	8004e4e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8004e12:	7bfb      	ldrb	r3, [r7, #15]
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d104      	bne.n	8004e22 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8004e18:	6879      	ldr	r1, [r7, #4]
 8004e1a:	2009      	movs	r0, #9
 8004e1c:	f7ff f952 	bl	80040c4 <memp_free>
 8004e20:	e015      	b.n	8004e4e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8004e22:	7bfb      	ldrb	r3, [r7, #15]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d104      	bne.n	8004e32 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8004e28:	6879      	ldr	r1, [r7, #4]
 8004e2a:	2008      	movs	r0, #8
 8004e2c:	f7ff f94a 	bl	80040c4 <memp_free>
 8004e30:	e00d      	b.n	8004e4e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8004e32:	7bfb      	ldrb	r3, [r7, #15]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d103      	bne.n	8004e40 <pbuf_free+0xc8>
          mem_free(p);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f7fe fddd 	bl	80039f8 <mem_free>
 8004e3e:	e006      	b.n	8004e4e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8004e40:	4b0b      	ldr	r3, [pc, #44]	; (8004e70 <pbuf_free+0xf8>)
 8004e42:	f240 320f 	movw	r2, #783	; 0x30f
 8004e46:	490f      	ldr	r1, [pc, #60]	; (8004e84 <pbuf_free+0x10c>)
 8004e48:	480b      	ldr	r0, [pc, #44]	; (8004e78 <pbuf_free+0x100>)
 8004e4a:	f008 fa49 	bl	800d2e0 <iprintf>
        }
      }
      count++;
 8004e4e:	7dfb      	ldrb	r3, [r7, #23]
 8004e50:	3301      	adds	r3, #1
 8004e52:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	607b      	str	r3, [r7, #4]
 8004e58:	e001      	b.n	8004e5e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d19f      	bne.n	8004da4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8004e64:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3718      	adds	r7, #24
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	0800e964 	.word	0x0800e964
 8004e74:	0800eac8 	.word	0x0800eac8
 8004e78:	0800e9c4 	.word	0x0800e9c4
 8004e7c:	0800eaf4 	.word	0x0800eaf4
 8004e80:	0800eb0c 	.word	0x0800eb0c
 8004e84:	0800eb30 	.word	0x0800eb30

08004e88 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8004e90:	2300      	movs	r3, #0
 8004e92:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8004e94:	e005      	b.n	8004ea2 <pbuf_clen+0x1a>
    ++len;
 8004e96:	89fb      	ldrh	r3, [r7, #14]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1f6      	bne.n	8004e96 <pbuf_clen+0xe>
  }
  return len;
 8004ea8:	89fb      	ldrh	r3, [r7, #14]
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3714      	adds	r7, #20
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
	...

08004eb8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d010      	beq.n	8004ee8 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	7b9b      	ldrb	r3, [r3, #14]
 8004eca:	3301      	adds	r3, #1
 8004ecc:	b2da      	uxtb	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	7b9b      	ldrb	r3, [r3, #14]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d106      	bne.n	8004ee8 <pbuf_ref+0x30>
 8004eda:	4b05      	ldr	r3, [pc, #20]	; (8004ef0 <pbuf_ref+0x38>)
 8004edc:	f240 3242 	movw	r2, #834	; 0x342
 8004ee0:	4904      	ldr	r1, [pc, #16]	; (8004ef4 <pbuf_ref+0x3c>)
 8004ee2:	4805      	ldr	r0, [pc, #20]	; (8004ef8 <pbuf_ref+0x40>)
 8004ee4:	f008 f9fc 	bl	800d2e0 <iprintf>
  }
}
 8004ee8:	bf00      	nop
 8004eea:	3708      	adds	r7, #8
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	0800e964 	.word	0x0800e964
 8004ef4:	0800eb44 	.word	0x0800eb44
 8004ef8:	0800e9c4 	.word	0x0800e9c4

08004efc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d002      	beq.n	8004f12 <pbuf_cat+0x16>
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d107      	bne.n	8004f22 <pbuf_cat+0x26>
 8004f12:	4b20      	ldr	r3, [pc, #128]	; (8004f94 <pbuf_cat+0x98>)
 8004f14:	f240 3259 	movw	r2, #857	; 0x359
 8004f18:	491f      	ldr	r1, [pc, #124]	; (8004f98 <pbuf_cat+0x9c>)
 8004f1a:	4820      	ldr	r0, [pc, #128]	; (8004f9c <pbuf_cat+0xa0>)
 8004f1c:	f008 f9e0 	bl	800d2e0 <iprintf>
 8004f20:	e034      	b.n	8004f8c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	60fb      	str	r3, [r7, #12]
 8004f26:	e00a      	b.n	8004f3e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	891a      	ldrh	r2, [r3, #8]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	891b      	ldrh	r3, [r3, #8]
 8004f30:	4413      	add	r3, r2
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	60fb      	str	r3, [r7, #12]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1f0      	bne.n	8004f28 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	891a      	ldrh	r2, [r3, #8]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	895b      	ldrh	r3, [r3, #10]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d006      	beq.n	8004f60 <pbuf_cat+0x64>
 8004f52:	4b10      	ldr	r3, [pc, #64]	; (8004f94 <pbuf_cat+0x98>)
 8004f54:	f240 3262 	movw	r2, #866	; 0x362
 8004f58:	4911      	ldr	r1, [pc, #68]	; (8004fa0 <pbuf_cat+0xa4>)
 8004f5a:	4810      	ldr	r0, [pc, #64]	; (8004f9c <pbuf_cat+0xa0>)
 8004f5c:	f008 f9c0 	bl	800d2e0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d006      	beq.n	8004f76 <pbuf_cat+0x7a>
 8004f68:	4b0a      	ldr	r3, [pc, #40]	; (8004f94 <pbuf_cat+0x98>)
 8004f6a:	f240 3263 	movw	r2, #867	; 0x363
 8004f6e:	490d      	ldr	r1, [pc, #52]	; (8004fa4 <pbuf_cat+0xa8>)
 8004f70:	480a      	ldr	r0, [pc, #40]	; (8004f9c <pbuf_cat+0xa0>)
 8004f72:	f008 f9b5 	bl	800d2e0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	891a      	ldrh	r2, [r3, #8]
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	891b      	ldrh	r3, [r3, #8]
 8004f7e:	4413      	add	r3, r2
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	683a      	ldr	r2, [r7, #0]
 8004f8a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8004f8c:	3710      	adds	r7, #16
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	0800e964 	.word	0x0800e964
 8004f98:	0800eb58 	.word	0x0800eb58
 8004f9c:	0800e9c4 	.word	0x0800e9c4
 8004fa0:	0800eb90 	.word	0x0800eb90
 8004fa4:	0800ebc0 	.word	0x0800ebc0

08004fa8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b086      	sub	sp, #24
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	617b      	str	r3, [r7, #20]
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d008      	beq.n	8004fd2 <pbuf_copy+0x2a>
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d005      	beq.n	8004fd2 <pbuf_copy+0x2a>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	891a      	ldrh	r2, [r3, #8]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	891b      	ldrh	r3, [r3, #8]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d209      	bcs.n	8004fe6 <pbuf_copy+0x3e>
 8004fd2:	4b57      	ldr	r3, [pc, #348]	; (8005130 <pbuf_copy+0x188>)
 8004fd4:	f240 32c9 	movw	r2, #969	; 0x3c9
 8004fd8:	4956      	ldr	r1, [pc, #344]	; (8005134 <pbuf_copy+0x18c>)
 8004fda:	4857      	ldr	r0, [pc, #348]	; (8005138 <pbuf_copy+0x190>)
 8004fdc:	f008 f980 	bl	800d2e0 <iprintf>
 8004fe0:	f06f 030f 	mvn.w	r3, #15
 8004fe4:	e09f      	b.n	8005126 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	895b      	ldrh	r3, [r3, #10]
 8004fea:	461a      	mov	r2, r3
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	1ad2      	subs	r2, r2, r3
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	895b      	ldrh	r3, [r3, #10]
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	1acb      	subs	r3, r1, r3
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d306      	bcc.n	800500c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	895b      	ldrh	r3, [r3, #10]
 8005002:	461a      	mov	r2, r3
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	60fb      	str	r3, [r7, #12]
 800500a:	e005      	b.n	8005018 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	895b      	ldrh	r3, [r3, #10]
 8005010:	461a      	mov	r2, r3
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685a      	ldr	r2, [r3, #4]
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	18d0      	adds	r0, r2, r3
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	685a      	ldr	r2, [r3, #4]
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	4413      	add	r3, r2
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	4619      	mov	r1, r3
 800502c:	f008 f942 	bl	800d2b4 <memcpy>
    offset_to += len;
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	4413      	add	r3, r2
 8005036:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	4413      	add	r3, r2
 800503e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	895b      	ldrh	r3, [r3, #10]
 8005044:	461a      	mov	r2, r3
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	4293      	cmp	r3, r2
 800504a:	d906      	bls.n	800505a <pbuf_copy+0xb2>
 800504c:	4b38      	ldr	r3, [pc, #224]	; (8005130 <pbuf_copy+0x188>)
 800504e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8005052:	493a      	ldr	r1, [pc, #232]	; (800513c <pbuf_copy+0x194>)
 8005054:	4838      	ldr	r0, [pc, #224]	; (8005138 <pbuf_copy+0x190>)
 8005056:	f008 f943 	bl	800d2e0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	895b      	ldrh	r3, [r3, #10]
 800505e:	461a      	mov	r2, r3
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	4293      	cmp	r3, r2
 8005064:	d906      	bls.n	8005074 <pbuf_copy+0xcc>
 8005066:	4b32      	ldr	r3, [pc, #200]	; (8005130 <pbuf_copy+0x188>)
 8005068:	f240 32da 	movw	r2, #986	; 0x3da
 800506c:	4934      	ldr	r1, [pc, #208]	; (8005140 <pbuf_copy+0x198>)
 800506e:	4832      	ldr	r0, [pc, #200]	; (8005138 <pbuf_copy+0x190>)
 8005070:	f008 f936 	bl	800d2e0 <iprintf>
    if (offset_from >= p_from->len) {
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	895b      	ldrh	r3, [r3, #10]
 8005078:	461a      	mov	r2, r3
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	4293      	cmp	r3, r2
 800507e:	d304      	bcc.n	800508a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8005080:	2300      	movs	r3, #0
 8005082:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	895b      	ldrh	r3, [r3, #10]
 800508e:	461a      	mov	r2, r3
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	4293      	cmp	r3, r2
 8005094:	d114      	bne.n	80050c0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8005096:	2300      	movs	r3, #0
 8005098:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10c      	bne.n	80050c0 <pbuf_copy+0x118>
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d009      	beq.n	80050c0 <pbuf_copy+0x118>
 80050ac:	4b20      	ldr	r3, [pc, #128]	; (8005130 <pbuf_copy+0x188>)
 80050ae:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80050b2:	4924      	ldr	r1, [pc, #144]	; (8005144 <pbuf_copy+0x19c>)
 80050b4:	4820      	ldr	r0, [pc, #128]	; (8005138 <pbuf_copy+0x190>)
 80050b6:	f008 f913 	bl	800d2e0 <iprintf>
 80050ba:	f06f 030f 	mvn.w	r3, #15
 80050be:	e032      	b.n	8005126 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d013      	beq.n	80050ee <pbuf_copy+0x146>
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	895a      	ldrh	r2, [r3, #10]
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	891b      	ldrh	r3, [r3, #8]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d10d      	bne.n	80050ee <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d009      	beq.n	80050ee <pbuf_copy+0x146>
 80050da:	4b15      	ldr	r3, [pc, #84]	; (8005130 <pbuf_copy+0x188>)
 80050dc:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80050e0:	4919      	ldr	r1, [pc, #100]	; (8005148 <pbuf_copy+0x1a0>)
 80050e2:	4815      	ldr	r0, [pc, #84]	; (8005138 <pbuf_copy+0x190>)
 80050e4:	f008 f8fc 	bl	800d2e0 <iprintf>
 80050e8:	f06f 0305 	mvn.w	r3, #5
 80050ec:	e01b      	b.n	8005126 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d013      	beq.n	800511c <pbuf_copy+0x174>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	895a      	ldrh	r2, [r3, #10]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	891b      	ldrh	r3, [r3, #8]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d10d      	bne.n	800511c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d009      	beq.n	800511c <pbuf_copy+0x174>
 8005108:	4b09      	ldr	r3, [pc, #36]	; (8005130 <pbuf_copy+0x188>)
 800510a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800510e:	490e      	ldr	r1, [pc, #56]	; (8005148 <pbuf_copy+0x1a0>)
 8005110:	4809      	ldr	r0, [pc, #36]	; (8005138 <pbuf_copy+0x190>)
 8005112:	f008 f8e5 	bl	800d2e0 <iprintf>
 8005116:	f06f 0305 	mvn.w	r3, #5
 800511a:	e004      	b.n	8005126 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	f47f af61 	bne.w	8004fe6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3718      	adds	r7, #24
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	0800e964 	.word	0x0800e964
 8005134:	0800ec0c 	.word	0x0800ec0c
 8005138:	0800e9c4 	.word	0x0800e9c4
 800513c:	0800ec3c 	.word	0x0800ec3c
 8005140:	0800ec54 	.word	0x0800ec54
 8005144:	0800ec70 	.word	0x0800ec70
 8005148:	0800ec80 	.word	0x0800ec80

0800514c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b088      	sub	sp, #32
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	4611      	mov	r1, r2
 8005158:	461a      	mov	r2, r3
 800515a:	460b      	mov	r3, r1
 800515c:	80fb      	strh	r3, [r7, #6]
 800515e:	4613      	mov	r3, r2
 8005160:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8005162:	2300      	movs	r3, #0
 8005164:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8005166:	2300      	movs	r3, #0
 8005168:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d108      	bne.n	8005182 <pbuf_copy_partial+0x36>
 8005170:	4b2b      	ldr	r3, [pc, #172]	; (8005220 <pbuf_copy_partial+0xd4>)
 8005172:	f240 420a 	movw	r2, #1034	; 0x40a
 8005176:	492b      	ldr	r1, [pc, #172]	; (8005224 <pbuf_copy_partial+0xd8>)
 8005178:	482b      	ldr	r0, [pc, #172]	; (8005228 <pbuf_copy_partial+0xdc>)
 800517a:	f008 f8b1 	bl	800d2e0 <iprintf>
 800517e:	2300      	movs	r3, #0
 8005180:	e04a      	b.n	8005218 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d108      	bne.n	800519a <pbuf_copy_partial+0x4e>
 8005188:	4b25      	ldr	r3, [pc, #148]	; (8005220 <pbuf_copy_partial+0xd4>)
 800518a:	f240 420b 	movw	r2, #1035	; 0x40b
 800518e:	4927      	ldr	r1, [pc, #156]	; (800522c <pbuf_copy_partial+0xe0>)
 8005190:	4825      	ldr	r0, [pc, #148]	; (8005228 <pbuf_copy_partial+0xdc>)
 8005192:	f008 f8a5 	bl	800d2e0 <iprintf>
 8005196:	2300      	movs	r3, #0
 8005198:	e03e      	b.n	8005218 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	61fb      	str	r3, [r7, #28]
 800519e:	e034      	b.n	800520a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80051a0:	88bb      	ldrh	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00a      	beq.n	80051bc <pbuf_copy_partial+0x70>
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	895b      	ldrh	r3, [r3, #10]
 80051aa:	88ba      	ldrh	r2, [r7, #4]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d305      	bcc.n	80051bc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	895b      	ldrh	r3, [r3, #10]
 80051b4:	88ba      	ldrh	r2, [r7, #4]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	80bb      	strh	r3, [r7, #4]
 80051ba:	e023      	b.n	8005204 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	895a      	ldrh	r2, [r3, #10]
 80051c0:	88bb      	ldrh	r3, [r7, #4]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80051c6:	8b3a      	ldrh	r2, [r7, #24]
 80051c8:	88fb      	ldrh	r3, [r7, #6]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d901      	bls.n	80051d2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80051ce:	88fb      	ldrh	r3, [r7, #6]
 80051d0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80051d2:	8b7b      	ldrh	r3, [r7, #26]
 80051d4:	68ba      	ldr	r2, [r7, #8]
 80051d6:	18d0      	adds	r0, r2, r3
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	88bb      	ldrh	r3, [r7, #4]
 80051de:	4413      	add	r3, r2
 80051e0:	8b3a      	ldrh	r2, [r7, #24]
 80051e2:	4619      	mov	r1, r3
 80051e4:	f008 f866 	bl	800d2b4 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80051e8:	8afa      	ldrh	r2, [r7, #22]
 80051ea:	8b3b      	ldrh	r3, [r7, #24]
 80051ec:	4413      	add	r3, r2
 80051ee:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80051f0:	8b7a      	ldrh	r2, [r7, #26]
 80051f2:	8b3b      	ldrh	r3, [r7, #24]
 80051f4:	4413      	add	r3, r2
 80051f6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80051f8:	88fa      	ldrh	r2, [r7, #6]
 80051fa:	8b3b      	ldrh	r3, [r7, #24]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8005200:	2300      	movs	r3, #0
 8005202:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	61fb      	str	r3, [r7, #28]
 800520a:	88fb      	ldrh	r3, [r7, #6]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d002      	beq.n	8005216 <pbuf_copy_partial+0xca>
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1c4      	bne.n	80051a0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8005216:	8afb      	ldrh	r3, [r7, #22]
}
 8005218:	4618      	mov	r0, r3
 800521a:	3720      	adds	r7, #32
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	0800e964 	.word	0x0800e964
 8005224:	0800ecac 	.word	0x0800ecac
 8005228:	0800e9c4 	.word	0x0800e9c4
 800522c:	0800eccc 	.word	0x0800eccc

08005230 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	4603      	mov	r3, r0
 8005238:	603a      	str	r2, [r7, #0]
 800523a:	71fb      	strb	r3, [r7, #7]
 800523c:	460b      	mov	r3, r1
 800523e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	8919      	ldrh	r1, [r3, #8]
 8005244:	88ba      	ldrh	r2, [r7, #4]
 8005246:	79fb      	ldrb	r3, [r7, #7]
 8005248:	4618      	mov	r0, r3
 800524a:	f7ff fab1 	bl	80047b0 <pbuf_alloc>
 800524e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <pbuf_clone+0x2a>
    return NULL;
 8005256:	2300      	movs	r3, #0
 8005258:	e011      	b.n	800527e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800525a:	6839      	ldr	r1, [r7, #0]
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f7ff fea3 	bl	8004fa8 <pbuf_copy>
 8005262:	4603      	mov	r3, r0
 8005264:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8005266:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d006      	beq.n	800527c <pbuf_clone+0x4c>
 800526e:	4b06      	ldr	r3, [pc, #24]	; (8005288 <pbuf_clone+0x58>)
 8005270:	f240 5224 	movw	r2, #1316	; 0x524
 8005274:	4905      	ldr	r1, [pc, #20]	; (800528c <pbuf_clone+0x5c>)
 8005276:	4806      	ldr	r0, [pc, #24]	; (8005290 <pbuf_clone+0x60>)
 8005278:	f008 f832 	bl	800d2e0 <iprintf>
  return q;
 800527c:	68fb      	ldr	r3, [r7, #12]
}
 800527e:	4618      	mov	r0, r3
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	0800e964 	.word	0x0800e964
 800528c:	0800edd8 	.word	0x0800edd8
 8005290:	0800e9c4 	.word	0x0800e9c4

08005294 <raw_input_local_match>:
/** The list of RAW PCBs */
static struct raw_pcb *raw_pcbs;

static u8_t
raw_input_local_match(struct raw_pcb *pcb, u8_t broadcast)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	460b      	mov	r3, r1
 800529e:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	7a1b      	ldrb	r3, [r3, #8]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00b      	beq.n	80052c0 <raw_input_local_match+0x2c>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	7a1a      	ldrb	r2, [r3, #8]
 80052ac:	4b15      	ldr	r3, [pc, #84]	; (8005304 <raw_input_local_match+0x70>)
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80052b4:	3301      	adds	r3, #1
 80052b6:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d001      	beq.n	80052c0 <raw_input_local_match+0x2c>
    return 0;
 80052bc:	2300      	movs	r3, #0
 80052be:	e01b      	b.n	80052f8 <raw_input_local_match+0x64>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: receive all broadcasts
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80052c0:	78fb      	ldrb	r3, [r7, #3]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d008      	beq.n	80052d8 <raw_input_local_match+0x44>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d003      	beq.n	80052d4 <raw_input_local_match+0x40>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d110      	bne.n	80052f6 <raw_input_local_match+0x62>
          return 1;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e00f      	b.n	80052f8 <raw_input_local_match+0x64>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: catch all or exact match */
      if (ip_addr_isany(&pcb->local_ip) ||
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d009      	beq.n	80052f2 <raw_input_local_match+0x5e>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d005      	beq.n	80052f2 <raw_input_local_match+0x5e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	4b06      	ldr	r3, [pc, #24]	; (8005304 <raw_input_local_match+0x70>)
 80052ec:	695b      	ldr	r3, [r3, #20]
      if (ip_addr_isany(&pcb->local_ip) ||
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d101      	bne.n	80052f6 <raw_input_local_match+0x62>
        return 1;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e000      	b.n	80052f8 <raw_input_local_match+0x64>
      }
  }

  return 0;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr
 8005304:	20004cd8 	.word	0x20004cd8

08005308 <raw_input>:
 *           caller).
 *
 */
raw_input_state_t
raw_input(struct pbuf *p, struct netif *inp)
{
 8005308:	b590      	push	{r4, r7, lr}
 800530a:	b089      	sub	sp, #36	; 0x24
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  struct raw_pcb *pcb, *prev;
  s16_t proto;
  raw_input_state_t ret = RAW_INPUT_NONE;
 8005312:	2300      	movs	r3, #0
 8005314:	75fb      	strb	r3, [r7, #23]
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8005316:	4b37      	ldr	r3, [pc, #220]	; (80053f4 <raw_input+0xec>)
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	4a36      	ldr	r2, [pc, #216]	; (80053f4 <raw_input+0xec>)
 800531c:	6812      	ldr	r2, [r2, #0]
 800531e:	4611      	mov	r1, r2
 8005320:	4618      	mov	r0, r3
 8005322:	f007 f83d 	bl	800c3a0 <ip4_addr_isbroadcast_u32>
 8005326:	4603      	mov	r3, r0
 8005328:	75bb      	strb	r3, [r7, #22]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	7a5b      	ldrb	r3, [r3, #9]
 8005330:	82bb      	strh	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */

  prev = NULL;
 8005332:	2300      	movs	r3, #0
 8005334:	61bb      	str	r3, [r7, #24]
  pcb = raw_pcbs;
 8005336:	4b30      	ldr	r3, [pc, #192]	; (80053f8 <raw_input+0xf0>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	61fb      	str	r3, [r7, #28]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while (pcb != NULL) {
 800533c:	e052      	b.n	80053e4 <raw_input+0xdc>
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	7c1b      	ldrb	r3, [r3, #16]
 8005342:	461a      	mov	r2, r3
 8005344:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005348:	429a      	cmp	r2, r3
 800534a:	d146      	bne.n	80053da <raw_input+0xd2>
 800534c:	7dbb      	ldrb	r3, [r7, #22]
 800534e:	4619      	mov	r1, r3
 8005350:	69f8      	ldr	r0, [r7, #28]
 8005352:	f7ff ff9f 	bl	8005294 <raw_input_local_match>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d03e      	beq.n	80053da <raw_input+0xd2>
        (((pcb->flags & RAW_FLAGS_CONNECTED) == 0) ||
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	7c5b      	ldrb	r3, [r3, #17]
 8005360:	f003 0301 	and.w	r3, r3, #1
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 8005364:	2b00      	cmp	r3, #0
 8005366:	d005      	beq.n	8005374 <raw_input+0x6c>
         ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	685a      	ldr	r2, [r3, #4]
 800536c:	4b21      	ldr	r3, [pc, #132]	; (80053f4 <raw_input+0xec>)
 800536e:	691b      	ldr	r3, [r3, #16]
        (((pcb->flags & RAW_FLAGS_CONNECTED) == 0) ||
 8005370:	429a      	cmp	r2, r3
 8005372:	d132      	bne.n	80053da <raw_input+0xd2>
      /* receive callback function available? */
      if (pcb->recv != NULL) {
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	695b      	ldr	r3, [r3, #20]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d02e      	beq.n	80053da <raw_input+0xd2>
        u8_t eaten;
#ifndef LWIP_NOASSERT
        void *old_payload = p->payload;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	613b      	str	r3, [r7, #16]
#endif
        ret = RAW_INPUT_DELIVERED;
 8005382:	2302      	movs	r3, #2
 8005384:	75fb      	strb	r3, [r7, #23]
        /* the receive callback function did not eat the packet? */
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	695c      	ldr	r4, [r3, #20]
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	6998      	ldr	r0, [r3, #24]
 800538e:	4b1b      	ldr	r3, [pc, #108]	; (80053fc <raw_input+0xf4>)
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	69f9      	ldr	r1, [r7, #28]
 8005394:	47a0      	blx	r4
 8005396:	4603      	mov	r3, r0
 8005398:	73fb      	strb	r3, [r7, #15]
        if (eaten != 0) {
 800539a:	7bfb      	ldrb	r3, [r7, #15]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d011      	beq.n	80053c4 <raw_input+0xbc>
          /* receive function ate the packet */
          p = NULL;
 80053a0:	2300      	movs	r3, #0
 80053a2:	607b      	str	r3, [r7, #4]
          if (prev != NULL) {
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00a      	beq.n	80053c0 <raw_input+0xb8>
            /* move the pcb to the front of raw_pcbs so that is
               found faster next time */
            prev->next = pcb->next;
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	68da      	ldr	r2, [r3, #12]
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	60da      	str	r2, [r3, #12]
            pcb->next = raw_pcbs;
 80053b2:	4b11      	ldr	r3, [pc, #68]	; (80053f8 <raw_input+0xf0>)
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	60da      	str	r2, [r3, #12]
            raw_pcbs = pcb;
 80053ba:	4a0f      	ldr	r2, [pc, #60]	; (80053f8 <raw_input+0xf0>)
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	6013      	str	r3, [r2, #0]
          }
          return RAW_INPUT_EATEN;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e013      	b.n	80053ec <raw_input+0xe4>
        } else {
          /* sanity-check that the receive callback did not alter the pbuf */
          LWIP_ASSERT("raw pcb recv callback altered pbuf payload pointer without eating packet",
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d005      	beq.n	80053da <raw_input+0xd2>
 80053ce:	4b0c      	ldr	r3, [pc, #48]	; (8005400 <raw_input+0xf8>)
 80053d0:	22c0      	movs	r2, #192	; 0xc0
 80053d2:	490c      	ldr	r1, [pc, #48]	; (8005404 <raw_input+0xfc>)
 80053d4:	480c      	ldr	r0, [pc, #48]	; (8005408 <raw_input+0x100>)
 80053d6:	f007 ff83 	bl	800d2e0 <iprintf>
        }
      }
      /* no receive callback function was set for this raw PCB */
    }
    /* drop the packet */
    prev = pcb;
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	61bb      	str	r3, [r7, #24]
    pcb = pcb->next;
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	61fb      	str	r3, [r7, #28]
  while (pcb != NULL) {
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1a9      	bne.n	800533e <raw_input+0x36>
  }
  return ret;
 80053ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3724      	adds	r7, #36	; 0x24
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd90      	pop	{r4, r7, pc}
 80053f4:	20004cd8 	.word	0x20004cd8
 80053f8:	200082c0 	.word	0x200082c0
 80053fc:	20004ce8 	.word	0x20004ce8
 8005400:	0800edec 	.word	0x0800edec
 8005404:	0800ee1c 	.word	0x0800ee1c
 8005408:	0800ee68 	.word	0x0800ee68

0800540c <raw_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void raw_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800540c:	b480      	push	{r7}
 800540e:	b085      	sub	sp, #20
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  struct raw_pcb *rpcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d01e      	beq.n	800545a <raw_netif_ip_addr_changed+0x4e>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d01a      	beq.n	800545a <raw_netif_ip_addr_changed+0x4e>
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d017      	beq.n	800545a <raw_netif_ip_addr_changed+0x4e>
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d013      	beq.n	800545a <raw_netif_ip_addr_changed+0x4e>
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 8005432:	4b0d      	ldr	r3, [pc, #52]	; (8005468 <raw_netif_ip_addr_changed+0x5c>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	60fb      	str	r3, [r7, #12]
 8005438:	e00c      	b.n	8005454 <raw_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&rpcb->local_ip, old_addr)) {
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	429a      	cmp	r2, r3
 8005444:	d103      	bne.n	800544e <raw_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(rpcb->local_ip, *new_addr);
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	601a      	str	r2, [r3, #0]
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	60fb      	str	r3, [r7, #12]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1ef      	bne.n	800543a <raw_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800545a:	bf00      	nop
 800545c:	3714      	adds	r7, #20
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	200082c0 	.word	0x200082c0

0800546c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8005470:	f007 ff4e 	bl	800d310 <rand>
 8005474:	4603      	mov	r3, r0
 8005476:	b29b      	uxth	r3, r3
 8005478:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800547c:	b29b      	uxth	r3, r3
 800547e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8005482:	b29a      	uxth	r2, r3
 8005484:	4b01      	ldr	r3, [pc, #4]	; (800548c <tcp_init+0x20>)
 8005486:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8005488:	bf00      	nop
 800548a:	bd80      	pop	{r7, pc}
 800548c:	20000020 	.word	0x20000020

08005490 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	7d1b      	ldrb	r3, [r3, #20]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d105      	bne.n	80054ac <tcp_free+0x1c>
 80054a0:	4b06      	ldr	r3, [pc, #24]	; (80054bc <tcp_free+0x2c>)
 80054a2:	22d4      	movs	r2, #212	; 0xd4
 80054a4:	4906      	ldr	r1, [pc, #24]	; (80054c0 <tcp_free+0x30>)
 80054a6:	4807      	ldr	r0, [pc, #28]	; (80054c4 <tcp_free+0x34>)
 80054a8:	f007 ff1a 	bl	800d2e0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80054ac:	6879      	ldr	r1, [r7, #4]
 80054ae:	2002      	movs	r0, #2
 80054b0:	f7fe fe08 	bl	80040c4 <memp_free>
}
 80054b4:	bf00      	nop
 80054b6:	3708      	adds	r7, #8
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	0800ef30 	.word	0x0800ef30
 80054c0:	0800ef60 	.word	0x0800ef60
 80054c4:	0800ef74 	.word	0x0800ef74

080054c8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	7d1b      	ldrb	r3, [r3, #20]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d105      	bne.n	80054e4 <tcp_free_listen+0x1c>
 80054d8:	4b06      	ldr	r3, [pc, #24]	; (80054f4 <tcp_free_listen+0x2c>)
 80054da:	22df      	movs	r2, #223	; 0xdf
 80054dc:	4906      	ldr	r1, [pc, #24]	; (80054f8 <tcp_free_listen+0x30>)
 80054de:	4807      	ldr	r0, [pc, #28]	; (80054fc <tcp_free_listen+0x34>)
 80054e0:	f007 fefe 	bl	800d2e0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80054e4:	6879      	ldr	r1, [r7, #4]
 80054e6:	2003      	movs	r0, #3
 80054e8:	f7fe fdec 	bl	80040c4 <memp_free>
}
 80054ec:	bf00      	nop
 80054ee:	3708      	adds	r7, #8
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	0800ef30 	.word	0x0800ef30
 80054f8:	0800ef9c 	.word	0x0800ef9c
 80054fc:	0800ef74 	.word	0x0800ef74

08005500 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8005504:	f000 fea2 	bl	800624c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8005508:	4b07      	ldr	r3, [pc, #28]	; (8005528 <tcp_tmr+0x28>)
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	3301      	adds	r3, #1
 800550e:	b2da      	uxtb	r2, r3
 8005510:	4b05      	ldr	r3, [pc, #20]	; (8005528 <tcp_tmr+0x28>)
 8005512:	701a      	strb	r2, [r3, #0]
 8005514:	4b04      	ldr	r3, [pc, #16]	; (8005528 <tcp_tmr+0x28>)
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	f003 0301 	and.w	r3, r3, #1
 800551c:	2b00      	cmp	r3, #0
 800551e:	d001      	beq.n	8005524 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8005520:	f000 fb54 	bl	8005bcc <tcp_slowtmr>
  }
}
 8005524:	bf00      	nop
 8005526:	bd80      	pop	{r7, pc}
 8005528:	200082d9 	.word	0x200082d9

0800552c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d105      	bne.n	8005548 <tcp_remove_listener+0x1c>
 800553c:	4b0d      	ldr	r3, [pc, #52]	; (8005574 <tcp_remove_listener+0x48>)
 800553e:	22ff      	movs	r2, #255	; 0xff
 8005540:	490d      	ldr	r1, [pc, #52]	; (8005578 <tcp_remove_listener+0x4c>)
 8005542:	480e      	ldr	r0, [pc, #56]	; (800557c <tcp_remove_listener+0x50>)
 8005544:	f007 fecc 	bl	800d2e0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	60fb      	str	r3, [r7, #12]
 800554c:	e00a      	b.n	8005564 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005552:	683a      	ldr	r2, [r7, #0]
 8005554:	429a      	cmp	r2, r3
 8005556:	d102      	bne.n	800555e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	60fb      	str	r3, [r7, #12]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1f1      	bne.n	800554e <tcp_remove_listener+0x22>
    }
  }
}
 800556a:	bf00      	nop
 800556c:	bf00      	nop
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}
 8005574:	0800ef30 	.word	0x0800ef30
 8005578:	0800efb8 	.word	0x0800efb8
 800557c:	0800ef74 	.word	0x0800ef74

08005580 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d106      	bne.n	800559c <tcp_listen_closed+0x1c>
 800558e:	4b14      	ldr	r3, [pc, #80]	; (80055e0 <tcp_listen_closed+0x60>)
 8005590:	f240 1211 	movw	r2, #273	; 0x111
 8005594:	4913      	ldr	r1, [pc, #76]	; (80055e4 <tcp_listen_closed+0x64>)
 8005596:	4814      	ldr	r0, [pc, #80]	; (80055e8 <tcp_listen_closed+0x68>)
 8005598:	f007 fea2 	bl	800d2e0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	7d1b      	ldrb	r3, [r3, #20]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d006      	beq.n	80055b2 <tcp_listen_closed+0x32>
 80055a4:	4b0e      	ldr	r3, [pc, #56]	; (80055e0 <tcp_listen_closed+0x60>)
 80055a6:	f44f 7289 	mov.w	r2, #274	; 0x112
 80055aa:	4910      	ldr	r1, [pc, #64]	; (80055ec <tcp_listen_closed+0x6c>)
 80055ac:	480e      	ldr	r0, [pc, #56]	; (80055e8 <tcp_listen_closed+0x68>)
 80055ae:	f007 fe97 	bl	800d2e0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80055b2:	2301      	movs	r3, #1
 80055b4:	60fb      	str	r3, [r7, #12]
 80055b6:	e00b      	b.n	80055d0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80055b8:	4a0d      	ldr	r2, [pc, #52]	; (80055f0 <tcp_listen_closed+0x70>)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	6879      	ldr	r1, [r7, #4]
 80055c4:	4618      	mov	r0, r3
 80055c6:	f7ff ffb1 	bl	800552c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	3301      	adds	r3, #1
 80055ce:	60fb      	str	r3, [r7, #12]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2b03      	cmp	r3, #3
 80055d4:	d9f0      	bls.n	80055b8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80055d6:	bf00      	nop
 80055d8:	bf00      	nop
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	0800ef30 	.word	0x0800ef30
 80055e4:	0800efe0 	.word	0x0800efe0
 80055e8:	0800ef74 	.word	0x0800ef74
 80055ec:	0800efec 	.word	0x0800efec
 80055f0:	08010f18 	.word	0x08010f18

080055f4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80055f4:	b5b0      	push	{r4, r5, r7, lr}
 80055f6:	b088      	sub	sp, #32
 80055f8:	af04      	add	r7, sp, #16
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	460b      	mov	r3, r1
 80055fe:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d106      	bne.n	8005614 <tcp_close_shutdown+0x20>
 8005606:	4b63      	ldr	r3, [pc, #396]	; (8005794 <tcp_close_shutdown+0x1a0>)
 8005608:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800560c:	4962      	ldr	r1, [pc, #392]	; (8005798 <tcp_close_shutdown+0x1a4>)
 800560e:	4863      	ldr	r0, [pc, #396]	; (800579c <tcp_close_shutdown+0x1a8>)
 8005610:	f007 fe66 	bl	800d2e0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8005614:	78fb      	ldrb	r3, [r7, #3]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d066      	beq.n	80056e8 <tcp_close_shutdown+0xf4>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	7d1b      	ldrb	r3, [r3, #20]
 800561e:	2b04      	cmp	r3, #4
 8005620:	d003      	beq.n	800562a <tcp_close_shutdown+0x36>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	7d1b      	ldrb	r3, [r3, #20]
 8005626:	2b07      	cmp	r3, #7
 8005628:	d15e      	bne.n	80056e8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800562e:	2b00      	cmp	r3, #0
 8005630:	d104      	bne.n	800563c <tcp_close_shutdown+0x48>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005636:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800563a:	d055      	beq.n	80056e8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	8b5b      	ldrh	r3, [r3, #26]
 8005640:	f003 0310 	and.w	r3, r3, #16
 8005644:	2b00      	cmp	r3, #0
 8005646:	d106      	bne.n	8005656 <tcp_close_shutdown+0x62>
 8005648:	4b52      	ldr	r3, [pc, #328]	; (8005794 <tcp_close_shutdown+0x1a0>)
 800564a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800564e:	4954      	ldr	r1, [pc, #336]	; (80057a0 <tcp_close_shutdown+0x1ac>)
 8005650:	4852      	ldr	r0, [pc, #328]	; (800579c <tcp_close_shutdown+0x1a8>)
 8005652:	f007 fe45 	bl	800d2e0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800565e:	687d      	ldr	r5, [r7, #4]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	3304      	adds	r3, #4
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	8ad2      	ldrh	r2, [r2, #22]
 8005668:	6879      	ldr	r1, [r7, #4]
 800566a:	8b09      	ldrh	r1, [r1, #24]
 800566c:	9102      	str	r1, [sp, #8]
 800566e:	9201      	str	r2, [sp, #4]
 8005670:	9300      	str	r3, [sp, #0]
 8005672:	462b      	mov	r3, r5
 8005674:	4622      	mov	r2, r4
 8005676:	4601      	mov	r1, r0
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f004 fe91 	bl	800a3a0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f001 f8c6 	bl	8006810 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8005684:	4b47      	ldr	r3, [pc, #284]	; (80057a4 <tcp_close_shutdown+0x1b0>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	429a      	cmp	r2, r3
 800568c:	d105      	bne.n	800569a <tcp_close_shutdown+0xa6>
 800568e:	4b45      	ldr	r3, [pc, #276]	; (80057a4 <tcp_close_shutdown+0x1b0>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	4a43      	ldr	r2, [pc, #268]	; (80057a4 <tcp_close_shutdown+0x1b0>)
 8005696:	6013      	str	r3, [r2, #0]
 8005698:	e013      	b.n	80056c2 <tcp_close_shutdown+0xce>
 800569a:	4b42      	ldr	r3, [pc, #264]	; (80057a4 <tcp_close_shutdown+0x1b0>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	60fb      	str	r3, [r7, #12]
 80056a0:	e00c      	b.n	80056bc <tcp_close_shutdown+0xc8>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d104      	bne.n	80056b6 <tcp_close_shutdown+0xc2>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	68da      	ldr	r2, [r3, #12]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	60da      	str	r2, [r3, #12]
 80056b4:	e005      	b.n	80056c2 <tcp_close_shutdown+0xce>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	60fb      	str	r3, [r7, #12]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1ef      	bne.n	80056a2 <tcp_close_shutdown+0xae>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	60da      	str	r2, [r3, #12]
 80056c8:	4b37      	ldr	r3, [pc, #220]	; (80057a8 <tcp_close_shutdown+0x1b4>)
 80056ca:	2201      	movs	r2, #1
 80056cc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80056ce:	4b37      	ldr	r3, [pc, #220]	; (80057ac <tcp_close_shutdown+0x1b8>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d102      	bne.n	80056de <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80056d8:	f003 fd5e 	bl	8009198 <tcp_trigger_input_pcb_close>
 80056dc:	e002      	b.n	80056e4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f7ff fed6 	bl	8005490 <tcp_free>
      }
      return ERR_OK;
 80056e4:	2300      	movs	r3, #0
 80056e6:	e050      	b.n	800578a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	7d1b      	ldrb	r3, [r3, #20]
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d03b      	beq.n	8005768 <tcp_close_shutdown+0x174>
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	dc44      	bgt.n	800577e <tcp_close_shutdown+0x18a>
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d002      	beq.n	80056fe <tcp_close_shutdown+0x10a>
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d02a      	beq.n	8005752 <tcp_close_shutdown+0x15e>
 80056fc:	e03f      	b.n	800577e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	8adb      	ldrh	r3, [r3, #22]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d021      	beq.n	800574a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005706:	4b2a      	ldr	r3, [pc, #168]	; (80057b0 <tcp_close_shutdown+0x1bc>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	429a      	cmp	r2, r3
 800570e:	d105      	bne.n	800571c <tcp_close_shutdown+0x128>
 8005710:	4b27      	ldr	r3, [pc, #156]	; (80057b0 <tcp_close_shutdown+0x1bc>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	4a26      	ldr	r2, [pc, #152]	; (80057b0 <tcp_close_shutdown+0x1bc>)
 8005718:	6013      	str	r3, [r2, #0]
 800571a:	e013      	b.n	8005744 <tcp_close_shutdown+0x150>
 800571c:	4b24      	ldr	r3, [pc, #144]	; (80057b0 <tcp_close_shutdown+0x1bc>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	60bb      	str	r3, [r7, #8]
 8005722:	e00c      	b.n	800573e <tcp_close_shutdown+0x14a>
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	429a      	cmp	r2, r3
 800572c:	d104      	bne.n	8005738 <tcp_close_shutdown+0x144>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68da      	ldr	r2, [r3, #12]
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	60da      	str	r2, [r3, #12]
 8005736:	e005      	b.n	8005744 <tcp_close_shutdown+0x150>
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	60bb      	str	r3, [r7, #8]
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1ef      	bne.n	8005724 <tcp_close_shutdown+0x130>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f7ff fea0 	bl	8005490 <tcp_free>
      break;
 8005750:	e01a      	b.n	8005788 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f7ff ff14 	bl	8005580 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8005758:	6879      	ldr	r1, [r7, #4]
 800575a:	4816      	ldr	r0, [pc, #88]	; (80057b4 <tcp_close_shutdown+0x1c0>)
 800575c:	f001 f8a8 	bl	80068b0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f7ff feb1 	bl	80054c8 <tcp_free_listen>
      break;
 8005766:	e00f      	b.n	8005788 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005768:	6879      	ldr	r1, [r7, #4]
 800576a:	480e      	ldr	r0, [pc, #56]	; (80057a4 <tcp_close_shutdown+0x1b0>)
 800576c:	f001 f8a0 	bl	80068b0 <tcp_pcb_remove>
 8005770:	4b0d      	ldr	r3, [pc, #52]	; (80057a8 <tcp_close_shutdown+0x1b4>)
 8005772:	2201      	movs	r2, #1
 8005774:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f7ff fe8a 	bl	8005490 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800577c:	e004      	b.n	8005788 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 f81a 	bl	80057b8 <tcp_close_shutdown_fin>
 8005784:	4603      	mov	r3, r0
 8005786:	e000      	b.n	800578a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bdb0      	pop	{r4, r5, r7, pc}
 8005792:	bf00      	nop
 8005794:	0800ef30 	.word	0x0800ef30
 8005798:	0800f004 	.word	0x0800f004
 800579c:	0800ef74 	.word	0x0800ef74
 80057a0:	0800f024 	.word	0x0800f024
 80057a4:	200082d0 	.word	0x200082d0
 80057a8:	200082d8 	.word	0x200082d8
 80057ac:	20008310 	.word	0x20008310
 80057b0:	200082c8 	.word	0x200082c8
 80057b4:	200082cc 	.word	0x200082cc

080057b8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d106      	bne.n	80057d4 <tcp_close_shutdown_fin+0x1c>
 80057c6:	4b2e      	ldr	r3, [pc, #184]	; (8005880 <tcp_close_shutdown_fin+0xc8>)
 80057c8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80057cc:	492d      	ldr	r1, [pc, #180]	; (8005884 <tcp_close_shutdown_fin+0xcc>)
 80057ce:	482e      	ldr	r0, [pc, #184]	; (8005888 <tcp_close_shutdown_fin+0xd0>)
 80057d0:	f007 fd86 	bl	800d2e0 <iprintf>

  switch (pcb->state) {
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	7d1b      	ldrb	r3, [r3, #20]
 80057d8:	2b07      	cmp	r3, #7
 80057da:	d020      	beq.n	800581e <tcp_close_shutdown_fin+0x66>
 80057dc:	2b07      	cmp	r3, #7
 80057de:	dc2b      	bgt.n	8005838 <tcp_close_shutdown_fin+0x80>
 80057e0:	2b03      	cmp	r3, #3
 80057e2:	d002      	beq.n	80057ea <tcp_close_shutdown_fin+0x32>
 80057e4:	2b04      	cmp	r3, #4
 80057e6:	d00d      	beq.n	8005804 <tcp_close_shutdown_fin+0x4c>
 80057e8:	e026      	b.n	8005838 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f003 fee6 	bl	80095bc <tcp_send_fin>
 80057f0:	4603      	mov	r3, r0
 80057f2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80057f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d11f      	bne.n	800583c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2205      	movs	r2, #5
 8005800:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005802:	e01b      	b.n	800583c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f003 fed9 	bl	80095bc <tcp_send_fin>
 800580a:	4603      	mov	r3, r0
 800580c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800580e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d114      	bne.n	8005840 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2205      	movs	r2, #5
 800581a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800581c:	e010      	b.n	8005840 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f003 fecc 	bl	80095bc <tcp_send_fin>
 8005824:	4603      	mov	r3, r0
 8005826:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005828:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d109      	bne.n	8005844 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2209      	movs	r2, #9
 8005834:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005836:	e005      	b.n	8005844 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8005838:	2300      	movs	r3, #0
 800583a:	e01c      	b.n	8005876 <tcp_close_shutdown_fin+0xbe>
      break;
 800583c:	bf00      	nop
 800583e:	e002      	b.n	8005846 <tcp_close_shutdown_fin+0x8e>
      break;
 8005840:	bf00      	nop
 8005842:	e000      	b.n	8005846 <tcp_close_shutdown_fin+0x8e>
      break;
 8005844:	bf00      	nop
  }

  if (err == ERR_OK) {
 8005846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d103      	bne.n	8005856 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f003 fff2 	bl	8009838 <tcp_output>
 8005854:	e00d      	b.n	8005872 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8005856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800585a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800585e:	d108      	bne.n	8005872 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	8b5b      	ldrh	r3, [r3, #26]
 8005864:	f043 0308 	orr.w	r3, r3, #8
 8005868:	b29a      	uxth	r2, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800586e:	2300      	movs	r3, #0
 8005870:	e001      	b.n	8005876 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8005872:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005876:	4618      	mov	r0, r3
 8005878:	3710      	adds	r7, #16
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	0800ef30 	.word	0x0800ef30
 8005884:	0800efe0 	.word	0x0800efe0
 8005888:	0800ef74 	.word	0x0800ef74

0800588c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d109      	bne.n	80058ae <tcp_close+0x22>
 800589a:	4b0f      	ldr	r3, [pc, #60]	; (80058d8 <tcp_close+0x4c>)
 800589c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80058a0:	490e      	ldr	r1, [pc, #56]	; (80058dc <tcp_close+0x50>)
 80058a2:	480f      	ldr	r0, [pc, #60]	; (80058e0 <tcp_close+0x54>)
 80058a4:	f007 fd1c 	bl	800d2e0 <iprintf>
 80058a8:	f06f 030f 	mvn.w	r3, #15
 80058ac:	e00f      	b.n	80058ce <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	7d1b      	ldrb	r3, [r3, #20]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d006      	beq.n	80058c4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	8b5b      	ldrh	r3, [r3, #26]
 80058ba:	f043 0310 	orr.w	r3, r3, #16
 80058be:	b29a      	uxth	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80058c4:	2101      	movs	r1, #1
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f7ff fe94 	bl	80055f4 <tcp_close_shutdown>
 80058cc:	4603      	mov	r3, r0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3708      	adds	r7, #8
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	0800ef30 	.word	0x0800ef30
 80058dc:	0800f040 	.word	0x0800f040
 80058e0:	0800ef74 	.word	0x0800ef74

080058e4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b08e      	sub	sp, #56	; 0x38
 80058e8:	af04      	add	r7, sp, #16
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d107      	bne.n	8005904 <tcp_abandon+0x20>
 80058f4:	4b52      	ldr	r3, [pc, #328]	; (8005a40 <tcp_abandon+0x15c>)
 80058f6:	f240 223d 	movw	r2, #573	; 0x23d
 80058fa:	4952      	ldr	r1, [pc, #328]	; (8005a44 <tcp_abandon+0x160>)
 80058fc:	4852      	ldr	r0, [pc, #328]	; (8005a48 <tcp_abandon+0x164>)
 80058fe:	f007 fcef 	bl	800d2e0 <iprintf>
 8005902:	e099      	b.n	8005a38 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	7d1b      	ldrb	r3, [r3, #20]
 8005908:	2b01      	cmp	r3, #1
 800590a:	d106      	bne.n	800591a <tcp_abandon+0x36>
 800590c:	4b4c      	ldr	r3, [pc, #304]	; (8005a40 <tcp_abandon+0x15c>)
 800590e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8005912:	494e      	ldr	r1, [pc, #312]	; (8005a4c <tcp_abandon+0x168>)
 8005914:	484c      	ldr	r0, [pc, #304]	; (8005a48 <tcp_abandon+0x164>)
 8005916:	f007 fce3 	bl	800d2e0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	7d1b      	ldrb	r3, [r3, #20]
 800591e:	2b0a      	cmp	r3, #10
 8005920:	d107      	bne.n	8005932 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8005922:	6879      	ldr	r1, [r7, #4]
 8005924:	484a      	ldr	r0, [pc, #296]	; (8005a50 <tcp_abandon+0x16c>)
 8005926:	f000 ffc3 	bl	80068b0 <tcp_pcb_remove>
    tcp_free(pcb);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f7ff fdb0 	bl	8005490 <tcp_free>
 8005930:	e082      	b.n	8005a38 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8005932:	2300      	movs	r3, #0
 8005934:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8005936:	2300      	movs	r3, #0
 8005938:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800593e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005944:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800594c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	7d1b      	ldrb	r3, [r3, #20]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d126      	bne.n	80059aa <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	8adb      	ldrh	r3, [r3, #22]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d02e      	beq.n	80059c2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005964:	4b3b      	ldr	r3, [pc, #236]	; (8005a54 <tcp_abandon+0x170>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	429a      	cmp	r2, r3
 800596c:	d105      	bne.n	800597a <tcp_abandon+0x96>
 800596e:	4b39      	ldr	r3, [pc, #228]	; (8005a54 <tcp_abandon+0x170>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	4a37      	ldr	r2, [pc, #220]	; (8005a54 <tcp_abandon+0x170>)
 8005976:	6013      	str	r3, [r2, #0]
 8005978:	e013      	b.n	80059a2 <tcp_abandon+0xbe>
 800597a:	4b36      	ldr	r3, [pc, #216]	; (8005a54 <tcp_abandon+0x170>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	61fb      	str	r3, [r7, #28]
 8005980:	e00c      	b.n	800599c <tcp_abandon+0xb8>
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	429a      	cmp	r2, r3
 800598a:	d104      	bne.n	8005996 <tcp_abandon+0xb2>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	68da      	ldr	r2, [r3, #12]
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	60da      	str	r2, [r3, #12]
 8005994:	e005      	b.n	80059a2 <tcp_abandon+0xbe>
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	61fb      	str	r3, [r7, #28]
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1ef      	bne.n	8005982 <tcp_abandon+0x9e>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	60da      	str	r2, [r3, #12]
 80059a8:	e00b      	b.n	80059c2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	8adb      	ldrh	r3, [r3, #22]
 80059b2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80059b4:	6879      	ldr	r1, [r7, #4]
 80059b6:	4828      	ldr	r0, [pc, #160]	; (8005a58 <tcp_abandon+0x174>)
 80059b8:	f000 ff7a 	bl	80068b0 <tcp_pcb_remove>
 80059bc:	4b27      	ldr	r3, [pc, #156]	; (8005a5c <tcp_abandon+0x178>)
 80059be:	2201      	movs	r2, #1
 80059c0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d004      	beq.n	80059d4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ce:	4618      	mov	r0, r3
 80059d0:	f000 fd1c 	bl	800640c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d004      	beq.n	80059e6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059e0:	4618      	mov	r0, r3
 80059e2:	f000 fd13 	bl	800640c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d004      	beq.n	80059f8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059f2:	4618      	mov	r0, r3
 80059f4:	f000 fd0a 	bl	800640c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80059f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00e      	beq.n	8005a1c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80059fe:	6879      	ldr	r1, [r7, #4]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	3304      	adds	r3, #4
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	8b12      	ldrh	r2, [r2, #24]
 8005a08:	9202      	str	r2, [sp, #8]
 8005a0a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005a0c:	9201      	str	r2, [sp, #4]
 8005a0e:	9300      	str	r3, [sp, #0]
 8005a10:	460b      	mov	r3, r1
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	69b9      	ldr	r1, [r7, #24]
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f004 fcc2 	bl	800a3a0 <tcp_rst>
    }
    last_state = pcb->state;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	7d1b      	ldrb	r3, [r3, #20]
 8005a20:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f7ff fd34 	bl	8005490 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d004      	beq.n	8005a38 <tcp_abandon+0x154>
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	f06f 010c 	mvn.w	r1, #12
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	4798      	blx	r3
  }
}
 8005a38:	3728      	adds	r7, #40	; 0x28
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	0800ef30 	.word	0x0800ef30
 8005a44:	0800f074 	.word	0x0800f074
 8005a48:	0800ef74 	.word	0x0800ef74
 8005a4c:	0800f090 	.word	0x0800f090
 8005a50:	200082d4 	.word	0x200082d4
 8005a54:	200082c8 	.word	0x200082c8
 8005a58:	200082d0 	.word	0x200082d0
 8005a5c:	200082d8 	.word	0x200082d8

08005a60 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8005a68:	2101      	movs	r1, #1
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f7ff ff3a 	bl	80058e4 <tcp_abandon>
}
 8005a70:	bf00      	nop
 8005a72:	3708      	adds	r7, #8
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d106      	bne.n	8005a94 <tcp_update_rcv_ann_wnd+0x1c>
 8005a86:	4b25      	ldr	r3, [pc, #148]	; (8005b1c <tcp_update_rcv_ann_wnd+0xa4>)
 8005a88:	f240 32a6 	movw	r2, #934	; 0x3a6
 8005a8c:	4924      	ldr	r1, [pc, #144]	; (8005b20 <tcp_update_rcv_ann_wnd+0xa8>)
 8005a8e:	4825      	ldr	r0, [pc, #148]	; (8005b24 <tcp_update_rcv_ann_wnd+0xac>)
 8005a90:	f007 fc26 	bl	800d2e0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8005a9c:	4413      	add	r3, r2
 8005a9e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8005aa8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8005aac:	bf28      	it	cs
 8005aae:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8005ab2:	b292      	uxth	r2, r2
 8005ab4:	4413      	add	r3, r2
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	db08      	blt.n	8005ad0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	e020      	b.n	8005b12 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	dd03      	ble.n	8005ae6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ae4:	e014      	b.n	8005b10 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005af8:	d306      	bcc.n	8005b08 <tcp_update_rcv_ann_wnd+0x90>
 8005afa:	4b08      	ldr	r3, [pc, #32]	; (8005b1c <tcp_update_rcv_ann_wnd+0xa4>)
 8005afc:	f240 32b6 	movw	r2, #950	; 0x3b6
 8005b00:	4909      	ldr	r1, [pc, #36]	; (8005b28 <tcp_update_rcv_ann_wnd+0xb0>)
 8005b02:	4808      	ldr	r0, [pc, #32]	; (8005b24 <tcp_update_rcv_ann_wnd+0xac>)
 8005b04:	f007 fbec 	bl	800d2e0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8005b10:	2300      	movs	r3, #0
  }
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3710      	adds	r7, #16
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	0800ef30 	.word	0x0800ef30
 8005b20:	0800f18c 	.word	0x0800f18c
 8005b24:	0800ef74 	.word	0x0800ef74
 8005b28:	0800f1b0 	.word	0x0800f1b0

08005b2c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	460b      	mov	r3, r1
 8005b36:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d107      	bne.n	8005b4e <tcp_recved+0x22>
 8005b3e:	4b1f      	ldr	r3, [pc, #124]	; (8005bbc <tcp_recved+0x90>)
 8005b40:	f240 32cf 	movw	r2, #975	; 0x3cf
 8005b44:	491e      	ldr	r1, [pc, #120]	; (8005bc0 <tcp_recved+0x94>)
 8005b46:	481f      	ldr	r0, [pc, #124]	; (8005bc4 <tcp_recved+0x98>)
 8005b48:	f007 fbca 	bl	800d2e0 <iprintf>
 8005b4c:	e032      	b.n	8005bb4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	7d1b      	ldrb	r3, [r3, #20]
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d106      	bne.n	8005b64 <tcp_recved+0x38>
 8005b56:	4b19      	ldr	r3, [pc, #100]	; (8005bbc <tcp_recved+0x90>)
 8005b58:	f240 32d2 	movw	r2, #978	; 0x3d2
 8005b5c:	491a      	ldr	r1, [pc, #104]	; (8005bc8 <tcp_recved+0x9c>)
 8005b5e:	4819      	ldr	r0, [pc, #100]	; (8005bc4 <tcp_recved+0x98>)
 8005b60:	f007 fbbe 	bl	800d2e0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8005b68:	887b      	ldrh	r3, [r7, #2]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8005b6e:	89fb      	ldrh	r3, [r7, #14]
 8005b70:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8005b74:	d804      	bhi.n	8005b80 <tcp_recved+0x54>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b7a:	89fa      	ldrh	r2, [r7, #14]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d204      	bcs.n	8005b8a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8005b86:	851a      	strh	r2, [r3, #40]	; 0x28
 8005b88:	e002      	b.n	8005b90 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	89fa      	ldrh	r2, [r7, #14]
 8005b8e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f7ff ff71 	bl	8005a78 <tcp_update_rcv_ann_wnd>
 8005b96:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8005b9e:	d309      	bcc.n	8005bb4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	8b5b      	ldrh	r3, [r3, #26]
 8005ba4:	f043 0302 	orr.w	r3, r3, #2
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f003 fe42 	bl	8009838 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8005bb4:	3710      	adds	r7, #16
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	0800ef30 	.word	0x0800ef30
 8005bc0:	0800f1cc 	.word	0x0800f1cc
 8005bc4:	0800ef74 	.word	0x0800ef74
 8005bc8:	0800f1e4 	.word	0x0800f1e4

08005bcc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8005bcc:	b5b0      	push	{r4, r5, r7, lr}
 8005bce:	b090      	sub	sp, #64	; 0x40
 8005bd0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8005bd8:	4b94      	ldr	r3, [pc, #592]	; (8005e2c <tcp_slowtmr+0x260>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	3301      	adds	r3, #1
 8005bde:	4a93      	ldr	r2, [pc, #588]	; (8005e2c <tcp_slowtmr+0x260>)
 8005be0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8005be2:	4b93      	ldr	r3, [pc, #588]	; (8005e30 <tcp_slowtmr+0x264>)
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	3301      	adds	r3, #1
 8005be8:	b2da      	uxtb	r2, r3
 8005bea:	4b91      	ldr	r3, [pc, #580]	; (8005e30 <tcp_slowtmr+0x264>)
 8005bec:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8005bf2:	4b90      	ldr	r3, [pc, #576]	; (8005e34 <tcp_slowtmr+0x268>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8005bf8:	e29f      	b.n	800613a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8005bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bfc:	7d1b      	ldrb	r3, [r3, #20]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d106      	bne.n	8005c10 <tcp_slowtmr+0x44>
 8005c02:	4b8d      	ldr	r3, [pc, #564]	; (8005e38 <tcp_slowtmr+0x26c>)
 8005c04:	f240 42be 	movw	r2, #1214	; 0x4be
 8005c08:	498c      	ldr	r1, [pc, #560]	; (8005e3c <tcp_slowtmr+0x270>)
 8005c0a:	488d      	ldr	r0, [pc, #564]	; (8005e40 <tcp_slowtmr+0x274>)
 8005c0c:	f007 fb68 	bl	800d2e0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8005c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c12:	7d1b      	ldrb	r3, [r3, #20]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d106      	bne.n	8005c26 <tcp_slowtmr+0x5a>
 8005c18:	4b87      	ldr	r3, [pc, #540]	; (8005e38 <tcp_slowtmr+0x26c>)
 8005c1a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8005c1e:	4989      	ldr	r1, [pc, #548]	; (8005e44 <tcp_slowtmr+0x278>)
 8005c20:	4887      	ldr	r0, [pc, #540]	; (8005e40 <tcp_slowtmr+0x274>)
 8005c22:	f007 fb5d 	bl	800d2e0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8005c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c28:	7d1b      	ldrb	r3, [r3, #20]
 8005c2a:	2b0a      	cmp	r3, #10
 8005c2c:	d106      	bne.n	8005c3c <tcp_slowtmr+0x70>
 8005c2e:	4b82      	ldr	r3, [pc, #520]	; (8005e38 <tcp_slowtmr+0x26c>)
 8005c30:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8005c34:	4984      	ldr	r1, [pc, #528]	; (8005e48 <tcp_slowtmr+0x27c>)
 8005c36:	4882      	ldr	r0, [pc, #520]	; (8005e40 <tcp_slowtmr+0x274>)
 8005c38:	f007 fb52 	bl	800d2e0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8005c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3e:	7f9a      	ldrb	r2, [r3, #30]
 8005c40:	4b7b      	ldr	r3, [pc, #492]	; (8005e30 <tcp_slowtmr+0x264>)
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d105      	bne.n	8005c54 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8005c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8005c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8005c52:	e272      	b.n	800613a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8005c54:	4b76      	ldr	r3, [pc, #472]	; (8005e30 <tcp_slowtmr+0x264>)
 8005c56:	781a      	ldrb	r2, [r3, #0]
 8005c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c5a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8005c62:	2300      	movs	r3, #0
 8005c64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8005c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c6a:	7d1b      	ldrb	r3, [r3, #20]
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d10a      	bne.n	8005c86 <tcp_slowtmr+0xba>
 8005c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c76:	2b05      	cmp	r3, #5
 8005c78:	d905      	bls.n	8005c86 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8005c7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c7e:	3301      	adds	r3, #1
 8005c80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005c84:	e11e      	b.n	8005ec4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8005c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c88:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c8c:	2b0b      	cmp	r3, #11
 8005c8e:	d905      	bls.n	8005c9c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8005c90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c94:	3301      	adds	r3, #1
 8005c96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005c9a:	e113      	b.n	8005ec4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8005c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c9e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d075      	beq.n	8005d92 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8005ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d006      	beq.n	8005cbc <tcp_slowtmr+0xf0>
 8005cae:	4b62      	ldr	r3, [pc, #392]	; (8005e38 <tcp_slowtmr+0x26c>)
 8005cb0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8005cb4:	4965      	ldr	r1, [pc, #404]	; (8005e4c <tcp_slowtmr+0x280>)
 8005cb6:	4862      	ldr	r0, [pc, #392]	; (8005e40 <tcp_slowtmr+0x274>)
 8005cb8:	f007 fb12 	bl	800d2e0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8005cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d106      	bne.n	8005cd2 <tcp_slowtmr+0x106>
 8005cc4:	4b5c      	ldr	r3, [pc, #368]	; (8005e38 <tcp_slowtmr+0x26c>)
 8005cc6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8005cca:	4961      	ldr	r1, [pc, #388]	; (8005e50 <tcp_slowtmr+0x284>)
 8005ccc:	485c      	ldr	r0, [pc, #368]	; (8005e40 <tcp_slowtmr+0x274>)
 8005cce:	f007 fb07 	bl	800d2e0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8005cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8005cd8:	2b0b      	cmp	r3, #11
 8005cda:	d905      	bls.n	8005ce8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8005cdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005ce6:	e0ed      	b.n	8005ec4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8005ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	4a58      	ldr	r2, [pc, #352]	; (8005e54 <tcp_slowtmr+0x288>)
 8005cf2:	5cd3      	ldrb	r3, [r2, r3]
 8005cf4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8005cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005cfc:	7c7a      	ldrb	r2, [r7, #17]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d907      	bls.n	8005d12 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8005d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d04:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005d08:	3301      	adds	r3, #1
 8005d0a:	b2da      	uxtb	r2, r3
 8005d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8005d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d14:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005d18:	7c7a      	ldrb	r2, [r7, #17]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	f200 80d2 	bhi.w	8005ec4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8005d20:	2301      	movs	r3, #1
 8005d22:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8005d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d108      	bne.n	8005d40 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8005d2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d30:	f004 fc2a 	bl	800a588 <tcp_zero_window_probe>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d014      	beq.n	8005d64 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	623b      	str	r3, [r7, #32]
 8005d3e:	e011      	b.n	8005d64 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8005d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005d46:	4619      	mov	r1, r3
 8005d48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d4a:	f003 faef 	bl	800932c <tcp_split_unsent_seg>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d107      	bne.n	8005d64 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8005d54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d56:	f003 fd6f 	bl	8009838 <tcp_output>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d101      	bne.n	8005d64 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8005d60:	2300      	movs	r3, #0
 8005d62:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8005d64:	6a3b      	ldr	r3, [r7, #32]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	f000 80ac 	beq.w	8005ec4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8005d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8005d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d76:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8005d7a:	2b06      	cmp	r3, #6
 8005d7c:	f200 80a2 	bhi.w	8005ec4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8005d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d82:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8005d86:	3301      	adds	r3, #1
 8005d88:	b2da      	uxtb	r2, r3
 8005d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d8c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8005d90:	e098      	b.n	8005ec4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8005d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d94:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	db0f      	blt.n	8005dbc <tcp_slowtmr+0x1f0>
 8005d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005da2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d008      	beq.n	8005dbc <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8005daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dac:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	3301      	adds	r3, #1
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	b21a      	sxth	r2, r3
 8005db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dba:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8005dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dbe:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8005dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	db7b      	blt.n	8005ec4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8005dcc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005dce:	f004 f825 	bl	8009e1c <tcp_rexmit_rto_prepare>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d007      	beq.n	8005de8 <tcp_slowtmr+0x21c>
 8005dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d171      	bne.n	8005ec4 <tcp_slowtmr+0x2f8>
 8005de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d06d      	beq.n	8005ec4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8005de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dea:	7d1b      	ldrb	r3, [r3, #20]
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d03a      	beq.n	8005e66 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8005df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005df6:	2b0c      	cmp	r3, #12
 8005df8:	bf28      	it	cs
 8005dfa:	230c      	movcs	r3, #12
 8005dfc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8005dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e00:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8005e04:	10db      	asrs	r3, r3, #3
 8005e06:	b21b      	sxth	r3, r3
 8005e08:	461a      	mov	r2, r3
 8005e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8005e10:	4413      	add	r3, r2
 8005e12:	7efa      	ldrb	r2, [r7, #27]
 8005e14:	4910      	ldr	r1, [pc, #64]	; (8005e58 <tcp_slowtmr+0x28c>)
 8005e16:	5c8a      	ldrb	r2, [r1, r2]
 8005e18:	4093      	lsls	r3, r2
 8005e1a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8005e22:	4293      	cmp	r3, r2
 8005e24:	dc1a      	bgt.n	8005e5c <tcp_slowtmr+0x290>
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	b21a      	sxth	r2, r3
 8005e2a:	e019      	b.n	8005e60 <tcp_slowtmr+0x294>
 8005e2c:	200082c4 	.word	0x200082c4
 8005e30:	200082da 	.word	0x200082da
 8005e34:	200082d0 	.word	0x200082d0
 8005e38:	0800ef30 	.word	0x0800ef30
 8005e3c:	0800f274 	.word	0x0800f274
 8005e40:	0800ef74 	.word	0x0800ef74
 8005e44:	0800f2a0 	.word	0x0800f2a0
 8005e48:	0800f2cc 	.word	0x0800f2cc
 8005e4c:	0800f2fc 	.word	0x0800f2fc
 8005e50:	0800f330 	.word	0x0800f330
 8005e54:	08010f10 	.word	0x08010f10
 8005e58:	08010f00 	.word	0x08010f00
 8005e5c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e62:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8005e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e68:	2200      	movs	r2, #0
 8005e6a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8005e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e6e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8005e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e74:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	bf28      	it	cs
 8005e7c:	4613      	movcs	r3, r2
 8005e7e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8005e80:	8a7b      	ldrh	r3, [r7, #18]
 8005e82:	085b      	lsrs	r3, r3, #1
 8005e84:	b29a      	uxth	r2, r3
 8005e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e88:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8005e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e8e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8005e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005e96:	005b      	lsls	r3, r3, #1
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d206      	bcs.n	8005eac <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8005e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005ea2:	005b      	lsls	r3, r3, #1
 8005ea4:	b29a      	uxth	r2, r3
 8005ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8005eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eae:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8005eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8005eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8005ebe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ec0:	f004 f81c 	bl	8009efc <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8005ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec6:	7d1b      	ldrb	r3, [r3, #20]
 8005ec8:	2b06      	cmp	r3, #6
 8005eca:	d111      	bne.n	8005ef0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8005ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ece:	8b5b      	ldrh	r3, [r3, #26]
 8005ed0:	f003 0310 	and.w	r3, r3, #16
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d00b      	beq.n	8005ef0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005ed8:	4b9d      	ldr	r3, [pc, #628]	; (8006150 <tcp_slowtmr+0x584>)
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ede:	6a1b      	ldr	r3, [r3, #32]
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	2b28      	cmp	r3, #40	; 0x28
 8005ee4:	d904      	bls.n	8005ef0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8005ee6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005eea:	3301      	adds	r3, #1
 8005eec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8005ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef2:	7a5b      	ldrb	r3, [r3, #9]
 8005ef4:	f003 0308 	and.w	r3, r3, #8
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d04c      	beq.n	8005f96 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8005efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005efe:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8005f00:	2b04      	cmp	r3, #4
 8005f02:	d003      	beq.n	8005f0c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8005f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f06:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8005f08:	2b07      	cmp	r3, #7
 8005f0a:	d144      	bne.n	8005f96 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005f0c:	4b90      	ldr	r3, [pc, #576]	; (8006150 <tcp_slowtmr+0x584>)
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f12:	6a1b      	ldr	r3, [r3, #32]
 8005f14:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8005f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f1c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8005f20:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8005f24:	498b      	ldr	r1, [pc, #556]	; (8006154 <tcp_slowtmr+0x588>)
 8005f26:	fba1 1303 	umull	r1, r3, r1, r3
 8005f2a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d90a      	bls.n	8005f46 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8005f30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f34:	3301      	adds	r3, #1
 8005f36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8005f3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005f3e:	3301      	adds	r3, #1
 8005f40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005f44:	e027      	b.n	8005f96 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005f46:	4b82      	ldr	r3, [pc, #520]	; (8006150 <tcp_slowtmr+0x584>)
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8005f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f52:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8005f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f58:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	4b7e      	ldr	r3, [pc, #504]	; (8006158 <tcp_slowtmr+0x58c>)
 8005f60:	fb00 f303 	mul.w	r3, r0, r3
 8005f64:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8005f66:	497b      	ldr	r1, [pc, #492]	; (8006154 <tcp_slowtmr+0x588>)
 8005f68:	fba1 1303 	umull	r1, r3, r1, r3
 8005f6c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d911      	bls.n	8005f96 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8005f72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f74:	f004 fac8 	bl	800a508 <tcp_keepalive>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8005f7e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d107      	bne.n	8005f96 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8005f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f88:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	b2da      	uxtb	r2, r3
 8005f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f92:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8005f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d011      	beq.n	8005fc2 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8005f9e:	4b6c      	ldr	r3, [pc, #432]	; (8006150 <tcp_slowtmr+0x584>)
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	1ad2      	subs	r2, r2, r3
 8005fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005faa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005fae:	4619      	mov	r1, r3
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	005b      	lsls	r3, r3, #1
 8005fb4:	440b      	add	r3, r1
 8005fb6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d302      	bcc.n	8005fc2 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8005fbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005fbe:	f000 fddb 	bl	8006b78 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8005fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc4:	7d1b      	ldrb	r3, [r3, #20]
 8005fc6:	2b03      	cmp	r3, #3
 8005fc8:	d10b      	bne.n	8005fe2 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005fca:	4b61      	ldr	r3, [pc, #388]	; (8006150 <tcp_slowtmr+0x584>)
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	2b28      	cmp	r3, #40	; 0x28
 8005fd6:	d904      	bls.n	8005fe2 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8005fd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fdc:	3301      	adds	r3, #1
 8005fde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8005fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe4:	7d1b      	ldrb	r3, [r3, #20]
 8005fe6:	2b09      	cmp	r3, #9
 8005fe8:	d10b      	bne.n	8006002 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8005fea:	4b59      	ldr	r3, [pc, #356]	; (8006150 <tcp_slowtmr+0x584>)
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff0:	6a1b      	ldr	r3, [r3, #32]
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	2bf0      	cmp	r3, #240	; 0xf0
 8005ff6:	d904      	bls.n	8006002 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8005ff8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006002:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006006:	2b00      	cmp	r3, #0
 8006008:	d060      	beq.n	80060cc <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800600a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800600c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006010:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8006012:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006014:	f000 fbfc 	bl	8006810 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8006018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601a:	2b00      	cmp	r3, #0
 800601c:	d010      	beq.n	8006040 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800601e:	4b4f      	ldr	r3, [pc, #316]	; (800615c <tcp_slowtmr+0x590>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006024:	429a      	cmp	r2, r3
 8006026:	d106      	bne.n	8006036 <tcp_slowtmr+0x46a>
 8006028:	4b4d      	ldr	r3, [pc, #308]	; (8006160 <tcp_slowtmr+0x594>)
 800602a:	f240 526d 	movw	r2, #1389	; 0x56d
 800602e:	494d      	ldr	r1, [pc, #308]	; (8006164 <tcp_slowtmr+0x598>)
 8006030:	484d      	ldr	r0, [pc, #308]	; (8006168 <tcp_slowtmr+0x59c>)
 8006032:	f007 f955 	bl	800d2e0 <iprintf>
        prev->next = pcb->next;
 8006036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006038:	68da      	ldr	r2, [r3, #12]
 800603a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800603c:	60da      	str	r2, [r3, #12]
 800603e:	e00f      	b.n	8006060 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8006040:	4b46      	ldr	r3, [pc, #280]	; (800615c <tcp_slowtmr+0x590>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006046:	429a      	cmp	r2, r3
 8006048:	d006      	beq.n	8006058 <tcp_slowtmr+0x48c>
 800604a:	4b45      	ldr	r3, [pc, #276]	; (8006160 <tcp_slowtmr+0x594>)
 800604c:	f240 5271 	movw	r2, #1393	; 0x571
 8006050:	4946      	ldr	r1, [pc, #280]	; (800616c <tcp_slowtmr+0x5a0>)
 8006052:	4845      	ldr	r0, [pc, #276]	; (8006168 <tcp_slowtmr+0x59c>)
 8006054:	f007 f944 	bl	800d2e0 <iprintf>
        tcp_active_pcbs = pcb->next;
 8006058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	4a3f      	ldr	r2, [pc, #252]	; (800615c <tcp_slowtmr+0x590>)
 800605e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8006060:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006064:	2b00      	cmp	r3, #0
 8006066:	d013      	beq.n	8006090 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800606a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800606c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800606e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006070:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8006072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006074:	3304      	adds	r3, #4
 8006076:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006078:	8ad2      	ldrh	r2, [r2, #22]
 800607a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800607c:	8b09      	ldrh	r1, [r1, #24]
 800607e:	9102      	str	r1, [sp, #8]
 8006080:	9201      	str	r2, [sp, #4]
 8006082:	9300      	str	r3, [sp, #0]
 8006084:	462b      	mov	r3, r5
 8006086:	4622      	mov	r2, r4
 8006088:	4601      	mov	r1, r0
 800608a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800608c:	f004 f988 	bl	800a3a0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8006090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8006096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006098:	7d1b      	ldrb	r3, [r3, #20]
 800609a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800609c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800609e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80060a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80060a6:	6838      	ldr	r0, [r7, #0]
 80060a8:	f7ff f9f2 	bl	8005490 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80060ac:	4b30      	ldr	r3, [pc, #192]	; (8006170 <tcp_slowtmr+0x5a4>)
 80060ae:	2200      	movs	r2, #0
 80060b0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d004      	beq.n	80060c2 <tcp_slowtmr+0x4f6>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f06f 010c 	mvn.w	r1, #12
 80060be:	68b8      	ldr	r0, [r7, #8]
 80060c0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80060c2:	4b2b      	ldr	r3, [pc, #172]	; (8006170 <tcp_slowtmr+0x5a4>)
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d037      	beq.n	800613a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80060ca:	e590      	b.n	8005bee <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80060cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ce:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80060d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80060d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d8:	7f1b      	ldrb	r3, [r3, #28]
 80060da:	3301      	adds	r3, #1
 80060dc:	b2da      	uxtb	r2, r3
 80060de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80060e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e4:	7f1a      	ldrb	r2, [r3, #28]
 80060e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e8:	7f5b      	ldrb	r3, [r3, #29]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d325      	bcc.n	800613a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80060ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f0:	2200      	movs	r2, #0
 80060f2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80060f4:	4b1e      	ldr	r3, [pc, #120]	; (8006170 <tcp_slowtmr+0x5a4>)
 80060f6:	2200      	movs	r2, #0
 80060f8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80060fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00b      	beq.n	800611c <tcp_slowtmr+0x550>
 8006104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006106:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800610a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800610c:	6912      	ldr	r2, [r2, #16]
 800610e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006110:	4610      	mov	r0, r2
 8006112:	4798      	blx	r3
 8006114:	4603      	mov	r3, r0
 8006116:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800611a:	e002      	b.n	8006122 <tcp_slowtmr+0x556>
 800611c:	2300      	movs	r3, #0
 800611e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8006122:	4b13      	ldr	r3, [pc, #76]	; (8006170 <tcp_slowtmr+0x5a4>)
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d000      	beq.n	800612c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800612a:	e560      	b.n	8005bee <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800612c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8006130:	2b00      	cmp	r3, #0
 8006132:	d102      	bne.n	800613a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8006134:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006136:	f003 fb7f 	bl	8009838 <tcp_output>
  while (pcb != NULL) {
 800613a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613c:	2b00      	cmp	r3, #0
 800613e:	f47f ad5c 	bne.w	8005bfa <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8006142:	2300      	movs	r3, #0
 8006144:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8006146:	4b0b      	ldr	r3, [pc, #44]	; (8006174 <tcp_slowtmr+0x5a8>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800614c:	e067      	b.n	800621e <tcp_slowtmr+0x652>
 800614e:	bf00      	nop
 8006150:	200082c4 	.word	0x200082c4
 8006154:	10624dd3 	.word	0x10624dd3
 8006158:	000124f8 	.word	0x000124f8
 800615c:	200082d0 	.word	0x200082d0
 8006160:	0800ef30 	.word	0x0800ef30
 8006164:	0800f368 	.word	0x0800f368
 8006168:	0800ef74 	.word	0x0800ef74
 800616c:	0800f394 	.word	0x0800f394
 8006170:	200082d8 	.word	0x200082d8
 8006174:	200082d4 	.word	0x200082d4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800617a:	7d1b      	ldrb	r3, [r3, #20]
 800617c:	2b0a      	cmp	r3, #10
 800617e:	d006      	beq.n	800618e <tcp_slowtmr+0x5c2>
 8006180:	4b2b      	ldr	r3, [pc, #172]	; (8006230 <tcp_slowtmr+0x664>)
 8006182:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8006186:	492b      	ldr	r1, [pc, #172]	; (8006234 <tcp_slowtmr+0x668>)
 8006188:	482b      	ldr	r0, [pc, #172]	; (8006238 <tcp_slowtmr+0x66c>)
 800618a:	f007 f8a9 	bl	800d2e0 <iprintf>
    pcb_remove = 0;
 800618e:	2300      	movs	r3, #0
 8006190:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006194:	4b29      	ldr	r3, [pc, #164]	; (800623c <tcp_slowtmr+0x670>)
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800619a:	6a1b      	ldr	r3, [r3, #32]
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	2bf0      	cmp	r3, #240	; 0xf0
 80061a0:	d904      	bls.n	80061ac <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80061a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061a6:	3301      	adds	r3, #1
 80061a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80061ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d02f      	beq.n	8006214 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80061b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80061b6:	f000 fb2b 	bl	8006810 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80061ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d010      	beq.n	80061e2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80061c0:	4b1f      	ldr	r3, [pc, #124]	; (8006240 <tcp_slowtmr+0x674>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d106      	bne.n	80061d8 <tcp_slowtmr+0x60c>
 80061ca:	4b19      	ldr	r3, [pc, #100]	; (8006230 <tcp_slowtmr+0x664>)
 80061cc:	f240 52af 	movw	r2, #1455	; 0x5af
 80061d0:	491c      	ldr	r1, [pc, #112]	; (8006244 <tcp_slowtmr+0x678>)
 80061d2:	4819      	ldr	r0, [pc, #100]	; (8006238 <tcp_slowtmr+0x66c>)
 80061d4:	f007 f884 	bl	800d2e0 <iprintf>
        prev->next = pcb->next;
 80061d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061da:	68da      	ldr	r2, [r3, #12]
 80061dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061de:	60da      	str	r2, [r3, #12]
 80061e0:	e00f      	b.n	8006202 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80061e2:	4b17      	ldr	r3, [pc, #92]	; (8006240 <tcp_slowtmr+0x674>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d006      	beq.n	80061fa <tcp_slowtmr+0x62e>
 80061ec:	4b10      	ldr	r3, [pc, #64]	; (8006230 <tcp_slowtmr+0x664>)
 80061ee:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80061f2:	4915      	ldr	r1, [pc, #84]	; (8006248 <tcp_slowtmr+0x67c>)
 80061f4:	4810      	ldr	r0, [pc, #64]	; (8006238 <tcp_slowtmr+0x66c>)
 80061f6:	f007 f873 	bl	800d2e0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80061fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	4a10      	ldr	r2, [pc, #64]	; (8006240 <tcp_slowtmr+0x674>)
 8006200:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8006202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006204:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8006206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800620c:	69f8      	ldr	r0, [r7, #28]
 800620e:	f7ff f93f 	bl	8005490 <tcp_free>
 8006212:	e004      	b.n	800621e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8006214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006216:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800621e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1a9      	bne.n	8006178 <tcp_slowtmr+0x5ac>
    }
  }
}
 8006224:	bf00      	nop
 8006226:	bf00      	nop
 8006228:	3730      	adds	r7, #48	; 0x30
 800622a:	46bd      	mov	sp, r7
 800622c:	bdb0      	pop	{r4, r5, r7, pc}
 800622e:	bf00      	nop
 8006230:	0800ef30 	.word	0x0800ef30
 8006234:	0800f3c0 	.word	0x0800f3c0
 8006238:	0800ef74 	.word	0x0800ef74
 800623c:	200082c4 	.word	0x200082c4
 8006240:	200082d4 	.word	0x200082d4
 8006244:	0800f3f0 	.word	0x0800f3f0
 8006248:	0800f418 	.word	0x0800f418

0800624c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8006252:	4b2d      	ldr	r3, [pc, #180]	; (8006308 <tcp_fasttmr+0xbc>)
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	3301      	adds	r3, #1
 8006258:	b2da      	uxtb	r2, r3
 800625a:	4b2b      	ldr	r3, [pc, #172]	; (8006308 <tcp_fasttmr+0xbc>)
 800625c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800625e:	4b2b      	ldr	r3, [pc, #172]	; (800630c <tcp_fasttmr+0xc0>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006264:	e048      	b.n	80062f8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	7f9a      	ldrb	r2, [r3, #30]
 800626a:	4b27      	ldr	r3, [pc, #156]	; (8006308 <tcp_fasttmr+0xbc>)
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	429a      	cmp	r2, r3
 8006270:	d03f      	beq.n	80062f2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8006272:	4b25      	ldr	r3, [pc, #148]	; (8006308 <tcp_fasttmr+0xbc>)
 8006274:	781a      	ldrb	r2, [r3, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	8b5b      	ldrh	r3, [r3, #26]
 800627e:	f003 0301 	and.w	r3, r3, #1
 8006282:	2b00      	cmp	r3, #0
 8006284:	d010      	beq.n	80062a8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	8b5b      	ldrh	r3, [r3, #26]
 800628a:	f043 0302 	orr.w	r3, r3, #2
 800628e:	b29a      	uxth	r2, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f003 facf 	bl	8009838 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	8b5b      	ldrh	r3, [r3, #26]
 800629e:	f023 0303 	bic.w	r3, r3, #3
 80062a2:	b29a      	uxth	r2, r3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	8b5b      	ldrh	r3, [r3, #26]
 80062ac:	f003 0308 	and.w	r3, r3, #8
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d009      	beq.n	80062c8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	8b5b      	ldrh	r3, [r3, #26]
 80062b8:	f023 0308 	bic.w	r3, r3, #8
 80062bc:	b29a      	uxth	r2, r3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f7ff fa78 	bl	80057b8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00a      	beq.n	80062ec <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80062d6:	4b0e      	ldr	r3, [pc, #56]	; (8006310 <tcp_fasttmr+0xc4>)
 80062d8:	2200      	movs	r2, #0
 80062da:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 f819 	bl	8006314 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80062e2:	4b0b      	ldr	r3, [pc, #44]	; (8006310 <tcp_fasttmr+0xc4>)
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d000      	beq.n	80062ec <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80062ea:	e7b8      	b.n	800625e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	607b      	str	r3, [r7, #4]
 80062f0:	e002      	b.n	80062f8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d1b3      	bne.n	8006266 <tcp_fasttmr+0x1a>
    }
  }
}
 80062fe:	bf00      	nop
 8006300:	bf00      	nop
 8006302:	3708      	adds	r7, #8
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	200082da 	.word	0x200082da
 800630c:	200082d0 	.word	0x200082d0
 8006310:	200082d8 	.word	0x200082d8

08006314 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8006314:	b590      	push	{r4, r7, lr}
 8006316:	b085      	sub	sp, #20
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d109      	bne.n	8006336 <tcp_process_refused_data+0x22>
 8006322:	4b37      	ldr	r3, [pc, #220]	; (8006400 <tcp_process_refused_data+0xec>)
 8006324:	f240 6209 	movw	r2, #1545	; 0x609
 8006328:	4936      	ldr	r1, [pc, #216]	; (8006404 <tcp_process_refused_data+0xf0>)
 800632a:	4837      	ldr	r0, [pc, #220]	; (8006408 <tcp_process_refused_data+0xf4>)
 800632c:	f006 ffd8 	bl	800d2e0 <iprintf>
 8006330:	f06f 030f 	mvn.w	r3, #15
 8006334:	e060      	b.n	80063f8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800633a:	7b5b      	ldrb	r3, [r3, #13]
 800633c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006342:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00b      	beq.n	800636c <tcp_process_refused_data+0x58>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6918      	ldr	r0, [r3, #16]
 800635e:	2300      	movs	r3, #0
 8006360:	68ba      	ldr	r2, [r7, #8]
 8006362:	6879      	ldr	r1, [r7, #4]
 8006364:	47a0      	blx	r4
 8006366:	4603      	mov	r3, r0
 8006368:	73fb      	strb	r3, [r7, #15]
 800636a:	e007      	b.n	800637c <tcp_process_refused_data+0x68>
 800636c:	2300      	movs	r3, #0
 800636e:	68ba      	ldr	r2, [r7, #8]
 8006370:	6879      	ldr	r1, [r7, #4]
 8006372:	2000      	movs	r0, #0
 8006374:	f000 f8a4 	bl	80064c0 <tcp_recv_null>
 8006378:	4603      	mov	r3, r0
 800637a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800637c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d12a      	bne.n	80063da <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8006384:	7bbb      	ldrb	r3, [r7, #14]
 8006386:	f003 0320 	and.w	r3, r3, #32
 800638a:	2b00      	cmp	r3, #0
 800638c:	d033      	beq.n	80063f6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006392:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006396:	d005      	beq.n	80063a4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800639c:	3301      	adds	r3, #1
 800639e:	b29a      	uxth	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00b      	beq.n	80063c6 <tcp_process_refused_data+0xb2>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6918      	ldr	r0, [r3, #16]
 80063b8:	2300      	movs	r3, #0
 80063ba:	2200      	movs	r2, #0
 80063bc:	6879      	ldr	r1, [r7, #4]
 80063be:	47a0      	blx	r4
 80063c0:	4603      	mov	r3, r0
 80063c2:	73fb      	strb	r3, [r7, #15]
 80063c4:	e001      	b.n	80063ca <tcp_process_refused_data+0xb6>
 80063c6:	2300      	movs	r3, #0
 80063c8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80063ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063ce:	f113 0f0d 	cmn.w	r3, #13
 80063d2:	d110      	bne.n	80063f6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80063d4:	f06f 030c 	mvn.w	r3, #12
 80063d8:	e00e      	b.n	80063f8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80063da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063de:	f113 0f0d 	cmn.w	r3, #13
 80063e2:	d102      	bne.n	80063ea <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80063e4:	f06f 030c 	mvn.w	r3, #12
 80063e8:	e006      	b.n	80063f8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80063f0:	f06f 0304 	mvn.w	r3, #4
 80063f4:	e000      	b.n	80063f8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3714      	adds	r7, #20
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd90      	pop	{r4, r7, pc}
 8006400:	0800ef30 	.word	0x0800ef30
 8006404:	0800f440 	.word	0x0800f440
 8006408:	0800ef74 	.word	0x0800ef74

0800640c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8006414:	e007      	b.n	8006426 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 f80a 	bl	8006436 <tcp_seg_free>
    seg = next;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d1f4      	bne.n	8006416 <tcp_segs_free+0xa>
  }
}
 800642c:	bf00      	nop
 800642e:	bf00      	nop
 8006430:	3710      	adds	r7, #16
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8006436:	b580      	push	{r7, lr}
 8006438:	b082      	sub	sp, #8
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00c      	beq.n	800645e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d004      	beq.n	8006456 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	4618      	mov	r0, r3
 8006452:	f7fe fc91 	bl	8004d78 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8006456:	6879      	ldr	r1, [r7, #4]
 8006458:	2004      	movs	r0, #4
 800645a:	f7fd fe33 	bl	80040c4 <memp_free>
  }
}
 800645e:	bf00      	nop
 8006460:	3708      	adds	r7, #8
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
	...

08006468 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d106      	bne.n	8006484 <tcp_seg_copy+0x1c>
 8006476:	4b0f      	ldr	r3, [pc, #60]	; (80064b4 <tcp_seg_copy+0x4c>)
 8006478:	f240 6282 	movw	r2, #1666	; 0x682
 800647c:	490e      	ldr	r1, [pc, #56]	; (80064b8 <tcp_seg_copy+0x50>)
 800647e:	480f      	ldr	r0, [pc, #60]	; (80064bc <tcp_seg_copy+0x54>)
 8006480:	f006 ff2e 	bl	800d2e0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8006484:	2004      	movs	r0, #4
 8006486:	f7fd fdad 	bl	8003fe4 <memp_malloc>
 800648a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d101      	bne.n	8006496 <tcp_seg_copy+0x2e>
    return NULL;
 8006492:	2300      	movs	r3, #0
 8006494:	e00a      	b.n	80064ac <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8006496:	2210      	movs	r2, #16
 8006498:	6879      	ldr	r1, [r7, #4]
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	f006 ff0a 	bl	800d2b4 <memcpy>
  pbuf_ref(cseg->p);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	4618      	mov	r0, r3
 80064a6:	f7fe fd07 	bl	8004eb8 <pbuf_ref>
  return cseg;
 80064aa:	68fb      	ldr	r3, [r7, #12]
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3710      	adds	r7, #16
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	0800ef30 	.word	0x0800ef30
 80064b8:	0800f484 	.word	0x0800f484
 80064bc:	0800ef74 	.word	0x0800ef74

080064c0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	607a      	str	r2, [r7, #4]
 80064cc:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d109      	bne.n	80064e8 <tcp_recv_null+0x28>
 80064d4:	4b12      	ldr	r3, [pc, #72]	; (8006520 <tcp_recv_null+0x60>)
 80064d6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80064da:	4912      	ldr	r1, [pc, #72]	; (8006524 <tcp_recv_null+0x64>)
 80064dc:	4812      	ldr	r0, [pc, #72]	; (8006528 <tcp_recv_null+0x68>)
 80064de:	f006 feff 	bl	800d2e0 <iprintf>
 80064e2:	f06f 030f 	mvn.w	r3, #15
 80064e6:	e016      	b.n	8006516 <tcp_recv_null+0x56>

  if (p != NULL) {
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d009      	beq.n	8006502 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	891b      	ldrh	r3, [r3, #8]
 80064f2:	4619      	mov	r1, r3
 80064f4:	68b8      	ldr	r0, [r7, #8]
 80064f6:	f7ff fb19 	bl	8005b2c <tcp_recved>
    pbuf_free(p);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f7fe fc3c 	bl	8004d78 <pbuf_free>
 8006500:	e008      	b.n	8006514 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8006502:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d104      	bne.n	8006514 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800650a:	68b8      	ldr	r0, [r7, #8]
 800650c:	f7ff f9be 	bl	800588c <tcp_close>
 8006510:	4603      	mov	r3, r0
 8006512:	e000      	b.n	8006516 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3710      	adds	r7, #16
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	0800ef30 	.word	0x0800ef30
 8006524:	0800f4a0 	.word	0x0800f4a0
 8006528:	0800ef74 	.word	0x0800ef74

0800652c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b086      	sub	sp, #24
 8006530:	af00      	add	r7, sp, #0
 8006532:	4603      	mov	r3, r0
 8006534:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8006536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800653a:	2b00      	cmp	r3, #0
 800653c:	db01      	blt.n	8006542 <tcp_kill_prio+0x16>
 800653e:	79fb      	ldrb	r3, [r7, #7]
 8006540:	e000      	b.n	8006544 <tcp_kill_prio+0x18>
 8006542:	237f      	movs	r3, #127	; 0x7f
 8006544:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8006546:	7afb      	ldrb	r3, [r7, #11]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d034      	beq.n	80065b6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800654c:	7afb      	ldrb	r3, [r7, #11]
 800654e:	3b01      	subs	r3, #1
 8006550:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8006552:	2300      	movs	r3, #0
 8006554:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006556:	2300      	movs	r3, #0
 8006558:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800655a:	4b19      	ldr	r3, [pc, #100]	; (80065c0 <tcp_kill_prio+0x94>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	617b      	str	r3, [r7, #20]
 8006560:	e01f      	b.n	80065a2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	7d5b      	ldrb	r3, [r3, #21]
 8006566:	7afa      	ldrb	r2, [r7, #11]
 8006568:	429a      	cmp	r2, r3
 800656a:	d80c      	bhi.n	8006586 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8006570:	7afa      	ldrb	r2, [r7, #11]
 8006572:	429a      	cmp	r2, r3
 8006574:	d112      	bne.n	800659c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006576:	4b13      	ldr	r3, [pc, #76]	; (80065c4 <tcp_kill_prio+0x98>)
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	6a1b      	ldr	r3, [r3, #32]
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	429a      	cmp	r2, r3
 8006584:	d80a      	bhi.n	800659c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8006586:	4b0f      	ldr	r3, [pc, #60]	; (80065c4 <tcp_kill_prio+0x98>)
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	6a1b      	ldr	r3, [r3, #32]
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	7d5b      	ldrb	r3, [r3, #21]
 800659a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	617b      	str	r3, [r7, #20]
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1dc      	bne.n	8006562 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d004      	beq.n	80065b8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80065ae:	6938      	ldr	r0, [r7, #16]
 80065b0:	f7ff fa56 	bl	8005a60 <tcp_abort>
 80065b4:	e000      	b.n	80065b8 <tcp_kill_prio+0x8c>
    return;
 80065b6:	bf00      	nop
  }
}
 80065b8:	3718      	adds	r7, #24
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	200082d0 	.word	0x200082d0
 80065c4:	200082c4 	.word	0x200082c4

080065c8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b086      	sub	sp, #24
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	4603      	mov	r3, r0
 80065d0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80065d2:	79fb      	ldrb	r3, [r7, #7]
 80065d4:	2b08      	cmp	r3, #8
 80065d6:	d009      	beq.n	80065ec <tcp_kill_state+0x24>
 80065d8:	79fb      	ldrb	r3, [r7, #7]
 80065da:	2b09      	cmp	r3, #9
 80065dc:	d006      	beq.n	80065ec <tcp_kill_state+0x24>
 80065de:	4b1a      	ldr	r3, [pc, #104]	; (8006648 <tcp_kill_state+0x80>)
 80065e0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80065e4:	4919      	ldr	r1, [pc, #100]	; (800664c <tcp_kill_state+0x84>)
 80065e6:	481a      	ldr	r0, [pc, #104]	; (8006650 <tcp_kill_state+0x88>)
 80065e8:	f006 fe7a 	bl	800d2e0 <iprintf>

  inactivity = 0;
 80065ec:	2300      	movs	r3, #0
 80065ee:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80065f0:	2300      	movs	r3, #0
 80065f2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80065f4:	4b17      	ldr	r3, [pc, #92]	; (8006654 <tcp_kill_state+0x8c>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	617b      	str	r3, [r7, #20]
 80065fa:	e017      	b.n	800662c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	7d1b      	ldrb	r3, [r3, #20]
 8006600:	79fa      	ldrb	r2, [r7, #7]
 8006602:	429a      	cmp	r2, r3
 8006604:	d10f      	bne.n	8006626 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006606:	4b14      	ldr	r3, [pc, #80]	; (8006658 <tcp_kill_state+0x90>)
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	429a      	cmp	r2, r3
 8006614:	d807      	bhi.n	8006626 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8006616:	4b10      	ldr	r3, [pc, #64]	; (8006658 <tcp_kill_state+0x90>)
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	617b      	str	r3, [r7, #20]
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1e4      	bne.n	80065fc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d003      	beq.n	8006640 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8006638:	2100      	movs	r1, #0
 800663a:	6938      	ldr	r0, [r7, #16]
 800663c:	f7ff f952 	bl	80058e4 <tcp_abandon>
  }
}
 8006640:	bf00      	nop
 8006642:	3718      	adds	r7, #24
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	0800ef30 	.word	0x0800ef30
 800664c:	0800f4bc 	.word	0x0800f4bc
 8006650:	0800ef74 	.word	0x0800ef74
 8006654:	200082d0 	.word	0x200082d0
 8006658:	200082c4 	.word	0x200082c4

0800665c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8006662:	2300      	movs	r3, #0
 8006664:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8006666:	2300      	movs	r3, #0
 8006668:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800666a:	4b12      	ldr	r3, [pc, #72]	; (80066b4 <tcp_kill_timewait+0x58>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	60fb      	str	r3, [r7, #12]
 8006670:	e012      	b.n	8006698 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006672:	4b11      	ldr	r3, [pc, #68]	; (80066b8 <tcp_kill_timewait+0x5c>)
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6a1b      	ldr	r3, [r3, #32]
 800667a:	1ad3      	subs	r3, r2, r3
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	429a      	cmp	r2, r3
 8006680:	d807      	bhi.n	8006692 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8006682:	4b0d      	ldr	r3, [pc, #52]	; (80066b8 <tcp_kill_timewait+0x5c>)
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6a1b      	ldr	r3, [r3, #32]
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	60fb      	str	r3, [r7, #12]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d1e9      	bne.n	8006672 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d002      	beq.n	80066aa <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80066a4:	68b8      	ldr	r0, [r7, #8]
 80066a6:	f7ff f9db 	bl	8005a60 <tcp_abort>
  }
}
 80066aa:	bf00      	nop
 80066ac:	3710      	adds	r7, #16
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	200082d4 	.word	0x200082d4
 80066b8:	200082c4 	.word	0x200082c4

080066bc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80066c2:	4b10      	ldr	r3, [pc, #64]	; (8006704 <tcp_handle_closepend+0x48>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80066c8:	e014      	b.n	80066f4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	8b5b      	ldrh	r3, [r3, #26]
 80066d4:	f003 0308 	and.w	r3, r3, #8
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d009      	beq.n	80066f0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	8b5b      	ldrh	r3, [r3, #26]
 80066e0:	f023 0308 	bic.w	r3, r3, #8
 80066e4:	b29a      	uxth	r2, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f7ff f864 	bl	80057b8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1e7      	bne.n	80066ca <tcp_handle_closepend+0xe>
  }
}
 80066fa:	bf00      	nop
 80066fc:	bf00      	nop
 80066fe:	3708      	adds	r7, #8
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	200082d0 	.word	0x200082d0

08006708 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	4603      	mov	r3, r0
 8006710:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006712:	2002      	movs	r0, #2
 8006714:	f7fd fc66 	bl	8003fe4 <memp_malloc>
 8006718:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d126      	bne.n	800676e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8006720:	f7ff ffcc 	bl	80066bc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8006724:	f7ff ff9a 	bl	800665c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006728:	2002      	movs	r0, #2
 800672a:	f7fd fc5b 	bl	8003fe4 <memp_malloc>
 800672e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d11b      	bne.n	800676e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8006736:	2009      	movs	r0, #9
 8006738:	f7ff ff46 	bl	80065c8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800673c:	2002      	movs	r0, #2
 800673e:	f7fd fc51 	bl	8003fe4 <memp_malloc>
 8006742:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d111      	bne.n	800676e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800674a:	2008      	movs	r0, #8
 800674c:	f7ff ff3c 	bl	80065c8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006750:	2002      	movs	r0, #2
 8006752:	f7fd fc47 	bl	8003fe4 <memp_malloc>
 8006756:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d107      	bne.n	800676e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800675e:	79fb      	ldrb	r3, [r7, #7]
 8006760:	4618      	mov	r0, r3
 8006762:	f7ff fee3 	bl	800652c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006766:	2002      	movs	r0, #2
 8006768:	f7fd fc3c 	bl	8003fe4 <memp_malloc>
 800676c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d03f      	beq.n	80067f4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8006774:	229c      	movs	r2, #156	; 0x9c
 8006776:	2100      	movs	r1, #0
 8006778:	68f8      	ldr	r0, [r7, #12]
 800677a:	f006 fda9 	bl	800d2d0 <memset>
    pcb->prio = prio;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	79fa      	ldrb	r2, [r7, #7]
 8006782:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800678a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006794:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	22ff      	movs	r2, #255	; 0xff
 80067a2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f44f 7206 	mov.w	r2, #536	; 0x218
 80067aa:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2206      	movs	r2, #6
 80067b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2206      	movs	r2, #6
 80067b8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80067c0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2201      	movs	r2, #1
 80067c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80067ca:	4b0d      	ldr	r3, [pc, #52]	; (8006800 <tcp_alloc+0xf8>)
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80067d2:	4b0c      	ldr	r3, [pc, #48]	; (8006804 <tcp_alloc+0xfc>)
 80067d4:	781a      	ldrb	r2, [r3, #0]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80067e0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	4a08      	ldr	r2, [pc, #32]	; (8006808 <tcp_alloc+0x100>)
 80067e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	4a07      	ldr	r2, [pc, #28]	; (800680c <tcp_alloc+0x104>)
 80067f0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80067f4:	68fb      	ldr	r3, [r7, #12]
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3710      	adds	r7, #16
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	200082c4 	.word	0x200082c4
 8006804:	200082da 	.word	0x200082da
 8006808:	080064c1 	.word	0x080064c1
 800680c:	006ddd00 	.word	0x006ddd00

08006810 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d107      	bne.n	800682e <tcp_pcb_purge+0x1e>
 800681e:	4b21      	ldr	r3, [pc, #132]	; (80068a4 <tcp_pcb_purge+0x94>)
 8006820:	f640 0251 	movw	r2, #2129	; 0x851
 8006824:	4920      	ldr	r1, [pc, #128]	; (80068a8 <tcp_pcb_purge+0x98>)
 8006826:	4821      	ldr	r0, [pc, #132]	; (80068ac <tcp_pcb_purge+0x9c>)
 8006828:	f006 fd5a 	bl	800d2e0 <iprintf>
 800682c:	e037      	b.n	800689e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	7d1b      	ldrb	r3, [r3, #20]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d033      	beq.n	800689e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800683a:	2b0a      	cmp	r3, #10
 800683c:	d02f      	beq.n	800689e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8006842:	2b01      	cmp	r3, #1
 8006844:	d02b      	beq.n	800689e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800684a:	2b00      	cmp	r3, #0
 800684c:	d007      	beq.n	800685e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006852:	4618      	mov	r0, r3
 8006854:	f7fe fa90 	bl	8004d78 <pbuf_free>
      pcb->refused_data = NULL;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006862:	2b00      	cmp	r3, #0
 8006864:	d002      	beq.n	800686c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 f986 	bl	8006b78 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006872:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006878:	4618      	mov	r0, r3
 800687a:	f7ff fdc7 	bl	800640c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006882:	4618      	mov	r0, r3
 8006884:	f7ff fdc2 	bl	800640c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	66da      	str	r2, [r3, #108]	; 0x6c
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800689e:	3708      	adds	r7, #8
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	0800ef30 	.word	0x0800ef30
 80068a8:	0800f57c 	.word	0x0800f57c
 80068ac:	0800ef74 	.word	0x0800ef74

080068b0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d106      	bne.n	80068ce <tcp_pcb_remove+0x1e>
 80068c0:	4b3e      	ldr	r3, [pc, #248]	; (80069bc <tcp_pcb_remove+0x10c>)
 80068c2:	f640 0283 	movw	r2, #2179	; 0x883
 80068c6:	493e      	ldr	r1, [pc, #248]	; (80069c0 <tcp_pcb_remove+0x110>)
 80068c8:	483e      	ldr	r0, [pc, #248]	; (80069c4 <tcp_pcb_remove+0x114>)
 80068ca:	f006 fd09 	bl	800d2e0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d106      	bne.n	80068e2 <tcp_pcb_remove+0x32>
 80068d4:	4b39      	ldr	r3, [pc, #228]	; (80069bc <tcp_pcb_remove+0x10c>)
 80068d6:	f640 0284 	movw	r2, #2180	; 0x884
 80068da:	493b      	ldr	r1, [pc, #236]	; (80069c8 <tcp_pcb_remove+0x118>)
 80068dc:	4839      	ldr	r0, [pc, #228]	; (80069c4 <tcp_pcb_remove+0x114>)
 80068de:	f006 fcff 	bl	800d2e0 <iprintf>

  TCP_RMV(pcblist, pcb);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	683a      	ldr	r2, [r7, #0]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d105      	bne.n	80068f8 <tcp_pcb_remove+0x48>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	68da      	ldr	r2, [r3, #12]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	601a      	str	r2, [r3, #0]
 80068f6:	e013      	b.n	8006920 <tcp_pcb_remove+0x70>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	60fb      	str	r3, [r7, #12]
 80068fe:	e00c      	b.n	800691a <tcp_pcb_remove+0x6a>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	683a      	ldr	r2, [r7, #0]
 8006906:	429a      	cmp	r2, r3
 8006908:	d104      	bne.n	8006914 <tcp_pcb_remove+0x64>
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	68da      	ldr	r2, [r3, #12]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	60da      	str	r2, [r3, #12]
 8006912:	e005      	b.n	8006920 <tcp_pcb_remove+0x70>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	60fb      	str	r3, [r7, #12]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1ef      	bne.n	8006900 <tcp_pcb_remove+0x50>
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	2200      	movs	r2, #0
 8006924:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8006926:	6838      	ldr	r0, [r7, #0]
 8006928:	f7ff ff72 	bl	8006810 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	7d1b      	ldrb	r3, [r3, #20]
 8006930:	2b0a      	cmp	r3, #10
 8006932:	d013      	beq.n	800695c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8006938:	2b01      	cmp	r3, #1
 800693a:	d00f      	beq.n	800695c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	8b5b      	ldrh	r3, [r3, #26]
 8006940:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8006944:	2b00      	cmp	r3, #0
 8006946:	d009      	beq.n	800695c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	8b5b      	ldrh	r3, [r3, #26]
 800694c:	f043 0302 	orr.w	r3, r3, #2
 8006950:	b29a      	uxth	r2, r3
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006956:	6838      	ldr	r0, [r7, #0]
 8006958:	f002 ff6e 	bl	8009838 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	7d1b      	ldrb	r3, [r3, #20]
 8006960:	2b01      	cmp	r3, #1
 8006962:	d020      	beq.n	80069a6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006968:	2b00      	cmp	r3, #0
 800696a:	d006      	beq.n	800697a <tcp_pcb_remove+0xca>
 800696c:	4b13      	ldr	r3, [pc, #76]	; (80069bc <tcp_pcb_remove+0x10c>)
 800696e:	f640 0293 	movw	r2, #2195	; 0x893
 8006972:	4916      	ldr	r1, [pc, #88]	; (80069cc <tcp_pcb_remove+0x11c>)
 8006974:	4813      	ldr	r0, [pc, #76]	; (80069c4 <tcp_pcb_remove+0x114>)
 8006976:	f006 fcb3 	bl	800d2e0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800697e:	2b00      	cmp	r3, #0
 8006980:	d006      	beq.n	8006990 <tcp_pcb_remove+0xe0>
 8006982:	4b0e      	ldr	r3, [pc, #56]	; (80069bc <tcp_pcb_remove+0x10c>)
 8006984:	f640 0294 	movw	r2, #2196	; 0x894
 8006988:	4911      	ldr	r1, [pc, #68]	; (80069d0 <tcp_pcb_remove+0x120>)
 800698a:	480e      	ldr	r0, [pc, #56]	; (80069c4 <tcp_pcb_remove+0x114>)
 800698c:	f006 fca8 	bl	800d2e0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006994:	2b00      	cmp	r3, #0
 8006996:	d006      	beq.n	80069a6 <tcp_pcb_remove+0xf6>
 8006998:	4b08      	ldr	r3, [pc, #32]	; (80069bc <tcp_pcb_remove+0x10c>)
 800699a:	f640 0296 	movw	r2, #2198	; 0x896
 800699e:	490d      	ldr	r1, [pc, #52]	; (80069d4 <tcp_pcb_remove+0x124>)
 80069a0:	4808      	ldr	r0, [pc, #32]	; (80069c4 <tcp_pcb_remove+0x114>)
 80069a2:	f006 fc9d 	bl	800d2e0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	2200      	movs	r2, #0
 80069aa:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	2200      	movs	r2, #0
 80069b0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80069b2:	bf00      	nop
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	0800ef30 	.word	0x0800ef30
 80069c0:	0800f598 	.word	0x0800f598
 80069c4:	0800ef74 	.word	0x0800ef74
 80069c8:	0800f5b4 	.word	0x0800f5b4
 80069cc:	0800f5d4 	.word	0x0800f5d4
 80069d0:	0800f5ec 	.word	0x0800f5ec
 80069d4:	0800f608 	.word	0x0800f608

080069d8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d106      	bne.n	80069f4 <tcp_next_iss+0x1c>
 80069e6:	4b0a      	ldr	r3, [pc, #40]	; (8006a10 <tcp_next_iss+0x38>)
 80069e8:	f640 02af 	movw	r2, #2223	; 0x8af
 80069ec:	4909      	ldr	r1, [pc, #36]	; (8006a14 <tcp_next_iss+0x3c>)
 80069ee:	480a      	ldr	r0, [pc, #40]	; (8006a18 <tcp_next_iss+0x40>)
 80069f0:	f006 fc76 	bl	800d2e0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80069f4:	4b09      	ldr	r3, [pc, #36]	; (8006a1c <tcp_next_iss+0x44>)
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	4b09      	ldr	r3, [pc, #36]	; (8006a20 <tcp_next_iss+0x48>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4413      	add	r3, r2
 80069fe:	4a07      	ldr	r2, [pc, #28]	; (8006a1c <tcp_next_iss+0x44>)
 8006a00:	6013      	str	r3, [r2, #0]
  return iss;
 8006a02:	4b06      	ldr	r3, [pc, #24]	; (8006a1c <tcp_next_iss+0x44>)
 8006a04:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3708      	adds	r7, #8
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	0800ef30 	.word	0x0800ef30
 8006a14:	0800f620 	.word	0x0800f620
 8006a18:	0800ef74 	.word	0x0800ef74
 8006a1c:	20000024 	.word	0x20000024
 8006a20:	200082c4 	.word	0x200082c4

08006a24 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b086      	sub	sp, #24
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	607a      	str	r2, [r7, #4]
 8006a30:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d106      	bne.n	8006a46 <tcp_eff_send_mss_netif+0x22>
 8006a38:	4b14      	ldr	r3, [pc, #80]	; (8006a8c <tcp_eff_send_mss_netif+0x68>)
 8006a3a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8006a3e:	4914      	ldr	r1, [pc, #80]	; (8006a90 <tcp_eff_send_mss_netif+0x6c>)
 8006a40:	4814      	ldr	r0, [pc, #80]	; (8006a94 <tcp_eff_send_mss_netif+0x70>)
 8006a42:	f006 fc4d 	bl	800d2e0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d101      	bne.n	8006a50 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8006a4c:	89fb      	ldrh	r3, [r7, #14]
 8006a4e:	e019      	b.n	8006a84 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006a54:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8006a56:	8afb      	ldrh	r3, [r7, #22]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d012      	beq.n	8006a82 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8006a5c:	2328      	movs	r3, #40	; 0x28
 8006a5e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8006a60:	8afa      	ldrh	r2, [r7, #22]
 8006a62:	8abb      	ldrh	r3, [r7, #20]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d904      	bls.n	8006a72 <tcp_eff_send_mss_netif+0x4e>
 8006a68:	8afa      	ldrh	r2, [r7, #22]
 8006a6a:	8abb      	ldrh	r3, [r7, #20]
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	e000      	b.n	8006a74 <tcp_eff_send_mss_netif+0x50>
 8006a72:	2300      	movs	r3, #0
 8006a74:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8006a76:	8a7a      	ldrh	r2, [r7, #18]
 8006a78:	89fb      	ldrh	r3, [r7, #14]
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	bf28      	it	cs
 8006a7e:	4613      	movcs	r3, r2
 8006a80:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8006a82:	89fb      	ldrh	r3, [r7, #14]
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3718      	adds	r7, #24
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	0800ef30 	.word	0x0800ef30
 8006a90:	0800f63c 	.word	0x0800f63c
 8006a94:	0800ef74 	.word	0x0800ef74

08006a98 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d119      	bne.n	8006ae0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8006aac:	4b10      	ldr	r3, [pc, #64]	; (8006af0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8006aae:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8006ab2:	4910      	ldr	r1, [pc, #64]	; (8006af4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8006ab4:	4810      	ldr	r0, [pc, #64]	; (8006af8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8006ab6:	f006 fc13 	bl	800d2e0 <iprintf>

  while (pcb != NULL) {
 8006aba:	e011      	b.n	8006ae0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d108      	bne.n	8006ada <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8006ace:	68f8      	ldr	r0, [r7, #12]
 8006ad0:	f7fe ffc6 	bl	8005a60 <tcp_abort>
      pcb = next;
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	60fb      	str	r3, [r7, #12]
 8006ad8:	e002      	b.n	8006ae0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d1ea      	bne.n	8006abc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8006ae6:	bf00      	nop
 8006ae8:	bf00      	nop
 8006aea:	3710      	adds	r7, #16
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	0800ef30 	.word	0x0800ef30
 8006af4:	0800f664 	.word	0x0800f664
 8006af8:	0800ef74 	.word	0x0800ef74

08006afc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d02a      	beq.n	8006b62 <tcp_netif_ip_addr_changed+0x66>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d026      	beq.n	8006b62 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8006b14:	4b15      	ldr	r3, [pc, #84]	; (8006b6c <tcp_netif_ip_addr_changed+0x70>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4619      	mov	r1, r3
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f7ff ffbc 	bl	8006a98 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8006b20:	4b13      	ldr	r3, [pc, #76]	; (8006b70 <tcp_netif_ip_addr_changed+0x74>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4619      	mov	r1, r3
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f7ff ffb6 	bl	8006a98 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d017      	beq.n	8006b62 <tcp_netif_ip_addr_changed+0x66>
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d013      	beq.n	8006b62 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006b3a:	4b0e      	ldr	r3, [pc, #56]	; (8006b74 <tcp_netif_ip_addr_changed+0x78>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	60fb      	str	r3, [r7, #12]
 8006b40:	e00c      	b.n	8006b5c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d103      	bne.n	8006b56 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	60fb      	str	r3, [r7, #12]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1ef      	bne.n	8006b42 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8006b62:	bf00      	nop
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	200082d0 	.word	0x200082d0
 8006b70:	200082c8 	.word	0x200082c8
 8006b74:	200082cc 	.word	0x200082cc

08006b78 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d007      	beq.n	8006b98 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7ff fc3d 	bl	800640c <tcp_segs_free>
    pcb->ooseq = NULL;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8006b98:	bf00      	nop
 8006b9a:	3708      	adds	r7, #8
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8006ba0:	b590      	push	{r4, r7, lr}
 8006ba2:	b08d      	sub	sp, #52	; 0x34
 8006ba4:	af04      	add	r7, sp, #16
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d105      	bne.n	8006bbc <tcp_input+0x1c>
 8006bb0:	4b9b      	ldr	r3, [pc, #620]	; (8006e20 <tcp_input+0x280>)
 8006bb2:	2283      	movs	r2, #131	; 0x83
 8006bb4:	499b      	ldr	r1, [pc, #620]	; (8006e24 <tcp_input+0x284>)
 8006bb6:	489c      	ldr	r0, [pc, #624]	; (8006e28 <tcp_input+0x288>)
 8006bb8:	f006 fb92 	bl	800d2e0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	4a9a      	ldr	r2, [pc, #616]	; (8006e2c <tcp_input+0x28c>)
 8006bc2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	895b      	ldrh	r3, [r3, #10]
 8006bc8:	2b13      	cmp	r3, #19
 8006bca:	f240 83d1 	bls.w	8007370 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8006bce:	4b98      	ldr	r3, [pc, #608]	; (8006e30 <tcp_input+0x290>)
 8006bd0:	695b      	ldr	r3, [r3, #20]
 8006bd2:	4a97      	ldr	r2, [pc, #604]	; (8006e30 <tcp_input+0x290>)
 8006bd4:	6812      	ldr	r2, [r2, #0]
 8006bd6:	4611      	mov	r1, r2
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f005 fbe1 	bl	800c3a0 <ip4_addr_isbroadcast_u32>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	f040 83c7 	bne.w	8007374 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8006be6:	4b92      	ldr	r3, [pc, #584]	; (8006e30 <tcp_input+0x290>)
 8006be8:	695b      	ldr	r3, [r3, #20]
 8006bea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8006bee:	2be0      	cmp	r3, #224	; 0xe0
 8006bf0:	f000 83c0 	beq.w	8007374 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8006bf4:	4b8d      	ldr	r3, [pc, #564]	; (8006e2c <tcp_input+0x28c>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	899b      	ldrh	r3, [r3, #12]
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f7fc fd79 	bl	80036f4 <lwip_htons>
 8006c02:	4603      	mov	r3, r0
 8006c04:	0b1b      	lsrs	r3, r3, #12
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8006c0e:	7cbb      	ldrb	r3, [r7, #18]
 8006c10:	2b13      	cmp	r3, #19
 8006c12:	f240 83b1 	bls.w	8007378 <tcp_input+0x7d8>
 8006c16:	7cbb      	ldrb	r3, [r7, #18]
 8006c18:	b29a      	uxth	r2, r3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	891b      	ldrh	r3, [r3, #8]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	f200 83aa 	bhi.w	8007378 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8006c24:	7cbb      	ldrb	r3, [r7, #18]
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	3b14      	subs	r3, #20
 8006c2a:	b29a      	uxth	r2, r3
 8006c2c:	4b81      	ldr	r3, [pc, #516]	; (8006e34 <tcp_input+0x294>)
 8006c2e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8006c30:	4b81      	ldr	r3, [pc, #516]	; (8006e38 <tcp_input+0x298>)
 8006c32:	2200      	movs	r2, #0
 8006c34:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	895a      	ldrh	r2, [r3, #10]
 8006c3a:	7cbb      	ldrb	r3, [r7, #18]
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d309      	bcc.n	8006c56 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8006c42:	4b7c      	ldr	r3, [pc, #496]	; (8006e34 <tcp_input+0x294>)
 8006c44:	881a      	ldrh	r2, [r3, #0]
 8006c46:	4b7d      	ldr	r3, [pc, #500]	; (8006e3c <tcp_input+0x29c>)
 8006c48:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8006c4a:	7cbb      	ldrb	r3, [r7, #18]
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f7fe f80c 	bl	8004c6c <pbuf_remove_header>
 8006c54:	e04e      	b.n	8006cf4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d105      	bne.n	8006c6a <tcp_input+0xca>
 8006c5e:	4b70      	ldr	r3, [pc, #448]	; (8006e20 <tcp_input+0x280>)
 8006c60:	22c2      	movs	r2, #194	; 0xc2
 8006c62:	4977      	ldr	r1, [pc, #476]	; (8006e40 <tcp_input+0x2a0>)
 8006c64:	4870      	ldr	r0, [pc, #448]	; (8006e28 <tcp_input+0x288>)
 8006c66:	f006 fb3b 	bl	800d2e0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8006c6a:	2114      	movs	r1, #20
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f7fd fffd 	bl	8004c6c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	895a      	ldrh	r2, [r3, #10]
 8006c76:	4b71      	ldr	r3, [pc, #452]	; (8006e3c <tcp_input+0x29c>)
 8006c78:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8006c7a:	4b6e      	ldr	r3, [pc, #440]	; (8006e34 <tcp_input+0x294>)
 8006c7c:	881a      	ldrh	r2, [r3, #0]
 8006c7e:	4b6f      	ldr	r3, [pc, #444]	; (8006e3c <tcp_input+0x29c>)
 8006c80:	881b      	ldrh	r3, [r3, #0]
 8006c82:	1ad3      	subs	r3, r2, r3
 8006c84:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8006c86:	4b6d      	ldr	r3, [pc, #436]	; (8006e3c <tcp_input+0x29c>)
 8006c88:	881b      	ldrh	r3, [r3, #0]
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f7fd ffed 	bl	8004c6c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	895b      	ldrh	r3, [r3, #10]
 8006c98:	8a3a      	ldrh	r2, [r7, #16]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	f200 836e 	bhi.w	800737c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	4a64      	ldr	r2, [pc, #400]	; (8006e38 <tcp_input+0x298>)
 8006ca8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	8a3a      	ldrh	r2, [r7, #16]
 8006cb0:	4611      	mov	r1, r2
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f7fd ffda 	bl	8004c6c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	891a      	ldrh	r2, [r3, #8]
 8006cbc:	8a3b      	ldrh	r3, [r7, #16]
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	895b      	ldrh	r3, [r3, #10]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d005      	beq.n	8006cda <tcp_input+0x13a>
 8006cce:	4b54      	ldr	r3, [pc, #336]	; (8006e20 <tcp_input+0x280>)
 8006cd0:	22df      	movs	r2, #223	; 0xdf
 8006cd2:	495c      	ldr	r1, [pc, #368]	; (8006e44 <tcp_input+0x2a4>)
 8006cd4:	4854      	ldr	r0, [pc, #336]	; (8006e28 <tcp_input+0x288>)
 8006cd6:	f006 fb03 	bl	800d2e0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	891a      	ldrh	r2, [r3, #8]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	891b      	ldrh	r3, [r3, #8]
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d005      	beq.n	8006cf4 <tcp_input+0x154>
 8006ce8:	4b4d      	ldr	r3, [pc, #308]	; (8006e20 <tcp_input+0x280>)
 8006cea:	22e0      	movs	r2, #224	; 0xe0
 8006cec:	4956      	ldr	r1, [pc, #344]	; (8006e48 <tcp_input+0x2a8>)
 8006cee:	484e      	ldr	r0, [pc, #312]	; (8006e28 <tcp_input+0x288>)
 8006cf0:	f006 faf6 	bl	800d2e0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8006cf4:	4b4d      	ldr	r3, [pc, #308]	; (8006e2c <tcp_input+0x28c>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	881b      	ldrh	r3, [r3, #0]
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	4a4b      	ldr	r2, [pc, #300]	; (8006e2c <tcp_input+0x28c>)
 8006cfe:	6814      	ldr	r4, [r2, #0]
 8006d00:	4618      	mov	r0, r3
 8006d02:	f7fc fcf7 	bl	80036f4 <lwip_htons>
 8006d06:	4603      	mov	r3, r0
 8006d08:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8006d0a:	4b48      	ldr	r3, [pc, #288]	; (8006e2c <tcp_input+0x28c>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	885b      	ldrh	r3, [r3, #2]
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	4a46      	ldr	r2, [pc, #280]	; (8006e2c <tcp_input+0x28c>)
 8006d14:	6814      	ldr	r4, [r2, #0]
 8006d16:	4618      	mov	r0, r3
 8006d18:	f7fc fcec 	bl	80036f4 <lwip_htons>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8006d20:	4b42      	ldr	r3, [pc, #264]	; (8006e2c <tcp_input+0x28c>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	4a41      	ldr	r2, [pc, #260]	; (8006e2c <tcp_input+0x28c>)
 8006d28:	6814      	ldr	r4, [r2, #0]
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7fc fcf7 	bl	800371e <lwip_htonl>
 8006d30:	4603      	mov	r3, r0
 8006d32:	6063      	str	r3, [r4, #4]
 8006d34:	6863      	ldr	r3, [r4, #4]
 8006d36:	4a45      	ldr	r2, [pc, #276]	; (8006e4c <tcp_input+0x2ac>)
 8006d38:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8006d3a:	4b3c      	ldr	r3, [pc, #240]	; (8006e2c <tcp_input+0x28c>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	4a3a      	ldr	r2, [pc, #232]	; (8006e2c <tcp_input+0x28c>)
 8006d42:	6814      	ldr	r4, [r2, #0]
 8006d44:	4618      	mov	r0, r3
 8006d46:	f7fc fcea 	bl	800371e <lwip_htonl>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	60a3      	str	r3, [r4, #8]
 8006d4e:	68a3      	ldr	r3, [r4, #8]
 8006d50:	4a3f      	ldr	r2, [pc, #252]	; (8006e50 <tcp_input+0x2b0>)
 8006d52:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8006d54:	4b35      	ldr	r3, [pc, #212]	; (8006e2c <tcp_input+0x28c>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	89db      	ldrh	r3, [r3, #14]
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	4a33      	ldr	r2, [pc, #204]	; (8006e2c <tcp_input+0x28c>)
 8006d5e:	6814      	ldr	r4, [r2, #0]
 8006d60:	4618      	mov	r0, r3
 8006d62:	f7fc fcc7 	bl	80036f4 <lwip_htons>
 8006d66:	4603      	mov	r3, r0
 8006d68:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8006d6a:	4b30      	ldr	r3, [pc, #192]	; (8006e2c <tcp_input+0x28c>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	899b      	ldrh	r3, [r3, #12]
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7fc fcbe 	bl	80036f4 <lwip_htons>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d80:	b2da      	uxtb	r2, r3
 8006d82:	4b34      	ldr	r3, [pc, #208]	; (8006e54 <tcp_input+0x2b4>)
 8006d84:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	891a      	ldrh	r2, [r3, #8]
 8006d8a:	4b33      	ldr	r3, [pc, #204]	; (8006e58 <tcp_input+0x2b8>)
 8006d8c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8006d8e:	4b31      	ldr	r3, [pc, #196]	; (8006e54 <tcp_input+0x2b4>)
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	f003 0303 	and.w	r3, r3, #3
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00c      	beq.n	8006db4 <tcp_input+0x214>
    tcplen++;
 8006d9a:	4b2f      	ldr	r3, [pc, #188]	; (8006e58 <tcp_input+0x2b8>)
 8006d9c:	881b      	ldrh	r3, [r3, #0]
 8006d9e:	3301      	adds	r3, #1
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	4b2d      	ldr	r3, [pc, #180]	; (8006e58 <tcp_input+0x2b8>)
 8006da4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	891a      	ldrh	r2, [r3, #8]
 8006daa:	4b2b      	ldr	r3, [pc, #172]	; (8006e58 <tcp_input+0x2b8>)
 8006dac:	881b      	ldrh	r3, [r3, #0]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	f200 82e6 	bhi.w	8007380 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8006db4:	2300      	movs	r3, #0
 8006db6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006db8:	4b28      	ldr	r3, [pc, #160]	; (8006e5c <tcp_input+0x2bc>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	61fb      	str	r3, [r7, #28]
 8006dbe:	e09d      	b.n	8006efc <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	7d1b      	ldrb	r3, [r3, #20]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d105      	bne.n	8006dd4 <tcp_input+0x234>
 8006dc8:	4b15      	ldr	r3, [pc, #84]	; (8006e20 <tcp_input+0x280>)
 8006dca:	22fb      	movs	r2, #251	; 0xfb
 8006dcc:	4924      	ldr	r1, [pc, #144]	; (8006e60 <tcp_input+0x2c0>)
 8006dce:	4816      	ldr	r0, [pc, #88]	; (8006e28 <tcp_input+0x288>)
 8006dd0:	f006 fa86 	bl	800d2e0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	7d1b      	ldrb	r3, [r3, #20]
 8006dd8:	2b0a      	cmp	r3, #10
 8006dda:	d105      	bne.n	8006de8 <tcp_input+0x248>
 8006ddc:	4b10      	ldr	r3, [pc, #64]	; (8006e20 <tcp_input+0x280>)
 8006dde:	22fc      	movs	r2, #252	; 0xfc
 8006de0:	4920      	ldr	r1, [pc, #128]	; (8006e64 <tcp_input+0x2c4>)
 8006de2:	4811      	ldr	r0, [pc, #68]	; (8006e28 <tcp_input+0x288>)
 8006de4:	f006 fa7c 	bl	800d2e0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	7d1b      	ldrb	r3, [r3, #20]
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d105      	bne.n	8006dfc <tcp_input+0x25c>
 8006df0:	4b0b      	ldr	r3, [pc, #44]	; (8006e20 <tcp_input+0x280>)
 8006df2:	22fd      	movs	r2, #253	; 0xfd
 8006df4:	491c      	ldr	r1, [pc, #112]	; (8006e68 <tcp_input+0x2c8>)
 8006df6:	480c      	ldr	r0, [pc, #48]	; (8006e28 <tcp_input+0x288>)
 8006df8:	f006 fa72 	bl	800d2e0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	7a1b      	ldrb	r3, [r3, #8]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d033      	beq.n	8006e6c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	7a1a      	ldrb	r2, [r3, #8]
 8006e08:	4b09      	ldr	r3, [pc, #36]	; (8006e30 <tcp_input+0x290>)
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006e10:	3301      	adds	r3, #1
 8006e12:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d029      	beq.n	8006e6c <tcp_input+0x2cc>
      prev = pcb;
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	61bb      	str	r3, [r7, #24]
      continue;
 8006e1c:	e06b      	b.n	8006ef6 <tcp_input+0x356>
 8006e1e:	bf00      	nop
 8006e20:	0800f698 	.word	0x0800f698
 8006e24:	0800f6cc 	.word	0x0800f6cc
 8006e28:	0800f6e4 	.word	0x0800f6e4
 8006e2c:	200082ec 	.word	0x200082ec
 8006e30:	20004cd8 	.word	0x20004cd8
 8006e34:	200082f0 	.word	0x200082f0
 8006e38:	200082f4 	.word	0x200082f4
 8006e3c:	200082f2 	.word	0x200082f2
 8006e40:	0800f70c 	.word	0x0800f70c
 8006e44:	0800f71c 	.word	0x0800f71c
 8006e48:	0800f728 	.word	0x0800f728
 8006e4c:	200082fc 	.word	0x200082fc
 8006e50:	20008300 	.word	0x20008300
 8006e54:	20008308 	.word	0x20008308
 8006e58:	20008306 	.word	0x20008306
 8006e5c:	200082d0 	.word	0x200082d0
 8006e60:	0800f748 	.word	0x0800f748
 8006e64:	0800f770 	.word	0x0800f770
 8006e68:	0800f79c 	.word	0x0800f79c
    }

    if (pcb->remote_port == tcphdr->src &&
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	8b1a      	ldrh	r2, [r3, #24]
 8006e70:	4b72      	ldr	r3, [pc, #456]	; (800703c <tcp_input+0x49c>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	881b      	ldrh	r3, [r3, #0]
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d13a      	bne.n	8006ef2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8006e7c:	69fb      	ldr	r3, [r7, #28]
 8006e7e:	8ada      	ldrh	r2, [r3, #22]
 8006e80:	4b6e      	ldr	r3, [pc, #440]	; (800703c <tcp_input+0x49c>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	885b      	ldrh	r3, [r3, #2]
 8006e86:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d132      	bne.n	8006ef2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	685a      	ldr	r2, [r3, #4]
 8006e90:	4b6b      	ldr	r3, [pc, #428]	; (8007040 <tcp_input+0x4a0>)
 8006e92:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d12c      	bne.n	8006ef2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	4b68      	ldr	r3, [pc, #416]	; (8007040 <tcp_input+0x4a0>)
 8006e9e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d126      	bne.n	8006ef2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	69fa      	ldr	r2, [r7, #28]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d106      	bne.n	8006ebc <tcp_input+0x31c>
 8006eae:	4b65      	ldr	r3, [pc, #404]	; (8007044 <tcp_input+0x4a4>)
 8006eb0:	f240 120d 	movw	r2, #269	; 0x10d
 8006eb4:	4964      	ldr	r1, [pc, #400]	; (8007048 <tcp_input+0x4a8>)
 8006eb6:	4865      	ldr	r0, [pc, #404]	; (800704c <tcp_input+0x4ac>)
 8006eb8:	f006 fa12 	bl	800d2e0 <iprintf>
      if (prev != NULL) {
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d00a      	beq.n	8006ed8 <tcp_input+0x338>
        prev->next = pcb->next;
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	68da      	ldr	r2, [r3, #12]
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8006eca:	4b61      	ldr	r3, [pc, #388]	; (8007050 <tcp_input+0x4b0>)
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	69fb      	ldr	r3, [r7, #28]
 8006ed0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8006ed2:	4a5f      	ldr	r2, [pc, #380]	; (8007050 <tcp_input+0x4b0>)
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	69fa      	ldr	r2, [r7, #28]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d111      	bne.n	8006f06 <tcp_input+0x366>
 8006ee2:	4b58      	ldr	r3, [pc, #352]	; (8007044 <tcp_input+0x4a4>)
 8006ee4:	f240 1215 	movw	r2, #277	; 0x115
 8006ee8:	495a      	ldr	r1, [pc, #360]	; (8007054 <tcp_input+0x4b4>)
 8006eea:	4858      	ldr	r0, [pc, #352]	; (800704c <tcp_input+0x4ac>)
 8006eec:	f006 f9f8 	bl	800d2e0 <iprintf>
      break;
 8006ef0:	e009      	b.n	8006f06 <tcp_input+0x366>
    }
    prev = pcb;
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	61fb      	str	r3, [r7, #28]
 8006efc:	69fb      	ldr	r3, [r7, #28]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	f47f af5e 	bne.w	8006dc0 <tcp_input+0x220>
 8006f04:	e000      	b.n	8006f08 <tcp_input+0x368>
      break;
 8006f06:	bf00      	nop
  }

  if (pcb == NULL) {
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	f040 80aa 	bne.w	8007064 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006f10:	4b51      	ldr	r3, [pc, #324]	; (8007058 <tcp_input+0x4b8>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	61fb      	str	r3, [r7, #28]
 8006f16:	e03f      	b.n	8006f98 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	7d1b      	ldrb	r3, [r3, #20]
 8006f1c:	2b0a      	cmp	r3, #10
 8006f1e:	d006      	beq.n	8006f2e <tcp_input+0x38e>
 8006f20:	4b48      	ldr	r3, [pc, #288]	; (8007044 <tcp_input+0x4a4>)
 8006f22:	f240 121f 	movw	r2, #287	; 0x11f
 8006f26:	494d      	ldr	r1, [pc, #308]	; (800705c <tcp_input+0x4bc>)
 8006f28:	4848      	ldr	r0, [pc, #288]	; (800704c <tcp_input+0x4ac>)
 8006f2a:	f006 f9d9 	bl	800d2e0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	7a1b      	ldrb	r3, [r3, #8]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d009      	beq.n	8006f4a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	7a1a      	ldrb	r2, [r3, #8]
 8006f3a:	4b41      	ldr	r3, [pc, #260]	; (8007040 <tcp_input+0x4a0>)
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006f42:	3301      	adds	r3, #1
 8006f44:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d122      	bne.n	8006f90 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	8b1a      	ldrh	r2, [r3, #24]
 8006f4e:	4b3b      	ldr	r3, [pc, #236]	; (800703c <tcp_input+0x49c>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	881b      	ldrh	r3, [r3, #0]
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d11b      	bne.n	8006f92 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	8ada      	ldrh	r2, [r3, #22]
 8006f5e:	4b37      	ldr	r3, [pc, #220]	; (800703c <tcp_input+0x49c>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	885b      	ldrh	r3, [r3, #2]
 8006f64:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d113      	bne.n	8006f92 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	685a      	ldr	r2, [r3, #4]
 8006f6e:	4b34      	ldr	r3, [pc, #208]	; (8007040 <tcp_input+0x4a0>)
 8006f70:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d10d      	bne.n	8006f92 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8006f76:	69fb      	ldr	r3, [r7, #28]
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	4b31      	ldr	r3, [pc, #196]	; (8007040 <tcp_input+0x4a0>)
 8006f7c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d107      	bne.n	8006f92 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8006f82:	69f8      	ldr	r0, [r7, #28]
 8006f84:	f000 fb56 	bl	8007634 <tcp_timewait_input>
        }
        pbuf_free(p);
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f7fd fef5 	bl	8004d78 <pbuf_free>
        return;
 8006f8e:	e1fd      	b.n	800738c <tcp_input+0x7ec>
        continue;
 8006f90:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006f92:	69fb      	ldr	r3, [r7, #28]
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	61fb      	str	r3, [r7, #28]
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d1bc      	bne.n	8006f18 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006fa2:	4b2f      	ldr	r3, [pc, #188]	; (8007060 <tcp_input+0x4c0>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	617b      	str	r3, [r7, #20]
 8006fa8:	e02a      	b.n	8007000 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	7a1b      	ldrb	r3, [r3, #8]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d00c      	beq.n	8006fcc <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	7a1a      	ldrb	r2, [r3, #8]
 8006fb6:	4b22      	ldr	r3, [pc, #136]	; (8007040 <tcp_input+0x4a0>)
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d002      	beq.n	8006fcc <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	61bb      	str	r3, [r7, #24]
        continue;
 8006fca:	e016      	b.n	8006ffa <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	8ada      	ldrh	r2, [r3, #22]
 8006fd0:	4b1a      	ldr	r3, [pc, #104]	; (800703c <tcp_input+0x49c>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	885b      	ldrh	r3, [r3, #2]
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d10c      	bne.n	8006ff6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	4b17      	ldr	r3, [pc, #92]	; (8007040 <tcp_input+0x4a0>)
 8006fe2:	695b      	ldr	r3, [r3, #20]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d00f      	beq.n	8007008 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00d      	beq.n	800700a <tcp_input+0x46a>
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d009      	beq.n	800700a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	617b      	str	r3, [r7, #20]
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1d1      	bne.n	8006faa <tcp_input+0x40a>
 8007006:	e000      	b.n	800700a <tcp_input+0x46a>
            break;
 8007008:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d029      	beq.n	8007064 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00a      	beq.n	800702c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	68da      	ldr	r2, [r3, #12]
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800701e:	4b10      	ldr	r3, [pc, #64]	; (8007060 <tcp_input+0x4c0>)
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8007026:	4a0e      	ldr	r2, [pc, #56]	; (8007060 <tcp_input+0x4c0>)
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800702c:	6978      	ldr	r0, [r7, #20]
 800702e:	f000 fa03 	bl	8007438 <tcp_listen_input>
      }
      pbuf_free(p);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f7fd fea0 	bl	8004d78 <pbuf_free>
      return;
 8007038:	e1a8      	b.n	800738c <tcp_input+0x7ec>
 800703a:	bf00      	nop
 800703c:	200082ec 	.word	0x200082ec
 8007040:	20004cd8 	.word	0x20004cd8
 8007044:	0800f698 	.word	0x0800f698
 8007048:	0800f7c4 	.word	0x0800f7c4
 800704c:	0800f6e4 	.word	0x0800f6e4
 8007050:	200082d0 	.word	0x200082d0
 8007054:	0800f7f0 	.word	0x0800f7f0
 8007058:	200082d4 	.word	0x200082d4
 800705c:	0800f81c 	.word	0x0800f81c
 8007060:	200082cc 	.word	0x200082cc
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	2b00      	cmp	r3, #0
 8007068:	f000 8158 	beq.w	800731c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800706c:	4b95      	ldr	r3, [pc, #596]	; (80072c4 <tcp_input+0x724>)
 800706e:	2200      	movs	r2, #0
 8007070:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	891a      	ldrh	r2, [r3, #8]
 8007076:	4b93      	ldr	r3, [pc, #588]	; (80072c4 <tcp_input+0x724>)
 8007078:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800707a:	4a92      	ldr	r2, [pc, #584]	; (80072c4 <tcp_input+0x724>)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8007080:	4b91      	ldr	r3, [pc, #580]	; (80072c8 <tcp_input+0x728>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a8f      	ldr	r2, [pc, #572]	; (80072c4 <tcp_input+0x724>)
 8007086:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8007088:	4b90      	ldr	r3, [pc, #576]	; (80072cc <tcp_input+0x72c>)
 800708a:	2200      	movs	r2, #0
 800708c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800708e:	4b90      	ldr	r3, [pc, #576]	; (80072d0 <tcp_input+0x730>)
 8007090:	2200      	movs	r2, #0
 8007092:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8007094:	4b8f      	ldr	r3, [pc, #572]	; (80072d4 <tcp_input+0x734>)
 8007096:	2200      	movs	r2, #0
 8007098:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800709a:	4b8f      	ldr	r3, [pc, #572]	; (80072d8 <tcp_input+0x738>)
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	f003 0308 	and.w	r3, r3, #8
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d006      	beq.n	80070b4 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	7b5b      	ldrb	r3, [r3, #13]
 80070aa:	f043 0301 	orr.w	r3, r3, #1
 80070ae:	b2da      	uxtb	r2, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d017      	beq.n	80070ec <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80070bc:	69f8      	ldr	r0, [r7, #28]
 80070be:	f7ff f929 	bl	8006314 <tcp_process_refused_data>
 80070c2:	4603      	mov	r3, r0
 80070c4:	f113 0f0d 	cmn.w	r3, #13
 80070c8:	d007      	beq.n	80070da <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00c      	beq.n	80070ec <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80070d2:	4b82      	ldr	r3, [pc, #520]	; (80072dc <tcp_input+0x73c>)
 80070d4:	881b      	ldrh	r3, [r3, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d008      	beq.n	80070ec <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070de:	2b00      	cmp	r3, #0
 80070e0:	f040 80e3 	bne.w	80072aa <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80070e4:	69f8      	ldr	r0, [r7, #28]
 80070e6:	f003 f9ad 	bl	800a444 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80070ea:	e0de      	b.n	80072aa <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80070ec:	4a7c      	ldr	r2, [pc, #496]	; (80072e0 <tcp_input+0x740>)
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80070f2:	69f8      	ldr	r0, [r7, #28]
 80070f4:	f000 fb18 	bl	8007728 <tcp_process>
 80070f8:	4603      	mov	r3, r0
 80070fa:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80070fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007100:	f113 0f0d 	cmn.w	r3, #13
 8007104:	f000 80d3 	beq.w	80072ae <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8007108:	4b71      	ldr	r3, [pc, #452]	; (80072d0 <tcp_input+0x730>)
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	f003 0308 	and.w	r3, r3, #8
 8007110:	2b00      	cmp	r3, #0
 8007112:	d015      	beq.n	8007140 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8007114:	69fb      	ldr	r3, [r7, #28]
 8007116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800711a:	2b00      	cmp	r3, #0
 800711c:	d008      	beq.n	8007130 <tcp_input+0x590>
 800711e:	69fb      	ldr	r3, [r7, #28]
 8007120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007124:	69fa      	ldr	r2, [r7, #28]
 8007126:	6912      	ldr	r2, [r2, #16]
 8007128:	f06f 010d 	mvn.w	r1, #13
 800712c:	4610      	mov	r0, r2
 800712e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007130:	69f9      	ldr	r1, [r7, #28]
 8007132:	486c      	ldr	r0, [pc, #432]	; (80072e4 <tcp_input+0x744>)
 8007134:	f7ff fbbc 	bl	80068b0 <tcp_pcb_remove>
        tcp_free(pcb);
 8007138:	69f8      	ldr	r0, [r7, #28]
 800713a:	f7fe f9a9 	bl	8005490 <tcp_free>
 800713e:	e0da      	b.n	80072f6 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8007140:	2300      	movs	r3, #0
 8007142:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8007144:	4b63      	ldr	r3, [pc, #396]	; (80072d4 <tcp_input+0x734>)
 8007146:	881b      	ldrh	r3, [r3, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d01d      	beq.n	8007188 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800714c:	4b61      	ldr	r3, [pc, #388]	; (80072d4 <tcp_input+0x734>)
 800714e:	881b      	ldrh	r3, [r3, #0]
 8007150:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007158:	2b00      	cmp	r3, #0
 800715a:	d00a      	beq.n	8007172 <tcp_input+0x5d2>
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007162:	69fa      	ldr	r2, [r7, #28]
 8007164:	6910      	ldr	r0, [r2, #16]
 8007166:	89fa      	ldrh	r2, [r7, #14]
 8007168:	69f9      	ldr	r1, [r7, #28]
 800716a:	4798      	blx	r3
 800716c:	4603      	mov	r3, r0
 800716e:	74fb      	strb	r3, [r7, #19]
 8007170:	e001      	b.n	8007176 <tcp_input+0x5d6>
 8007172:	2300      	movs	r3, #0
 8007174:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007176:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800717a:	f113 0f0d 	cmn.w	r3, #13
 800717e:	f000 8098 	beq.w	80072b2 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8007182:	4b54      	ldr	r3, [pc, #336]	; (80072d4 <tcp_input+0x734>)
 8007184:	2200      	movs	r2, #0
 8007186:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8007188:	69f8      	ldr	r0, [r7, #28]
 800718a:	f000 f915 	bl	80073b8 <tcp_input_delayed_close>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	f040 8090 	bne.w	80072b6 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8007196:	4b4d      	ldr	r3, [pc, #308]	; (80072cc <tcp_input+0x72c>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d041      	beq.n	8007222 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d006      	beq.n	80071b4 <tcp_input+0x614>
 80071a6:	4b50      	ldr	r3, [pc, #320]	; (80072e8 <tcp_input+0x748>)
 80071a8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80071ac:	494f      	ldr	r1, [pc, #316]	; (80072ec <tcp_input+0x74c>)
 80071ae:	4850      	ldr	r0, [pc, #320]	; (80072f0 <tcp_input+0x750>)
 80071b0:	f006 f896 	bl	800d2e0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80071b4:	69fb      	ldr	r3, [r7, #28]
 80071b6:	8b5b      	ldrh	r3, [r3, #26]
 80071b8:	f003 0310 	and.w	r3, r3, #16
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d008      	beq.n	80071d2 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80071c0:	4b42      	ldr	r3, [pc, #264]	; (80072cc <tcp_input+0x72c>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4618      	mov	r0, r3
 80071c6:	f7fd fdd7 	bl	8004d78 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80071ca:	69f8      	ldr	r0, [r7, #28]
 80071cc:	f7fe fc48 	bl	8005a60 <tcp_abort>
            goto aborted;
 80071d0:	e091      	b.n	80072f6 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00c      	beq.n	80071f6 <tcp_input+0x656>
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	6918      	ldr	r0, [r3, #16]
 80071e6:	4b39      	ldr	r3, [pc, #228]	; (80072cc <tcp_input+0x72c>)
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	2300      	movs	r3, #0
 80071ec:	69f9      	ldr	r1, [r7, #28]
 80071ee:	47a0      	blx	r4
 80071f0:	4603      	mov	r3, r0
 80071f2:	74fb      	strb	r3, [r7, #19]
 80071f4:	e008      	b.n	8007208 <tcp_input+0x668>
 80071f6:	4b35      	ldr	r3, [pc, #212]	; (80072cc <tcp_input+0x72c>)
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	2300      	movs	r3, #0
 80071fc:	69f9      	ldr	r1, [r7, #28]
 80071fe:	2000      	movs	r0, #0
 8007200:	f7ff f95e 	bl	80064c0 <tcp_recv_null>
 8007204:	4603      	mov	r3, r0
 8007206:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8007208:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800720c:	f113 0f0d 	cmn.w	r3, #13
 8007210:	d053      	beq.n	80072ba <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8007212:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d003      	beq.n	8007222 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800721a:	4b2c      	ldr	r3, [pc, #176]	; (80072cc <tcp_input+0x72c>)
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	69fb      	ldr	r3, [r7, #28]
 8007220:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8007222:	4b2b      	ldr	r3, [pc, #172]	; (80072d0 <tcp_input+0x730>)
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	f003 0320 	and.w	r3, r3, #32
 800722a:	2b00      	cmp	r3, #0
 800722c:	d030      	beq.n	8007290 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007232:	2b00      	cmp	r3, #0
 8007234:	d009      	beq.n	800724a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800723a:	7b5a      	ldrb	r2, [r3, #13]
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007240:	f042 0220 	orr.w	r2, r2, #32
 8007244:	b2d2      	uxtb	r2, r2
 8007246:	735a      	strb	r2, [r3, #13]
 8007248:	e022      	b.n	8007290 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800724e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007252:	d005      	beq.n	8007260 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007258:	3301      	adds	r3, #1
 800725a:	b29a      	uxth	r2, r3
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00b      	beq.n	8007282 <tcp_input+0x6e2>
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	6918      	ldr	r0, [r3, #16]
 8007274:	2300      	movs	r3, #0
 8007276:	2200      	movs	r2, #0
 8007278:	69f9      	ldr	r1, [r7, #28]
 800727a:	47a0      	blx	r4
 800727c:	4603      	mov	r3, r0
 800727e:	74fb      	strb	r3, [r7, #19]
 8007280:	e001      	b.n	8007286 <tcp_input+0x6e6>
 8007282:	2300      	movs	r3, #0
 8007284:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007286:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800728a:	f113 0f0d 	cmn.w	r3, #13
 800728e:	d016      	beq.n	80072be <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8007290:	4b13      	ldr	r3, [pc, #76]	; (80072e0 <tcp_input+0x740>)
 8007292:	2200      	movs	r2, #0
 8007294:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8007296:	69f8      	ldr	r0, [r7, #28]
 8007298:	f000 f88e 	bl	80073b8 <tcp_input_delayed_close>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d128      	bne.n	80072f4 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80072a2:	69f8      	ldr	r0, [r7, #28]
 80072a4:	f002 fac8 	bl	8009838 <tcp_output>
 80072a8:	e025      	b.n	80072f6 <tcp_input+0x756>
        goto aborted;
 80072aa:	bf00      	nop
 80072ac:	e023      	b.n	80072f6 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80072ae:	bf00      	nop
 80072b0:	e021      	b.n	80072f6 <tcp_input+0x756>
              goto aborted;
 80072b2:	bf00      	nop
 80072b4:	e01f      	b.n	80072f6 <tcp_input+0x756>
          goto aborted;
 80072b6:	bf00      	nop
 80072b8:	e01d      	b.n	80072f6 <tcp_input+0x756>
            goto aborted;
 80072ba:	bf00      	nop
 80072bc:	e01b      	b.n	80072f6 <tcp_input+0x756>
              goto aborted;
 80072be:	bf00      	nop
 80072c0:	e019      	b.n	80072f6 <tcp_input+0x756>
 80072c2:	bf00      	nop
 80072c4:	200082dc 	.word	0x200082dc
 80072c8:	200082ec 	.word	0x200082ec
 80072cc:	2000830c 	.word	0x2000830c
 80072d0:	20008309 	.word	0x20008309
 80072d4:	20008304 	.word	0x20008304
 80072d8:	20008308 	.word	0x20008308
 80072dc:	20008306 	.word	0x20008306
 80072e0:	20008310 	.word	0x20008310
 80072e4:	200082d0 	.word	0x200082d0
 80072e8:	0800f698 	.word	0x0800f698
 80072ec:	0800f84c 	.word	0x0800f84c
 80072f0:	0800f6e4 	.word	0x0800f6e4
          goto aborted;
 80072f4:	bf00      	nop
    tcp_input_pcb = NULL;
 80072f6:	4b27      	ldr	r3, [pc, #156]	; (8007394 <tcp_input+0x7f4>)
 80072f8:	2200      	movs	r2, #0
 80072fa:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80072fc:	4b26      	ldr	r3, [pc, #152]	; (8007398 <tcp_input+0x7f8>)
 80072fe:	2200      	movs	r2, #0
 8007300:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8007302:	4b26      	ldr	r3, [pc, #152]	; (800739c <tcp_input+0x7fc>)
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d03f      	beq.n	800738a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800730a:	4b24      	ldr	r3, [pc, #144]	; (800739c <tcp_input+0x7fc>)
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	4618      	mov	r0, r3
 8007310:	f7fd fd32 	bl	8004d78 <pbuf_free>
      inseg.p = NULL;
 8007314:	4b21      	ldr	r3, [pc, #132]	; (800739c <tcp_input+0x7fc>)
 8007316:	2200      	movs	r2, #0
 8007318:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800731a:	e036      	b.n	800738a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800731c:	4b20      	ldr	r3, [pc, #128]	; (80073a0 <tcp_input+0x800>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	899b      	ldrh	r3, [r3, #12]
 8007322:	b29b      	uxth	r3, r3
 8007324:	4618      	mov	r0, r3
 8007326:	f7fc f9e5 	bl	80036f4 <lwip_htons>
 800732a:	4603      	mov	r3, r0
 800732c:	b2db      	uxtb	r3, r3
 800732e:	f003 0304 	and.w	r3, r3, #4
 8007332:	2b00      	cmp	r3, #0
 8007334:	d118      	bne.n	8007368 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007336:	4b1b      	ldr	r3, [pc, #108]	; (80073a4 <tcp_input+0x804>)
 8007338:	6819      	ldr	r1, [r3, #0]
 800733a:	4b1b      	ldr	r3, [pc, #108]	; (80073a8 <tcp_input+0x808>)
 800733c:	881b      	ldrh	r3, [r3, #0]
 800733e:	461a      	mov	r2, r3
 8007340:	4b1a      	ldr	r3, [pc, #104]	; (80073ac <tcp_input+0x80c>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007346:	4b16      	ldr	r3, [pc, #88]	; (80073a0 <tcp_input+0x800>)
 8007348:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800734a:	885b      	ldrh	r3, [r3, #2]
 800734c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800734e:	4a14      	ldr	r2, [pc, #80]	; (80073a0 <tcp_input+0x800>)
 8007350:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007352:	8812      	ldrh	r2, [r2, #0]
 8007354:	b292      	uxth	r2, r2
 8007356:	9202      	str	r2, [sp, #8]
 8007358:	9301      	str	r3, [sp, #4]
 800735a:	4b15      	ldr	r3, [pc, #84]	; (80073b0 <tcp_input+0x810>)
 800735c:	9300      	str	r3, [sp, #0]
 800735e:	4b15      	ldr	r3, [pc, #84]	; (80073b4 <tcp_input+0x814>)
 8007360:	4602      	mov	r2, r0
 8007362:	2000      	movs	r0, #0
 8007364:	f003 f81c 	bl	800a3a0 <tcp_rst>
    pbuf_free(p);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f7fd fd05 	bl	8004d78 <pbuf_free>
  return;
 800736e:	e00c      	b.n	800738a <tcp_input+0x7ea>
    goto dropped;
 8007370:	bf00      	nop
 8007372:	e006      	b.n	8007382 <tcp_input+0x7e2>
    goto dropped;
 8007374:	bf00      	nop
 8007376:	e004      	b.n	8007382 <tcp_input+0x7e2>
    goto dropped;
 8007378:	bf00      	nop
 800737a:	e002      	b.n	8007382 <tcp_input+0x7e2>
      goto dropped;
 800737c:	bf00      	nop
 800737e:	e000      	b.n	8007382 <tcp_input+0x7e2>
      goto dropped;
 8007380:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f7fd fcf8 	bl	8004d78 <pbuf_free>
 8007388:	e000      	b.n	800738c <tcp_input+0x7ec>
  return;
 800738a:	bf00      	nop
}
 800738c:	3724      	adds	r7, #36	; 0x24
 800738e:	46bd      	mov	sp, r7
 8007390:	bd90      	pop	{r4, r7, pc}
 8007392:	bf00      	nop
 8007394:	20008310 	.word	0x20008310
 8007398:	2000830c 	.word	0x2000830c
 800739c:	200082dc 	.word	0x200082dc
 80073a0:	200082ec 	.word	0x200082ec
 80073a4:	20008300 	.word	0x20008300
 80073a8:	20008306 	.word	0x20008306
 80073ac:	200082fc 	.word	0x200082fc
 80073b0:	20004ce8 	.word	0x20004ce8
 80073b4:	20004cec 	.word	0x20004cec

080073b8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b082      	sub	sp, #8
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d106      	bne.n	80073d4 <tcp_input_delayed_close+0x1c>
 80073c6:	4b17      	ldr	r3, [pc, #92]	; (8007424 <tcp_input_delayed_close+0x6c>)
 80073c8:	f240 225a 	movw	r2, #602	; 0x25a
 80073cc:	4916      	ldr	r1, [pc, #88]	; (8007428 <tcp_input_delayed_close+0x70>)
 80073ce:	4817      	ldr	r0, [pc, #92]	; (800742c <tcp_input_delayed_close+0x74>)
 80073d0:	f005 ff86 	bl	800d2e0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80073d4:	4b16      	ldr	r3, [pc, #88]	; (8007430 <tcp_input_delayed_close+0x78>)
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	f003 0310 	and.w	r3, r3, #16
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d01c      	beq.n	800741a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	8b5b      	ldrh	r3, [r3, #26]
 80073e4:	f003 0310 	and.w	r3, r3, #16
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d10d      	bne.n	8007408 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d008      	beq.n	8007408 <tcp_input_delayed_close+0x50>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	6912      	ldr	r2, [r2, #16]
 8007400:	f06f 010e 	mvn.w	r1, #14
 8007404:	4610      	mov	r0, r2
 8007406:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007408:	6879      	ldr	r1, [r7, #4]
 800740a:	480a      	ldr	r0, [pc, #40]	; (8007434 <tcp_input_delayed_close+0x7c>)
 800740c:	f7ff fa50 	bl	80068b0 <tcp_pcb_remove>
    tcp_free(pcb);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f7fe f83d 	bl	8005490 <tcp_free>
    return 1;
 8007416:	2301      	movs	r3, #1
 8007418:	e000      	b.n	800741c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	3708      	adds	r7, #8
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}
 8007424:	0800f698 	.word	0x0800f698
 8007428:	0800f868 	.word	0x0800f868
 800742c:	0800f6e4 	.word	0x0800f6e4
 8007430:	20008309 	.word	0x20008309
 8007434:	200082d0 	.word	0x200082d0

08007438 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8007438:	b590      	push	{r4, r7, lr}
 800743a:	b08b      	sub	sp, #44	; 0x2c
 800743c:	af04      	add	r7, sp, #16
 800743e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8007440:	4b6f      	ldr	r3, [pc, #444]	; (8007600 <tcp_listen_input+0x1c8>)
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	f003 0304 	and.w	r3, r3, #4
 8007448:	2b00      	cmp	r3, #0
 800744a:	f040 80d2 	bne.w	80075f2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d106      	bne.n	8007462 <tcp_listen_input+0x2a>
 8007454:	4b6b      	ldr	r3, [pc, #428]	; (8007604 <tcp_listen_input+0x1cc>)
 8007456:	f240 2281 	movw	r2, #641	; 0x281
 800745a:	496b      	ldr	r1, [pc, #428]	; (8007608 <tcp_listen_input+0x1d0>)
 800745c:	486b      	ldr	r0, [pc, #428]	; (800760c <tcp_listen_input+0x1d4>)
 800745e:	f005 ff3f 	bl	800d2e0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8007462:	4b67      	ldr	r3, [pc, #412]	; (8007600 <tcp_listen_input+0x1c8>)
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	f003 0310 	and.w	r3, r3, #16
 800746a:	2b00      	cmp	r3, #0
 800746c:	d019      	beq.n	80074a2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800746e:	4b68      	ldr	r3, [pc, #416]	; (8007610 <tcp_listen_input+0x1d8>)
 8007470:	6819      	ldr	r1, [r3, #0]
 8007472:	4b68      	ldr	r3, [pc, #416]	; (8007614 <tcp_listen_input+0x1dc>)
 8007474:	881b      	ldrh	r3, [r3, #0]
 8007476:	461a      	mov	r2, r3
 8007478:	4b67      	ldr	r3, [pc, #412]	; (8007618 <tcp_listen_input+0x1e0>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800747e:	4b67      	ldr	r3, [pc, #412]	; (800761c <tcp_listen_input+0x1e4>)
 8007480:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007482:	885b      	ldrh	r3, [r3, #2]
 8007484:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007486:	4a65      	ldr	r2, [pc, #404]	; (800761c <tcp_listen_input+0x1e4>)
 8007488:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800748a:	8812      	ldrh	r2, [r2, #0]
 800748c:	b292      	uxth	r2, r2
 800748e:	9202      	str	r2, [sp, #8]
 8007490:	9301      	str	r3, [sp, #4]
 8007492:	4b63      	ldr	r3, [pc, #396]	; (8007620 <tcp_listen_input+0x1e8>)
 8007494:	9300      	str	r3, [sp, #0]
 8007496:	4b63      	ldr	r3, [pc, #396]	; (8007624 <tcp_listen_input+0x1ec>)
 8007498:	4602      	mov	r2, r0
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f002 ff80 	bl	800a3a0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80074a0:	e0a9      	b.n	80075f6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80074a2:	4b57      	ldr	r3, [pc, #348]	; (8007600 <tcp_listen_input+0x1c8>)
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	f003 0302 	and.w	r3, r3, #2
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	f000 80a3 	beq.w	80075f6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	7d5b      	ldrb	r3, [r3, #21]
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7ff f927 	bl	8006708 <tcp_alloc>
 80074ba:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d111      	bne.n	80074e6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	699b      	ldr	r3, [r3, #24]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00a      	beq.n	80074e0 <tcp_listen_input+0xa8>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	699b      	ldr	r3, [r3, #24]
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	6910      	ldr	r0, [r2, #16]
 80074d2:	f04f 32ff 	mov.w	r2, #4294967295
 80074d6:	2100      	movs	r1, #0
 80074d8:	4798      	blx	r3
 80074da:	4603      	mov	r3, r0
 80074dc:	73bb      	strb	r3, [r7, #14]
      return;
 80074de:	e08b      	b.n	80075f8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80074e0:	23f0      	movs	r3, #240	; 0xf0
 80074e2:	73bb      	strb	r3, [r7, #14]
      return;
 80074e4:	e088      	b.n	80075f8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80074e6:	4b50      	ldr	r3, [pc, #320]	; (8007628 <tcp_listen_input+0x1f0>)
 80074e8:	695a      	ldr	r2, [r3, #20]
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80074ee:	4b4e      	ldr	r3, [pc, #312]	; (8007628 <tcp_listen_input+0x1f0>)
 80074f0:	691a      	ldr	r2, [r3, #16]
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	8ada      	ldrh	r2, [r3, #22]
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80074fe:	4b47      	ldr	r3, [pc, #284]	; (800761c <tcp_listen_input+0x1e4>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	881b      	ldrh	r3, [r3, #0]
 8007504:	b29a      	uxth	r2, r3
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	2203      	movs	r2, #3
 800750e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8007510:	4b41      	ldr	r3, [pc, #260]	; (8007618 <tcp_listen_input+0x1e0>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	1c5a      	adds	r2, r3, #1
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8007522:	6978      	ldr	r0, [r7, #20]
 8007524:	f7ff fa58 	bl	80069d8 <tcp_next_iss>
 8007528:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	693a      	ldr	r2, [r7, #16]
 800752e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	693a      	ldr	r2, [r7, #16]
 8007534:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	693a      	ldr	r2, [r7, #16]
 800753a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	693a      	ldr	r2, [r7, #16]
 8007540:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8007542:	4b35      	ldr	r3, [pc, #212]	; (8007618 <tcp_listen_input+0x1e0>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	1e5a      	subs	r2, r3, #1
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	691a      	ldr	r2, [r3, #16]
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	7a5b      	ldrb	r3, [r3, #9]
 800755e:	f003 030c 	and.w	r3, r3, #12
 8007562:	b2da      	uxtb	r2, r3
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	7a1a      	ldrb	r2, [r3, #8]
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8007570:	4b2e      	ldr	r3, [pc, #184]	; (800762c <tcp_listen_input+0x1f4>)
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	60da      	str	r2, [r3, #12]
 8007578:	4a2c      	ldr	r2, [pc, #176]	; (800762c <tcp_listen_input+0x1f4>)
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	6013      	str	r3, [r2, #0]
 800757e:	f003 f8d1 	bl	800a724 <tcp_timer_needed>
 8007582:	4b2b      	ldr	r3, [pc, #172]	; (8007630 <tcp_listen_input+0x1f8>)
 8007584:	2201      	movs	r2, #1
 8007586:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8007588:	6978      	ldr	r0, [r7, #20]
 800758a:	f001 fd8f 	bl	80090ac <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800758e:	4b23      	ldr	r3, [pc, #140]	; (800761c <tcp_listen_input+0x1e4>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	89db      	ldrh	r3, [r3, #14]
 8007594:	b29a      	uxth	r2, r3
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	3304      	adds	r3, #4
 80075b0:	4618      	mov	r0, r3
 80075b2:	f004 fc53 	bl	800be5c <ip4_route>
 80075b6:	4601      	mov	r1, r0
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	3304      	adds	r3, #4
 80075bc:	461a      	mov	r2, r3
 80075be:	4620      	mov	r0, r4
 80075c0:	f7ff fa30 	bl	8006a24 <tcp_eff_send_mss_netif>
 80075c4:	4603      	mov	r3, r0
 80075c6:	461a      	mov	r2, r3
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80075cc:	2112      	movs	r1, #18
 80075ce:	6978      	ldr	r0, [r7, #20]
 80075d0:	f002 f844 	bl	800965c <tcp_enqueue_flags>
 80075d4:	4603      	mov	r3, r0
 80075d6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80075d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d004      	beq.n	80075ea <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80075e0:	2100      	movs	r1, #0
 80075e2:	6978      	ldr	r0, [r7, #20]
 80075e4:	f7fe f97e 	bl	80058e4 <tcp_abandon>
      return;
 80075e8:	e006      	b.n	80075f8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80075ea:	6978      	ldr	r0, [r7, #20]
 80075ec:	f002 f924 	bl	8009838 <tcp_output>
  return;
 80075f0:	e001      	b.n	80075f6 <tcp_listen_input+0x1be>
    return;
 80075f2:	bf00      	nop
 80075f4:	e000      	b.n	80075f8 <tcp_listen_input+0x1c0>
  return;
 80075f6:	bf00      	nop
}
 80075f8:	371c      	adds	r7, #28
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd90      	pop	{r4, r7, pc}
 80075fe:	bf00      	nop
 8007600:	20008308 	.word	0x20008308
 8007604:	0800f698 	.word	0x0800f698
 8007608:	0800f890 	.word	0x0800f890
 800760c:	0800f6e4 	.word	0x0800f6e4
 8007610:	20008300 	.word	0x20008300
 8007614:	20008306 	.word	0x20008306
 8007618:	200082fc 	.word	0x200082fc
 800761c:	200082ec 	.word	0x200082ec
 8007620:	20004ce8 	.word	0x20004ce8
 8007624:	20004cec 	.word	0x20004cec
 8007628:	20004cd8 	.word	0x20004cd8
 800762c:	200082d0 	.word	0x200082d0
 8007630:	200082d8 	.word	0x200082d8

08007634 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b086      	sub	sp, #24
 8007638:	af04      	add	r7, sp, #16
 800763a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800763c:	4b2f      	ldr	r3, [pc, #188]	; (80076fc <tcp_timewait_input+0xc8>)
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	f003 0304 	and.w	r3, r3, #4
 8007644:	2b00      	cmp	r3, #0
 8007646:	d153      	bne.n	80076f0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d106      	bne.n	800765c <tcp_timewait_input+0x28>
 800764e:	4b2c      	ldr	r3, [pc, #176]	; (8007700 <tcp_timewait_input+0xcc>)
 8007650:	f240 22ee 	movw	r2, #750	; 0x2ee
 8007654:	492b      	ldr	r1, [pc, #172]	; (8007704 <tcp_timewait_input+0xd0>)
 8007656:	482c      	ldr	r0, [pc, #176]	; (8007708 <tcp_timewait_input+0xd4>)
 8007658:	f005 fe42 	bl	800d2e0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800765c:	4b27      	ldr	r3, [pc, #156]	; (80076fc <tcp_timewait_input+0xc8>)
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	f003 0302 	and.w	r3, r3, #2
 8007664:	2b00      	cmp	r3, #0
 8007666:	d02a      	beq.n	80076be <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8007668:	4b28      	ldr	r3, [pc, #160]	; (800770c <tcp_timewait_input+0xd8>)
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007670:	1ad3      	subs	r3, r2, r3
 8007672:	2b00      	cmp	r3, #0
 8007674:	db2d      	blt.n	80076d2 <tcp_timewait_input+0x9e>
 8007676:	4b25      	ldr	r3, [pc, #148]	; (800770c <tcp_timewait_input+0xd8>)
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767e:	6879      	ldr	r1, [r7, #4]
 8007680:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007682:	440b      	add	r3, r1
 8007684:	1ad3      	subs	r3, r2, r3
 8007686:	2b00      	cmp	r3, #0
 8007688:	dc23      	bgt.n	80076d2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800768a:	4b21      	ldr	r3, [pc, #132]	; (8007710 <tcp_timewait_input+0xdc>)
 800768c:	6819      	ldr	r1, [r3, #0]
 800768e:	4b21      	ldr	r3, [pc, #132]	; (8007714 <tcp_timewait_input+0xe0>)
 8007690:	881b      	ldrh	r3, [r3, #0]
 8007692:	461a      	mov	r2, r3
 8007694:	4b1d      	ldr	r3, [pc, #116]	; (800770c <tcp_timewait_input+0xd8>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800769a:	4b1f      	ldr	r3, [pc, #124]	; (8007718 <tcp_timewait_input+0xe4>)
 800769c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800769e:	885b      	ldrh	r3, [r3, #2]
 80076a0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80076a2:	4a1d      	ldr	r2, [pc, #116]	; (8007718 <tcp_timewait_input+0xe4>)
 80076a4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80076a6:	8812      	ldrh	r2, [r2, #0]
 80076a8:	b292      	uxth	r2, r2
 80076aa:	9202      	str	r2, [sp, #8]
 80076ac:	9301      	str	r3, [sp, #4]
 80076ae:	4b1b      	ldr	r3, [pc, #108]	; (800771c <tcp_timewait_input+0xe8>)
 80076b0:	9300      	str	r3, [sp, #0]
 80076b2:	4b1b      	ldr	r3, [pc, #108]	; (8007720 <tcp_timewait_input+0xec>)
 80076b4:	4602      	mov	r2, r0
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f002 fe72 	bl	800a3a0 <tcp_rst>
      return;
 80076bc:	e01b      	b.n	80076f6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80076be:	4b0f      	ldr	r3, [pc, #60]	; (80076fc <tcp_timewait_input+0xc8>)
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	f003 0301 	and.w	r3, r3, #1
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d003      	beq.n	80076d2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80076ca:	4b16      	ldr	r3, [pc, #88]	; (8007724 <tcp_timewait_input+0xf0>)
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80076d2:	4b10      	ldr	r3, [pc, #64]	; (8007714 <tcp_timewait_input+0xe0>)
 80076d4:	881b      	ldrh	r3, [r3, #0]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00c      	beq.n	80076f4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	8b5b      	ldrh	r3, [r3, #26]
 80076de:	f043 0302 	orr.w	r3, r3, #2
 80076e2:	b29a      	uxth	r2, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f002 f8a5 	bl	8009838 <tcp_output>
  }
  return;
 80076ee:	e001      	b.n	80076f4 <tcp_timewait_input+0xc0>
    return;
 80076f0:	bf00      	nop
 80076f2:	e000      	b.n	80076f6 <tcp_timewait_input+0xc2>
  return;
 80076f4:	bf00      	nop
}
 80076f6:	3708      	adds	r7, #8
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	20008308 	.word	0x20008308
 8007700:	0800f698 	.word	0x0800f698
 8007704:	0800f8b0 	.word	0x0800f8b0
 8007708:	0800f6e4 	.word	0x0800f6e4
 800770c:	200082fc 	.word	0x200082fc
 8007710:	20008300 	.word	0x20008300
 8007714:	20008306 	.word	0x20008306
 8007718:	200082ec 	.word	0x200082ec
 800771c:	20004ce8 	.word	0x20004ce8
 8007720:	20004cec 	.word	0x20004cec
 8007724:	200082c4 	.word	0x200082c4

08007728 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8007728:	b590      	push	{r4, r7, lr}
 800772a:	b08d      	sub	sp, #52	; 0x34
 800772c:	af04      	add	r7, sp, #16
 800772e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8007730:	2300      	movs	r3, #0
 8007732:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8007734:	2300      	movs	r3, #0
 8007736:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d106      	bne.n	800774c <tcp_process+0x24>
 800773e:	4b9d      	ldr	r3, [pc, #628]	; (80079b4 <tcp_process+0x28c>)
 8007740:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8007744:	499c      	ldr	r1, [pc, #624]	; (80079b8 <tcp_process+0x290>)
 8007746:	489d      	ldr	r0, [pc, #628]	; (80079bc <tcp_process+0x294>)
 8007748:	f005 fdca 	bl	800d2e0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800774c:	4b9c      	ldr	r3, [pc, #624]	; (80079c0 <tcp_process+0x298>)
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	f003 0304 	and.w	r3, r3, #4
 8007754:	2b00      	cmp	r3, #0
 8007756:	d04e      	beq.n	80077f6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	7d1b      	ldrb	r3, [r3, #20]
 800775c:	2b02      	cmp	r3, #2
 800775e:	d108      	bne.n	8007772 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007764:	4b97      	ldr	r3, [pc, #604]	; (80079c4 <tcp_process+0x29c>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	429a      	cmp	r2, r3
 800776a:	d123      	bne.n	80077b4 <tcp_process+0x8c>
        acceptable = 1;
 800776c:	2301      	movs	r3, #1
 800776e:	76fb      	strb	r3, [r7, #27]
 8007770:	e020      	b.n	80077b4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007776:	4b94      	ldr	r3, [pc, #592]	; (80079c8 <tcp_process+0x2a0>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	429a      	cmp	r2, r3
 800777c:	d102      	bne.n	8007784 <tcp_process+0x5c>
        acceptable = 1;
 800777e:	2301      	movs	r3, #1
 8007780:	76fb      	strb	r3, [r7, #27]
 8007782:	e017      	b.n	80077b4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007784:	4b90      	ldr	r3, [pc, #576]	; (80079c8 <tcp_process+0x2a0>)
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778c:	1ad3      	subs	r3, r2, r3
 800778e:	2b00      	cmp	r3, #0
 8007790:	db10      	blt.n	80077b4 <tcp_process+0x8c>
 8007792:	4b8d      	ldr	r3, [pc, #564]	; (80079c8 <tcp_process+0x2a0>)
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779a:	6879      	ldr	r1, [r7, #4]
 800779c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800779e:	440b      	add	r3, r1
 80077a0:	1ad3      	subs	r3, r2, r3
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	dc06      	bgt.n	80077b4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	8b5b      	ldrh	r3, [r3, #26]
 80077aa:	f043 0302 	orr.w	r3, r3, #2
 80077ae:	b29a      	uxth	r2, r3
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80077b4:	7efb      	ldrb	r3, [r7, #27]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d01b      	beq.n	80077f2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	7d1b      	ldrb	r3, [r3, #20]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d106      	bne.n	80077d0 <tcp_process+0xa8>
 80077c2:	4b7c      	ldr	r3, [pc, #496]	; (80079b4 <tcp_process+0x28c>)
 80077c4:	f44f 724e 	mov.w	r2, #824	; 0x338
 80077c8:	4980      	ldr	r1, [pc, #512]	; (80079cc <tcp_process+0x2a4>)
 80077ca:	487c      	ldr	r0, [pc, #496]	; (80079bc <tcp_process+0x294>)
 80077cc:	f005 fd88 	bl	800d2e0 <iprintf>
      recv_flags |= TF_RESET;
 80077d0:	4b7f      	ldr	r3, [pc, #508]	; (80079d0 <tcp_process+0x2a8>)
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	f043 0308 	orr.w	r3, r3, #8
 80077d8:	b2da      	uxtb	r2, r3
 80077da:	4b7d      	ldr	r3, [pc, #500]	; (80079d0 <tcp_process+0x2a8>)
 80077dc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	8b5b      	ldrh	r3, [r3, #26]
 80077e2:	f023 0301 	bic.w	r3, r3, #1
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80077ec:	f06f 030d 	mvn.w	r3, #13
 80077f0:	e37a      	b.n	8007ee8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80077f2:	2300      	movs	r3, #0
 80077f4:	e378      	b.n	8007ee8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80077f6:	4b72      	ldr	r3, [pc, #456]	; (80079c0 <tcp_process+0x298>)
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	f003 0302 	and.w	r3, r3, #2
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d010      	beq.n	8007824 <tcp_process+0xfc>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	7d1b      	ldrb	r3, [r3, #20]
 8007806:	2b02      	cmp	r3, #2
 8007808:	d00c      	beq.n	8007824 <tcp_process+0xfc>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	7d1b      	ldrb	r3, [r3, #20]
 800780e:	2b03      	cmp	r3, #3
 8007810:	d008      	beq.n	8007824 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	8b5b      	ldrh	r3, [r3, #26]
 8007816:	f043 0302 	orr.w	r3, r3, #2
 800781a:	b29a      	uxth	r2, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8007820:	2300      	movs	r3, #0
 8007822:	e361      	b.n	8007ee8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	8b5b      	ldrh	r3, [r3, #26]
 8007828:	f003 0310 	and.w	r3, r3, #16
 800782c:	2b00      	cmp	r3, #0
 800782e:	d103      	bne.n	8007838 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8007830:	4b68      	ldr	r3, [pc, #416]	; (80079d4 <tcp_process+0x2ac>)
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2200      	movs	r2, #0
 8007844:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f001 fc2f 	bl	80090ac <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	7d1b      	ldrb	r3, [r3, #20]
 8007852:	3b02      	subs	r3, #2
 8007854:	2b07      	cmp	r3, #7
 8007856:	f200 8337 	bhi.w	8007ec8 <tcp_process+0x7a0>
 800785a:	a201      	add	r2, pc, #4	; (adr r2, 8007860 <tcp_process+0x138>)
 800785c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007860:	08007881 	.word	0x08007881
 8007864:	08007ab1 	.word	0x08007ab1
 8007868:	08007c29 	.word	0x08007c29
 800786c:	08007c53 	.word	0x08007c53
 8007870:	08007d77 	.word	0x08007d77
 8007874:	08007c29 	.word	0x08007c29
 8007878:	08007e03 	.word	0x08007e03
 800787c:	08007e93 	.word	0x08007e93
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8007880:	4b4f      	ldr	r3, [pc, #316]	; (80079c0 <tcp_process+0x298>)
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	f003 0310 	and.w	r3, r3, #16
 8007888:	2b00      	cmp	r3, #0
 800788a:	f000 80e4 	beq.w	8007a56 <tcp_process+0x32e>
 800788e:	4b4c      	ldr	r3, [pc, #304]	; (80079c0 <tcp_process+0x298>)
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	f003 0302 	and.w	r3, r3, #2
 8007896:	2b00      	cmp	r3, #0
 8007898:	f000 80dd 	beq.w	8007a56 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078a0:	1c5a      	adds	r2, r3, #1
 80078a2:	4b48      	ldr	r3, [pc, #288]	; (80079c4 <tcp_process+0x29c>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	f040 80d5 	bne.w	8007a56 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80078ac:	4b46      	ldr	r3, [pc, #280]	; (80079c8 <tcp_process+0x2a0>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	1c5a      	adds	r2, r3, #1
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80078be:	4b41      	ldr	r3, [pc, #260]	; (80079c4 <tcp_process+0x29c>)
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80078c6:	4b44      	ldr	r3, [pc, #272]	; (80079d8 <tcp_process+0x2b0>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	89db      	ldrh	r3, [r3, #14]
 80078cc:	b29a      	uxth	r2, r3
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80078e0:	4b39      	ldr	r3, [pc, #228]	; (80079c8 <tcp_process+0x2a0>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	1e5a      	subs	r2, r3, #1
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2204      	movs	r2, #4
 80078ee:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	3304      	adds	r3, #4
 80078f8:	4618      	mov	r0, r3
 80078fa:	f004 faaf 	bl	800be5c <ip4_route>
 80078fe:	4601      	mov	r1, r0
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	3304      	adds	r3, #4
 8007904:	461a      	mov	r2, r3
 8007906:	4620      	mov	r0, r4
 8007908:	f7ff f88c 	bl	8006a24 <tcp_eff_send_mss_netif>
 800790c:	4603      	mov	r3, r0
 800790e:	461a      	mov	r2, r3
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007918:	009a      	lsls	r2, r3, #2
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800791e:	005b      	lsls	r3, r3, #1
 8007920:	f241 111c 	movw	r1, #4380	; 0x111c
 8007924:	428b      	cmp	r3, r1
 8007926:	bf38      	it	cc
 8007928:	460b      	movcc	r3, r1
 800792a:	429a      	cmp	r2, r3
 800792c:	d204      	bcs.n	8007938 <tcp_process+0x210>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	b29b      	uxth	r3, r3
 8007936:	e00d      	b.n	8007954 <tcp_process+0x22c>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800793c:	005b      	lsls	r3, r3, #1
 800793e:	f241 121c 	movw	r2, #4380	; 0x111c
 8007942:	4293      	cmp	r3, r2
 8007944:	d904      	bls.n	8007950 <tcp_process+0x228>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800794a:	005b      	lsls	r3, r3, #1
 800794c:	b29b      	uxth	r3, r3
 800794e:	e001      	b.n	8007954 <tcp_process+0x22c>
 8007950:	f241 131c 	movw	r3, #4380	; 0x111c
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007960:	2b00      	cmp	r3, #0
 8007962:	d106      	bne.n	8007972 <tcp_process+0x24a>
 8007964:	4b13      	ldr	r3, [pc, #76]	; (80079b4 <tcp_process+0x28c>)
 8007966:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800796a:	491c      	ldr	r1, [pc, #112]	; (80079dc <tcp_process+0x2b4>)
 800796c:	4813      	ldr	r0, [pc, #76]	; (80079bc <tcp_process+0x294>)
 800796e:	f005 fcb7 	bl	800d2e0 <iprintf>
        --pcb->snd_queuelen;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007978:	3b01      	subs	r3, #1
 800797a:	b29a      	uxth	r2, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007986:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d12a      	bne.n	80079e4 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007992:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8007994:	69fb      	ldr	r3, [r7, #28]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d106      	bne.n	80079a8 <tcp_process+0x280>
 800799a:	4b06      	ldr	r3, [pc, #24]	; (80079b4 <tcp_process+0x28c>)
 800799c:	f44f 725d 	mov.w	r2, #884	; 0x374
 80079a0:	490f      	ldr	r1, [pc, #60]	; (80079e0 <tcp_process+0x2b8>)
 80079a2:	4806      	ldr	r0, [pc, #24]	; (80079bc <tcp_process+0x294>)
 80079a4:	f005 fc9c 	bl	800d2e0 <iprintf>
          pcb->unsent = rseg->next;
 80079a8:	69fb      	ldr	r3, [r7, #28]
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	66da      	str	r2, [r3, #108]	; 0x6c
 80079b0:	e01c      	b.n	80079ec <tcp_process+0x2c4>
 80079b2:	bf00      	nop
 80079b4:	0800f698 	.word	0x0800f698
 80079b8:	0800f8d0 	.word	0x0800f8d0
 80079bc:	0800f6e4 	.word	0x0800f6e4
 80079c0:	20008308 	.word	0x20008308
 80079c4:	20008300 	.word	0x20008300
 80079c8:	200082fc 	.word	0x200082fc
 80079cc:	0800f8ec 	.word	0x0800f8ec
 80079d0:	20008309 	.word	0x20008309
 80079d4:	200082c4 	.word	0x200082c4
 80079d8:	200082ec 	.word	0x200082ec
 80079dc:	0800f90c 	.word	0x0800f90c
 80079e0:	0800f924 	.word	0x0800f924
        } else {
          pcb->unacked = rseg->next;
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80079ec:	69f8      	ldr	r0, [r7, #28]
 80079ee:	f7fe fd22 	bl	8006436 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d104      	bne.n	8007a04 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007a00:	861a      	strh	r2, [r3, #48]	; 0x30
 8007a02:	e006      	b.n	8007a12 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d00a      	beq.n	8007a32 <tcp_process+0x30a>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	6910      	ldr	r0, [r2, #16]
 8007a26:	2200      	movs	r2, #0
 8007a28:	6879      	ldr	r1, [r7, #4]
 8007a2a:	4798      	blx	r3
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	76bb      	strb	r3, [r7, #26]
 8007a30:	e001      	b.n	8007a36 <tcp_process+0x30e>
 8007a32:	2300      	movs	r3, #0
 8007a34:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8007a36:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007a3a:	f113 0f0d 	cmn.w	r3, #13
 8007a3e:	d102      	bne.n	8007a46 <tcp_process+0x31e>
          return ERR_ABRT;
 8007a40:	f06f 030c 	mvn.w	r3, #12
 8007a44:	e250      	b.n	8007ee8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	8b5b      	ldrh	r3, [r3, #26]
 8007a4a:	f043 0302 	orr.w	r3, r3, #2
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8007a54:	e23a      	b.n	8007ecc <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8007a56:	4b98      	ldr	r3, [pc, #608]	; (8007cb8 <tcp_process+0x590>)
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	f003 0310 	and.w	r3, r3, #16
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	f000 8234 	beq.w	8007ecc <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007a64:	4b95      	ldr	r3, [pc, #596]	; (8007cbc <tcp_process+0x594>)
 8007a66:	6819      	ldr	r1, [r3, #0]
 8007a68:	4b95      	ldr	r3, [pc, #596]	; (8007cc0 <tcp_process+0x598>)
 8007a6a:	881b      	ldrh	r3, [r3, #0]
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	4b95      	ldr	r3, [pc, #596]	; (8007cc4 <tcp_process+0x59c>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007a74:	4b94      	ldr	r3, [pc, #592]	; (8007cc8 <tcp_process+0x5a0>)
 8007a76:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007a78:	885b      	ldrh	r3, [r3, #2]
 8007a7a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007a7c:	4a92      	ldr	r2, [pc, #584]	; (8007cc8 <tcp_process+0x5a0>)
 8007a7e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007a80:	8812      	ldrh	r2, [r2, #0]
 8007a82:	b292      	uxth	r2, r2
 8007a84:	9202      	str	r2, [sp, #8]
 8007a86:	9301      	str	r3, [sp, #4]
 8007a88:	4b90      	ldr	r3, [pc, #576]	; (8007ccc <tcp_process+0x5a4>)
 8007a8a:	9300      	str	r3, [sp, #0]
 8007a8c:	4b90      	ldr	r3, [pc, #576]	; (8007cd0 <tcp_process+0x5a8>)
 8007a8e:	4602      	mov	r2, r0
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f002 fc85 	bl	800a3a0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007a9c:	2b05      	cmp	r3, #5
 8007a9e:	f200 8215 	bhi.w	8007ecc <tcp_process+0x7a4>
          pcb->rtime = 0;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f002 fa4f 	bl	8009f4c <tcp_rexmit_rto>
      break;
 8007aae:	e20d      	b.n	8007ecc <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8007ab0:	4b81      	ldr	r3, [pc, #516]	; (8007cb8 <tcp_process+0x590>)
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	f003 0310 	and.w	r3, r3, #16
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	f000 80a1 	beq.w	8007c00 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8007abe:	4b7f      	ldr	r3, [pc, #508]	; (8007cbc <tcp_process+0x594>)
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ac6:	1ad3      	subs	r3, r2, r3
 8007ac8:	3b01      	subs	r3, #1
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	db7e      	blt.n	8007bcc <tcp_process+0x4a4>
 8007ace:	4b7b      	ldr	r3, [pc, #492]	; (8007cbc <tcp_process+0x594>)
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ad6:	1ad3      	subs	r3, r2, r3
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	dc77      	bgt.n	8007bcc <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2204      	movs	r2, #4
 8007ae0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d102      	bne.n	8007af0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8007aea:	23fa      	movs	r3, #250	; 0xfa
 8007aec:	76bb      	strb	r3, [r7, #26]
 8007aee:	e01d      	b.n	8007b2c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007af4:	699b      	ldr	r3, [r3, #24]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d106      	bne.n	8007b08 <tcp_process+0x3e0>
 8007afa:	4b76      	ldr	r3, [pc, #472]	; (8007cd4 <tcp_process+0x5ac>)
 8007afc:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8007b00:	4975      	ldr	r1, [pc, #468]	; (8007cd8 <tcp_process+0x5b0>)
 8007b02:	4876      	ldr	r0, [pc, #472]	; (8007cdc <tcp_process+0x5b4>)
 8007b04:	f005 fbec 	bl	800d2e0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b0c:	699b      	ldr	r3, [r3, #24]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00a      	beq.n	8007b28 <tcp_process+0x400>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b16:	699b      	ldr	r3, [r3, #24]
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	6910      	ldr	r0, [r2, #16]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	6879      	ldr	r1, [r7, #4]
 8007b20:	4798      	blx	r3
 8007b22:	4603      	mov	r3, r0
 8007b24:	76bb      	strb	r3, [r7, #26]
 8007b26:	e001      	b.n	8007b2c <tcp_process+0x404>
 8007b28:	23f0      	movs	r3, #240	; 0xf0
 8007b2a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8007b2c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00a      	beq.n	8007b4a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8007b34:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007b38:	f113 0f0d 	cmn.w	r3, #13
 8007b3c:	d002      	beq.n	8007b44 <tcp_process+0x41c>
              tcp_abort(pcb);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f7fd ff8e 	bl	8005a60 <tcp_abort>
            }
            return ERR_ABRT;
 8007b44:	f06f 030c 	mvn.w	r3, #12
 8007b48:	e1ce      	b.n	8007ee8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 fae0 	bl	8008110 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8007b50:	4b63      	ldr	r3, [pc, #396]	; (8007ce0 <tcp_process+0x5b8>)
 8007b52:	881b      	ldrh	r3, [r3, #0]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d005      	beq.n	8007b64 <tcp_process+0x43c>
            recv_acked--;
 8007b58:	4b61      	ldr	r3, [pc, #388]	; (8007ce0 <tcp_process+0x5b8>)
 8007b5a:	881b      	ldrh	r3, [r3, #0]
 8007b5c:	3b01      	subs	r3, #1
 8007b5e:	b29a      	uxth	r2, r3
 8007b60:	4b5f      	ldr	r3, [pc, #380]	; (8007ce0 <tcp_process+0x5b8>)
 8007b62:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007b68:	009a      	lsls	r2, r3, #2
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007b6e:	005b      	lsls	r3, r3, #1
 8007b70:	f241 111c 	movw	r1, #4380	; 0x111c
 8007b74:	428b      	cmp	r3, r1
 8007b76:	bf38      	it	cc
 8007b78:	460b      	movcc	r3, r1
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d204      	bcs.n	8007b88 <tcp_process+0x460>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	e00d      	b.n	8007ba4 <tcp_process+0x47c>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007b8c:	005b      	lsls	r3, r3, #1
 8007b8e:	f241 121c 	movw	r2, #4380	; 0x111c
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d904      	bls.n	8007ba0 <tcp_process+0x478>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007b9a:	005b      	lsls	r3, r3, #1
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	e001      	b.n	8007ba4 <tcp_process+0x47c>
 8007ba0:	f241 131c 	movw	r3, #4380	; 0x111c
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8007baa:	4b4e      	ldr	r3, [pc, #312]	; (8007ce4 <tcp_process+0x5bc>)
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	f003 0320 	and.w	r3, r3, #32
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d037      	beq.n	8007c26 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	8b5b      	ldrh	r3, [r3, #26]
 8007bba:	f043 0302 	orr.w	r3, r3, #2
 8007bbe:	b29a      	uxth	r2, r3
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2207      	movs	r2, #7
 8007bc8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8007bca:	e02c      	b.n	8007c26 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007bcc:	4b3b      	ldr	r3, [pc, #236]	; (8007cbc <tcp_process+0x594>)
 8007bce:	6819      	ldr	r1, [r3, #0]
 8007bd0:	4b3b      	ldr	r3, [pc, #236]	; (8007cc0 <tcp_process+0x598>)
 8007bd2:	881b      	ldrh	r3, [r3, #0]
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	4b3b      	ldr	r3, [pc, #236]	; (8007cc4 <tcp_process+0x59c>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007bdc:	4b3a      	ldr	r3, [pc, #232]	; (8007cc8 <tcp_process+0x5a0>)
 8007bde:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007be0:	885b      	ldrh	r3, [r3, #2]
 8007be2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007be4:	4a38      	ldr	r2, [pc, #224]	; (8007cc8 <tcp_process+0x5a0>)
 8007be6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007be8:	8812      	ldrh	r2, [r2, #0]
 8007bea:	b292      	uxth	r2, r2
 8007bec:	9202      	str	r2, [sp, #8]
 8007bee:	9301      	str	r3, [sp, #4]
 8007bf0:	4b36      	ldr	r3, [pc, #216]	; (8007ccc <tcp_process+0x5a4>)
 8007bf2:	9300      	str	r3, [sp, #0]
 8007bf4:	4b36      	ldr	r3, [pc, #216]	; (8007cd0 <tcp_process+0x5a8>)
 8007bf6:	4602      	mov	r2, r0
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f002 fbd1 	bl	800a3a0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8007bfe:	e167      	b.n	8007ed0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8007c00:	4b2d      	ldr	r3, [pc, #180]	; (8007cb8 <tcp_process+0x590>)
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	f003 0302 	and.w	r3, r3, #2
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	f000 8161 	beq.w	8007ed0 <tcp_process+0x7a8>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c12:	1e5a      	subs	r2, r3, #1
 8007c14:	4b2b      	ldr	r3, [pc, #172]	; (8007cc4 <tcp_process+0x59c>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	f040 8159 	bne.w	8007ed0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f002 f9b6 	bl	8009f90 <tcp_rexmit>
      break;
 8007c24:	e154      	b.n	8007ed0 <tcp_process+0x7a8>
 8007c26:	e153      	b.n	8007ed0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 fa71 	bl	8008110 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8007c2e:	4b2d      	ldr	r3, [pc, #180]	; (8007ce4 <tcp_process+0x5bc>)
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	f003 0320 	and.w	r3, r3, #32
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	f000 814c 	beq.w	8007ed4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	8b5b      	ldrh	r3, [r3, #26]
 8007c40:	f043 0302 	orr.w	r3, r3, #2
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2207      	movs	r2, #7
 8007c4e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007c50:	e140      	b.n	8007ed4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 fa5c 	bl	8008110 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8007c58:	4b22      	ldr	r3, [pc, #136]	; (8007ce4 <tcp_process+0x5bc>)
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	f003 0320 	and.w	r3, r3, #32
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d071      	beq.n	8007d48 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007c64:	4b14      	ldr	r3, [pc, #80]	; (8007cb8 <tcp_process+0x590>)
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	f003 0310 	and.w	r3, r3, #16
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d060      	beq.n	8007d32 <tcp_process+0x60a>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007c74:	4b11      	ldr	r3, [pc, #68]	; (8007cbc <tcp_process+0x594>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d15a      	bne.n	8007d32 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d156      	bne.n	8007d32 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	8b5b      	ldrh	r3, [r3, #26]
 8007c88:	f043 0302 	orr.w	r3, r3, #2
 8007c8c:	b29a      	uxth	r2, r3
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f7fe fdbc 	bl	8006810 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8007c98:	4b13      	ldr	r3, [pc, #76]	; (8007ce8 <tcp_process+0x5c0>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d105      	bne.n	8007cae <tcp_process+0x586>
 8007ca2:	4b11      	ldr	r3, [pc, #68]	; (8007ce8 <tcp_process+0x5c0>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	4a0f      	ldr	r2, [pc, #60]	; (8007ce8 <tcp_process+0x5c0>)
 8007caa:	6013      	str	r3, [r2, #0]
 8007cac:	e02e      	b.n	8007d0c <tcp_process+0x5e4>
 8007cae:	4b0e      	ldr	r3, [pc, #56]	; (8007ce8 <tcp_process+0x5c0>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	617b      	str	r3, [r7, #20]
 8007cb4:	e027      	b.n	8007d06 <tcp_process+0x5de>
 8007cb6:	bf00      	nop
 8007cb8:	20008308 	.word	0x20008308
 8007cbc:	20008300 	.word	0x20008300
 8007cc0:	20008306 	.word	0x20008306
 8007cc4:	200082fc 	.word	0x200082fc
 8007cc8:	200082ec 	.word	0x200082ec
 8007ccc:	20004ce8 	.word	0x20004ce8
 8007cd0:	20004cec 	.word	0x20004cec
 8007cd4:	0800f698 	.word	0x0800f698
 8007cd8:	0800f938 	.word	0x0800f938
 8007cdc:	0800f6e4 	.word	0x0800f6e4
 8007ce0:	20008304 	.word	0x20008304
 8007ce4:	20008309 	.word	0x20008309
 8007ce8:	200082d0 	.word	0x200082d0
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d104      	bne.n	8007d00 <tcp_process+0x5d8>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	68da      	ldr	r2, [r3, #12]
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	60da      	str	r2, [r3, #12]
 8007cfe:	e005      	b.n	8007d0c <tcp_process+0x5e4>
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	617b      	str	r3, [r7, #20]
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d1ef      	bne.n	8007cec <tcp_process+0x5c4>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	60da      	str	r2, [r3, #12]
 8007d12:	4b77      	ldr	r3, [pc, #476]	; (8007ef0 <tcp_process+0x7c8>)
 8007d14:	2201      	movs	r2, #1
 8007d16:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	220a      	movs	r2, #10
 8007d1c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8007d1e:	4b75      	ldr	r3, [pc, #468]	; (8007ef4 <tcp_process+0x7cc>)
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	60da      	str	r2, [r3, #12]
 8007d26:	4a73      	ldr	r2, [pc, #460]	; (8007ef4 <tcp_process+0x7cc>)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6013      	str	r3, [r2, #0]
 8007d2c:	f002 fcfa 	bl	800a724 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8007d30:	e0d2      	b.n	8007ed8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	8b5b      	ldrh	r3, [r3, #26]
 8007d36:	f043 0302 	orr.w	r3, r3, #2
 8007d3a:	b29a      	uxth	r2, r3
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2208      	movs	r2, #8
 8007d44:	751a      	strb	r2, [r3, #20]
      break;
 8007d46:	e0c7      	b.n	8007ed8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007d48:	4b6b      	ldr	r3, [pc, #428]	; (8007ef8 <tcp_process+0x7d0>)
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	f003 0310 	and.w	r3, r3, #16
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	f000 80c1 	beq.w	8007ed8 <tcp_process+0x7b0>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007d5a:	4b68      	ldr	r3, [pc, #416]	; (8007efc <tcp_process+0x7d4>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	f040 80ba 	bne.w	8007ed8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	f040 80b5 	bne.w	8007ed8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2206      	movs	r2, #6
 8007d72:	751a      	strb	r2, [r3, #20]
      break;
 8007d74:	e0b0      	b.n	8007ed8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 f9ca 	bl	8008110 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8007d7c:	4b60      	ldr	r3, [pc, #384]	; (8007f00 <tcp_process+0x7d8>)
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	f003 0320 	and.w	r3, r3, #32
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	f000 80a9 	beq.w	8007edc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	8b5b      	ldrh	r3, [r3, #26]
 8007d8e:	f043 0302 	orr.w	r3, r3, #2
 8007d92:	b29a      	uxth	r2, r3
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f7fe fd39 	bl	8006810 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8007d9e:	4b59      	ldr	r3, [pc, #356]	; (8007f04 <tcp_process+0x7dc>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d105      	bne.n	8007db4 <tcp_process+0x68c>
 8007da8:	4b56      	ldr	r3, [pc, #344]	; (8007f04 <tcp_process+0x7dc>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	68db      	ldr	r3, [r3, #12]
 8007dae:	4a55      	ldr	r2, [pc, #340]	; (8007f04 <tcp_process+0x7dc>)
 8007db0:	6013      	str	r3, [r2, #0]
 8007db2:	e013      	b.n	8007ddc <tcp_process+0x6b4>
 8007db4:	4b53      	ldr	r3, [pc, #332]	; (8007f04 <tcp_process+0x7dc>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	613b      	str	r3, [r7, #16]
 8007dba:	e00c      	b.n	8007dd6 <tcp_process+0x6ae>
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d104      	bne.n	8007dd0 <tcp_process+0x6a8>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	68da      	ldr	r2, [r3, #12]
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	60da      	str	r2, [r3, #12]
 8007dce:	e005      	b.n	8007ddc <tcp_process+0x6b4>
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	613b      	str	r3, [r7, #16]
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d1ef      	bne.n	8007dbc <tcp_process+0x694>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	60da      	str	r2, [r3, #12]
 8007de2:	4b43      	ldr	r3, [pc, #268]	; (8007ef0 <tcp_process+0x7c8>)
 8007de4:	2201      	movs	r2, #1
 8007de6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	220a      	movs	r2, #10
 8007dec:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8007dee:	4b41      	ldr	r3, [pc, #260]	; (8007ef4 <tcp_process+0x7cc>)
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	60da      	str	r2, [r3, #12]
 8007df6:	4a3f      	ldr	r2, [pc, #252]	; (8007ef4 <tcp_process+0x7cc>)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6013      	str	r3, [r2, #0]
 8007dfc:	f002 fc92 	bl	800a724 <tcp_timer_needed>
      }
      break;
 8007e00:	e06c      	b.n	8007edc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 f984 	bl	8008110 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8007e08:	4b3b      	ldr	r3, [pc, #236]	; (8007ef8 <tcp_process+0x7d0>)
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	f003 0310 	and.w	r3, r3, #16
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d065      	beq.n	8007ee0 <tcp_process+0x7b8>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007e18:	4b38      	ldr	r3, [pc, #224]	; (8007efc <tcp_process+0x7d4>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d15f      	bne.n	8007ee0 <tcp_process+0x7b8>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d15b      	bne.n	8007ee0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f7fe fcf1 	bl	8006810 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8007e2e:	4b35      	ldr	r3, [pc, #212]	; (8007f04 <tcp_process+0x7dc>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d105      	bne.n	8007e44 <tcp_process+0x71c>
 8007e38:	4b32      	ldr	r3, [pc, #200]	; (8007f04 <tcp_process+0x7dc>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	68db      	ldr	r3, [r3, #12]
 8007e3e:	4a31      	ldr	r2, [pc, #196]	; (8007f04 <tcp_process+0x7dc>)
 8007e40:	6013      	str	r3, [r2, #0]
 8007e42:	e013      	b.n	8007e6c <tcp_process+0x744>
 8007e44:	4b2f      	ldr	r3, [pc, #188]	; (8007f04 <tcp_process+0x7dc>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	60fb      	str	r3, [r7, #12]
 8007e4a:	e00c      	b.n	8007e66 <tcp_process+0x73e>
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d104      	bne.n	8007e60 <tcp_process+0x738>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	68da      	ldr	r2, [r3, #12]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	60da      	str	r2, [r3, #12]
 8007e5e:	e005      	b.n	8007e6c <tcp_process+0x744>
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	60fb      	str	r3, [r7, #12]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d1ef      	bne.n	8007e4c <tcp_process+0x724>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	60da      	str	r2, [r3, #12]
 8007e72:	4b1f      	ldr	r3, [pc, #124]	; (8007ef0 <tcp_process+0x7c8>)
 8007e74:	2201      	movs	r2, #1
 8007e76:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	220a      	movs	r2, #10
 8007e7c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8007e7e:	4b1d      	ldr	r3, [pc, #116]	; (8007ef4 <tcp_process+0x7cc>)
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	60da      	str	r2, [r3, #12]
 8007e86:	4a1b      	ldr	r2, [pc, #108]	; (8007ef4 <tcp_process+0x7cc>)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6013      	str	r3, [r2, #0]
 8007e8c:	f002 fc4a 	bl	800a724 <tcp_timer_needed>
      }
      break;
 8007e90:	e026      	b.n	8007ee0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 f93c 	bl	8008110 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8007e98:	4b17      	ldr	r3, [pc, #92]	; (8007ef8 <tcp_process+0x7d0>)
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	f003 0310 	and.w	r3, r3, #16
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d01f      	beq.n	8007ee4 <tcp_process+0x7bc>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ea8:	4b14      	ldr	r3, [pc, #80]	; (8007efc <tcp_process+0x7d4>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d119      	bne.n	8007ee4 <tcp_process+0x7bc>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d115      	bne.n	8007ee4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8007eb8:	4b11      	ldr	r3, [pc, #68]	; (8007f00 <tcp_process+0x7d8>)
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	f043 0310 	orr.w	r3, r3, #16
 8007ec0:	b2da      	uxtb	r2, r3
 8007ec2:	4b0f      	ldr	r3, [pc, #60]	; (8007f00 <tcp_process+0x7d8>)
 8007ec4:	701a      	strb	r2, [r3, #0]
      }
      break;
 8007ec6:	e00d      	b.n	8007ee4 <tcp_process+0x7bc>
    default:
      break;
 8007ec8:	bf00      	nop
 8007eca:	e00c      	b.n	8007ee6 <tcp_process+0x7be>
      break;
 8007ecc:	bf00      	nop
 8007ece:	e00a      	b.n	8007ee6 <tcp_process+0x7be>
      break;
 8007ed0:	bf00      	nop
 8007ed2:	e008      	b.n	8007ee6 <tcp_process+0x7be>
      break;
 8007ed4:	bf00      	nop
 8007ed6:	e006      	b.n	8007ee6 <tcp_process+0x7be>
      break;
 8007ed8:	bf00      	nop
 8007eda:	e004      	b.n	8007ee6 <tcp_process+0x7be>
      break;
 8007edc:	bf00      	nop
 8007ede:	e002      	b.n	8007ee6 <tcp_process+0x7be>
      break;
 8007ee0:	bf00      	nop
 8007ee2:	e000      	b.n	8007ee6 <tcp_process+0x7be>
      break;
 8007ee4:	bf00      	nop
  }
  return ERR_OK;
 8007ee6:	2300      	movs	r3, #0
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3724      	adds	r7, #36	; 0x24
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd90      	pop	{r4, r7, pc}
 8007ef0:	200082d8 	.word	0x200082d8
 8007ef4:	200082d4 	.word	0x200082d4
 8007ef8:	20008308 	.word	0x20008308
 8007efc:	20008300 	.word	0x20008300
 8007f00:	20008309 	.word	0x20008309
 8007f04:	200082d0 	.word	0x200082d0

08007f08 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8007f08:	b590      	push	{r4, r7, lr}
 8007f0a:	b085      	sub	sp, #20
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d106      	bne.n	8007f26 <tcp_oos_insert_segment+0x1e>
 8007f18:	4b3b      	ldr	r3, [pc, #236]	; (8008008 <tcp_oos_insert_segment+0x100>)
 8007f1a:	f240 421f 	movw	r2, #1055	; 0x41f
 8007f1e:	493b      	ldr	r1, [pc, #236]	; (800800c <tcp_oos_insert_segment+0x104>)
 8007f20:	483b      	ldr	r0, [pc, #236]	; (8008010 <tcp_oos_insert_segment+0x108>)
 8007f22:	f005 f9dd 	bl	800d2e0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	68db      	ldr	r3, [r3, #12]
 8007f2a:	899b      	ldrh	r3, [r3, #12]
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f7fb fbe0 	bl	80036f4 <lwip_htons>
 8007f34:	4603      	mov	r3, r0
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	f003 0301 	and.w	r3, r3, #1
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d028      	beq.n	8007f92 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8007f40:	6838      	ldr	r0, [r7, #0]
 8007f42:	f7fe fa63 	bl	800640c <tcp_segs_free>
    next = NULL;
 8007f46:	2300      	movs	r3, #0
 8007f48:	603b      	str	r3, [r7, #0]
 8007f4a:	e056      	b.n	8007ffa <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	68db      	ldr	r3, [r3, #12]
 8007f50:	899b      	ldrh	r3, [r3, #12]
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	4618      	mov	r0, r3
 8007f56:	f7fb fbcd 	bl	80036f4 <lwip_htons>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	f003 0301 	and.w	r3, r3, #1
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d00d      	beq.n	8007f82 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	68db      	ldr	r3, [r3, #12]
 8007f6a:	899b      	ldrh	r3, [r3, #12]
 8007f6c:	b29c      	uxth	r4, r3
 8007f6e:	2001      	movs	r0, #1
 8007f70:	f7fb fbc0 	bl	80036f4 <lwip_htons>
 8007f74:	4603      	mov	r3, r0
 8007f76:	461a      	mov	r2, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	68db      	ldr	r3, [r3, #12]
 8007f7c:	4322      	orrs	r2, r4
 8007f7e:	b292      	uxth	r2, r2
 8007f80:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8007f8c:	68f8      	ldr	r0, [r7, #12]
 8007f8e:	f7fe fa52 	bl	8006436 <tcp_seg_free>
    while (next &&
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d00e      	beq.n	8007fb6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	891b      	ldrh	r3, [r3, #8]
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	4b1d      	ldr	r3, [pc, #116]	; (8008014 <tcp_oos_insert_segment+0x10c>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	441a      	add	r2, r3
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	6839      	ldr	r1, [r7, #0]
 8007fac:	8909      	ldrh	r1, [r1, #8]
 8007fae:	440b      	add	r3, r1
 8007fb0:	1ad3      	subs	r3, r2, r3
    while (next &&
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	daca      	bge.n	8007f4c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d01e      	beq.n	8007ffa <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	891b      	ldrh	r3, [r3, #8]
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	4b14      	ldr	r3, [pc, #80]	; (8008014 <tcp_oos_insert_segment+0x10c>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	441a      	add	r2, r3
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	1ad3      	subs	r3, r2, r3
    if (next &&
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	dd12      	ble.n	8007ffa <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	b29a      	uxth	r2, r3
 8007fdc:	4b0d      	ldr	r3, [pc, #52]	; (8008014 <tcp_oos_insert_segment+0x10c>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	1ad3      	subs	r3, r2, r3
 8007fe4:	b29a      	uxth	r2, r3
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	685a      	ldr	r2, [r3, #4]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	891b      	ldrh	r3, [r3, #8]
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	4610      	mov	r0, r2
 8007ff6:	f7fc fd39 	bl	8004a6c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	683a      	ldr	r2, [r7, #0]
 8007ffe:	601a      	str	r2, [r3, #0]
}
 8008000:	bf00      	nop
 8008002:	3714      	adds	r7, #20
 8008004:	46bd      	mov	sp, r7
 8008006:	bd90      	pop	{r4, r7, pc}
 8008008:	0800f698 	.word	0x0800f698
 800800c:	0800f958 	.word	0x0800f958
 8008010:	0800f6e4 	.word	0x0800f6e4
 8008014:	200082fc 	.word	0x200082fc

08008018 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8008018:	b5b0      	push	{r4, r5, r7, lr}
 800801a:	b086      	sub	sp, #24
 800801c:	af00      	add	r7, sp, #0
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	60b9      	str	r1, [r7, #8]
 8008022:	607a      	str	r2, [r7, #4]
 8008024:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8008026:	e03e      	b.n	80080a6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	4618      	mov	r0, r3
 8008038:	f7fc ff26 	bl	8004e88 <pbuf_clen>
 800803c:	4603      	mov	r3, r0
 800803e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008046:	8a7a      	ldrh	r2, [r7, #18]
 8008048:	429a      	cmp	r2, r3
 800804a:	d906      	bls.n	800805a <tcp_free_acked_segments+0x42>
 800804c:	4b2a      	ldr	r3, [pc, #168]	; (80080f8 <tcp_free_acked_segments+0xe0>)
 800804e:	f240 4257 	movw	r2, #1111	; 0x457
 8008052:	492a      	ldr	r1, [pc, #168]	; (80080fc <tcp_free_acked_segments+0xe4>)
 8008054:	482a      	ldr	r0, [pc, #168]	; (8008100 <tcp_free_acked_segments+0xe8>)
 8008056:	f005 f943 	bl	800d2e0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8008060:	8a7b      	ldrh	r3, [r7, #18]
 8008062:	1ad3      	subs	r3, r2, r3
 8008064:	b29a      	uxth	r2, r3
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	891a      	ldrh	r2, [r3, #8]
 8008070:	4b24      	ldr	r3, [pc, #144]	; (8008104 <tcp_free_acked_segments+0xec>)
 8008072:	881b      	ldrh	r3, [r3, #0]
 8008074:	4413      	add	r3, r2
 8008076:	b29a      	uxth	r2, r3
 8008078:	4b22      	ldr	r3, [pc, #136]	; (8008104 <tcp_free_acked_segments+0xec>)
 800807a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800807c:	6978      	ldr	r0, [r7, #20]
 800807e:	f7fe f9da 	bl	8006436 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008088:	2b00      	cmp	r3, #0
 800808a:	d00c      	beq.n	80080a6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d109      	bne.n	80080a6 <tcp_free_acked_segments+0x8e>
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d106      	bne.n	80080a6 <tcp_free_acked_segments+0x8e>
 8008098:	4b17      	ldr	r3, [pc, #92]	; (80080f8 <tcp_free_acked_segments+0xe0>)
 800809a:	f240 4261 	movw	r2, #1121	; 0x461
 800809e:	491a      	ldr	r1, [pc, #104]	; (8008108 <tcp_free_acked_segments+0xf0>)
 80080a0:	4817      	ldr	r0, [pc, #92]	; (8008100 <tcp_free_acked_segments+0xe8>)
 80080a2:	f005 f91d 	bl	800d2e0 <iprintf>
  while (seg_list != NULL &&
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d020      	beq.n	80080ee <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	68db      	ldr	r3, [r3, #12]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7fb fb33 	bl	800371e <lwip_htonl>
 80080b8:	4604      	mov	r4, r0
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	891b      	ldrh	r3, [r3, #8]
 80080be:	461d      	mov	r5, r3
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	68db      	ldr	r3, [r3, #12]
 80080c4:	899b      	ldrh	r3, [r3, #12]
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	4618      	mov	r0, r3
 80080ca:	f7fb fb13 	bl	80036f4 <lwip_htons>
 80080ce:	4603      	mov	r3, r0
 80080d0:	b2db      	uxtb	r3, r3
 80080d2:	f003 0303 	and.w	r3, r3, #3
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d001      	beq.n	80080de <tcp_free_acked_segments+0xc6>
 80080da:	2301      	movs	r3, #1
 80080dc:	e000      	b.n	80080e0 <tcp_free_acked_segments+0xc8>
 80080de:	2300      	movs	r3, #0
 80080e0:	442b      	add	r3, r5
 80080e2:	18e2      	adds	r2, r4, r3
 80080e4:	4b09      	ldr	r3, [pc, #36]	; (800810c <tcp_free_acked_segments+0xf4>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	dd9c      	ble.n	8008028 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80080ee:	68bb      	ldr	r3, [r7, #8]
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3718      	adds	r7, #24
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bdb0      	pop	{r4, r5, r7, pc}
 80080f8:	0800f698 	.word	0x0800f698
 80080fc:	0800f980 	.word	0x0800f980
 8008100:	0800f6e4 	.word	0x0800f6e4
 8008104:	20008304 	.word	0x20008304
 8008108:	0800f9a8 	.word	0x0800f9a8
 800810c:	20008300 	.word	0x20008300

08008110 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8008110:	b5b0      	push	{r4, r5, r7, lr}
 8008112:	b094      	sub	sp, #80	; 0x50
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8008118:	2300      	movs	r3, #0
 800811a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d106      	bne.n	8008130 <tcp_receive+0x20>
 8008122:	4b91      	ldr	r3, [pc, #580]	; (8008368 <tcp_receive+0x258>)
 8008124:	f240 427b 	movw	r2, #1147	; 0x47b
 8008128:	4990      	ldr	r1, [pc, #576]	; (800836c <tcp_receive+0x25c>)
 800812a:	4891      	ldr	r0, [pc, #580]	; (8008370 <tcp_receive+0x260>)
 800812c:	f005 f8d8 	bl	800d2e0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	7d1b      	ldrb	r3, [r3, #20]
 8008134:	2b03      	cmp	r3, #3
 8008136:	d806      	bhi.n	8008146 <tcp_receive+0x36>
 8008138:	4b8b      	ldr	r3, [pc, #556]	; (8008368 <tcp_receive+0x258>)
 800813a:	f240 427c 	movw	r2, #1148	; 0x47c
 800813e:	498d      	ldr	r1, [pc, #564]	; (8008374 <tcp_receive+0x264>)
 8008140:	488b      	ldr	r0, [pc, #556]	; (8008370 <tcp_receive+0x260>)
 8008142:	f005 f8cd 	bl	800d2e0 <iprintf>

  if (flags & TCP_ACK) {
 8008146:	4b8c      	ldr	r3, [pc, #560]	; (8008378 <tcp_receive+0x268>)
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	f003 0310 	and.w	r3, r3, #16
 800814e:	2b00      	cmp	r3, #0
 8008150:	f000 8264 	beq.w	800861c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800815a:	461a      	mov	r2, r3
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008160:	4413      	add	r3, r2
 8008162:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008168:	4b84      	ldr	r3, [pc, #528]	; (800837c <tcp_receive+0x26c>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	1ad3      	subs	r3, r2, r3
 800816e:	2b00      	cmp	r3, #0
 8008170:	db1b      	blt.n	80081aa <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008176:	4b81      	ldr	r3, [pc, #516]	; (800837c <tcp_receive+0x26c>)
 8008178:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800817a:	429a      	cmp	r2, r3
 800817c:	d106      	bne.n	800818c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008182:	4b7f      	ldr	r3, [pc, #508]	; (8008380 <tcp_receive+0x270>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	1ad3      	subs	r3, r2, r3
 8008188:	2b00      	cmp	r3, #0
 800818a:	db0e      	blt.n	80081aa <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008190:	4b7b      	ldr	r3, [pc, #492]	; (8008380 <tcp_receive+0x270>)
 8008192:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008194:	429a      	cmp	r2, r3
 8008196:	d125      	bne.n	80081e4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008198:	4b7a      	ldr	r3, [pc, #488]	; (8008384 <tcp_receive+0x274>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	89db      	ldrh	r3, [r3, #14]
 800819e:	b29a      	uxth	r2, r3
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d91c      	bls.n	80081e4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80081aa:	4b76      	ldr	r3, [pc, #472]	; (8008384 <tcp_receive+0x274>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	89db      	ldrh	r3, [r3, #14]
 80081b0:	b29a      	uxth	r2, r3
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d205      	bcs.n	80081d4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80081d4:	4b69      	ldr	r3, [pc, #420]	; (800837c <tcp_receive+0x26c>)
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80081dc:	4b68      	ldr	r3, [pc, #416]	; (8008380 <tcp_receive+0x270>)
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80081e4:	4b66      	ldr	r3, [pc, #408]	; (8008380 <tcp_receive+0x270>)
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081ec:	1ad3      	subs	r3, r2, r3
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	dc58      	bgt.n	80082a4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80081f2:	4b65      	ldr	r3, [pc, #404]	; (8008388 <tcp_receive+0x278>)
 80081f4:	881b      	ldrh	r3, [r3, #0]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d14b      	bne.n	8008292 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081fe:	687a      	ldr	r2, [r7, #4]
 8008200:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8008204:	4413      	add	r3, r2
 8008206:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008208:	429a      	cmp	r2, r3
 800820a:	d142      	bne.n	8008292 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008212:	2b00      	cmp	r3, #0
 8008214:	db3d      	blt.n	8008292 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800821a:	4b59      	ldr	r3, [pc, #356]	; (8008380 <tcp_receive+0x270>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	429a      	cmp	r2, r3
 8008220:	d137      	bne.n	8008292 <tcp_receive+0x182>
              found_dupack = 1;
 8008222:	2301      	movs	r3, #1
 8008224:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800822c:	2bff      	cmp	r3, #255	; 0xff
 800822e:	d007      	beq.n	8008240 <tcp_receive+0x130>
                ++pcb->dupacks;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008236:	3301      	adds	r3, #1
 8008238:	b2da      	uxtb	r2, r3
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008246:	2b03      	cmp	r3, #3
 8008248:	d91b      	bls.n	8008282 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008254:	4413      	add	r3, r2
 8008256:	b29a      	uxth	r2, r3
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800825e:	429a      	cmp	r2, r3
 8008260:	d30a      	bcc.n	8008278 <tcp_receive+0x168>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800826c:	4413      	add	r3, r2
 800826e:	b29a      	uxth	r2, r3
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008276:	e004      	b.n	8008282 <tcp_receive+0x172>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800827e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008288:	2b02      	cmp	r3, #2
 800828a:	d902      	bls.n	8008292 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f001 feeb 	bl	800a068 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8008292:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008294:	2b00      	cmp	r3, #0
 8008296:	f040 8161 	bne.w	800855c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80082a2:	e15b      	b.n	800855c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80082a4:	4b36      	ldr	r3, [pc, #216]	; (8008380 <tcp_receive+0x270>)
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082ac:	1ad3      	subs	r3, r2, r3
 80082ae:	3b01      	subs	r3, #1
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	f2c0 814e 	blt.w	8008552 <tcp_receive+0x442>
 80082b6:	4b32      	ldr	r3, [pc, #200]	; (8008380 <tcp_receive+0x270>)
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082be:	1ad3      	subs	r3, r2, r3
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	f300 8146 	bgt.w	8008552 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	8b5b      	ldrh	r3, [r3, #26]
 80082ca:	f003 0304 	and.w	r3, r3, #4
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d010      	beq.n	80082f4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	8b5b      	ldrh	r3, [r3, #26]
 80082d6:	f023 0304 	bic.w	r3, r3, #4
 80082da:	b29a      	uxth	r2, r3
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2200      	movs	r2, #0
 80082f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008302:	10db      	asrs	r3, r3, #3
 8008304:	b21b      	sxth	r3, r3
 8008306:	b29a      	uxth	r2, r3
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800830e:	b29b      	uxth	r3, r3
 8008310:	4413      	add	r3, r2
 8008312:	b29b      	uxth	r3, r3
 8008314:	b21a      	sxth	r2, r3
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800831c:	4b18      	ldr	r3, [pc, #96]	; (8008380 <tcp_receive+0x270>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	b29a      	uxth	r2, r3
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008326:	b29b      	uxth	r3, r3
 8008328:	1ad3      	subs	r3, r2, r3
 800832a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8008334:	4b12      	ldr	r3, [pc, #72]	; (8008380 <tcp_receive+0x270>)
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	7d1b      	ldrb	r3, [r3, #20]
 8008340:	2b03      	cmp	r3, #3
 8008342:	f240 8097 	bls.w	8008474 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8008352:	429a      	cmp	r2, r3
 8008354:	d245      	bcs.n	80083e2 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	8b5b      	ldrh	r3, [r3, #26]
 800835a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800835e:	2b00      	cmp	r3, #0
 8008360:	d014      	beq.n	800838c <tcp_receive+0x27c>
 8008362:	2301      	movs	r3, #1
 8008364:	e013      	b.n	800838e <tcp_receive+0x27e>
 8008366:	bf00      	nop
 8008368:	0800f698 	.word	0x0800f698
 800836c:	0800f9c8 	.word	0x0800f9c8
 8008370:	0800f6e4 	.word	0x0800f6e4
 8008374:	0800f9e4 	.word	0x0800f9e4
 8008378:	20008308 	.word	0x20008308
 800837c:	200082fc 	.word	0x200082fc
 8008380:	20008300 	.word	0x20008300
 8008384:	200082ec 	.word	0x200082ec
 8008388:	20008306 	.word	0x20008306
 800838c:	2302      	movs	r3, #2
 800838e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8008392:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008396:	b29a      	uxth	r2, r3
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800839c:	fb12 f303 	smulbb	r3, r2, r3
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80083a4:	4293      	cmp	r3, r2
 80083a6:	bf28      	it	cs
 80083a8:	4613      	movcs	r3, r2
 80083aa:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80083b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80083b4:	4413      	add	r3, r2
 80083b6:	b29a      	uxth	r2, r3
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80083be:	429a      	cmp	r2, r3
 80083c0:	d309      	bcc.n	80083d6 <tcp_receive+0x2c6>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80083c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80083ca:	4413      	add	r3, r2
 80083cc:	b29a      	uxth	r2, r3
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80083d4:	e04e      	b.n	8008474 <tcp_receive+0x364>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083dc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80083e0:	e048      	b.n	8008474 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80083e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80083ea:	4413      	add	r3, r2
 80083ec:	b29a      	uxth	r2, r3
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d309      	bcc.n	800840c <tcp_receive+0x2fc>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80083fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008400:	4413      	add	r3, r2
 8008402:	b29a      	uxth	r2, r3
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800840a:	e004      	b.n	8008416 <tcp_receive+0x306>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008412:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008422:	429a      	cmp	r2, r3
 8008424:	d326      	bcc.n	8008474 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008432:	1ad3      	subs	r3, r2, r3
 8008434:	b29a      	uxth	r2, r3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008446:	4413      	add	r3, r2
 8008448:	b29a      	uxth	r2, r3
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008450:	429a      	cmp	r2, r3
 8008452:	d30a      	bcc.n	800846a <tcp_receive+0x35a>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800845e:	4413      	add	r3, r2
 8008460:	b29a      	uxth	r2, r3
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008468:	e004      	b.n	8008474 <tcp_receive+0x364>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008470:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800847c:	4a98      	ldr	r2, [pc, #608]	; (80086e0 <tcp_receive+0x5d0>)
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f7ff fdca 	bl	8008018 <tcp_free_acked_segments>
 8008484:	4602      	mov	r2, r0
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008492:	4a94      	ldr	r2, [pc, #592]	; (80086e4 <tcp_receive+0x5d4>)
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f7ff fdbf 	bl	8008018 <tcp_free_acked_segments>
 800849a:	4602      	mov	r2, r0
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d104      	bne.n	80084b2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80084ae:	861a      	strh	r2, [r3, #48]	; 0x30
 80084b0:	e002      	b.n	80084b8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d103      	bne.n	80084ce <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2200      	movs	r2, #0
 80084ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80084d4:	4b84      	ldr	r3, [pc, #528]	; (80086e8 <tcp_receive+0x5d8>)
 80084d6:	881b      	ldrh	r3, [r3, #0]
 80084d8:	4413      	add	r3, r2
 80084da:	b29a      	uxth	r2, r3
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	8b5b      	ldrh	r3, [r3, #26]
 80084e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d035      	beq.n	800855a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d118      	bne.n	8008528 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d00c      	beq.n	8008518 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	4618      	mov	r0, r3
 800850c:	f7fb f907 	bl	800371e <lwip_htonl>
 8008510:	4603      	mov	r3, r0
 8008512:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8008514:	2b00      	cmp	r3, #0
 8008516:	dc20      	bgt.n	800855a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	8b5b      	ldrh	r3, [r3, #26]
 800851c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008520:	b29a      	uxth	r2, r3
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008526:	e018      	b.n	800855a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	4618      	mov	r0, r3
 8008536:	f7fb f8f2 	bl	800371e <lwip_htonl>
 800853a:	4603      	mov	r3, r0
 800853c:	1ae3      	subs	r3, r4, r3
 800853e:	2b00      	cmp	r3, #0
 8008540:	dc0b      	bgt.n	800855a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	8b5b      	ldrh	r3, [r3, #26]
 8008546:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800854a:	b29a      	uxth	r2, r3
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008550:	e003      	b.n	800855a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f001 ff76 	bl	800a444 <tcp_send_empty_ack>
 8008558:	e000      	b.n	800855c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800855a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008560:	2b00      	cmp	r3, #0
 8008562:	d05b      	beq.n	800861c <tcp_receive+0x50c>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008568:	4b60      	ldr	r3, [pc, #384]	; (80086ec <tcp_receive+0x5dc>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	1ad3      	subs	r3, r2, r3
 800856e:	2b00      	cmp	r3, #0
 8008570:	da54      	bge.n	800861c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8008572:	4b5f      	ldr	r3, [pc, #380]	; (80086f0 <tcp_receive+0x5e0>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	b29a      	uxth	r2, r3
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800857c:	b29b      	uxth	r3, r3
 800857e:	1ad3      	subs	r3, r2, r3
 8008580:	b29b      	uxth	r3, r3
 8008582:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8008586:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008590:	10db      	asrs	r3, r3, #3
 8008592:	b21b      	sxth	r3, r3
 8008594:	b29b      	uxth	r3, r3
 8008596:	1ad3      	subs	r3, r2, r3
 8008598:	b29b      	uxth	r3, r3
 800859a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80085a4:	b29a      	uxth	r2, r3
 80085a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80085aa:	4413      	add	r3, r2
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	b21a      	sxth	r2, r3
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80085b4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	da05      	bge.n	80085c8 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80085bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80085c0:	425b      	negs	r3, r3
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80085c8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80085d2:	109b      	asrs	r3, r3, #2
 80085d4:	b21b      	sxth	r3, r3
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	1ad3      	subs	r3, r2, r3
 80085da:	b29b      	uxth	r3, r3
 80085dc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80085e6:	b29a      	uxth	r2, r3
 80085e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80085ec:	4413      	add	r3, r2
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	b21a      	sxth	r2, r3
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80085fc:	10db      	asrs	r3, r3, #3
 80085fe:	b21b      	sxth	r3, r3
 8008600:	b29a      	uxth	r2, r3
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008608:	b29b      	uxth	r3, r3
 800860a:	4413      	add	r3, r2
 800860c:	b29b      	uxth	r3, r3
 800860e:	b21a      	sxth	r2, r3
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2200      	movs	r2, #0
 800861a:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800861c:	4b35      	ldr	r3, [pc, #212]	; (80086f4 <tcp_receive+0x5e4>)
 800861e:	881b      	ldrh	r3, [r3, #0]
 8008620:	2b00      	cmp	r3, #0
 8008622:	f000 84e2 	beq.w	8008fea <tcp_receive+0xeda>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	7d1b      	ldrb	r3, [r3, #20]
 800862a:	2b06      	cmp	r3, #6
 800862c:	f200 84dd 	bhi.w	8008fea <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008634:	4b30      	ldr	r3, [pc, #192]	; (80086f8 <tcp_receive+0x5e8>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	1ad3      	subs	r3, r2, r3
 800863a:	3b01      	subs	r3, #1
 800863c:	2b00      	cmp	r3, #0
 800863e:	f2c0 808f 	blt.w	8008760 <tcp_receive+0x650>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008646:	4b2b      	ldr	r3, [pc, #172]	; (80086f4 <tcp_receive+0x5e4>)
 8008648:	881b      	ldrh	r3, [r3, #0]
 800864a:	4619      	mov	r1, r3
 800864c:	4b2a      	ldr	r3, [pc, #168]	; (80086f8 <tcp_receive+0x5e8>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	440b      	add	r3, r1
 8008652:	1ad3      	subs	r3, r2, r3
 8008654:	3301      	adds	r3, #1
 8008656:	2b00      	cmp	r3, #0
 8008658:	f300 8082 	bgt.w	8008760 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800865c:	4b27      	ldr	r3, [pc, #156]	; (80086fc <tcp_receive+0x5ec>)
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008666:	4b24      	ldr	r3, [pc, #144]	; (80086f8 <tcp_receive+0x5e8>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	1ad3      	subs	r3, r2, r3
 800866c:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800866e:	4b23      	ldr	r3, [pc, #140]	; (80086fc <tcp_receive+0x5ec>)
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d106      	bne.n	8008684 <tcp_receive+0x574>
 8008676:	4b22      	ldr	r3, [pc, #136]	; (8008700 <tcp_receive+0x5f0>)
 8008678:	f240 5294 	movw	r2, #1428	; 0x594
 800867c:	4921      	ldr	r1, [pc, #132]	; (8008704 <tcp_receive+0x5f4>)
 800867e:	4822      	ldr	r0, [pc, #136]	; (8008708 <tcp_receive+0x5f8>)
 8008680:	f004 fe2e 	bl	800d2e0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8008684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008686:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800868a:	4293      	cmp	r3, r2
 800868c:	d906      	bls.n	800869c <tcp_receive+0x58c>
 800868e:	4b1c      	ldr	r3, [pc, #112]	; (8008700 <tcp_receive+0x5f0>)
 8008690:	f240 5295 	movw	r2, #1429	; 0x595
 8008694:	491d      	ldr	r1, [pc, #116]	; (800870c <tcp_receive+0x5fc>)
 8008696:	481c      	ldr	r0, [pc, #112]	; (8008708 <tcp_receive+0x5f8>)
 8008698:	f004 fe22 	bl	800d2e0 <iprintf>
      off = (u16_t)off32;
 800869c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80086a2:	4b16      	ldr	r3, [pc, #88]	; (80086fc <tcp_receive+0x5ec>)
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	891b      	ldrh	r3, [r3, #8]
 80086a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d906      	bls.n	80086be <tcp_receive+0x5ae>
 80086b0:	4b13      	ldr	r3, [pc, #76]	; (8008700 <tcp_receive+0x5f0>)
 80086b2:	f240 5297 	movw	r2, #1431	; 0x597
 80086b6:	4916      	ldr	r1, [pc, #88]	; (8008710 <tcp_receive+0x600>)
 80086b8:	4813      	ldr	r0, [pc, #76]	; (8008708 <tcp_receive+0x5f8>)
 80086ba:	f004 fe11 	bl	800d2e0 <iprintf>
      inseg.len -= off;
 80086be:	4b0f      	ldr	r3, [pc, #60]	; (80086fc <tcp_receive+0x5ec>)
 80086c0:	891a      	ldrh	r2, [r3, #8]
 80086c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80086c6:	1ad3      	subs	r3, r2, r3
 80086c8:	b29a      	uxth	r2, r3
 80086ca:	4b0c      	ldr	r3, [pc, #48]	; (80086fc <tcp_receive+0x5ec>)
 80086cc:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80086ce:	4b0b      	ldr	r3, [pc, #44]	; (80086fc <tcp_receive+0x5ec>)
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	891a      	ldrh	r2, [r3, #8]
 80086d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80086d8:	1ad3      	subs	r3, r2, r3
 80086da:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80086dc:	e02a      	b.n	8008734 <tcp_receive+0x624>
 80086de:	bf00      	nop
 80086e0:	0800fa00 	.word	0x0800fa00
 80086e4:	0800fa08 	.word	0x0800fa08
 80086e8:	20008304 	.word	0x20008304
 80086ec:	20008300 	.word	0x20008300
 80086f0:	200082c4 	.word	0x200082c4
 80086f4:	20008306 	.word	0x20008306
 80086f8:	200082fc 	.word	0x200082fc
 80086fc:	200082dc 	.word	0x200082dc
 8008700:	0800f698 	.word	0x0800f698
 8008704:	0800fa10 	.word	0x0800fa10
 8008708:	0800f6e4 	.word	0x0800f6e4
 800870c:	0800fa20 	.word	0x0800fa20
 8008710:	0800fa30 	.word	0x0800fa30
        off -= p->len;
 8008714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008716:	895b      	ldrh	r3, [r3, #10]
 8008718:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800871c:	1ad3      	subs	r3, r2, r3
 800871e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8008722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008724:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008726:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8008728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800872a:	2200      	movs	r2, #0
 800872c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800872e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8008734:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008736:	895b      	ldrh	r3, [r3, #10]
 8008738:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800873c:	429a      	cmp	r2, r3
 800873e:	d8e9      	bhi.n	8008714 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8008740:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008744:	4619      	mov	r1, r3
 8008746:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008748:	f7fc fa90 	bl	8004c6c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008750:	4a91      	ldr	r2, [pc, #580]	; (8008998 <tcp_receive+0x888>)
 8008752:	6013      	str	r3, [r2, #0]
 8008754:	4b91      	ldr	r3, [pc, #580]	; (800899c <tcp_receive+0x88c>)
 8008756:	68db      	ldr	r3, [r3, #12]
 8008758:	4a8f      	ldr	r2, [pc, #572]	; (8008998 <tcp_receive+0x888>)
 800875a:	6812      	ldr	r2, [r2, #0]
 800875c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800875e:	e00d      	b.n	800877c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8008760:	4b8d      	ldr	r3, [pc, #564]	; (8008998 <tcp_receive+0x888>)
 8008762:	681a      	ldr	r2, [r3, #0]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008768:	1ad3      	subs	r3, r2, r3
 800876a:	2b00      	cmp	r3, #0
 800876c:	da06      	bge.n	800877c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	8b5b      	ldrh	r3, [r3, #26]
 8008772:	f043 0302 	orr.w	r3, r3, #2
 8008776:	b29a      	uxth	r2, r3
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800877c:	4b86      	ldr	r3, [pc, #536]	; (8008998 <tcp_receive+0x888>)
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008784:	1ad3      	subs	r3, r2, r3
 8008786:	2b00      	cmp	r3, #0
 8008788:	f2c0 842a 	blt.w	8008fe0 <tcp_receive+0xed0>
 800878c:	4b82      	ldr	r3, [pc, #520]	; (8008998 <tcp_receive+0x888>)
 800878e:	681a      	ldr	r2, [r3, #0]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008794:	6879      	ldr	r1, [r7, #4]
 8008796:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008798:	440b      	add	r3, r1
 800879a:	1ad3      	subs	r3, r2, r3
 800879c:	3301      	adds	r3, #1
 800879e:	2b00      	cmp	r3, #0
 80087a0:	f300 841e 	bgt.w	8008fe0 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80087a8:	4b7b      	ldr	r3, [pc, #492]	; (8008998 <tcp_receive+0x888>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	429a      	cmp	r2, r3
 80087ae:	f040 829a 	bne.w	8008ce6 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80087b2:	4b7a      	ldr	r3, [pc, #488]	; (800899c <tcp_receive+0x88c>)
 80087b4:	891c      	ldrh	r4, [r3, #8]
 80087b6:	4b79      	ldr	r3, [pc, #484]	; (800899c <tcp_receive+0x88c>)
 80087b8:	68db      	ldr	r3, [r3, #12]
 80087ba:	899b      	ldrh	r3, [r3, #12]
 80087bc:	b29b      	uxth	r3, r3
 80087be:	4618      	mov	r0, r3
 80087c0:	f7fa ff98 	bl	80036f4 <lwip_htons>
 80087c4:	4603      	mov	r3, r0
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	f003 0303 	and.w	r3, r3, #3
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d001      	beq.n	80087d4 <tcp_receive+0x6c4>
 80087d0:	2301      	movs	r3, #1
 80087d2:	e000      	b.n	80087d6 <tcp_receive+0x6c6>
 80087d4:	2300      	movs	r3, #0
 80087d6:	4423      	add	r3, r4
 80087d8:	b29a      	uxth	r2, r3
 80087da:	4b71      	ldr	r3, [pc, #452]	; (80089a0 <tcp_receive+0x890>)
 80087dc:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80087e2:	4b6f      	ldr	r3, [pc, #444]	; (80089a0 <tcp_receive+0x890>)
 80087e4:	881b      	ldrh	r3, [r3, #0]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d275      	bcs.n	80088d6 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80087ea:	4b6c      	ldr	r3, [pc, #432]	; (800899c <tcp_receive+0x88c>)
 80087ec:	68db      	ldr	r3, [r3, #12]
 80087ee:	899b      	ldrh	r3, [r3, #12]
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	4618      	mov	r0, r3
 80087f4:	f7fa ff7e 	bl	80036f4 <lwip_htons>
 80087f8:	4603      	mov	r3, r0
 80087fa:	b2db      	uxtb	r3, r3
 80087fc:	f003 0301 	and.w	r3, r3, #1
 8008800:	2b00      	cmp	r3, #0
 8008802:	d01f      	beq.n	8008844 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8008804:	4b65      	ldr	r3, [pc, #404]	; (800899c <tcp_receive+0x88c>)
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	899b      	ldrh	r3, [r3, #12]
 800880a:	b29b      	uxth	r3, r3
 800880c:	b21b      	sxth	r3, r3
 800880e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008812:	b21c      	sxth	r4, r3
 8008814:	4b61      	ldr	r3, [pc, #388]	; (800899c <tcp_receive+0x88c>)
 8008816:	68db      	ldr	r3, [r3, #12]
 8008818:	899b      	ldrh	r3, [r3, #12]
 800881a:	b29b      	uxth	r3, r3
 800881c:	4618      	mov	r0, r3
 800881e:	f7fa ff69 	bl	80036f4 <lwip_htons>
 8008822:	4603      	mov	r3, r0
 8008824:	b2db      	uxtb	r3, r3
 8008826:	b29b      	uxth	r3, r3
 8008828:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800882c:	b29b      	uxth	r3, r3
 800882e:	4618      	mov	r0, r3
 8008830:	f7fa ff60 	bl	80036f4 <lwip_htons>
 8008834:	4603      	mov	r3, r0
 8008836:	b21b      	sxth	r3, r3
 8008838:	4323      	orrs	r3, r4
 800883a:	b21a      	sxth	r2, r3
 800883c:	4b57      	ldr	r3, [pc, #348]	; (800899c <tcp_receive+0x88c>)
 800883e:	68db      	ldr	r3, [r3, #12]
 8008840:	b292      	uxth	r2, r2
 8008842:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008848:	4b54      	ldr	r3, [pc, #336]	; (800899c <tcp_receive+0x88c>)
 800884a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800884c:	4b53      	ldr	r3, [pc, #332]	; (800899c <tcp_receive+0x88c>)
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	899b      	ldrh	r3, [r3, #12]
 8008852:	b29b      	uxth	r3, r3
 8008854:	4618      	mov	r0, r3
 8008856:	f7fa ff4d 	bl	80036f4 <lwip_htons>
 800885a:	4603      	mov	r3, r0
 800885c:	b2db      	uxtb	r3, r3
 800885e:	f003 0302 	and.w	r3, r3, #2
 8008862:	2b00      	cmp	r3, #0
 8008864:	d005      	beq.n	8008872 <tcp_receive+0x762>
            inseg.len -= 1;
 8008866:	4b4d      	ldr	r3, [pc, #308]	; (800899c <tcp_receive+0x88c>)
 8008868:	891b      	ldrh	r3, [r3, #8]
 800886a:	3b01      	subs	r3, #1
 800886c:	b29a      	uxth	r2, r3
 800886e:	4b4b      	ldr	r3, [pc, #300]	; (800899c <tcp_receive+0x88c>)
 8008870:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8008872:	4b4a      	ldr	r3, [pc, #296]	; (800899c <tcp_receive+0x88c>)
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	4a49      	ldr	r2, [pc, #292]	; (800899c <tcp_receive+0x88c>)
 8008878:	8912      	ldrh	r2, [r2, #8]
 800887a:	4611      	mov	r1, r2
 800887c:	4618      	mov	r0, r3
 800887e:	f7fc f8f5 	bl	8004a6c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8008882:	4b46      	ldr	r3, [pc, #280]	; (800899c <tcp_receive+0x88c>)
 8008884:	891c      	ldrh	r4, [r3, #8]
 8008886:	4b45      	ldr	r3, [pc, #276]	; (800899c <tcp_receive+0x88c>)
 8008888:	68db      	ldr	r3, [r3, #12]
 800888a:	899b      	ldrh	r3, [r3, #12]
 800888c:	b29b      	uxth	r3, r3
 800888e:	4618      	mov	r0, r3
 8008890:	f7fa ff30 	bl	80036f4 <lwip_htons>
 8008894:	4603      	mov	r3, r0
 8008896:	b2db      	uxtb	r3, r3
 8008898:	f003 0303 	and.w	r3, r3, #3
 800889c:	2b00      	cmp	r3, #0
 800889e:	d001      	beq.n	80088a4 <tcp_receive+0x794>
 80088a0:	2301      	movs	r3, #1
 80088a2:	e000      	b.n	80088a6 <tcp_receive+0x796>
 80088a4:	2300      	movs	r3, #0
 80088a6:	4423      	add	r3, r4
 80088a8:	b29a      	uxth	r2, r3
 80088aa:	4b3d      	ldr	r3, [pc, #244]	; (80089a0 <tcp_receive+0x890>)
 80088ac:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80088ae:	4b3c      	ldr	r3, [pc, #240]	; (80089a0 <tcp_receive+0x890>)
 80088b0:	881b      	ldrh	r3, [r3, #0]
 80088b2:	461a      	mov	r2, r3
 80088b4:	4b38      	ldr	r3, [pc, #224]	; (8008998 <tcp_receive+0x888>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	441a      	add	r2, r3
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088be:	6879      	ldr	r1, [r7, #4]
 80088c0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80088c2:	440b      	add	r3, r1
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d006      	beq.n	80088d6 <tcp_receive+0x7c6>
 80088c8:	4b36      	ldr	r3, [pc, #216]	; (80089a4 <tcp_receive+0x894>)
 80088ca:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80088ce:	4936      	ldr	r1, [pc, #216]	; (80089a8 <tcp_receive+0x898>)
 80088d0:	4836      	ldr	r0, [pc, #216]	; (80089ac <tcp_receive+0x89c>)
 80088d2:	f004 fd05 	bl	800d2e0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088da:	2b00      	cmp	r3, #0
 80088dc:	f000 80e7 	beq.w	8008aae <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80088e0:	4b2e      	ldr	r3, [pc, #184]	; (800899c <tcp_receive+0x88c>)
 80088e2:	68db      	ldr	r3, [r3, #12]
 80088e4:	899b      	ldrh	r3, [r3, #12]
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	4618      	mov	r0, r3
 80088ea:	f7fa ff03 	bl	80036f4 <lwip_htons>
 80088ee:	4603      	mov	r3, r0
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	f003 0301 	and.w	r3, r3, #1
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d010      	beq.n	800891c <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80088fa:	e00a      	b.n	8008912 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008900:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800890c:	68f8      	ldr	r0, [r7, #12]
 800890e:	f7fd fd92 	bl	8006436 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008916:	2b00      	cmp	r3, #0
 8008918:	d1f0      	bne.n	80088fc <tcp_receive+0x7ec>
 800891a:	e0c8      	b.n	8008aae <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008920:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8008922:	e052      	b.n	80089ca <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008926:	68db      	ldr	r3, [r3, #12]
 8008928:	899b      	ldrh	r3, [r3, #12]
 800892a:	b29b      	uxth	r3, r3
 800892c:	4618      	mov	r0, r3
 800892e:	f7fa fee1 	bl	80036f4 <lwip_htons>
 8008932:	4603      	mov	r3, r0
 8008934:	b2db      	uxtb	r3, r3
 8008936:	f003 0301 	and.w	r3, r3, #1
 800893a:	2b00      	cmp	r3, #0
 800893c:	d03d      	beq.n	80089ba <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800893e:	4b17      	ldr	r3, [pc, #92]	; (800899c <tcp_receive+0x88c>)
 8008940:	68db      	ldr	r3, [r3, #12]
 8008942:	899b      	ldrh	r3, [r3, #12]
 8008944:	b29b      	uxth	r3, r3
 8008946:	4618      	mov	r0, r3
 8008948:	f7fa fed4 	bl	80036f4 <lwip_htons>
 800894c:	4603      	mov	r3, r0
 800894e:	b2db      	uxtb	r3, r3
 8008950:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008954:	2b00      	cmp	r3, #0
 8008956:	d130      	bne.n	80089ba <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8008958:	4b10      	ldr	r3, [pc, #64]	; (800899c <tcp_receive+0x88c>)
 800895a:	68db      	ldr	r3, [r3, #12]
 800895c:	899b      	ldrh	r3, [r3, #12]
 800895e:	b29c      	uxth	r4, r3
 8008960:	2001      	movs	r0, #1
 8008962:	f7fa fec7 	bl	80036f4 <lwip_htons>
 8008966:	4603      	mov	r3, r0
 8008968:	461a      	mov	r2, r3
 800896a:	4b0c      	ldr	r3, [pc, #48]	; (800899c <tcp_receive+0x88c>)
 800896c:	68db      	ldr	r3, [r3, #12]
 800896e:	4322      	orrs	r2, r4
 8008970:	b292      	uxth	r2, r2
 8008972:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8008974:	4b09      	ldr	r3, [pc, #36]	; (800899c <tcp_receive+0x88c>)
 8008976:	891c      	ldrh	r4, [r3, #8]
 8008978:	4b08      	ldr	r3, [pc, #32]	; (800899c <tcp_receive+0x88c>)
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	899b      	ldrh	r3, [r3, #12]
 800897e:	b29b      	uxth	r3, r3
 8008980:	4618      	mov	r0, r3
 8008982:	f7fa feb7 	bl	80036f4 <lwip_htons>
 8008986:	4603      	mov	r3, r0
 8008988:	b2db      	uxtb	r3, r3
 800898a:	f003 0303 	and.w	r3, r3, #3
 800898e:	2b00      	cmp	r3, #0
 8008990:	d00e      	beq.n	80089b0 <tcp_receive+0x8a0>
 8008992:	2301      	movs	r3, #1
 8008994:	e00d      	b.n	80089b2 <tcp_receive+0x8a2>
 8008996:	bf00      	nop
 8008998:	200082fc 	.word	0x200082fc
 800899c:	200082dc 	.word	0x200082dc
 80089a0:	20008306 	.word	0x20008306
 80089a4:	0800f698 	.word	0x0800f698
 80089a8:	0800fa40 	.word	0x0800fa40
 80089ac:	0800f6e4 	.word	0x0800f6e4
 80089b0:	2300      	movs	r3, #0
 80089b2:	4423      	add	r3, r4
 80089b4:	b29a      	uxth	r2, r3
 80089b6:	4b98      	ldr	r3, [pc, #608]	; (8008c18 <tcp_receive+0xb08>)
 80089b8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80089ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089bc:	613b      	str	r3, [r7, #16]
              next = next->next;
 80089be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80089c4:	6938      	ldr	r0, [r7, #16]
 80089c6:	f7fd fd36 	bl	8006436 <tcp_seg_free>
            while (next &&
 80089ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d00e      	beq.n	80089ee <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80089d0:	4b91      	ldr	r3, [pc, #580]	; (8008c18 <tcp_receive+0xb08>)
 80089d2:	881b      	ldrh	r3, [r3, #0]
 80089d4:	461a      	mov	r2, r3
 80089d6:	4b91      	ldr	r3, [pc, #580]	; (8008c1c <tcp_receive+0xb0c>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	441a      	add	r2, r3
 80089dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089de:	68db      	ldr	r3, [r3, #12]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80089e4:	8909      	ldrh	r1, [r1, #8]
 80089e6:	440b      	add	r3, r1
 80089e8:	1ad3      	subs	r3, r2, r3
            while (next &&
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	da9a      	bge.n	8008924 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80089ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d059      	beq.n	8008aa8 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 80089f4:	4b88      	ldr	r3, [pc, #544]	; (8008c18 <tcp_receive+0xb08>)
 80089f6:	881b      	ldrh	r3, [r3, #0]
 80089f8:	461a      	mov	r2, r3
 80089fa:	4b88      	ldr	r3, [pc, #544]	; (8008c1c <tcp_receive+0xb0c>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	441a      	add	r2, r3
 8008a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a02:	68db      	ldr	r3, [r3, #12]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	1ad3      	subs	r3, r2, r3
            if (next &&
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	dd4d      	ble.n	8008aa8 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8008a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a0e:	68db      	ldr	r3, [r3, #12]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	b29a      	uxth	r2, r3
 8008a14:	4b81      	ldr	r3, [pc, #516]	; (8008c1c <tcp_receive+0xb0c>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	1ad3      	subs	r3, r2, r3
 8008a1c:	b29a      	uxth	r2, r3
 8008a1e:	4b80      	ldr	r3, [pc, #512]	; (8008c20 <tcp_receive+0xb10>)
 8008a20:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008a22:	4b7f      	ldr	r3, [pc, #508]	; (8008c20 <tcp_receive+0xb10>)
 8008a24:	68db      	ldr	r3, [r3, #12]
 8008a26:	899b      	ldrh	r3, [r3, #12]
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f7fa fe62 	bl	80036f4 <lwip_htons>
 8008a30:	4603      	mov	r3, r0
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	f003 0302 	and.w	r3, r3, #2
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d005      	beq.n	8008a48 <tcp_receive+0x938>
                inseg.len -= 1;
 8008a3c:	4b78      	ldr	r3, [pc, #480]	; (8008c20 <tcp_receive+0xb10>)
 8008a3e:	891b      	ldrh	r3, [r3, #8]
 8008a40:	3b01      	subs	r3, #1
 8008a42:	b29a      	uxth	r2, r3
 8008a44:	4b76      	ldr	r3, [pc, #472]	; (8008c20 <tcp_receive+0xb10>)
 8008a46:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8008a48:	4b75      	ldr	r3, [pc, #468]	; (8008c20 <tcp_receive+0xb10>)
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	4a74      	ldr	r2, [pc, #464]	; (8008c20 <tcp_receive+0xb10>)
 8008a4e:	8912      	ldrh	r2, [r2, #8]
 8008a50:	4611      	mov	r1, r2
 8008a52:	4618      	mov	r0, r3
 8008a54:	f7fc f80a 	bl	8004a6c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8008a58:	4b71      	ldr	r3, [pc, #452]	; (8008c20 <tcp_receive+0xb10>)
 8008a5a:	891c      	ldrh	r4, [r3, #8]
 8008a5c:	4b70      	ldr	r3, [pc, #448]	; (8008c20 <tcp_receive+0xb10>)
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	899b      	ldrh	r3, [r3, #12]
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	4618      	mov	r0, r3
 8008a66:	f7fa fe45 	bl	80036f4 <lwip_htons>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	f003 0303 	and.w	r3, r3, #3
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d001      	beq.n	8008a7a <tcp_receive+0x96a>
 8008a76:	2301      	movs	r3, #1
 8008a78:	e000      	b.n	8008a7c <tcp_receive+0x96c>
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	4423      	add	r3, r4
 8008a7e:	b29a      	uxth	r2, r3
 8008a80:	4b65      	ldr	r3, [pc, #404]	; (8008c18 <tcp_receive+0xb08>)
 8008a82:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8008a84:	4b64      	ldr	r3, [pc, #400]	; (8008c18 <tcp_receive+0xb08>)
 8008a86:	881b      	ldrh	r3, [r3, #0]
 8008a88:	461a      	mov	r2, r3
 8008a8a:	4b64      	ldr	r3, [pc, #400]	; (8008c1c <tcp_receive+0xb0c>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	441a      	add	r2, r3
 8008a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a92:	68db      	ldr	r3, [r3, #12]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d006      	beq.n	8008aa8 <tcp_receive+0x998>
 8008a9a:	4b62      	ldr	r3, [pc, #392]	; (8008c24 <tcp_receive+0xb14>)
 8008a9c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8008aa0:	4961      	ldr	r1, [pc, #388]	; (8008c28 <tcp_receive+0xb18>)
 8008aa2:	4862      	ldr	r0, [pc, #392]	; (8008c2c <tcp_receive+0xb1c>)
 8008aa4:	f004 fc1c 	bl	800d2e0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008aac:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8008aae:	4b5a      	ldr	r3, [pc, #360]	; (8008c18 <tcp_receive+0xb08>)
 8008ab0:	881b      	ldrh	r3, [r3, #0]
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	4b59      	ldr	r3, [pc, #356]	; (8008c1c <tcp_receive+0xb0c>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	441a      	add	r2, r3
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008ac2:	4b55      	ldr	r3, [pc, #340]	; (8008c18 <tcp_receive+0xb08>)
 8008ac4:	881b      	ldrh	r3, [r3, #0]
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d206      	bcs.n	8008ad8 <tcp_receive+0x9c8>
 8008aca:	4b56      	ldr	r3, [pc, #344]	; (8008c24 <tcp_receive+0xb14>)
 8008acc:	f240 6207 	movw	r2, #1543	; 0x607
 8008ad0:	4957      	ldr	r1, [pc, #348]	; (8008c30 <tcp_receive+0xb20>)
 8008ad2:	4856      	ldr	r0, [pc, #344]	; (8008c2c <tcp_receive+0xb1c>)
 8008ad4:	f004 fc04 	bl	800d2e0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008adc:	4b4e      	ldr	r3, [pc, #312]	; (8008c18 <tcp_receive+0xb08>)
 8008ade:	881b      	ldrh	r3, [r3, #0]
 8008ae0:	1ad3      	subs	r3, r2, r3
 8008ae2:	b29a      	uxth	r2, r3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f7fc ffc5 	bl	8005a78 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8008aee:	4b4c      	ldr	r3, [pc, #304]	; (8008c20 <tcp_receive+0xb10>)
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	891b      	ldrh	r3, [r3, #8]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d006      	beq.n	8008b06 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8008af8:	4b49      	ldr	r3, [pc, #292]	; (8008c20 <tcp_receive+0xb10>)
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	4a4d      	ldr	r2, [pc, #308]	; (8008c34 <tcp_receive+0xb24>)
 8008afe:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8008b00:	4b47      	ldr	r3, [pc, #284]	; (8008c20 <tcp_receive+0xb10>)
 8008b02:	2200      	movs	r2, #0
 8008b04:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008b06:	4b46      	ldr	r3, [pc, #280]	; (8008c20 <tcp_receive+0xb10>)
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	899b      	ldrh	r3, [r3, #12]
 8008b0c:	b29b      	uxth	r3, r3
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7fa fdf0 	bl	80036f4 <lwip_htons>
 8008b14:	4603      	mov	r3, r0
 8008b16:	b2db      	uxtb	r3, r3
 8008b18:	f003 0301 	and.w	r3, r3, #1
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	f000 80b8 	beq.w	8008c92 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8008b22:	4b45      	ldr	r3, [pc, #276]	; (8008c38 <tcp_receive+0xb28>)
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	f043 0320 	orr.w	r3, r3, #32
 8008b2a:	b2da      	uxtb	r2, r3
 8008b2c:	4b42      	ldr	r3, [pc, #264]	; (8008c38 <tcp_receive+0xb28>)
 8008b2e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8008b30:	e0af      	b.n	8008c92 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b36:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	4a36      	ldr	r2, [pc, #216]	; (8008c1c <tcp_receive+0xb0c>)
 8008b42:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	891b      	ldrh	r3, [r3, #8]
 8008b48:	461c      	mov	r4, r3
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	68db      	ldr	r3, [r3, #12]
 8008b4e:	899b      	ldrh	r3, [r3, #12]
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	4618      	mov	r0, r3
 8008b54:	f7fa fdce 	bl	80036f4 <lwip_htons>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	f003 0303 	and.w	r3, r3, #3
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d001      	beq.n	8008b68 <tcp_receive+0xa58>
 8008b64:	2301      	movs	r3, #1
 8008b66:	e000      	b.n	8008b6a <tcp_receive+0xa5a>
 8008b68:	2300      	movs	r3, #0
 8008b6a:	191a      	adds	r2, r3, r4
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b70:	441a      	add	r2, r3
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b7a:	461c      	mov	r4, r3
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	891b      	ldrh	r3, [r3, #8]
 8008b80:	461d      	mov	r5, r3
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	68db      	ldr	r3, [r3, #12]
 8008b86:	899b      	ldrh	r3, [r3, #12]
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f7fa fdb2 	bl	80036f4 <lwip_htons>
 8008b90:	4603      	mov	r3, r0
 8008b92:	b2db      	uxtb	r3, r3
 8008b94:	f003 0303 	and.w	r3, r3, #3
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d001      	beq.n	8008ba0 <tcp_receive+0xa90>
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	e000      	b.n	8008ba2 <tcp_receive+0xa92>
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	442b      	add	r3, r5
 8008ba4:	429c      	cmp	r4, r3
 8008ba6:	d206      	bcs.n	8008bb6 <tcp_receive+0xaa6>
 8008ba8:	4b1e      	ldr	r3, [pc, #120]	; (8008c24 <tcp_receive+0xb14>)
 8008baa:	f240 622b 	movw	r2, #1579	; 0x62b
 8008bae:	4923      	ldr	r1, [pc, #140]	; (8008c3c <tcp_receive+0xb2c>)
 8008bb0:	481e      	ldr	r0, [pc, #120]	; (8008c2c <tcp_receive+0xb1c>)
 8008bb2:	f004 fb95 	bl	800d2e0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	891b      	ldrh	r3, [r3, #8]
 8008bba:	461c      	mov	r4, r3
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	899b      	ldrh	r3, [r3, #12]
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f7fa fd95 	bl	80036f4 <lwip_htons>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	b2db      	uxtb	r3, r3
 8008bce:	f003 0303 	and.w	r3, r3, #3
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d001      	beq.n	8008bda <tcp_receive+0xaca>
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e000      	b.n	8008bdc <tcp_receive+0xacc>
 8008bda:	2300      	movs	r3, #0
 8008bdc:	1919      	adds	r1, r3, r4
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008be2:	b28b      	uxth	r3, r1
 8008be4:	1ad3      	subs	r3, r2, r3
 8008be6:	b29a      	uxth	r2, r3
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f7fc ff43 	bl	8005a78 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	891b      	ldrh	r3, [r3, #8]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d028      	beq.n	8008c4e <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8008bfc:	4b0d      	ldr	r3, [pc, #52]	; (8008c34 <tcp_receive+0xb24>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d01d      	beq.n	8008c40 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8008c04:	4b0b      	ldr	r3, [pc, #44]	; (8008c34 <tcp_receive+0xb24>)
 8008c06:	681a      	ldr	r2, [r3, #0]
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	4610      	mov	r0, r2
 8008c10:	f7fc f974 	bl	8004efc <pbuf_cat>
 8008c14:	e018      	b.n	8008c48 <tcp_receive+0xb38>
 8008c16:	bf00      	nop
 8008c18:	20008306 	.word	0x20008306
 8008c1c:	200082fc 	.word	0x200082fc
 8008c20:	200082dc 	.word	0x200082dc
 8008c24:	0800f698 	.word	0x0800f698
 8008c28:	0800fa78 	.word	0x0800fa78
 8008c2c:	0800f6e4 	.word	0x0800f6e4
 8008c30:	0800fab4 	.word	0x0800fab4
 8008c34:	2000830c 	.word	0x2000830c
 8008c38:	20008309 	.word	0x20008309
 8008c3c:	0800fad4 	.word	0x0800fad4
            } else {
              recv_data = cseg->p;
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	4a70      	ldr	r2, [pc, #448]	; (8008e08 <tcp_receive+0xcf8>)
 8008c46:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	68db      	ldr	r3, [r3, #12]
 8008c52:	899b      	ldrh	r3, [r3, #12]
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	4618      	mov	r0, r3
 8008c58:	f7fa fd4c 	bl	80036f4 <lwip_htons>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	f003 0301 	and.w	r3, r3, #1
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d00d      	beq.n	8008c84 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8008c68:	4b68      	ldr	r3, [pc, #416]	; (8008e0c <tcp_receive+0xcfc>)
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	f043 0320 	orr.w	r3, r3, #32
 8008c70:	b2da      	uxtb	r2, r3
 8008c72:	4b66      	ldr	r3, [pc, #408]	; (8008e0c <tcp_receive+0xcfc>)
 8008c74:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	7d1b      	ldrb	r3, [r3, #20]
 8008c7a:	2b04      	cmp	r3, #4
 8008c7c:	d102      	bne.n	8008c84 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2207      	movs	r2, #7
 8008c82:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8008c8c:	68b8      	ldr	r0, [r7, #8]
 8008c8e:	f7fd fbd2 	bl	8006436 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d008      	beq.n	8008cac <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c9e:	68db      	ldr	r3, [r3, #12]
 8008ca0:	685a      	ldr	r2, [r3, #4]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	f43f af43 	beq.w	8008b32 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	8b5b      	ldrh	r3, [r3, #26]
 8008cb0:	f003 0301 	and.w	r3, r3, #1
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d00e      	beq.n	8008cd6 <tcp_receive+0xbc6>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	8b5b      	ldrh	r3, [r3, #26]
 8008cbc:	f023 0301 	bic.w	r3, r3, #1
 8008cc0:	b29a      	uxth	r2, r3
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	835a      	strh	r2, [r3, #26]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	8b5b      	ldrh	r3, [r3, #26]
 8008cca:	f043 0302 	orr.w	r3, r3, #2
 8008cce:	b29a      	uxth	r2, r3
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8008cd4:	e188      	b.n	8008fe8 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	8b5b      	ldrh	r3, [r3, #26]
 8008cda:	f043 0301 	orr.w	r3, r3, #1
 8008cde:	b29a      	uxth	r2, r3
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8008ce4:	e180      	b.n	8008fe8 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d106      	bne.n	8008cfc <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8008cee:	4848      	ldr	r0, [pc, #288]	; (8008e10 <tcp_receive+0xd00>)
 8008cf0:	f7fd fbba 	bl	8006468 <tcp_seg_copy>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	675a      	str	r2, [r3, #116]	; 0x74
 8008cfa:	e16d      	b.n	8008fd8 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d04:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d06:	e157      	b.n	8008fb8 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8008d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d0a:	68db      	ldr	r3, [r3, #12]
 8008d0c:	685a      	ldr	r2, [r3, #4]
 8008d0e:	4b41      	ldr	r3, [pc, #260]	; (8008e14 <tcp_receive+0xd04>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d11d      	bne.n	8008d52 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8008d16:	4b3e      	ldr	r3, [pc, #248]	; (8008e10 <tcp_receive+0xd00>)
 8008d18:	891a      	ldrh	r2, [r3, #8]
 8008d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d1c:	891b      	ldrh	r3, [r3, #8]
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	f240 814f 	bls.w	8008fc2 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8008d24:	483a      	ldr	r0, [pc, #232]	; (8008e10 <tcp_receive+0xd00>)
 8008d26:	f7fd fb9f 	bl	8006468 <tcp_seg_copy>
 8008d2a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	f000 8149 	beq.w	8008fc6 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8008d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d003      	beq.n	8008d42 <tcp_receive+0xc32>
                    prev->next = cseg;
 8008d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d3c:	697a      	ldr	r2, [r7, #20]
 8008d3e:	601a      	str	r2, [r3, #0]
 8008d40:	e002      	b.n	8008d48 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	697a      	ldr	r2, [r7, #20]
 8008d46:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8008d48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d4a:	6978      	ldr	r0, [r7, #20]
 8008d4c:	f7ff f8dc 	bl	8007f08 <tcp_oos_insert_segment>
                }
                break;
 8008d50:	e139      	b.n	8008fc6 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8008d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d117      	bne.n	8008d88 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8008d58:	4b2e      	ldr	r3, [pc, #184]	; (8008e14 <tcp_receive+0xd04>)
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d5e:	68db      	ldr	r3, [r3, #12]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	1ad3      	subs	r3, r2, r3
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	da57      	bge.n	8008e18 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8008d68:	4829      	ldr	r0, [pc, #164]	; (8008e10 <tcp_receive+0xd00>)
 8008d6a:	f7fd fb7d 	bl	8006468 <tcp_seg_copy>
 8008d6e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8008d70:	69bb      	ldr	r3, [r7, #24]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	f000 8129 	beq.w	8008fca <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	69ba      	ldr	r2, [r7, #24]
 8008d7c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8008d7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d80:	69b8      	ldr	r0, [r7, #24]
 8008d82:	f7ff f8c1 	bl	8007f08 <tcp_oos_insert_segment>
                  }
                  break;
 8008d86:	e120      	b.n	8008fca <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8008d88:	4b22      	ldr	r3, [pc, #136]	; (8008e14 <tcp_receive+0xd04>)
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	1ad3      	subs	r3, r2, r3
 8008d94:	3b01      	subs	r3, #1
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	db3e      	blt.n	8008e18 <tcp_receive+0xd08>
 8008d9a:	4b1e      	ldr	r3, [pc, #120]	; (8008e14 <tcp_receive+0xd04>)
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da0:	68db      	ldr	r3, [r3, #12]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	1ad3      	subs	r3, r2, r3
 8008da6:	3301      	adds	r3, #1
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	dc35      	bgt.n	8008e18 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8008dac:	4818      	ldr	r0, [pc, #96]	; (8008e10 <tcp_receive+0xd00>)
 8008dae:	f7fd fb5b 	bl	8006468 <tcp_seg_copy>
 8008db2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8008db4:	69fb      	ldr	r3, [r7, #28]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	f000 8109 	beq.w	8008fce <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8008dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dbe:	68db      	ldr	r3, [r3, #12]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008dc4:	8912      	ldrh	r2, [r2, #8]
 8008dc6:	441a      	add	r2, r3
 8008dc8:	4b12      	ldr	r3, [pc, #72]	; (8008e14 <tcp_receive+0xd04>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	1ad3      	subs	r3, r2, r3
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	dd12      	ble.n	8008df8 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8008dd2:	4b10      	ldr	r3, [pc, #64]	; (8008e14 <tcp_receive+0xd04>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	b29a      	uxth	r2, r3
 8008dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dda:	68db      	ldr	r3, [r3, #12]
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	1ad3      	subs	r3, r2, r3
 8008de2:	b29a      	uxth	r2, r3
 8008de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008de6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8008de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dea:	685a      	ldr	r2, [r3, #4]
 8008dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dee:	891b      	ldrh	r3, [r3, #8]
 8008df0:	4619      	mov	r1, r3
 8008df2:	4610      	mov	r0, r2
 8008df4:	f7fb fe3a 	bl	8004a6c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8008df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dfa:	69fa      	ldr	r2, [r7, #28]
 8008dfc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8008dfe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008e00:	69f8      	ldr	r0, [r7, #28]
 8008e02:	f7ff f881 	bl	8007f08 <tcp_oos_insert_segment>
                  }
                  break;
 8008e06:	e0e2      	b.n	8008fce <tcp_receive+0xebe>
 8008e08:	2000830c 	.word	0x2000830c
 8008e0c:	20008309 	.word	0x20008309
 8008e10:	200082dc 	.word	0x200082dc
 8008e14:	200082fc 	.word	0x200082fc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8008e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e1a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8008e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	f040 80c6 	bne.w	8008fb2 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8008e26:	4b80      	ldr	r3, [pc, #512]	; (8009028 <tcp_receive+0xf18>)
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e2c:	68db      	ldr	r3, [r3, #12]
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	f340 80bd 	ble.w	8008fb2 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e3a:	68db      	ldr	r3, [r3, #12]
 8008e3c:	899b      	ldrh	r3, [r3, #12]
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	4618      	mov	r0, r3
 8008e42:	f7fa fc57 	bl	80036f4 <lwip_htons>
 8008e46:	4603      	mov	r3, r0
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	f003 0301 	and.w	r3, r3, #1
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	f040 80bf 	bne.w	8008fd2 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8008e54:	4875      	ldr	r0, [pc, #468]	; (800902c <tcp_receive+0xf1c>)
 8008e56:	f7fd fb07 	bl	8006468 <tcp_seg_copy>
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e5e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8008e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	f000 80b6 	beq.w	8008fd6 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8008e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e6c:	68db      	ldr	r3, [r3, #12]
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e72:	8912      	ldrh	r2, [r2, #8]
 8008e74:	441a      	add	r2, r3
 8008e76:	4b6c      	ldr	r3, [pc, #432]	; (8009028 <tcp_receive+0xf18>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	1ad3      	subs	r3, r2, r3
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	dd12      	ble.n	8008ea6 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8008e80:	4b69      	ldr	r3, [pc, #420]	; (8009028 <tcp_receive+0xf18>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	b29a      	uxth	r2, r3
 8008e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	1ad3      	subs	r3, r2, r3
 8008e90:	b29a      	uxth	r2, r3
 8008e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e94:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8008e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e98:	685a      	ldr	r2, [r3, #4]
 8008e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e9c:	891b      	ldrh	r3, [r3, #8]
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	4610      	mov	r0, r2
 8008ea2:	f7fb fde3 	bl	8004a6c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8008ea6:	4b62      	ldr	r3, [pc, #392]	; (8009030 <tcp_receive+0xf20>)
 8008ea8:	881b      	ldrh	r3, [r3, #0]
 8008eaa:	461a      	mov	r2, r3
 8008eac:	4b5e      	ldr	r3, [pc, #376]	; (8009028 <tcp_receive+0xf18>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	441a      	add	r2, r3
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb6:	6879      	ldr	r1, [r7, #4]
 8008eb8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008eba:	440b      	add	r3, r1
 8008ebc:	1ad3      	subs	r3, r2, r3
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	f340 8089 	ble.w	8008fd6 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8008ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	68db      	ldr	r3, [r3, #12]
 8008eca:	899b      	ldrh	r3, [r3, #12]
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7fa fc10 	bl	80036f4 <lwip_htons>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	f003 0301 	and.w	r3, r3, #1
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d022      	beq.n	8008f26 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8008ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	68db      	ldr	r3, [r3, #12]
 8008ee6:	899b      	ldrh	r3, [r3, #12]
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	b21b      	sxth	r3, r3
 8008eec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008ef0:	b21c      	sxth	r4, r3
 8008ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	899b      	ldrh	r3, [r3, #12]
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	4618      	mov	r0, r3
 8008efe:	f7fa fbf9 	bl	80036f4 <lwip_htons>
 8008f02:	4603      	mov	r3, r0
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f7fa fbf0 	bl	80036f4 <lwip_htons>
 8008f14:	4603      	mov	r3, r0
 8008f16:	b21b      	sxth	r3, r3
 8008f18:	4323      	orrs	r3, r4
 8008f1a:	b21a      	sxth	r2, r3
 8008f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	68db      	ldr	r3, [r3, #12]
 8008f22:	b292      	uxth	r2, r2
 8008f24:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f2a:	b29a      	uxth	r2, r3
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f30:	4413      	add	r3, r2
 8008f32:	b299      	uxth	r1, r3
 8008f34:	4b3c      	ldr	r3, [pc, #240]	; (8009028 <tcp_receive+0xf18>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	b29a      	uxth	r2, r3
 8008f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	1a8a      	subs	r2, r1, r2
 8008f40:	b292      	uxth	r2, r2
 8008f42:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8008f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	685a      	ldr	r2, [r3, #4]
 8008f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	891b      	ldrh	r3, [r3, #8]
 8008f50:	4619      	mov	r1, r3
 8008f52:	4610      	mov	r0, r2
 8008f54:	f7fb fd8a 	bl	8004a6c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8008f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	891c      	ldrh	r4, [r3, #8]
 8008f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	68db      	ldr	r3, [r3, #12]
 8008f64:	899b      	ldrh	r3, [r3, #12]
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f7fa fbc3 	bl	80036f4 <lwip_htons>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	b2db      	uxtb	r3, r3
 8008f72:	f003 0303 	and.w	r3, r3, #3
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d001      	beq.n	8008f7e <tcp_receive+0xe6e>
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	e000      	b.n	8008f80 <tcp_receive+0xe70>
 8008f7e:	2300      	movs	r3, #0
 8008f80:	4423      	add	r3, r4
 8008f82:	b29a      	uxth	r2, r3
 8008f84:	4b2a      	ldr	r3, [pc, #168]	; (8009030 <tcp_receive+0xf20>)
 8008f86:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008f88:	4b29      	ldr	r3, [pc, #164]	; (8009030 <tcp_receive+0xf20>)
 8008f8a:	881b      	ldrh	r3, [r3, #0]
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	4b26      	ldr	r3, [pc, #152]	; (8009028 <tcp_receive+0xf18>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	441a      	add	r2, r3
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f98:	6879      	ldr	r1, [r7, #4]
 8008f9a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008f9c:	440b      	add	r3, r1
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d019      	beq.n	8008fd6 <tcp_receive+0xec6>
 8008fa2:	4b24      	ldr	r3, [pc, #144]	; (8009034 <tcp_receive+0xf24>)
 8008fa4:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8008fa8:	4923      	ldr	r1, [pc, #140]	; (8009038 <tcp_receive+0xf28>)
 8008faa:	4824      	ldr	r0, [pc, #144]	; (800903c <tcp_receive+0xf2c>)
 8008fac:	f004 f998 	bl	800d2e0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8008fb0:	e011      	b.n	8008fd6 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8008fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8008fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	f47f aea4 	bne.w	8008d08 <tcp_receive+0xbf8>
 8008fc0:	e00a      	b.n	8008fd8 <tcp_receive+0xec8>
                break;
 8008fc2:	bf00      	nop
 8008fc4:	e008      	b.n	8008fd8 <tcp_receive+0xec8>
                break;
 8008fc6:	bf00      	nop
 8008fc8:	e006      	b.n	8008fd8 <tcp_receive+0xec8>
                  break;
 8008fca:	bf00      	nop
 8008fcc:	e004      	b.n	8008fd8 <tcp_receive+0xec8>
                  break;
 8008fce:	bf00      	nop
 8008fd0:	e002      	b.n	8008fd8 <tcp_receive+0xec8>
                  break;
 8008fd2:	bf00      	nop
 8008fd4:	e000      	b.n	8008fd8 <tcp_receive+0xec8>
                break;
 8008fd6:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f001 fa33 	bl	800a444 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8008fde:	e003      	b.n	8008fe8 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f001 fa2f 	bl	800a444 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008fe6:	e01a      	b.n	800901e <tcp_receive+0xf0e>
 8008fe8:	e019      	b.n	800901e <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8008fea:	4b0f      	ldr	r3, [pc, #60]	; (8009028 <tcp_receive+0xf18>)
 8008fec:	681a      	ldr	r2, [r3, #0]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff2:	1ad3      	subs	r3, r2, r3
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	db0a      	blt.n	800900e <tcp_receive+0xefe>
 8008ff8:	4b0b      	ldr	r3, [pc, #44]	; (8009028 <tcp_receive+0xf18>)
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009000:	6879      	ldr	r1, [r7, #4]
 8009002:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009004:	440b      	add	r3, r1
 8009006:	1ad3      	subs	r3, r2, r3
 8009008:	3301      	adds	r3, #1
 800900a:	2b00      	cmp	r3, #0
 800900c:	dd07      	ble.n	800901e <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	8b5b      	ldrh	r3, [r3, #26]
 8009012:	f043 0302 	orr.w	r3, r3, #2
 8009016:	b29a      	uxth	r2, r3
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800901c:	e7ff      	b.n	800901e <tcp_receive+0xf0e>
 800901e:	bf00      	nop
 8009020:	3750      	adds	r7, #80	; 0x50
 8009022:	46bd      	mov	sp, r7
 8009024:	bdb0      	pop	{r4, r5, r7, pc}
 8009026:	bf00      	nop
 8009028:	200082fc 	.word	0x200082fc
 800902c:	200082dc 	.word	0x200082dc
 8009030:	20008306 	.word	0x20008306
 8009034:	0800f698 	.word	0x0800f698
 8009038:	0800fa40 	.word	0x0800fa40
 800903c:	0800f6e4 	.word	0x0800f6e4

08009040 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8009040:	b480      	push	{r7}
 8009042:	b083      	sub	sp, #12
 8009044:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8009046:	4b15      	ldr	r3, [pc, #84]	; (800909c <tcp_get_next_optbyte+0x5c>)
 8009048:	881b      	ldrh	r3, [r3, #0]
 800904a:	1c5a      	adds	r2, r3, #1
 800904c:	b291      	uxth	r1, r2
 800904e:	4a13      	ldr	r2, [pc, #76]	; (800909c <tcp_get_next_optbyte+0x5c>)
 8009050:	8011      	strh	r1, [r2, #0]
 8009052:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009054:	4b12      	ldr	r3, [pc, #72]	; (80090a0 <tcp_get_next_optbyte+0x60>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d004      	beq.n	8009066 <tcp_get_next_optbyte+0x26>
 800905c:	4b11      	ldr	r3, [pc, #68]	; (80090a4 <tcp_get_next_optbyte+0x64>)
 800905e:	881b      	ldrh	r3, [r3, #0]
 8009060:	88fa      	ldrh	r2, [r7, #6]
 8009062:	429a      	cmp	r2, r3
 8009064:	d208      	bcs.n	8009078 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8009066:	4b10      	ldr	r3, [pc, #64]	; (80090a8 <tcp_get_next_optbyte+0x68>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	3314      	adds	r3, #20
 800906c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800906e:	88fb      	ldrh	r3, [r7, #6]
 8009070:	683a      	ldr	r2, [r7, #0]
 8009072:	4413      	add	r3, r2
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	e00b      	b.n	8009090 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8009078:	88fb      	ldrh	r3, [r7, #6]
 800907a:	b2da      	uxtb	r2, r3
 800907c:	4b09      	ldr	r3, [pc, #36]	; (80090a4 <tcp_get_next_optbyte+0x64>)
 800907e:	881b      	ldrh	r3, [r3, #0]
 8009080:	b2db      	uxtb	r3, r3
 8009082:	1ad3      	subs	r3, r2, r3
 8009084:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8009086:	4b06      	ldr	r3, [pc, #24]	; (80090a0 <tcp_get_next_optbyte+0x60>)
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	797b      	ldrb	r3, [r7, #5]
 800908c:	4413      	add	r3, r2
 800908e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009090:	4618      	mov	r0, r3
 8009092:	370c      	adds	r7, #12
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr
 800909c:	200082f8 	.word	0x200082f8
 80090a0:	200082f4 	.word	0x200082f4
 80090a4:	200082f2 	.word	0x200082f2
 80090a8:	200082ec 	.word	0x200082ec

080090ac <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d106      	bne.n	80090c8 <tcp_parseopt+0x1c>
 80090ba:	4b32      	ldr	r3, [pc, #200]	; (8009184 <tcp_parseopt+0xd8>)
 80090bc:	f240 727d 	movw	r2, #1917	; 0x77d
 80090c0:	4931      	ldr	r1, [pc, #196]	; (8009188 <tcp_parseopt+0xdc>)
 80090c2:	4832      	ldr	r0, [pc, #200]	; (800918c <tcp_parseopt+0xe0>)
 80090c4:	f004 f90c 	bl	800d2e0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80090c8:	4b31      	ldr	r3, [pc, #196]	; (8009190 <tcp_parseopt+0xe4>)
 80090ca:	881b      	ldrh	r3, [r3, #0]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d055      	beq.n	800917c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80090d0:	4b30      	ldr	r3, [pc, #192]	; (8009194 <tcp_parseopt+0xe8>)
 80090d2:	2200      	movs	r2, #0
 80090d4:	801a      	strh	r2, [r3, #0]
 80090d6:	e045      	b.n	8009164 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80090d8:	f7ff ffb2 	bl	8009040 <tcp_get_next_optbyte>
 80090dc:	4603      	mov	r3, r0
 80090de:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80090e0:	7bfb      	ldrb	r3, [r7, #15]
 80090e2:	2b02      	cmp	r3, #2
 80090e4:	d006      	beq.n	80090f4 <tcp_parseopt+0x48>
 80090e6:	2b02      	cmp	r3, #2
 80090e8:	dc2b      	bgt.n	8009142 <tcp_parseopt+0x96>
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d041      	beq.n	8009172 <tcp_parseopt+0xc6>
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d127      	bne.n	8009142 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80090f2:	e037      	b.n	8009164 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80090f4:	f7ff ffa4 	bl	8009040 <tcp_get_next_optbyte>
 80090f8:	4603      	mov	r3, r0
 80090fa:	2b04      	cmp	r3, #4
 80090fc:	d13b      	bne.n	8009176 <tcp_parseopt+0xca>
 80090fe:	4b25      	ldr	r3, [pc, #148]	; (8009194 <tcp_parseopt+0xe8>)
 8009100:	881b      	ldrh	r3, [r3, #0]
 8009102:	3301      	adds	r3, #1
 8009104:	4a22      	ldr	r2, [pc, #136]	; (8009190 <tcp_parseopt+0xe4>)
 8009106:	8812      	ldrh	r2, [r2, #0]
 8009108:	4293      	cmp	r3, r2
 800910a:	da34      	bge.n	8009176 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800910c:	f7ff ff98 	bl	8009040 <tcp_get_next_optbyte>
 8009110:	4603      	mov	r3, r0
 8009112:	b29b      	uxth	r3, r3
 8009114:	021b      	lsls	r3, r3, #8
 8009116:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8009118:	f7ff ff92 	bl	8009040 <tcp_get_next_optbyte>
 800911c:	4603      	mov	r3, r0
 800911e:	b29a      	uxth	r2, r3
 8009120:	89bb      	ldrh	r3, [r7, #12]
 8009122:	4313      	orrs	r3, r2
 8009124:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009126:	89bb      	ldrh	r3, [r7, #12]
 8009128:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800912c:	d804      	bhi.n	8009138 <tcp_parseopt+0x8c>
 800912e:	89bb      	ldrh	r3, [r7, #12]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d001      	beq.n	8009138 <tcp_parseopt+0x8c>
 8009134:	89ba      	ldrh	r2, [r7, #12]
 8009136:	e001      	b.n	800913c <tcp_parseopt+0x90>
 8009138:	f44f 7206 	mov.w	r2, #536	; 0x218
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8009140:	e010      	b.n	8009164 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8009142:	f7ff ff7d 	bl	8009040 <tcp_get_next_optbyte>
 8009146:	4603      	mov	r3, r0
 8009148:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800914a:	7afb      	ldrb	r3, [r7, #11]
 800914c:	2b01      	cmp	r3, #1
 800914e:	d914      	bls.n	800917a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8009150:	7afb      	ldrb	r3, [r7, #11]
 8009152:	b29a      	uxth	r2, r3
 8009154:	4b0f      	ldr	r3, [pc, #60]	; (8009194 <tcp_parseopt+0xe8>)
 8009156:	881b      	ldrh	r3, [r3, #0]
 8009158:	4413      	add	r3, r2
 800915a:	b29b      	uxth	r3, r3
 800915c:	3b02      	subs	r3, #2
 800915e:	b29a      	uxth	r2, r3
 8009160:	4b0c      	ldr	r3, [pc, #48]	; (8009194 <tcp_parseopt+0xe8>)
 8009162:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009164:	4b0b      	ldr	r3, [pc, #44]	; (8009194 <tcp_parseopt+0xe8>)
 8009166:	881a      	ldrh	r2, [r3, #0]
 8009168:	4b09      	ldr	r3, [pc, #36]	; (8009190 <tcp_parseopt+0xe4>)
 800916a:	881b      	ldrh	r3, [r3, #0]
 800916c:	429a      	cmp	r2, r3
 800916e:	d3b3      	bcc.n	80090d8 <tcp_parseopt+0x2c>
 8009170:	e004      	b.n	800917c <tcp_parseopt+0xd0>
          return;
 8009172:	bf00      	nop
 8009174:	e002      	b.n	800917c <tcp_parseopt+0xd0>
            return;
 8009176:	bf00      	nop
 8009178:	e000      	b.n	800917c <tcp_parseopt+0xd0>
            return;
 800917a:	bf00      	nop
      }
    }
  }
}
 800917c:	3710      	adds	r7, #16
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
 8009182:	bf00      	nop
 8009184:	0800f698 	.word	0x0800f698
 8009188:	0800fafc 	.word	0x0800fafc
 800918c:	0800f6e4 	.word	0x0800f6e4
 8009190:	200082f0 	.word	0x200082f0
 8009194:	200082f8 	.word	0x200082f8

08009198 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8009198:	b480      	push	{r7}
 800919a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800919c:	4b05      	ldr	r3, [pc, #20]	; (80091b4 <tcp_trigger_input_pcb_close+0x1c>)
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	f043 0310 	orr.w	r3, r3, #16
 80091a4:	b2da      	uxtb	r2, r3
 80091a6:	4b03      	ldr	r3, [pc, #12]	; (80091b4 <tcp_trigger_input_pcb_close+0x1c>)
 80091a8:	701a      	strb	r2, [r3, #0]
}
 80091aa:	bf00      	nop
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr
 80091b4:	20008309 	.word	0x20008309

080091b8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	60f8      	str	r0, [r7, #12]
 80091c0:	60b9      	str	r1, [r7, #8]
 80091c2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d00a      	beq.n	80091e0 <tcp_route+0x28>
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	7a1b      	ldrb	r3, [r3, #8]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d006      	beq.n	80091e0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	7a1b      	ldrb	r3, [r3, #8]
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7fb fa8e 	bl	80046f8 <netif_get_by_index>
 80091dc:	4603      	mov	r3, r0
 80091de:	e003      	b.n	80091e8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f002 fe3b 	bl	800be5c <ip4_route>
 80091e6:	4603      	mov	r3, r0
  }
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3710      	adds	r7, #16
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80091f0:	b590      	push	{r4, r7, lr}
 80091f2:	b087      	sub	sp, #28
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	60f8      	str	r0, [r7, #12]
 80091f8:	60b9      	str	r1, [r7, #8]
 80091fa:	603b      	str	r3, [r7, #0]
 80091fc:	4613      	mov	r3, r2
 80091fe:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d105      	bne.n	8009212 <tcp_create_segment+0x22>
 8009206:	4b44      	ldr	r3, [pc, #272]	; (8009318 <tcp_create_segment+0x128>)
 8009208:	22a3      	movs	r2, #163	; 0xa3
 800920a:	4944      	ldr	r1, [pc, #272]	; (800931c <tcp_create_segment+0x12c>)
 800920c:	4844      	ldr	r0, [pc, #272]	; (8009320 <tcp_create_segment+0x130>)
 800920e:	f004 f867 	bl	800d2e0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d105      	bne.n	8009224 <tcp_create_segment+0x34>
 8009218:	4b3f      	ldr	r3, [pc, #252]	; (8009318 <tcp_create_segment+0x128>)
 800921a:	22a4      	movs	r2, #164	; 0xa4
 800921c:	4941      	ldr	r1, [pc, #260]	; (8009324 <tcp_create_segment+0x134>)
 800921e:	4840      	ldr	r0, [pc, #256]	; (8009320 <tcp_create_segment+0x130>)
 8009220:	f004 f85e 	bl	800d2e0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009224:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009228:	009b      	lsls	r3, r3, #2
 800922a:	b2db      	uxtb	r3, r3
 800922c:	f003 0304 	and.w	r3, r3, #4
 8009230:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8009232:	2004      	movs	r0, #4
 8009234:	f7fa fed6 	bl	8003fe4 <memp_malloc>
 8009238:	6138      	str	r0, [r7, #16]
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d104      	bne.n	800924a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8009240:	68b8      	ldr	r0, [r7, #8]
 8009242:	f7fb fd99 	bl	8004d78 <pbuf_free>
    return NULL;
 8009246:	2300      	movs	r3, #0
 8009248:	e061      	b.n	800930e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8009250:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	2200      	movs	r2, #0
 8009256:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	68ba      	ldr	r2, [r7, #8]
 800925c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	891a      	ldrh	r2, [r3, #8]
 8009262:	7dfb      	ldrb	r3, [r7, #23]
 8009264:	b29b      	uxth	r3, r3
 8009266:	429a      	cmp	r2, r3
 8009268:	d205      	bcs.n	8009276 <tcp_create_segment+0x86>
 800926a:	4b2b      	ldr	r3, [pc, #172]	; (8009318 <tcp_create_segment+0x128>)
 800926c:	22b0      	movs	r2, #176	; 0xb0
 800926e:	492e      	ldr	r1, [pc, #184]	; (8009328 <tcp_create_segment+0x138>)
 8009270:	482b      	ldr	r0, [pc, #172]	; (8009320 <tcp_create_segment+0x130>)
 8009272:	f004 f835 	bl	800d2e0 <iprintf>
  seg->len = p->tot_len - optlen;
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	891a      	ldrh	r2, [r3, #8]
 800927a:	7dfb      	ldrb	r3, [r7, #23]
 800927c:	b29b      	uxth	r3, r3
 800927e:	1ad3      	subs	r3, r2, r3
 8009280:	b29a      	uxth	r2, r3
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8009286:	2114      	movs	r1, #20
 8009288:	68b8      	ldr	r0, [r7, #8]
 800928a:	f7fb fcdf 	bl	8004c4c <pbuf_add_header>
 800928e:	4603      	mov	r3, r0
 8009290:	2b00      	cmp	r3, #0
 8009292:	d004      	beq.n	800929e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8009294:	6938      	ldr	r0, [r7, #16]
 8009296:	f7fd f8ce 	bl	8006436 <tcp_seg_free>
    return NULL;
 800929a:	2300      	movs	r3, #0
 800929c:	e037      	b.n	800930e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	685a      	ldr	r2, [r3, #4]
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	8ada      	ldrh	r2, [r3, #22]
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	68dc      	ldr	r4, [r3, #12]
 80092b0:	4610      	mov	r0, r2
 80092b2:	f7fa fa1f 	bl	80036f4 <lwip_htons>
 80092b6:	4603      	mov	r3, r0
 80092b8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	8b1a      	ldrh	r2, [r3, #24]
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	68dc      	ldr	r4, [r3, #12]
 80092c2:	4610      	mov	r0, r2
 80092c4:	f7fa fa16 	bl	80036f4 <lwip_htons>
 80092c8:	4603      	mov	r3, r0
 80092ca:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	68dc      	ldr	r4, [r3, #12]
 80092d0:	6838      	ldr	r0, [r7, #0]
 80092d2:	f7fa fa24 	bl	800371e <lwip_htonl>
 80092d6:	4603      	mov	r3, r0
 80092d8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80092da:	7dfb      	ldrb	r3, [r7, #23]
 80092dc:	089b      	lsrs	r3, r3, #2
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	3305      	adds	r3, #5
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	031b      	lsls	r3, r3, #12
 80092e8:	b29a      	uxth	r2, r3
 80092ea:	79fb      	ldrb	r3, [r7, #7]
 80092ec:	b29b      	uxth	r3, r3
 80092ee:	4313      	orrs	r3, r2
 80092f0:	b29a      	uxth	r2, r3
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	68dc      	ldr	r4, [r3, #12]
 80092f6:	4610      	mov	r0, r2
 80092f8:	f7fa f9fc 	bl	80036f4 <lwip_htons>
 80092fc:	4603      	mov	r3, r0
 80092fe:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	68db      	ldr	r3, [r3, #12]
 8009304:	2200      	movs	r2, #0
 8009306:	749a      	strb	r2, [r3, #18]
 8009308:	2200      	movs	r2, #0
 800930a:	74da      	strb	r2, [r3, #19]
  return seg;
 800930c:	693b      	ldr	r3, [r7, #16]
}
 800930e:	4618      	mov	r0, r3
 8009310:	371c      	adds	r7, #28
 8009312:	46bd      	mov	sp, r7
 8009314:	bd90      	pop	{r4, r7, pc}
 8009316:	bf00      	nop
 8009318:	0800fb18 	.word	0x0800fb18
 800931c:	0800fb4c 	.word	0x0800fb4c
 8009320:	0800fb6c 	.word	0x0800fb6c
 8009324:	0800fb94 	.word	0x0800fb94
 8009328:	0800fbb8 	.word	0x0800fbb8

0800932c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800932c:	b590      	push	{r4, r7, lr}
 800932e:	b08b      	sub	sp, #44	; 0x2c
 8009330:	af02      	add	r7, sp, #8
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	460b      	mov	r3, r1
 8009336:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8009338:	2300      	movs	r3, #0
 800933a:	61fb      	str	r3, [r7, #28]
 800933c:	2300      	movs	r3, #0
 800933e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8009340:	2300      	movs	r3, #0
 8009342:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d106      	bne.n	8009358 <tcp_split_unsent_seg+0x2c>
 800934a:	4b95      	ldr	r3, [pc, #596]	; (80095a0 <tcp_split_unsent_seg+0x274>)
 800934c:	f240 324b 	movw	r2, #843	; 0x34b
 8009350:	4994      	ldr	r1, [pc, #592]	; (80095a4 <tcp_split_unsent_seg+0x278>)
 8009352:	4895      	ldr	r0, [pc, #596]	; (80095a8 <tcp_split_unsent_seg+0x27c>)
 8009354:	f003 ffc4 	bl	800d2e0 <iprintf>

  useg = pcb->unsent;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800935c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d102      	bne.n	800936a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8009364:	f04f 33ff 	mov.w	r3, #4294967295
 8009368:	e116      	b.n	8009598 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800936a:	887b      	ldrh	r3, [r7, #2]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d109      	bne.n	8009384 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8009370:	4b8b      	ldr	r3, [pc, #556]	; (80095a0 <tcp_split_unsent_seg+0x274>)
 8009372:	f240 3253 	movw	r2, #851	; 0x353
 8009376:	498d      	ldr	r1, [pc, #564]	; (80095ac <tcp_split_unsent_seg+0x280>)
 8009378:	488b      	ldr	r0, [pc, #556]	; (80095a8 <tcp_split_unsent_seg+0x27c>)
 800937a:	f003 ffb1 	bl	800d2e0 <iprintf>
    return ERR_VAL;
 800937e:	f06f 0305 	mvn.w	r3, #5
 8009382:	e109      	b.n	8009598 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	891b      	ldrh	r3, [r3, #8]
 8009388:	887a      	ldrh	r2, [r7, #2]
 800938a:	429a      	cmp	r2, r3
 800938c:	d301      	bcc.n	8009392 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800938e:	2300      	movs	r3, #0
 8009390:	e102      	b.n	8009598 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009396:	887a      	ldrh	r2, [r7, #2]
 8009398:	429a      	cmp	r2, r3
 800939a:	d906      	bls.n	80093aa <tcp_split_unsent_seg+0x7e>
 800939c:	4b80      	ldr	r3, [pc, #512]	; (80095a0 <tcp_split_unsent_seg+0x274>)
 800939e:	f240 325b 	movw	r2, #859	; 0x35b
 80093a2:	4983      	ldr	r1, [pc, #524]	; (80095b0 <tcp_split_unsent_seg+0x284>)
 80093a4:	4880      	ldr	r0, [pc, #512]	; (80095a8 <tcp_split_unsent_seg+0x27c>)
 80093a6:	f003 ff9b 	bl	800d2e0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	891b      	ldrh	r3, [r3, #8]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d106      	bne.n	80093c0 <tcp_split_unsent_seg+0x94>
 80093b2:	4b7b      	ldr	r3, [pc, #492]	; (80095a0 <tcp_split_unsent_seg+0x274>)
 80093b4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80093b8:	497e      	ldr	r1, [pc, #504]	; (80095b4 <tcp_split_unsent_seg+0x288>)
 80093ba:	487b      	ldr	r0, [pc, #492]	; (80095a8 <tcp_split_unsent_seg+0x27c>)
 80093bc:	f003 ff90 	bl	800d2e0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	7a9b      	ldrb	r3, [r3, #10]
 80093c4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80093c6:	7bfb      	ldrb	r3, [r7, #15]
 80093c8:	009b      	lsls	r3, r3, #2
 80093ca:	b2db      	uxtb	r3, r3
 80093cc:	f003 0304 	and.w	r3, r3, #4
 80093d0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	891a      	ldrh	r2, [r3, #8]
 80093d6:	887b      	ldrh	r3, [r7, #2]
 80093d8:	1ad3      	subs	r3, r2, r3
 80093da:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80093dc:	7bbb      	ldrb	r3, [r7, #14]
 80093de:	b29a      	uxth	r2, r3
 80093e0:	89bb      	ldrh	r3, [r7, #12]
 80093e2:	4413      	add	r3, r2
 80093e4:	b29b      	uxth	r3, r3
 80093e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80093ea:	4619      	mov	r1, r3
 80093ec:	2036      	movs	r0, #54	; 0x36
 80093ee:	f7fb f9df 	bl	80047b0 <pbuf_alloc>
 80093f2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	f000 80b7 	beq.w	800956a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	891a      	ldrh	r2, [r3, #8]
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	891b      	ldrh	r3, [r3, #8]
 8009406:	1ad3      	subs	r3, r2, r3
 8009408:	b29a      	uxth	r2, r3
 800940a:	887b      	ldrh	r3, [r7, #2]
 800940c:	4413      	add	r3, r2
 800940e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	6858      	ldr	r0, [r3, #4]
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	685a      	ldr	r2, [r3, #4]
 8009418:	7bbb      	ldrb	r3, [r7, #14]
 800941a:	18d1      	adds	r1, r2, r3
 800941c:	897b      	ldrh	r3, [r7, #10]
 800941e:	89ba      	ldrh	r2, [r7, #12]
 8009420:	f7fb fe94 	bl	800514c <pbuf_copy_partial>
 8009424:	4603      	mov	r3, r0
 8009426:	461a      	mov	r2, r3
 8009428:	89bb      	ldrh	r3, [r7, #12]
 800942a:	4293      	cmp	r3, r2
 800942c:	f040 809f 	bne.w	800956e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	68db      	ldr	r3, [r3, #12]
 8009434:	899b      	ldrh	r3, [r3, #12]
 8009436:	b29b      	uxth	r3, r3
 8009438:	4618      	mov	r0, r3
 800943a:	f7fa f95b 	bl	80036f4 <lwip_htons>
 800943e:	4603      	mov	r3, r0
 8009440:	b2db      	uxtb	r3, r3
 8009442:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009446:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8009448:	2300      	movs	r3, #0
 800944a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800944c:	7efb      	ldrb	r3, [r7, #27]
 800944e:	f003 0308 	and.w	r3, r3, #8
 8009452:	2b00      	cmp	r3, #0
 8009454:	d007      	beq.n	8009466 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8009456:	7efb      	ldrb	r3, [r7, #27]
 8009458:	f023 0308 	bic.w	r3, r3, #8
 800945c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800945e:	7ebb      	ldrb	r3, [r7, #26]
 8009460:	f043 0308 	orr.w	r3, r3, #8
 8009464:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8009466:	7efb      	ldrb	r3, [r7, #27]
 8009468:	f003 0301 	and.w	r3, r3, #1
 800946c:	2b00      	cmp	r3, #0
 800946e:	d007      	beq.n	8009480 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8009470:	7efb      	ldrb	r3, [r7, #27]
 8009472:	f023 0301 	bic.w	r3, r3, #1
 8009476:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8009478:	7ebb      	ldrb	r3, [r7, #26]
 800947a:	f043 0301 	orr.w	r3, r3, #1
 800947e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	68db      	ldr	r3, [r3, #12]
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	4618      	mov	r0, r3
 8009488:	f7fa f949 	bl	800371e <lwip_htonl>
 800948c:	4602      	mov	r2, r0
 800948e:	887b      	ldrh	r3, [r7, #2]
 8009490:	18d1      	adds	r1, r2, r3
 8009492:	7eba      	ldrb	r2, [r7, #26]
 8009494:	7bfb      	ldrb	r3, [r7, #15]
 8009496:	9300      	str	r3, [sp, #0]
 8009498:	460b      	mov	r3, r1
 800949a:	6939      	ldr	r1, [r7, #16]
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f7ff fea7 	bl	80091f0 <tcp_create_segment>
 80094a2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80094a4:	69fb      	ldr	r3, [r7, #28]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d063      	beq.n	8009572 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	4618      	mov	r0, r3
 80094b0:	f7fb fcea 	bl	8004e88 <pbuf_clen>
 80094b4:	4603      	mov	r3, r0
 80094b6:	461a      	mov	r2, r3
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80094be:	1a9b      	subs	r3, r3, r2
 80094c0:	b29a      	uxth	r2, r3
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	6858      	ldr	r0, [r3, #4]
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	685b      	ldr	r3, [r3, #4]
 80094d0:	891a      	ldrh	r2, [r3, #8]
 80094d2:	89bb      	ldrh	r3, [r7, #12]
 80094d4:	1ad3      	subs	r3, r2, r3
 80094d6:	b29b      	uxth	r3, r3
 80094d8:	4619      	mov	r1, r3
 80094da:	f7fb fac7 	bl	8004a6c <pbuf_realloc>
  useg->len -= remainder;
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	891a      	ldrh	r2, [r3, #8]
 80094e2:	89bb      	ldrh	r3, [r7, #12]
 80094e4:	1ad3      	subs	r3, r2, r3
 80094e6:	b29a      	uxth	r2, r3
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	68db      	ldr	r3, [r3, #12]
 80094f0:	899b      	ldrh	r3, [r3, #12]
 80094f2:	b29c      	uxth	r4, r3
 80094f4:	7efb      	ldrb	r3, [r7, #27]
 80094f6:	b29b      	uxth	r3, r3
 80094f8:	4618      	mov	r0, r3
 80094fa:	f7fa f8fb 	bl	80036f4 <lwip_htons>
 80094fe:	4603      	mov	r3, r0
 8009500:	461a      	mov	r2, r3
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	68db      	ldr	r3, [r3, #12]
 8009506:	4322      	orrs	r2, r4
 8009508:	b292      	uxth	r2, r2
 800950a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	4618      	mov	r0, r3
 8009512:	f7fb fcb9 	bl	8004e88 <pbuf_clen>
 8009516:	4603      	mov	r3, r0
 8009518:	461a      	mov	r2, r3
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009520:	4413      	add	r3, r2
 8009522:	b29a      	uxth	r2, r3
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800952a:	69fb      	ldr	r3, [r7, #28]
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	4618      	mov	r0, r3
 8009530:	f7fb fcaa 	bl	8004e88 <pbuf_clen>
 8009534:	4603      	mov	r3, r0
 8009536:	461a      	mov	r2, r3
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800953e:	4413      	add	r3, r2
 8009540:	b29a      	uxth	r2, r3
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	69fb      	ldr	r3, [r7, #28]
 800954e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	69fa      	ldr	r2, [r7, #28]
 8009554:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8009556:	69fb      	ldr	r3, [r7, #28]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d103      	bne.n	8009566 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2200      	movs	r2, #0
 8009562:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8009566:	2300      	movs	r3, #0
 8009568:	e016      	b.n	8009598 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800956a:	bf00      	nop
 800956c:	e002      	b.n	8009574 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800956e:	bf00      	nop
 8009570:	e000      	b.n	8009574 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8009572:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8009574:	69fb      	ldr	r3, [r7, #28]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d006      	beq.n	8009588 <tcp_split_unsent_seg+0x25c>
 800957a:	4b09      	ldr	r3, [pc, #36]	; (80095a0 <tcp_split_unsent_seg+0x274>)
 800957c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8009580:	490d      	ldr	r1, [pc, #52]	; (80095b8 <tcp_split_unsent_seg+0x28c>)
 8009582:	4809      	ldr	r0, [pc, #36]	; (80095a8 <tcp_split_unsent_seg+0x27c>)
 8009584:	f003 feac 	bl	800d2e0 <iprintf>
  if (p != NULL) {
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d002      	beq.n	8009594 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800958e:	6938      	ldr	r0, [r7, #16]
 8009590:	f7fb fbf2 	bl	8004d78 <pbuf_free>
  }

  return ERR_MEM;
 8009594:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009598:	4618      	mov	r0, r3
 800959a:	3724      	adds	r7, #36	; 0x24
 800959c:	46bd      	mov	sp, r7
 800959e:	bd90      	pop	{r4, r7, pc}
 80095a0:	0800fb18 	.word	0x0800fb18
 80095a4:	0800feac 	.word	0x0800feac
 80095a8:	0800fb6c 	.word	0x0800fb6c
 80095ac:	0800fed0 	.word	0x0800fed0
 80095b0:	0800fef4 	.word	0x0800fef4
 80095b4:	0800ff04 	.word	0x0800ff04
 80095b8:	0800ff14 	.word	0x0800ff14

080095bc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80095bc:	b590      	push	{r4, r7, lr}
 80095be:	b085      	sub	sp, #20
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d106      	bne.n	80095d8 <tcp_send_fin+0x1c>
 80095ca:	4b21      	ldr	r3, [pc, #132]	; (8009650 <tcp_send_fin+0x94>)
 80095cc:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80095d0:	4920      	ldr	r1, [pc, #128]	; (8009654 <tcp_send_fin+0x98>)
 80095d2:	4821      	ldr	r0, [pc, #132]	; (8009658 <tcp_send_fin+0x9c>)
 80095d4:	f003 fe84 	bl	800d2e0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d02e      	beq.n	800963e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095e4:	60fb      	str	r3, [r7, #12]
 80095e6:	e002      	b.n	80095ee <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d1f8      	bne.n	80095e8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	68db      	ldr	r3, [r3, #12]
 80095fa:	899b      	ldrh	r3, [r3, #12]
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	4618      	mov	r0, r3
 8009600:	f7fa f878 	bl	80036f4 <lwip_htons>
 8009604:	4603      	mov	r3, r0
 8009606:	b2db      	uxtb	r3, r3
 8009608:	f003 0307 	and.w	r3, r3, #7
 800960c:	2b00      	cmp	r3, #0
 800960e:	d116      	bne.n	800963e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	68db      	ldr	r3, [r3, #12]
 8009614:	899b      	ldrh	r3, [r3, #12]
 8009616:	b29c      	uxth	r4, r3
 8009618:	2001      	movs	r0, #1
 800961a:	f7fa f86b 	bl	80036f4 <lwip_htons>
 800961e:	4603      	mov	r3, r0
 8009620:	461a      	mov	r2, r3
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	68db      	ldr	r3, [r3, #12]
 8009626:	4322      	orrs	r2, r4
 8009628:	b292      	uxth	r2, r2
 800962a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	8b5b      	ldrh	r3, [r3, #26]
 8009630:	f043 0320 	orr.w	r3, r3, #32
 8009634:	b29a      	uxth	r2, r3
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800963a:	2300      	movs	r3, #0
 800963c:	e004      	b.n	8009648 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800963e:	2101      	movs	r1, #1
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 f80b 	bl	800965c <tcp_enqueue_flags>
 8009646:	4603      	mov	r3, r0
}
 8009648:	4618      	mov	r0, r3
 800964a:	3714      	adds	r7, #20
 800964c:	46bd      	mov	sp, r7
 800964e:	bd90      	pop	{r4, r7, pc}
 8009650:	0800fb18 	.word	0x0800fb18
 8009654:	0800ff20 	.word	0x0800ff20
 8009658:	0800fb6c 	.word	0x0800fb6c

0800965c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b08a      	sub	sp, #40	; 0x28
 8009660:	af02      	add	r7, sp, #8
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	460b      	mov	r3, r1
 8009666:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8009668:	2300      	movs	r3, #0
 800966a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800966c:	2300      	movs	r3, #0
 800966e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8009670:	78fb      	ldrb	r3, [r7, #3]
 8009672:	f003 0303 	and.w	r3, r3, #3
 8009676:	2b00      	cmp	r3, #0
 8009678:	d106      	bne.n	8009688 <tcp_enqueue_flags+0x2c>
 800967a:	4b67      	ldr	r3, [pc, #412]	; (8009818 <tcp_enqueue_flags+0x1bc>)
 800967c:	f240 4211 	movw	r2, #1041	; 0x411
 8009680:	4966      	ldr	r1, [pc, #408]	; (800981c <tcp_enqueue_flags+0x1c0>)
 8009682:	4867      	ldr	r0, [pc, #412]	; (8009820 <tcp_enqueue_flags+0x1c4>)
 8009684:	f003 fe2c 	bl	800d2e0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d106      	bne.n	800969c <tcp_enqueue_flags+0x40>
 800968e:	4b62      	ldr	r3, [pc, #392]	; (8009818 <tcp_enqueue_flags+0x1bc>)
 8009690:	f240 4213 	movw	r2, #1043	; 0x413
 8009694:	4963      	ldr	r1, [pc, #396]	; (8009824 <tcp_enqueue_flags+0x1c8>)
 8009696:	4862      	ldr	r0, [pc, #392]	; (8009820 <tcp_enqueue_flags+0x1c4>)
 8009698:	f003 fe22 	bl	800d2e0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800969c:	78fb      	ldrb	r3, [r7, #3]
 800969e:	f003 0302 	and.w	r3, r3, #2
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d001      	beq.n	80096aa <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80096a6:	2301      	movs	r3, #1
 80096a8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80096aa:	7ffb      	ldrb	r3, [r7, #31]
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	f003 0304 	and.w	r3, r3, #4
 80096b4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80096b6:	7dfb      	ldrb	r3, [r7, #23]
 80096b8:	b29b      	uxth	r3, r3
 80096ba:	f44f 7220 	mov.w	r2, #640	; 0x280
 80096be:	4619      	mov	r1, r3
 80096c0:	2036      	movs	r0, #54	; 0x36
 80096c2:	f7fb f875 	bl	80047b0 <pbuf_alloc>
 80096c6:	6138      	str	r0, [r7, #16]
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d109      	bne.n	80096e2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	8b5b      	ldrh	r3, [r3, #26]
 80096d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096d6:	b29a      	uxth	r2, r3
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80096dc:	f04f 33ff 	mov.w	r3, #4294967295
 80096e0:	e095      	b.n	800980e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	895a      	ldrh	r2, [r3, #10]
 80096e6:	7dfb      	ldrb	r3, [r7, #23]
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d206      	bcs.n	80096fc <tcp_enqueue_flags+0xa0>
 80096ee:	4b4a      	ldr	r3, [pc, #296]	; (8009818 <tcp_enqueue_flags+0x1bc>)
 80096f0:	f240 4239 	movw	r2, #1081	; 0x439
 80096f4:	494c      	ldr	r1, [pc, #304]	; (8009828 <tcp_enqueue_flags+0x1cc>)
 80096f6:	484a      	ldr	r0, [pc, #296]	; (8009820 <tcp_enqueue_flags+0x1c4>)
 80096f8:	f003 fdf2 	bl	800d2e0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8009700:	78fa      	ldrb	r2, [r7, #3]
 8009702:	7ffb      	ldrb	r3, [r7, #31]
 8009704:	9300      	str	r3, [sp, #0]
 8009706:	460b      	mov	r3, r1
 8009708:	6939      	ldr	r1, [r7, #16]
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f7ff fd70 	bl	80091f0 <tcp_create_segment>
 8009710:	60f8      	str	r0, [r7, #12]
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d109      	bne.n	800972c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	8b5b      	ldrh	r3, [r3, #26]
 800971c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009720:	b29a      	uxth	r2, r3
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009726:	f04f 33ff 	mov.w	r3, #4294967295
 800972a:	e070      	b.n	800980e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	68db      	ldr	r3, [r3, #12]
 8009730:	f003 0303 	and.w	r3, r3, #3
 8009734:	2b00      	cmp	r3, #0
 8009736:	d006      	beq.n	8009746 <tcp_enqueue_flags+0xea>
 8009738:	4b37      	ldr	r3, [pc, #220]	; (8009818 <tcp_enqueue_flags+0x1bc>)
 800973a:	f240 4242 	movw	r2, #1090	; 0x442
 800973e:	493b      	ldr	r1, [pc, #236]	; (800982c <tcp_enqueue_flags+0x1d0>)
 8009740:	4837      	ldr	r0, [pc, #220]	; (8009820 <tcp_enqueue_flags+0x1c4>)
 8009742:	f003 fdcd 	bl	800d2e0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	891b      	ldrh	r3, [r3, #8]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d006      	beq.n	800975c <tcp_enqueue_flags+0x100>
 800974e:	4b32      	ldr	r3, [pc, #200]	; (8009818 <tcp_enqueue_flags+0x1bc>)
 8009750:	f240 4243 	movw	r2, #1091	; 0x443
 8009754:	4936      	ldr	r1, [pc, #216]	; (8009830 <tcp_enqueue_flags+0x1d4>)
 8009756:	4832      	ldr	r0, [pc, #200]	; (8009820 <tcp_enqueue_flags+0x1c4>)
 8009758:	f003 fdc2 	bl	800d2e0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009760:	2b00      	cmp	r3, #0
 8009762:	d103      	bne.n	800976c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	68fa      	ldr	r2, [r7, #12]
 8009768:	66da      	str	r2, [r3, #108]	; 0x6c
 800976a:	e00d      	b.n	8009788 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009770:	61bb      	str	r3, [r7, #24]
 8009772:	e002      	b.n	800977a <tcp_enqueue_flags+0x11e>
 8009774:	69bb      	ldr	r3, [r7, #24]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	61bb      	str	r3, [r7, #24]
 800977a:	69bb      	ldr	r3, [r7, #24]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d1f8      	bne.n	8009774 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8009782:	69bb      	ldr	r3, [r7, #24]
 8009784:	68fa      	ldr	r2, [r7, #12]
 8009786:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2200      	movs	r2, #0
 800978c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8009790:	78fb      	ldrb	r3, [r7, #3]
 8009792:	f003 0302 	and.w	r3, r3, #2
 8009796:	2b00      	cmp	r3, #0
 8009798:	d104      	bne.n	80097a4 <tcp_enqueue_flags+0x148>
 800979a:	78fb      	ldrb	r3, [r7, #3]
 800979c:	f003 0301 	and.w	r3, r3, #1
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d004      	beq.n	80097ae <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097a8:	1c5a      	adds	r2, r3, #1
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80097ae:	78fb      	ldrb	r3, [r7, #3]
 80097b0:	f003 0301 	and.w	r3, r3, #1
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d006      	beq.n	80097c6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	8b5b      	ldrh	r3, [r3, #26]
 80097bc:	f043 0320 	orr.w	r3, r3, #32
 80097c0:	b29a      	uxth	r2, r3
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	4618      	mov	r0, r3
 80097cc:	f7fb fb5c 	bl	8004e88 <pbuf_clen>
 80097d0:	4603      	mov	r3, r0
 80097d2:	461a      	mov	r2, r3
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80097da:	4413      	add	r3, r2
 80097dc:	b29a      	uxth	r2, r3
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d00e      	beq.n	800980c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d10a      	bne.n	800980c <tcp_enqueue_flags+0x1b0>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d106      	bne.n	800980c <tcp_enqueue_flags+0x1b0>
 80097fe:	4b06      	ldr	r3, [pc, #24]	; (8009818 <tcp_enqueue_flags+0x1bc>)
 8009800:	f240 4265 	movw	r2, #1125	; 0x465
 8009804:	490b      	ldr	r1, [pc, #44]	; (8009834 <tcp_enqueue_flags+0x1d8>)
 8009806:	4806      	ldr	r0, [pc, #24]	; (8009820 <tcp_enqueue_flags+0x1c4>)
 8009808:	f003 fd6a 	bl	800d2e0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800980c:	2300      	movs	r3, #0
}
 800980e:	4618      	mov	r0, r3
 8009810:	3720      	adds	r7, #32
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}
 8009816:	bf00      	nop
 8009818:	0800fb18 	.word	0x0800fb18
 800981c:	0800ff3c 	.word	0x0800ff3c
 8009820:	0800fb6c 	.word	0x0800fb6c
 8009824:	0800ff94 	.word	0x0800ff94
 8009828:	0800ffb4 	.word	0x0800ffb4
 800982c:	0800fff0 	.word	0x0800fff0
 8009830:	08010008 	.word	0x08010008
 8009834:	08010034 	.word	0x08010034

08009838 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8009838:	b5b0      	push	{r4, r5, r7, lr}
 800983a:	b08a      	sub	sp, #40	; 0x28
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d106      	bne.n	8009854 <tcp_output+0x1c>
 8009846:	4b8a      	ldr	r3, [pc, #552]	; (8009a70 <tcp_output+0x238>)
 8009848:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800984c:	4989      	ldr	r1, [pc, #548]	; (8009a74 <tcp_output+0x23c>)
 800984e:	488a      	ldr	r0, [pc, #552]	; (8009a78 <tcp_output+0x240>)
 8009850:	f003 fd46 	bl	800d2e0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	7d1b      	ldrb	r3, [r3, #20]
 8009858:	2b01      	cmp	r3, #1
 800985a:	d106      	bne.n	800986a <tcp_output+0x32>
 800985c:	4b84      	ldr	r3, [pc, #528]	; (8009a70 <tcp_output+0x238>)
 800985e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8009862:	4986      	ldr	r1, [pc, #536]	; (8009a7c <tcp_output+0x244>)
 8009864:	4884      	ldr	r0, [pc, #528]	; (8009a78 <tcp_output+0x240>)
 8009866:	f003 fd3b 	bl	800d2e0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800986a:	4b85      	ldr	r3, [pc, #532]	; (8009a80 <tcp_output+0x248>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	687a      	ldr	r2, [r7, #4]
 8009870:	429a      	cmp	r2, r3
 8009872:	d101      	bne.n	8009878 <tcp_output+0x40>
    return ERR_OK;
 8009874:	2300      	movs	r3, #0
 8009876:	e1ce      	b.n	8009c16 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009884:	4293      	cmp	r3, r2
 8009886:	bf28      	it	cs
 8009888:	4613      	movcs	r3, r2
 800988a:	b29b      	uxth	r3, r3
 800988c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009892:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8009894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009896:	2b00      	cmp	r3, #0
 8009898:	d10b      	bne.n	80098b2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	8b5b      	ldrh	r3, [r3, #26]
 800989e:	f003 0302 	and.w	r3, r3, #2
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	f000 81aa 	beq.w	8009bfc <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f000 fdcb 	bl	800a444 <tcp_send_empty_ack>
 80098ae:	4603      	mov	r3, r0
 80098b0:	e1b1      	b.n	8009c16 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80098b2:	6879      	ldr	r1, [r7, #4]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	3304      	adds	r3, #4
 80098b8:	461a      	mov	r2, r3
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f7ff fc7c 	bl	80091b8 <tcp_route>
 80098c0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d102      	bne.n	80098ce <tcp_output+0x96>
    return ERR_RTE;
 80098c8:	f06f 0303 	mvn.w	r3, #3
 80098cc:	e1a3      	b.n	8009c16 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d003      	beq.n	80098dc <tcp_output+0xa4>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d111      	bne.n	8009900 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d002      	beq.n	80098e8 <tcp_output+0xb0>
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	3304      	adds	r3, #4
 80098e6:	e000      	b.n	80098ea <tcp_output+0xb2>
 80098e8:	2300      	movs	r3, #0
 80098ea:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d102      	bne.n	80098f8 <tcp_output+0xc0>
      return ERR_RTE;
 80098f2:	f06f 0303 	mvn.w	r3, #3
 80098f6:	e18e      	b.n	8009c16 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	681a      	ldr	r2, [r3, #0]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8009900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009902:	68db      	ldr	r3, [r3, #12]
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	4618      	mov	r0, r3
 8009908:	f7f9 ff09 	bl	800371e <lwip_htonl>
 800990c:	4602      	mov	r2, r0
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009912:	1ad3      	subs	r3, r2, r3
 8009914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009916:	8912      	ldrh	r2, [r2, #8]
 8009918:	4413      	add	r3, r2
 800991a:	69ba      	ldr	r2, [r7, #24]
 800991c:	429a      	cmp	r2, r3
 800991e:	d227      	bcs.n	8009970 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009926:	461a      	mov	r2, r3
 8009928:	69bb      	ldr	r3, [r7, #24]
 800992a:	4293      	cmp	r3, r2
 800992c:	d114      	bne.n	8009958 <tcp_output+0x120>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009932:	2b00      	cmp	r3, #0
 8009934:	d110      	bne.n	8009958 <tcp_output+0x120>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800993c:	2b00      	cmp	r3, #0
 800993e:	d10b      	bne.n	8009958 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2200      	movs	r2, #0
 8009944:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2201      	movs	r2, #1
 800994c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2200      	movs	r2, #0
 8009954:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	8b5b      	ldrh	r3, [r3, #26]
 800995c:	f003 0302 	and.w	r3, r3, #2
 8009960:	2b00      	cmp	r3, #0
 8009962:	f000 814d 	beq.w	8009c00 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f000 fd6c 	bl	800a444 <tcp_send_empty_ack>
 800996c:	4603      	mov	r3, r0
 800996e:	e152      	b.n	8009c16 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800997c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800997e:	6a3b      	ldr	r3, [r7, #32]
 8009980:	2b00      	cmp	r3, #0
 8009982:	f000 811c 	beq.w	8009bbe <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8009986:	e002      	b.n	800998e <tcp_output+0x156>
 8009988:	6a3b      	ldr	r3, [r7, #32]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	623b      	str	r3, [r7, #32]
 800998e:	6a3b      	ldr	r3, [r7, #32]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d1f8      	bne.n	8009988 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8009996:	e112      	b.n	8009bbe <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8009998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999a:	68db      	ldr	r3, [r3, #12]
 800999c:	899b      	ldrh	r3, [r3, #12]
 800999e:	b29b      	uxth	r3, r3
 80099a0:	4618      	mov	r0, r3
 80099a2:	f7f9 fea7 	bl	80036f4 <lwip_htons>
 80099a6:	4603      	mov	r3, r0
 80099a8:	b2db      	uxtb	r3, r3
 80099aa:	f003 0304 	and.w	r3, r3, #4
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d006      	beq.n	80099c0 <tcp_output+0x188>
 80099b2:	4b2f      	ldr	r3, [pc, #188]	; (8009a70 <tcp_output+0x238>)
 80099b4:	f240 5236 	movw	r2, #1334	; 0x536
 80099b8:	4932      	ldr	r1, [pc, #200]	; (8009a84 <tcp_output+0x24c>)
 80099ba:	482f      	ldr	r0, [pc, #188]	; (8009a78 <tcp_output+0x240>)
 80099bc:	f003 fc90 	bl	800d2e0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d01f      	beq.n	8009a08 <tcp_output+0x1d0>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	8b5b      	ldrh	r3, [r3, #26]
 80099cc:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d119      	bne.n	8009a08 <tcp_output+0x1d0>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d00b      	beq.n	80099f4 <tcp_output+0x1bc>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d110      	bne.n	8009a08 <tcp_output+0x1d0>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099ea:	891a      	ldrh	r2, [r3, #8]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099f0:	429a      	cmp	r2, r3
 80099f2:	d209      	bcs.n	8009a08 <tcp_output+0x1d0>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d004      	beq.n	8009a08 <tcp_output+0x1d0>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009a04:	2b08      	cmp	r3, #8
 8009a06:	d901      	bls.n	8009a0c <tcp_output+0x1d4>
 8009a08:	2301      	movs	r3, #1
 8009a0a:	e000      	b.n	8009a0e <tcp_output+0x1d6>
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d106      	bne.n	8009a20 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	8b5b      	ldrh	r3, [r3, #26]
 8009a16:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	f000 80e4 	beq.w	8009be8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	7d1b      	ldrb	r3, [r3, #20]
 8009a24:	2b02      	cmp	r3, #2
 8009a26:	d00d      	beq.n	8009a44 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8009a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a2a:	68db      	ldr	r3, [r3, #12]
 8009a2c:	899b      	ldrh	r3, [r3, #12]
 8009a2e:	b29c      	uxth	r4, r3
 8009a30:	2010      	movs	r0, #16
 8009a32:	f7f9 fe5f 	bl	80036f4 <lwip_htons>
 8009a36:	4603      	mov	r3, r0
 8009a38:	461a      	mov	r2, r3
 8009a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3c:	68db      	ldr	r3, [r3, #12]
 8009a3e:	4322      	orrs	r2, r4
 8009a40:	b292      	uxth	r2, r2
 8009a42:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8009a44:	697a      	ldr	r2, [r7, #20]
 8009a46:	6879      	ldr	r1, [r7, #4]
 8009a48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a4a:	f000 f909 	bl	8009c60 <tcp_output_segment>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8009a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d016      	beq.n	8009a88 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	8b5b      	ldrh	r3, [r3, #26]
 8009a5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a62:	b29a      	uxth	r2, r3
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	835a      	strh	r2, [r3, #26]
      return err;
 8009a68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a6c:	e0d3      	b.n	8009c16 <tcp_output+0x3de>
 8009a6e:	bf00      	nop
 8009a70:	0800fb18 	.word	0x0800fb18
 8009a74:	0801005c 	.word	0x0801005c
 8009a78:	0800fb6c 	.word	0x0800fb6c
 8009a7c:	08010074 	.word	0x08010074
 8009a80:	20008310 	.word	0x20008310
 8009a84:	0801009c 	.word	0x0801009c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8009a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	7d1b      	ldrb	r3, [r3, #20]
 8009a94:	2b02      	cmp	r3, #2
 8009a96:	d006      	beq.n	8009aa6 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	8b5b      	ldrh	r3, [r3, #26]
 8009a9c:	f023 0303 	bic.w	r3, r3, #3
 8009aa0:	b29a      	uxth	r2, r3
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa8:	68db      	ldr	r3, [r3, #12]
 8009aaa:	685b      	ldr	r3, [r3, #4]
 8009aac:	4618      	mov	r0, r3
 8009aae:	f7f9 fe36 	bl	800371e <lwip_htonl>
 8009ab2:	4604      	mov	r4, r0
 8009ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab6:	891b      	ldrh	r3, [r3, #8]
 8009ab8:	461d      	mov	r5, r3
 8009aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009abc:	68db      	ldr	r3, [r3, #12]
 8009abe:	899b      	ldrh	r3, [r3, #12]
 8009ac0:	b29b      	uxth	r3, r3
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7f9 fe16 	bl	80036f4 <lwip_htons>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	b2db      	uxtb	r3, r3
 8009acc:	f003 0303 	and.w	r3, r3, #3
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d001      	beq.n	8009ad8 <tcp_output+0x2a0>
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	e000      	b.n	8009ada <tcp_output+0x2a2>
 8009ad8:	2300      	movs	r3, #0
 8009ada:	442b      	add	r3, r5
 8009adc:	4423      	add	r3, r4
 8009ade:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	1ad3      	subs	r3, r2, r3
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	da02      	bge.n	8009af2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	68ba      	ldr	r2, [r7, #8]
 8009af0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8009af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af4:	891b      	ldrh	r3, [r3, #8]
 8009af6:	461c      	mov	r4, r3
 8009af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009afa:	68db      	ldr	r3, [r3, #12]
 8009afc:	899b      	ldrh	r3, [r3, #12]
 8009afe:	b29b      	uxth	r3, r3
 8009b00:	4618      	mov	r0, r3
 8009b02:	f7f9 fdf7 	bl	80036f4 <lwip_htons>
 8009b06:	4603      	mov	r3, r0
 8009b08:	b2db      	uxtb	r3, r3
 8009b0a:	f003 0303 	and.w	r3, r3, #3
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d001      	beq.n	8009b16 <tcp_output+0x2de>
 8009b12:	2301      	movs	r3, #1
 8009b14:	e000      	b.n	8009b18 <tcp_output+0x2e0>
 8009b16:	2300      	movs	r3, #0
 8009b18:	4423      	add	r3, r4
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d049      	beq.n	8009bb2 <tcp_output+0x37a>
      seg->next = NULL;
 8009b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b20:	2200      	movs	r2, #0
 8009b22:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d105      	bne.n	8009b38 <tcp_output+0x300>
        pcb->unacked = seg;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b30:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8009b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b34:	623b      	str	r3, [r7, #32]
 8009b36:	e03f      	b.n	8009bb8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8009b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f7f9 fded 	bl	800371e <lwip_htonl>
 8009b44:	4604      	mov	r4, r0
 8009b46:	6a3b      	ldr	r3, [r7, #32]
 8009b48:	68db      	ldr	r3, [r3, #12]
 8009b4a:	685b      	ldr	r3, [r3, #4]
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f7f9 fde6 	bl	800371e <lwip_htonl>
 8009b52:	4603      	mov	r3, r0
 8009b54:	1ae3      	subs	r3, r4, r3
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	da24      	bge.n	8009ba4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	3370      	adds	r3, #112	; 0x70
 8009b5e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8009b60:	e002      	b.n	8009b68 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8009b62:	69fb      	ldr	r3, [r7, #28]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8009b68:	69fb      	ldr	r3, [r7, #28]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d011      	beq.n	8009b94 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8009b70:	69fb      	ldr	r3, [r7, #28]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	68db      	ldr	r3, [r3, #12]
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f7f9 fdd0 	bl	800371e <lwip_htonl>
 8009b7e:	4604      	mov	r4, r0
 8009b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b82:	68db      	ldr	r3, [r3, #12]
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	4618      	mov	r0, r3
 8009b88:	f7f9 fdc9 	bl	800371e <lwip_htonl>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	dbe6      	blt.n	8009b62 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8009b94:	69fb      	ldr	r3, [r7, #28]
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8009b9c:	69fb      	ldr	r3, [r7, #28]
 8009b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ba0:	601a      	str	r2, [r3, #0]
 8009ba2:	e009      	b.n	8009bb8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8009ba4:	6a3b      	ldr	r3, [r7, #32]
 8009ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ba8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8009baa:	6a3b      	ldr	r3, [r7, #32]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	623b      	str	r3, [r7, #32]
 8009bb0:	e002      	b.n	8009bb8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8009bb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009bb4:	f7fc fc3f 	bl	8006436 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bbc:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8009bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d012      	beq.n	8009bea <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8009bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc6:	68db      	ldr	r3, [r3, #12]
 8009bc8:	685b      	ldr	r3, [r3, #4]
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f7f9 fda7 	bl	800371e <lwip_htonl>
 8009bd0:	4602      	mov	r2, r0
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bd6:	1ad3      	subs	r3, r2, r3
 8009bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bda:	8912      	ldrh	r2, [r2, #8]
 8009bdc:	4413      	add	r3, r2
  while (seg != NULL &&
 8009bde:	69ba      	ldr	r2, [r7, #24]
 8009be0:	429a      	cmp	r2, r3
 8009be2:	f4bf aed9 	bcs.w	8009998 <tcp_output+0x160>
 8009be6:	e000      	b.n	8009bea <tcp_output+0x3b2>
      break;
 8009be8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d108      	bne.n	8009c04 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8009bfa:	e004      	b.n	8009c06 <tcp_output+0x3ce>
    goto output_done;
 8009bfc:	bf00      	nop
 8009bfe:	e002      	b.n	8009c06 <tcp_output+0x3ce>
    goto output_done;
 8009c00:	bf00      	nop
 8009c02:	e000      	b.n	8009c06 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8009c04:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	8b5b      	ldrh	r3, [r3, #26]
 8009c0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c0e:	b29a      	uxth	r2, r3
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8009c14:	2300      	movs	r3, #0
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3728      	adds	r7, #40	; 0x28
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bdb0      	pop	{r4, r5, r7, pc}
 8009c1e:	bf00      	nop

08009c20 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b082      	sub	sp, #8
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d106      	bne.n	8009c3c <tcp_output_segment_busy+0x1c>
 8009c2e:	4b09      	ldr	r3, [pc, #36]	; (8009c54 <tcp_output_segment_busy+0x34>)
 8009c30:	f240 529a 	movw	r2, #1434	; 0x59a
 8009c34:	4908      	ldr	r1, [pc, #32]	; (8009c58 <tcp_output_segment_busy+0x38>)
 8009c36:	4809      	ldr	r0, [pc, #36]	; (8009c5c <tcp_output_segment_busy+0x3c>)
 8009c38:	f003 fb52 	bl	800d2e0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	7b9b      	ldrb	r3, [r3, #14]
 8009c42:	2b01      	cmp	r3, #1
 8009c44:	d001      	beq.n	8009c4a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8009c46:	2301      	movs	r3, #1
 8009c48:	e000      	b.n	8009c4c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8009c4a:	2300      	movs	r3, #0
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3708      	adds	r7, #8
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}
 8009c54:	0800fb18 	.word	0x0800fb18
 8009c58:	080100b4 	.word	0x080100b4
 8009c5c:	0800fb6c 	.word	0x0800fb6c

08009c60 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8009c60:	b5b0      	push	{r4, r5, r7, lr}
 8009c62:	b08c      	sub	sp, #48	; 0x30
 8009c64:	af04      	add	r7, sp, #16
 8009c66:	60f8      	str	r0, [r7, #12]
 8009c68:	60b9      	str	r1, [r7, #8]
 8009c6a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d106      	bne.n	8009c80 <tcp_output_segment+0x20>
 8009c72:	4b63      	ldr	r3, [pc, #396]	; (8009e00 <tcp_output_segment+0x1a0>)
 8009c74:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8009c78:	4962      	ldr	r1, [pc, #392]	; (8009e04 <tcp_output_segment+0x1a4>)
 8009c7a:	4863      	ldr	r0, [pc, #396]	; (8009e08 <tcp_output_segment+0x1a8>)
 8009c7c:	f003 fb30 	bl	800d2e0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d106      	bne.n	8009c94 <tcp_output_segment+0x34>
 8009c86:	4b5e      	ldr	r3, [pc, #376]	; (8009e00 <tcp_output_segment+0x1a0>)
 8009c88:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8009c8c:	495f      	ldr	r1, [pc, #380]	; (8009e0c <tcp_output_segment+0x1ac>)
 8009c8e:	485e      	ldr	r0, [pc, #376]	; (8009e08 <tcp_output_segment+0x1a8>)
 8009c90:	f003 fb26 	bl	800d2e0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d106      	bne.n	8009ca8 <tcp_output_segment+0x48>
 8009c9a:	4b59      	ldr	r3, [pc, #356]	; (8009e00 <tcp_output_segment+0x1a0>)
 8009c9c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8009ca0:	495b      	ldr	r1, [pc, #364]	; (8009e10 <tcp_output_segment+0x1b0>)
 8009ca2:	4859      	ldr	r0, [pc, #356]	; (8009e08 <tcp_output_segment+0x1a8>)
 8009ca4:	f003 fb1c 	bl	800d2e0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8009ca8:	68f8      	ldr	r0, [r7, #12]
 8009caa:	f7ff ffb9 	bl	8009c20 <tcp_output_segment_busy>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d001      	beq.n	8009cb8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	e09f      	b.n	8009df8 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	68dc      	ldr	r4, [r3, #12]
 8009cc0:	4610      	mov	r0, r2
 8009cc2:	f7f9 fd2c 	bl	800371e <lwip_htonl>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	68dc      	ldr	r4, [r3, #12]
 8009cd2:	4610      	mov	r0, r2
 8009cd4:	f7f9 fd0e 	bl	80036f4 <lwip_htons>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce0:	68ba      	ldr	r2, [r7, #8]
 8009ce2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8009ce4:	441a      	add	r2, r3
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	68db      	ldr	r3, [r3, #12]
 8009cee:	3314      	adds	r3, #20
 8009cf0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	7a9b      	ldrb	r3, [r3, #10]
 8009cf6:	f003 0301 	and.w	r3, r3, #1
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d015      	beq.n	8009d2a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	3304      	adds	r3, #4
 8009d02:	461a      	mov	r2, r3
 8009d04:	6879      	ldr	r1, [r7, #4]
 8009d06:	f44f 7006 	mov.w	r0, #536	; 0x218
 8009d0a:	f7fc fe8b 	bl	8006a24 <tcp_eff_send_mss_netif>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8009d12:	8b7b      	ldrh	r3, [r7, #26]
 8009d14:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f7f9 fd00 	bl	800371e <lwip_htonl>
 8009d1e:	4602      	mov	r2, r0
 8009d20:	69fb      	ldr	r3, [r7, #28]
 8009d22:	601a      	str	r2, [r3, #0]
    opts += 1;
 8009d24:	69fb      	ldr	r3, [r7, #28]
 8009d26:	3304      	adds	r3, #4
 8009d28:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	da02      	bge.n	8009d3a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	2200      	movs	r2, #0
 8009d38:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d10c      	bne.n	8009d5c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8009d42:	4b34      	ldr	r3, [pc, #208]	; (8009e14 <tcp_output_segment+0x1b4>)
 8009d44:	681a      	ldr	r2, [r3, #0]
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	68db      	ldr	r3, [r3, #12]
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	4618      	mov	r0, r3
 8009d52:	f7f9 fce4 	bl	800371e <lwip_htonl>
 8009d56:	4602      	mov	r2, r0
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	68da      	ldr	r2, [r3, #12]
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	1ad3      	subs	r3, r2, r3
 8009d68:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	8959      	ldrh	r1, [r3, #10]
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	8b3a      	ldrh	r2, [r7, #24]
 8009d76:	1a8a      	subs	r2, r1, r2
 8009d78:	b292      	uxth	r2, r2
 8009d7a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	8919      	ldrh	r1, [r3, #8]
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	8b3a      	ldrh	r2, [r7, #24]
 8009d88:	1a8a      	subs	r2, r1, r2
 8009d8a:	b292      	uxth	r2, r2
 8009d8c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	685b      	ldr	r3, [r3, #4]
 8009d92:	68fa      	ldr	r2, [r7, #12]
 8009d94:	68d2      	ldr	r2, [r2, #12]
 8009d96:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	68db      	ldr	r3, [r3, #12]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	741a      	strb	r2, [r3, #16]
 8009da0:	2200      	movs	r2, #0
 8009da2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	68db      	ldr	r3, [r3, #12]
 8009da8:	f103 0214 	add.w	r2, r3, #20
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	7a9b      	ldrb	r3, [r3, #10]
 8009db0:	009b      	lsls	r3, r3, #2
 8009db2:	f003 0304 	and.w	r3, r3, #4
 8009db6:	4413      	add	r3, r2
 8009db8:	69fa      	ldr	r2, [r7, #28]
 8009dba:	429a      	cmp	r2, r3
 8009dbc:	d006      	beq.n	8009dcc <tcp_output_segment+0x16c>
 8009dbe:	4b10      	ldr	r3, [pc, #64]	; (8009e00 <tcp_output_segment+0x1a0>)
 8009dc0:	f240 621c 	movw	r2, #1564	; 0x61c
 8009dc4:	4914      	ldr	r1, [pc, #80]	; (8009e18 <tcp_output_segment+0x1b8>)
 8009dc6:	4810      	ldr	r0, [pc, #64]	; (8009e08 <tcp_output_segment+0x1a8>)
 8009dc8:	f003 fa8a 	bl	800d2e0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	6858      	ldr	r0, [r3, #4]
 8009dd0:	68b9      	ldr	r1, [r7, #8]
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	1d1c      	adds	r4, r3, #4
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	7add      	ldrb	r5, [r3, #11]
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	7a9b      	ldrb	r3, [r3, #10]
 8009dde:	687a      	ldr	r2, [r7, #4]
 8009de0:	9202      	str	r2, [sp, #8]
 8009de2:	2206      	movs	r2, #6
 8009de4:	9201      	str	r2, [sp, #4]
 8009de6:	9300      	str	r3, [sp, #0]
 8009de8:	462b      	mov	r3, r5
 8009dea:	4622      	mov	r2, r4
 8009dec:	f002 fa00 	bl	800c1f0 <ip4_output_if>
 8009df0:	4603      	mov	r3, r0
 8009df2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8009df4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3720      	adds	r7, #32
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bdb0      	pop	{r4, r5, r7, pc}
 8009e00:	0800fb18 	.word	0x0800fb18
 8009e04:	080100dc 	.word	0x080100dc
 8009e08:	0800fb6c 	.word	0x0800fb6c
 8009e0c:	080100fc 	.word	0x080100fc
 8009e10:	0801011c 	.word	0x0801011c
 8009e14:	200082c4 	.word	0x200082c4
 8009e18:	08010140 	.word	0x08010140

08009e1c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8009e1c:	b5b0      	push	{r4, r5, r7, lr}
 8009e1e:	b084      	sub	sp, #16
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d106      	bne.n	8009e38 <tcp_rexmit_rto_prepare+0x1c>
 8009e2a:	4b31      	ldr	r3, [pc, #196]	; (8009ef0 <tcp_rexmit_rto_prepare+0xd4>)
 8009e2c:	f240 6263 	movw	r2, #1635	; 0x663
 8009e30:	4930      	ldr	r1, [pc, #192]	; (8009ef4 <tcp_rexmit_rto_prepare+0xd8>)
 8009e32:	4831      	ldr	r0, [pc, #196]	; (8009ef8 <tcp_rexmit_rto_prepare+0xdc>)
 8009e34:	f003 fa54 	bl	800d2e0 <iprintf>

  if (pcb->unacked == NULL) {
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d102      	bne.n	8009e46 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8009e40:	f06f 0305 	mvn.w	r3, #5
 8009e44:	e050      	b.n	8009ee8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e4a:	60fb      	str	r3, [r7, #12]
 8009e4c:	e00b      	b.n	8009e66 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8009e4e:	68f8      	ldr	r0, [r7, #12]
 8009e50:	f7ff fee6 	bl	8009c20 <tcp_output_segment_busy>
 8009e54:	4603      	mov	r3, r0
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d002      	beq.n	8009e60 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8009e5a:	f06f 0305 	mvn.w	r3, #5
 8009e5e:	e043      	b.n	8009ee8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	60fb      	str	r3, [r7, #12]
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d1ef      	bne.n	8009e4e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8009e6e:	68f8      	ldr	r0, [r7, #12]
 8009e70:	f7ff fed6 	bl	8009c20 <tcp_output_segment_busy>
 8009e74:	4603      	mov	r3, r0
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d002      	beq.n	8009e80 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8009e7a:	f06f 0305 	mvn.w	r3, #5
 8009e7e:	e033      	b.n	8009ee8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2200      	movs	r2, #0
 8009e94:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	8b5b      	ldrh	r3, [r3, #26]
 8009e9a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009e9e:	b29a      	uxth	r2, r3
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	68db      	ldr	r3, [r3, #12]
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f7f9 fc37 	bl	800371e <lwip_htonl>
 8009eb0:	4604      	mov	r4, r0
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	891b      	ldrh	r3, [r3, #8]
 8009eb6:	461d      	mov	r5, r3
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	68db      	ldr	r3, [r3, #12]
 8009ebc:	899b      	ldrh	r3, [r3, #12]
 8009ebe:	b29b      	uxth	r3, r3
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f7f9 fc17 	bl	80036f4 <lwip_htons>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	b2db      	uxtb	r3, r3
 8009eca:	f003 0303 	and.w	r3, r3, #3
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d001      	beq.n	8009ed6 <tcp_rexmit_rto_prepare+0xba>
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	e000      	b.n	8009ed8 <tcp_rexmit_rto_prepare+0xbc>
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	442b      	add	r3, r5
 8009eda:	18e2      	adds	r2, r4, r3
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8009ee6:	2300      	movs	r3, #0
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3710      	adds	r7, #16
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bdb0      	pop	{r4, r5, r7, pc}
 8009ef0:	0800fb18 	.word	0x0800fb18
 8009ef4:	08010154 	.word	0x08010154
 8009ef8:	0800fb6c 	.word	0x0800fb6c

08009efc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b082      	sub	sp, #8
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d106      	bne.n	8009f18 <tcp_rexmit_rto_commit+0x1c>
 8009f0a:	4b0d      	ldr	r3, [pc, #52]	; (8009f40 <tcp_rexmit_rto_commit+0x44>)
 8009f0c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8009f10:	490c      	ldr	r1, [pc, #48]	; (8009f44 <tcp_rexmit_rto_commit+0x48>)
 8009f12:	480d      	ldr	r0, [pc, #52]	; (8009f48 <tcp_rexmit_rto_commit+0x4c>)
 8009f14:	f003 f9e4 	bl	800d2e0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009f1e:	2bff      	cmp	r3, #255	; 0xff
 8009f20:	d007      	beq.n	8009f32 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009f28:	3301      	adds	r3, #1
 8009f2a:	b2da      	uxtb	r2, r3
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f7ff fc80 	bl	8009838 <tcp_output>
}
 8009f38:	bf00      	nop
 8009f3a:	3708      	adds	r7, #8
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}
 8009f40:	0800fb18 	.word	0x0800fb18
 8009f44:	08010178 	.word	0x08010178
 8009f48:	0800fb6c 	.word	0x0800fb6c

08009f4c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b082      	sub	sp, #8
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d106      	bne.n	8009f68 <tcp_rexmit_rto+0x1c>
 8009f5a:	4b0a      	ldr	r3, [pc, #40]	; (8009f84 <tcp_rexmit_rto+0x38>)
 8009f5c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8009f60:	4909      	ldr	r1, [pc, #36]	; (8009f88 <tcp_rexmit_rto+0x3c>)
 8009f62:	480a      	ldr	r0, [pc, #40]	; (8009f8c <tcp_rexmit_rto+0x40>)
 8009f64:	f003 f9bc 	bl	800d2e0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f7ff ff57 	bl	8009e1c <tcp_rexmit_rto_prepare>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d102      	bne.n	8009f7a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f7ff ffc1 	bl	8009efc <tcp_rexmit_rto_commit>
  }
}
 8009f7a:	bf00      	nop
 8009f7c:	3708      	adds	r7, #8
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
 8009f82:	bf00      	nop
 8009f84:	0800fb18 	.word	0x0800fb18
 8009f88:	0801019c 	.word	0x0801019c
 8009f8c:	0800fb6c 	.word	0x0800fb6c

08009f90 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8009f90:	b590      	push	{r4, r7, lr}
 8009f92:	b085      	sub	sp, #20
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d106      	bne.n	8009fac <tcp_rexmit+0x1c>
 8009f9e:	4b2f      	ldr	r3, [pc, #188]	; (800a05c <tcp_rexmit+0xcc>)
 8009fa0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8009fa4:	492e      	ldr	r1, [pc, #184]	; (800a060 <tcp_rexmit+0xd0>)
 8009fa6:	482f      	ldr	r0, [pc, #188]	; (800a064 <tcp_rexmit+0xd4>)
 8009fa8:	f003 f99a 	bl	800d2e0 <iprintf>

  if (pcb->unacked == NULL) {
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d102      	bne.n	8009fba <tcp_rexmit+0x2a>
    return ERR_VAL;
 8009fb4:	f06f 0305 	mvn.w	r3, #5
 8009fb8:	e04c      	b.n	800a054 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fbe:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8009fc0:	68b8      	ldr	r0, [r7, #8]
 8009fc2:	f7ff fe2d 	bl	8009c20 <tcp_output_segment_busy>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d002      	beq.n	8009fd2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8009fcc:	f06f 0305 	mvn.w	r3, #5
 8009fd0:	e040      	b.n	800a054 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	681a      	ldr	r2, [r3, #0]
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	336c      	adds	r3, #108	; 0x6c
 8009fde:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8009fe0:	e002      	b.n	8009fe8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d011      	beq.n	800a014 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	68db      	ldr	r3, [r3, #12]
 8009ff6:	685b      	ldr	r3, [r3, #4]
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f7f9 fb90 	bl	800371e <lwip_htonl>
 8009ffe:	4604      	mov	r4, r0
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	68db      	ldr	r3, [r3, #12]
 800a004:	685b      	ldr	r3, [r3, #4]
 800a006:	4618      	mov	r0, r3
 800a008:	f7f9 fb89 	bl	800371e <lwip_htonl>
 800a00c:	4603      	mov	r3, r0
 800a00e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800a010:	2b00      	cmp	r3, #0
 800a012:	dbe6      	blt.n	8009fe2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681a      	ldr	r2, [r3, #0]
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	68ba      	ldr	r2, [r7, #8]
 800a020:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d103      	bne.n	800a032 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2200      	movs	r2, #0
 800a02e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a038:	2bff      	cmp	r3, #255	; 0xff
 800a03a:	d007      	beq.n	800a04c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a042:	3301      	adds	r3, #1
 800a044:	b2da      	uxtb	r2, r3
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2200      	movs	r2, #0
 800a050:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800a052:	2300      	movs	r3, #0
}
 800a054:	4618      	mov	r0, r3
 800a056:	3714      	adds	r7, #20
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd90      	pop	{r4, r7, pc}
 800a05c:	0800fb18 	.word	0x0800fb18
 800a060:	080101b8 	.word	0x080101b8
 800a064:	0800fb6c 	.word	0x0800fb6c

0800a068 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b082      	sub	sp, #8
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d106      	bne.n	800a084 <tcp_rexmit_fast+0x1c>
 800a076:	4b2a      	ldr	r3, [pc, #168]	; (800a120 <tcp_rexmit_fast+0xb8>)
 800a078:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800a07c:	4929      	ldr	r1, [pc, #164]	; (800a124 <tcp_rexmit_fast+0xbc>)
 800a07e:	482a      	ldr	r0, [pc, #168]	; (800a128 <tcp_rexmit_fast+0xc0>)
 800a080:	f003 f92e 	bl	800d2e0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d044      	beq.n	800a116 <tcp_rexmit_fast+0xae>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	8b5b      	ldrh	r3, [r3, #26]
 800a090:	f003 0304 	and.w	r3, r3, #4
 800a094:	2b00      	cmp	r3, #0
 800a096:	d13e      	bne.n	800a116 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f7ff ff79 	bl	8009f90 <tcp_rexmit>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d138      	bne.n	800a116 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	bf28      	it	cs
 800a0b4:	4613      	movcs	r3, r2
 800a0b6:	b29b      	uxth	r3, r3
 800a0b8:	0fda      	lsrs	r2, r3, #31
 800a0ba:	4413      	add	r3, r2
 800a0bc:	105b      	asrs	r3, r3, #1
 800a0be:	b29a      	uxth	r2, r3
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a0cc:	461a      	mov	r2, r3
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a0d2:	005b      	lsls	r3, r3, #1
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d206      	bcs.n	800a0e6 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a0dc:	005b      	lsls	r3, r3, #1
 800a0de:	b29a      	uxth	r2, r3
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	0049      	lsls	r1, r1, #1
 800a0f4:	440b      	add	r3, r1
 800a0f6:	b29b      	uxth	r3, r3
 800a0f8:	4413      	add	r3, r2
 800a0fa:	b29a      	uxth	r2, r3
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	8b5b      	ldrh	r3, [r3, #26]
 800a106:	f043 0304 	orr.w	r3, r3, #4
 800a10a:	b29a      	uxth	r2, r3
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2200      	movs	r2, #0
 800a114:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800a116:	bf00      	nop
 800a118:	3708      	adds	r7, #8
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	bf00      	nop
 800a120:	0800fb18 	.word	0x0800fb18
 800a124:	080101d0 	.word	0x080101d0
 800a128:	0800fb6c 	.word	0x0800fb6c

0800a12c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b086      	sub	sp, #24
 800a130:	af00      	add	r7, sp, #0
 800a132:	60f8      	str	r0, [r7, #12]
 800a134:	607b      	str	r3, [r7, #4]
 800a136:	460b      	mov	r3, r1
 800a138:	817b      	strh	r3, [r7, #10]
 800a13a:	4613      	mov	r3, r2
 800a13c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800a13e:	897a      	ldrh	r2, [r7, #10]
 800a140:	893b      	ldrh	r3, [r7, #8]
 800a142:	4413      	add	r3, r2
 800a144:	b29b      	uxth	r3, r3
 800a146:	3314      	adds	r3, #20
 800a148:	b29b      	uxth	r3, r3
 800a14a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a14e:	4619      	mov	r1, r3
 800a150:	2022      	movs	r0, #34	; 0x22
 800a152:	f7fa fb2d 	bl	80047b0 <pbuf_alloc>
 800a156:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d04d      	beq.n	800a1fa <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800a15e:	897b      	ldrh	r3, [r7, #10]
 800a160:	3313      	adds	r3, #19
 800a162:	697a      	ldr	r2, [r7, #20]
 800a164:	8952      	ldrh	r2, [r2, #10]
 800a166:	4293      	cmp	r3, r2
 800a168:	db06      	blt.n	800a178 <tcp_output_alloc_header_common+0x4c>
 800a16a:	4b26      	ldr	r3, [pc, #152]	; (800a204 <tcp_output_alloc_header_common+0xd8>)
 800a16c:	f240 7223 	movw	r2, #1827	; 0x723
 800a170:	4925      	ldr	r1, [pc, #148]	; (800a208 <tcp_output_alloc_header_common+0xdc>)
 800a172:	4826      	ldr	r0, [pc, #152]	; (800a20c <tcp_output_alloc_header_common+0xe0>)
 800a174:	f003 f8b4 	bl	800d2e0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	685b      	ldr	r3, [r3, #4]
 800a17c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800a17e:	8c3b      	ldrh	r3, [r7, #32]
 800a180:	4618      	mov	r0, r3
 800a182:	f7f9 fab7 	bl	80036f4 <lwip_htons>
 800a186:	4603      	mov	r3, r0
 800a188:	461a      	mov	r2, r3
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800a18e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a190:	4618      	mov	r0, r3
 800a192:	f7f9 faaf 	bl	80036f4 <lwip_htons>
 800a196:	4603      	mov	r3, r0
 800a198:	461a      	mov	r2, r3
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800a19e:	693b      	ldr	r3, [r7, #16]
 800a1a0:	687a      	ldr	r2, [r7, #4]
 800a1a2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800a1a4:	68f8      	ldr	r0, [r7, #12]
 800a1a6:	f7f9 faba 	bl	800371e <lwip_htonl>
 800a1aa:	4602      	mov	r2, r0
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800a1b0:	897b      	ldrh	r3, [r7, #10]
 800a1b2:	089b      	lsrs	r3, r3, #2
 800a1b4:	b29b      	uxth	r3, r3
 800a1b6:	3305      	adds	r3, #5
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	031b      	lsls	r3, r3, #12
 800a1bc:	b29a      	uxth	r2, r3
 800a1be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a1c2:	b29b      	uxth	r3, r3
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	b29b      	uxth	r3, r3
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f7f9 fa93 	bl	80036f4 <lwip_htons>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800a1d6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f7f9 fa8b 	bl	80036f4 <lwip_htons>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	741a      	strb	r2, [r3, #16]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	749a      	strb	r2, [r3, #18]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800a1fa:	697b      	ldr	r3, [r7, #20]
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3718      	adds	r7, #24
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}
 800a204:	0800fb18 	.word	0x0800fb18
 800a208:	080101f0 	.word	0x080101f0
 800a20c:	0800fb6c 	.word	0x0800fb6c

0800a210 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800a210:	b5b0      	push	{r4, r5, r7, lr}
 800a212:	b08a      	sub	sp, #40	; 0x28
 800a214:	af04      	add	r7, sp, #16
 800a216:	60f8      	str	r0, [r7, #12]
 800a218:	607b      	str	r3, [r7, #4]
 800a21a:	460b      	mov	r3, r1
 800a21c:	817b      	strh	r3, [r7, #10]
 800a21e:	4613      	mov	r3, r2
 800a220:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d106      	bne.n	800a236 <tcp_output_alloc_header+0x26>
 800a228:	4b15      	ldr	r3, [pc, #84]	; (800a280 <tcp_output_alloc_header+0x70>)
 800a22a:	f240 7242 	movw	r2, #1858	; 0x742
 800a22e:	4915      	ldr	r1, [pc, #84]	; (800a284 <tcp_output_alloc_header+0x74>)
 800a230:	4815      	ldr	r0, [pc, #84]	; (800a288 <tcp_output_alloc_header+0x78>)
 800a232:	f003 f855 	bl	800d2e0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	8adb      	ldrh	r3, [r3, #22]
 800a23e:	68fa      	ldr	r2, [r7, #12]
 800a240:	8b12      	ldrh	r2, [r2, #24]
 800a242:	68f9      	ldr	r1, [r7, #12]
 800a244:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800a246:	893d      	ldrh	r5, [r7, #8]
 800a248:	897c      	ldrh	r4, [r7, #10]
 800a24a:	9103      	str	r1, [sp, #12]
 800a24c:	2110      	movs	r1, #16
 800a24e:	9102      	str	r1, [sp, #8]
 800a250:	9201      	str	r2, [sp, #4]
 800a252:	9300      	str	r3, [sp, #0]
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	462a      	mov	r2, r5
 800a258:	4621      	mov	r1, r4
 800a25a:	f7ff ff67 	bl	800a12c <tcp_output_alloc_header_common>
 800a25e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d006      	beq.n	800a274 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a26a:	68fa      	ldr	r2, [r7, #12]
 800a26c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800a26e:	441a      	add	r2, r3
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800a274:	697b      	ldr	r3, [r7, #20]
}
 800a276:	4618      	mov	r0, r3
 800a278:	3718      	adds	r7, #24
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bdb0      	pop	{r4, r5, r7, pc}
 800a27e:	bf00      	nop
 800a280:	0800fb18 	.word	0x0800fb18
 800a284:	08010220 	.word	0x08010220
 800a288:	0800fb6c 	.word	0x0800fb6c

0800a28c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b088      	sub	sp, #32
 800a290:	af00      	add	r7, sp, #0
 800a292:	60f8      	str	r0, [r7, #12]
 800a294:	60b9      	str	r1, [r7, #8]
 800a296:	4611      	mov	r1, r2
 800a298:	461a      	mov	r2, r3
 800a29a:	460b      	mov	r3, r1
 800a29c:	71fb      	strb	r3, [r7, #7]
 800a29e:	4613      	mov	r3, r2
 800a2a0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d106      	bne.n	800a2ba <tcp_output_fill_options+0x2e>
 800a2ac:	4b13      	ldr	r3, [pc, #76]	; (800a2fc <tcp_output_fill_options+0x70>)
 800a2ae:	f240 7256 	movw	r2, #1878	; 0x756
 800a2b2:	4913      	ldr	r1, [pc, #76]	; (800a300 <tcp_output_fill_options+0x74>)
 800a2b4:	4813      	ldr	r0, [pc, #76]	; (800a304 <tcp_output_fill_options+0x78>)
 800a2b6:	f003 f813 	bl	800d2e0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800a2c0:	69bb      	ldr	r3, [r7, #24]
 800a2c2:	3314      	adds	r3, #20
 800a2c4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800a2c6:	69bb      	ldr	r3, [r7, #24]
 800a2c8:	f103 0214 	add.w	r2, r3, #20
 800a2cc:	8bfb      	ldrh	r3, [r7, #30]
 800a2ce:	009b      	lsls	r3, r3, #2
 800a2d0:	4619      	mov	r1, r3
 800a2d2:	79fb      	ldrb	r3, [r7, #7]
 800a2d4:	009b      	lsls	r3, r3, #2
 800a2d6:	f003 0304 	and.w	r3, r3, #4
 800a2da:	440b      	add	r3, r1
 800a2dc:	4413      	add	r3, r2
 800a2de:	697a      	ldr	r2, [r7, #20]
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d006      	beq.n	800a2f2 <tcp_output_fill_options+0x66>
 800a2e4:	4b05      	ldr	r3, [pc, #20]	; (800a2fc <tcp_output_fill_options+0x70>)
 800a2e6:	f240 7275 	movw	r2, #1909	; 0x775
 800a2ea:	4907      	ldr	r1, [pc, #28]	; (800a308 <tcp_output_fill_options+0x7c>)
 800a2ec:	4805      	ldr	r0, [pc, #20]	; (800a304 <tcp_output_fill_options+0x78>)
 800a2ee:	f002 fff7 	bl	800d2e0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800a2f2:	bf00      	nop
 800a2f4:	3720      	adds	r7, #32
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}
 800a2fa:	bf00      	nop
 800a2fc:	0800fb18 	.word	0x0800fb18
 800a300:	08010248 	.word	0x08010248
 800a304:	0800fb6c 	.word	0x0800fb6c
 800a308:	08010140 	.word	0x08010140

0800a30c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b08a      	sub	sp, #40	; 0x28
 800a310:	af04      	add	r7, sp, #16
 800a312:	60f8      	str	r0, [r7, #12]
 800a314:	60b9      	str	r1, [r7, #8]
 800a316:	607a      	str	r2, [r7, #4]
 800a318:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d106      	bne.n	800a32e <tcp_output_control_segment+0x22>
 800a320:	4b1c      	ldr	r3, [pc, #112]	; (800a394 <tcp_output_control_segment+0x88>)
 800a322:	f240 7287 	movw	r2, #1927	; 0x787
 800a326:	491c      	ldr	r1, [pc, #112]	; (800a398 <tcp_output_control_segment+0x8c>)
 800a328:	481c      	ldr	r0, [pc, #112]	; (800a39c <tcp_output_control_segment+0x90>)
 800a32a:	f002 ffd9 	bl	800d2e0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800a32e:	683a      	ldr	r2, [r7, #0]
 800a330:	6879      	ldr	r1, [r7, #4]
 800a332:	68f8      	ldr	r0, [r7, #12]
 800a334:	f7fe ff40 	bl	80091b8 <tcp_route>
 800a338:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d102      	bne.n	800a346 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800a340:	23fc      	movs	r3, #252	; 0xfc
 800a342:	75fb      	strb	r3, [r7, #23]
 800a344:	e01c      	b.n	800a380 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d006      	beq.n	800a35a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	7adb      	ldrb	r3, [r3, #11]
 800a350:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	7a9b      	ldrb	r3, [r3, #10]
 800a356:	757b      	strb	r3, [r7, #21]
 800a358:	e003      	b.n	800a362 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800a35a:	23ff      	movs	r3, #255	; 0xff
 800a35c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800a35e:	2300      	movs	r3, #0
 800a360:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800a362:	7dba      	ldrb	r2, [r7, #22]
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	9302      	str	r3, [sp, #8]
 800a368:	2306      	movs	r3, #6
 800a36a:	9301      	str	r3, [sp, #4]
 800a36c:	7d7b      	ldrb	r3, [r7, #21]
 800a36e:	9300      	str	r3, [sp, #0]
 800a370:	4613      	mov	r3, r2
 800a372:	683a      	ldr	r2, [r7, #0]
 800a374:	6879      	ldr	r1, [r7, #4]
 800a376:	68b8      	ldr	r0, [r7, #8]
 800a378:	f001 ff3a 	bl	800c1f0 <ip4_output_if>
 800a37c:	4603      	mov	r3, r0
 800a37e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800a380:	68b8      	ldr	r0, [r7, #8]
 800a382:	f7fa fcf9 	bl	8004d78 <pbuf_free>
  return err;
 800a386:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3718      	adds	r7, #24
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}
 800a392:	bf00      	nop
 800a394:	0800fb18 	.word	0x0800fb18
 800a398:	08010270 	.word	0x08010270
 800a39c:	0800fb6c 	.word	0x0800fb6c

0800a3a0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800a3a0:	b590      	push	{r4, r7, lr}
 800a3a2:	b08b      	sub	sp, #44	; 0x2c
 800a3a4:	af04      	add	r7, sp, #16
 800a3a6:	60f8      	str	r0, [r7, #12]
 800a3a8:	60b9      	str	r1, [r7, #8]
 800a3aa:	607a      	str	r2, [r7, #4]
 800a3ac:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d106      	bne.n	800a3c2 <tcp_rst+0x22>
 800a3b4:	4b1f      	ldr	r3, [pc, #124]	; (800a434 <tcp_rst+0x94>)
 800a3b6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800a3ba:	491f      	ldr	r1, [pc, #124]	; (800a438 <tcp_rst+0x98>)
 800a3bc:	481f      	ldr	r0, [pc, #124]	; (800a43c <tcp_rst+0x9c>)
 800a3be:	f002 ff8f 	bl	800d2e0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800a3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d106      	bne.n	800a3d6 <tcp_rst+0x36>
 800a3c8:	4b1a      	ldr	r3, [pc, #104]	; (800a434 <tcp_rst+0x94>)
 800a3ca:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800a3ce:	491c      	ldr	r1, [pc, #112]	; (800a440 <tcp_rst+0xa0>)
 800a3d0:	481a      	ldr	r0, [pc, #104]	; (800a43c <tcp_rst+0x9c>)
 800a3d2:	f002 ff85 	bl	800d2e0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800a3da:	f246 0308 	movw	r3, #24584	; 0x6008
 800a3de:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800a3e0:	7dfb      	ldrb	r3, [r7, #23]
 800a3e2:	b29c      	uxth	r4, r3
 800a3e4:	68b8      	ldr	r0, [r7, #8]
 800a3e6:	f7f9 f99a 	bl	800371e <lwip_htonl>
 800a3ea:	4602      	mov	r2, r0
 800a3ec:	8abb      	ldrh	r3, [r7, #20]
 800a3ee:	9303      	str	r3, [sp, #12]
 800a3f0:	2314      	movs	r3, #20
 800a3f2:	9302      	str	r3, [sp, #8]
 800a3f4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a3f6:	9301      	str	r3, [sp, #4]
 800a3f8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a3fa:	9300      	str	r3, [sp, #0]
 800a3fc:	4613      	mov	r3, r2
 800a3fe:	2200      	movs	r2, #0
 800a400:	4621      	mov	r1, r4
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f7ff fe92 	bl	800a12c <tcp_output_alloc_header_common>
 800a408:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d00c      	beq.n	800a42a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a410:	7dfb      	ldrb	r3, [r7, #23]
 800a412:	2200      	movs	r2, #0
 800a414:	6939      	ldr	r1, [r7, #16]
 800a416:	68f8      	ldr	r0, [r7, #12]
 800a418:	f7ff ff38 	bl	800a28c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800a41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a41e:	683a      	ldr	r2, [r7, #0]
 800a420:	6939      	ldr	r1, [r7, #16]
 800a422:	68f8      	ldr	r0, [r7, #12]
 800a424:	f7ff ff72 	bl	800a30c <tcp_output_control_segment>
 800a428:	e000      	b.n	800a42c <tcp_rst+0x8c>
    return;
 800a42a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800a42c:	371c      	adds	r7, #28
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd90      	pop	{r4, r7, pc}
 800a432:	bf00      	nop
 800a434:	0800fb18 	.word	0x0800fb18
 800a438:	0801029c 	.word	0x0801029c
 800a43c:	0800fb6c 	.word	0x0800fb6c
 800a440:	080102b8 	.word	0x080102b8

0800a444 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800a444:	b590      	push	{r4, r7, lr}
 800a446:	b087      	sub	sp, #28
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800a44c:	2300      	movs	r3, #0
 800a44e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800a450:	2300      	movs	r3, #0
 800a452:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d106      	bne.n	800a468 <tcp_send_empty_ack+0x24>
 800a45a:	4b28      	ldr	r3, [pc, #160]	; (800a4fc <tcp_send_empty_ack+0xb8>)
 800a45c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800a460:	4927      	ldr	r1, [pc, #156]	; (800a500 <tcp_send_empty_ack+0xbc>)
 800a462:	4828      	ldr	r0, [pc, #160]	; (800a504 <tcp_send_empty_ack+0xc0>)
 800a464:	f002 ff3c 	bl	800d2e0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a468:	7dfb      	ldrb	r3, [r7, #23]
 800a46a:	009b      	lsls	r3, r3, #2
 800a46c:	b2db      	uxtb	r3, r3
 800a46e:	f003 0304 	and.w	r3, r3, #4
 800a472:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800a474:	7d7b      	ldrb	r3, [r7, #21]
 800a476:	b29c      	uxth	r4, r3
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a47c:	4618      	mov	r0, r3
 800a47e:	f7f9 f94e 	bl	800371e <lwip_htonl>
 800a482:	4603      	mov	r3, r0
 800a484:	2200      	movs	r2, #0
 800a486:	4621      	mov	r1, r4
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f7ff fec1 	bl	800a210 <tcp_output_alloc_header>
 800a48e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d109      	bne.n	800a4aa <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	8b5b      	ldrh	r3, [r3, #26]
 800a49a:	f043 0303 	orr.w	r3, r3, #3
 800a49e:	b29a      	uxth	r2, r3
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800a4a4:	f06f 0301 	mvn.w	r3, #1
 800a4a8:	e023      	b.n	800a4f2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800a4aa:	7dbb      	ldrb	r3, [r7, #22]
 800a4ac:	7dfa      	ldrb	r2, [r7, #23]
 800a4ae:	6939      	ldr	r1, [r7, #16]
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f7ff feeb 	bl	800a28c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a4b6:	687a      	ldr	r2, [r7, #4]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	3304      	adds	r3, #4
 800a4bc:	6939      	ldr	r1, [r7, #16]
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f7ff ff24 	bl	800a30c <tcp_output_control_segment>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800a4c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d007      	beq.n	800a4e0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	8b5b      	ldrh	r3, [r3, #26]
 800a4d4:	f043 0303 	orr.w	r3, r3, #3
 800a4d8:	b29a      	uxth	r2, r3
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	835a      	strh	r2, [r3, #26]
 800a4de:	e006      	b.n	800a4ee <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	8b5b      	ldrh	r3, [r3, #26]
 800a4e4:	f023 0303 	bic.w	r3, r3, #3
 800a4e8:	b29a      	uxth	r2, r3
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800a4ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	371c      	adds	r7, #28
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd90      	pop	{r4, r7, pc}
 800a4fa:	bf00      	nop
 800a4fc:	0800fb18 	.word	0x0800fb18
 800a500:	080102d4 	.word	0x080102d4
 800a504:	0800fb6c 	.word	0x0800fb6c

0800a508 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800a508:	b590      	push	{r4, r7, lr}
 800a50a:	b087      	sub	sp, #28
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a510:	2300      	movs	r3, #0
 800a512:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d106      	bne.n	800a528 <tcp_keepalive+0x20>
 800a51a:	4b18      	ldr	r3, [pc, #96]	; (800a57c <tcp_keepalive+0x74>)
 800a51c:	f640 0224 	movw	r2, #2084	; 0x824
 800a520:	4917      	ldr	r1, [pc, #92]	; (800a580 <tcp_keepalive+0x78>)
 800a522:	4818      	ldr	r0, [pc, #96]	; (800a584 <tcp_keepalive+0x7c>)
 800a524:	f002 fedc 	bl	800d2e0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800a528:	7dfb      	ldrb	r3, [r7, #23]
 800a52a:	b29c      	uxth	r4, r3
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a530:	3b01      	subs	r3, #1
 800a532:	4618      	mov	r0, r3
 800a534:	f7f9 f8f3 	bl	800371e <lwip_htonl>
 800a538:	4603      	mov	r3, r0
 800a53a:	2200      	movs	r2, #0
 800a53c:	4621      	mov	r1, r4
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f7ff fe66 	bl	800a210 <tcp_output_alloc_header>
 800a544:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d102      	bne.n	800a552 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800a54c:	f04f 33ff 	mov.w	r3, #4294967295
 800a550:	e010      	b.n	800a574 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a552:	7dfb      	ldrb	r3, [r7, #23]
 800a554:	2200      	movs	r2, #0
 800a556:	6939      	ldr	r1, [r7, #16]
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f7ff fe97 	bl	800a28c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	3304      	adds	r3, #4
 800a564:	6939      	ldr	r1, [r7, #16]
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f7ff fed0 	bl	800a30c <tcp_output_control_segment>
 800a56c:	4603      	mov	r3, r0
 800a56e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800a570:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a574:	4618      	mov	r0, r3
 800a576:	371c      	adds	r7, #28
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd90      	pop	{r4, r7, pc}
 800a57c:	0800fb18 	.word	0x0800fb18
 800a580:	080102f4 	.word	0x080102f4
 800a584:	0800fb6c 	.word	0x0800fb6c

0800a588 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800a588:	b590      	push	{r4, r7, lr}
 800a58a:	b08b      	sub	sp, #44	; 0x2c
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a590:	2300      	movs	r3, #0
 800a592:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d106      	bne.n	800a5aa <tcp_zero_window_probe+0x22>
 800a59c:	4b4c      	ldr	r3, [pc, #304]	; (800a6d0 <tcp_zero_window_probe+0x148>)
 800a59e:	f640 024f 	movw	r2, #2127	; 0x84f
 800a5a2:	494c      	ldr	r1, [pc, #304]	; (800a6d4 <tcp_zero_window_probe+0x14c>)
 800a5a4:	484c      	ldr	r0, [pc, #304]	; (800a6d8 <tcp_zero_window_probe+0x150>)
 800a5a6:	f002 fe9b 	bl	800d2e0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5ae:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800a5b0:	6a3b      	ldr	r3, [r7, #32]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d101      	bne.n	800a5ba <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	e086      	b.n	800a6c8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800a5c0:	2bff      	cmp	r3, #255	; 0xff
 800a5c2:	d007      	beq.n	800a5d4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800a5ca:	3301      	adds	r3, #1
 800a5cc:	b2da      	uxtb	r2, r3
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800a5d4:	6a3b      	ldr	r3, [r7, #32]
 800a5d6:	68db      	ldr	r3, [r3, #12]
 800a5d8:	899b      	ldrh	r3, [r3, #12]
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f7f9 f889 	bl	80036f4 <lwip_htons>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	b2db      	uxtb	r3, r3
 800a5e6:	f003 0301 	and.w	r3, r3, #1
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d005      	beq.n	800a5fa <tcp_zero_window_probe+0x72>
 800a5ee:	6a3b      	ldr	r3, [r7, #32]
 800a5f0:	891b      	ldrh	r3, [r3, #8]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d101      	bne.n	800a5fa <tcp_zero_window_probe+0x72>
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	e000      	b.n	800a5fc <tcp_zero_window_probe+0x74>
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800a5fe:	7ffb      	ldrb	r3, [r7, #31]
 800a600:	2b00      	cmp	r3, #0
 800a602:	bf0c      	ite	eq
 800a604:	2301      	moveq	r3, #1
 800a606:	2300      	movne	r3, #0
 800a608:	b2db      	uxtb	r3, r3
 800a60a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800a60c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a610:	b299      	uxth	r1, r3
 800a612:	6a3b      	ldr	r3, [r7, #32]
 800a614:	68db      	ldr	r3, [r3, #12]
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	8bba      	ldrh	r2, [r7, #28]
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f7ff fdf8 	bl	800a210 <tcp_output_alloc_header>
 800a620:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800a622:	69bb      	ldr	r3, [r7, #24]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d102      	bne.n	800a62e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800a628:	f04f 33ff 	mov.w	r3, #4294967295
 800a62c:	e04c      	b.n	800a6c8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800a62e:	69bb      	ldr	r3, [r7, #24]
 800a630:	685b      	ldr	r3, [r3, #4]
 800a632:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800a634:	7ffb      	ldrb	r3, [r7, #31]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d011      	beq.n	800a65e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	899b      	ldrh	r3, [r3, #12]
 800a63e:	b29b      	uxth	r3, r3
 800a640:	b21b      	sxth	r3, r3
 800a642:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a646:	b21c      	sxth	r4, r3
 800a648:	2011      	movs	r0, #17
 800a64a:	f7f9 f853 	bl	80036f4 <lwip_htons>
 800a64e:	4603      	mov	r3, r0
 800a650:	b21b      	sxth	r3, r3
 800a652:	4323      	orrs	r3, r4
 800a654:	b21b      	sxth	r3, r3
 800a656:	b29a      	uxth	r2, r3
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	819a      	strh	r2, [r3, #12]
 800a65c:	e010      	b.n	800a680 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800a65e:	69bb      	ldr	r3, [r7, #24]
 800a660:	685b      	ldr	r3, [r3, #4]
 800a662:	3314      	adds	r3, #20
 800a664:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800a666:	6a3b      	ldr	r3, [r7, #32]
 800a668:	6858      	ldr	r0, [r3, #4]
 800a66a:	6a3b      	ldr	r3, [r7, #32]
 800a66c:	685b      	ldr	r3, [r3, #4]
 800a66e:	891a      	ldrh	r2, [r3, #8]
 800a670:	6a3b      	ldr	r3, [r7, #32]
 800a672:	891b      	ldrh	r3, [r3, #8]
 800a674:	1ad3      	subs	r3, r2, r3
 800a676:	b29b      	uxth	r3, r3
 800a678:	2201      	movs	r2, #1
 800a67a:	6939      	ldr	r1, [r7, #16]
 800a67c:	f7fa fd66 	bl	800514c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800a680:	6a3b      	ldr	r3, [r7, #32]
 800a682:	68db      	ldr	r3, [r3, #12]
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	4618      	mov	r0, r3
 800a688:	f7f9 f849 	bl	800371e <lwip_htonl>
 800a68c:	4603      	mov	r3, r0
 800a68e:	3301      	adds	r3, #1
 800a690:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	1ad3      	subs	r3, r2, r3
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	da02      	bge.n	800a6a4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	68fa      	ldr	r2, [r7, #12]
 800a6a2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a6a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	69b9      	ldr	r1, [r7, #24]
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f7ff fded 	bl	800a28c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a6b2:	687a      	ldr	r2, [r7, #4]
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	3304      	adds	r3, #4
 800a6b8:	69b9      	ldr	r1, [r7, #24]
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f7ff fe26 	bl	800a30c <tcp_output_control_segment>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800a6c4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	372c      	adds	r7, #44	; 0x2c
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd90      	pop	{r4, r7, pc}
 800a6d0:	0800fb18 	.word	0x0800fb18
 800a6d4:	08010310 	.word	0x08010310
 800a6d8:	0800fb6c 	.word	0x0800fb6c

0800a6dc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b082      	sub	sp, #8
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800a6e4:	f7fa ff0c 	bl	8005500 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800a6e8:	4b0a      	ldr	r3, [pc, #40]	; (800a714 <tcpip_tcp_timer+0x38>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d103      	bne.n	800a6f8 <tcpip_tcp_timer+0x1c>
 800a6f0:	4b09      	ldr	r3, [pc, #36]	; (800a718 <tcpip_tcp_timer+0x3c>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d005      	beq.n	800a704 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	4908      	ldr	r1, [pc, #32]	; (800a71c <tcpip_tcp_timer+0x40>)
 800a6fc:	20fa      	movs	r0, #250	; 0xfa
 800a6fe:	f000 f8f3 	bl	800a8e8 <sys_timeout>
 800a702:	e003      	b.n	800a70c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800a704:	4b06      	ldr	r3, [pc, #24]	; (800a720 <tcpip_tcp_timer+0x44>)
 800a706:	2200      	movs	r2, #0
 800a708:	601a      	str	r2, [r3, #0]
  }
}
 800a70a:	bf00      	nop
 800a70c:	bf00      	nop
 800a70e:	3708      	adds	r7, #8
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}
 800a714:	200082d0 	.word	0x200082d0
 800a718:	200082d4 	.word	0x200082d4
 800a71c:	0800a6dd 	.word	0x0800a6dd
 800a720:	2000831c 	.word	0x2000831c

0800a724 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800a728:	4b0a      	ldr	r3, [pc, #40]	; (800a754 <tcp_timer_needed+0x30>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d10f      	bne.n	800a750 <tcp_timer_needed+0x2c>
 800a730:	4b09      	ldr	r3, [pc, #36]	; (800a758 <tcp_timer_needed+0x34>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d103      	bne.n	800a740 <tcp_timer_needed+0x1c>
 800a738:	4b08      	ldr	r3, [pc, #32]	; (800a75c <tcp_timer_needed+0x38>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d007      	beq.n	800a750 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800a740:	4b04      	ldr	r3, [pc, #16]	; (800a754 <tcp_timer_needed+0x30>)
 800a742:	2201      	movs	r2, #1
 800a744:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a746:	2200      	movs	r2, #0
 800a748:	4905      	ldr	r1, [pc, #20]	; (800a760 <tcp_timer_needed+0x3c>)
 800a74a:	20fa      	movs	r0, #250	; 0xfa
 800a74c:	f000 f8cc 	bl	800a8e8 <sys_timeout>
  }
}
 800a750:	bf00      	nop
 800a752:	bd80      	pop	{r7, pc}
 800a754:	2000831c 	.word	0x2000831c
 800a758:	200082d0 	.word	0x200082d0
 800a75c:	200082d4 	.word	0x200082d4
 800a760:	0800a6dd 	.word	0x0800a6dd

0800a764 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b086      	sub	sp, #24
 800a768:	af00      	add	r7, sp, #0
 800a76a:	60f8      	str	r0, [r7, #12]
 800a76c:	60b9      	str	r1, [r7, #8]
 800a76e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800a770:	2007      	movs	r0, #7
 800a772:	f7f9 fc37 	bl	8003fe4 <memp_malloc>
 800a776:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d109      	bne.n	800a792 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d151      	bne.n	800a828 <sys_timeout_abs+0xc4>
 800a784:	4b2a      	ldr	r3, [pc, #168]	; (800a830 <sys_timeout_abs+0xcc>)
 800a786:	22be      	movs	r2, #190	; 0xbe
 800a788:	492a      	ldr	r1, [pc, #168]	; (800a834 <sys_timeout_abs+0xd0>)
 800a78a:	482b      	ldr	r0, [pc, #172]	; (800a838 <sys_timeout_abs+0xd4>)
 800a78c:	f002 fda8 	bl	800d2e0 <iprintf>
    return;
 800a790:	e04a      	b.n	800a828 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	2200      	movs	r2, #0
 800a796:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	68ba      	ldr	r2, [r7, #8]
 800a79c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800a79e:	693b      	ldr	r3, [r7, #16]
 800a7a0:	687a      	ldr	r2, [r7, #4]
 800a7a2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	68fa      	ldr	r2, [r7, #12]
 800a7a8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800a7aa:	4b24      	ldr	r3, [pc, #144]	; (800a83c <sys_timeout_abs+0xd8>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d103      	bne.n	800a7ba <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800a7b2:	4a22      	ldr	r2, [pc, #136]	; (800a83c <sys_timeout_abs+0xd8>)
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	6013      	str	r3, [r2, #0]
    return;
 800a7b8:	e037      	b.n	800a82a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	685a      	ldr	r2, [r3, #4]
 800a7be:	4b1f      	ldr	r3, [pc, #124]	; (800a83c <sys_timeout_abs+0xd8>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	1ad3      	subs	r3, r2, r3
 800a7c6:	0fdb      	lsrs	r3, r3, #31
 800a7c8:	f003 0301 	and.w	r3, r3, #1
 800a7cc:	b2db      	uxtb	r3, r3
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d007      	beq.n	800a7e2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800a7d2:	4b1a      	ldr	r3, [pc, #104]	; (800a83c <sys_timeout_abs+0xd8>)
 800a7d4:	681a      	ldr	r2, [r3, #0]
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800a7da:	4a18      	ldr	r2, [pc, #96]	; (800a83c <sys_timeout_abs+0xd8>)
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	6013      	str	r3, [r2, #0]
 800a7e0:	e023      	b.n	800a82a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800a7e2:	4b16      	ldr	r3, [pc, #88]	; (800a83c <sys_timeout_abs+0xd8>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	617b      	str	r3, [r7, #20]
 800a7e8:	e01a      	b.n	800a820 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d00b      	beq.n	800a80a <sys_timeout_abs+0xa6>
 800a7f2:	693b      	ldr	r3, [r7, #16]
 800a7f4:	685a      	ldr	r2, [r3, #4]
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	685b      	ldr	r3, [r3, #4]
 800a7fc:	1ad3      	subs	r3, r2, r3
 800a7fe:	0fdb      	lsrs	r3, r3, #31
 800a800:	f003 0301 	and.w	r3, r3, #1
 800a804:	b2db      	uxtb	r3, r3
 800a806:	2b00      	cmp	r3, #0
 800a808:	d007      	beq.n	800a81a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	693a      	ldr	r2, [r7, #16]
 800a816:	601a      	str	r2, [r3, #0]
        break;
 800a818:	e007      	b.n	800a82a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	617b      	str	r3, [r7, #20]
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d1e1      	bne.n	800a7ea <sys_timeout_abs+0x86>
 800a826:	e000      	b.n	800a82a <sys_timeout_abs+0xc6>
    return;
 800a828:	bf00      	nop
      }
    }
  }
}
 800a82a:	3718      	adds	r7, #24
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}
 800a830:	08010334 	.word	0x08010334
 800a834:	08010368 	.word	0x08010368
 800a838:	080103a8 	.word	0x080103a8
 800a83c:	20008314 	.word	0x20008314

0800a840 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b086      	sub	sp, #24
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	685b      	ldr	r3, [r3, #4]
 800a850:	4798      	blx	r3

  now = sys_now();
 800a852:	f7f8 fd8f 	bl	8003374 <sys_now>
 800a856:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	4b0f      	ldr	r3, [pc, #60]	; (800a89c <lwip_cyclic_timer+0x5c>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	4413      	add	r3, r2
 800a862:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800a864:	68fa      	ldr	r2, [r7, #12]
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	1ad3      	subs	r3, r2, r3
 800a86a:	0fdb      	lsrs	r3, r3, #31
 800a86c:	f003 0301 	and.w	r3, r3, #1
 800a870:	b2db      	uxtb	r3, r3
 800a872:	2b00      	cmp	r3, #0
 800a874:	d009      	beq.n	800a88a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800a876:	697b      	ldr	r3, [r7, #20]
 800a878:	681a      	ldr	r2, [r3, #0]
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	4413      	add	r3, r2
 800a87e:	687a      	ldr	r2, [r7, #4]
 800a880:	4907      	ldr	r1, [pc, #28]	; (800a8a0 <lwip_cyclic_timer+0x60>)
 800a882:	4618      	mov	r0, r3
 800a884:	f7ff ff6e 	bl	800a764 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800a888:	e004      	b.n	800a894 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800a88a:	687a      	ldr	r2, [r7, #4]
 800a88c:	4904      	ldr	r1, [pc, #16]	; (800a8a0 <lwip_cyclic_timer+0x60>)
 800a88e:	68f8      	ldr	r0, [r7, #12]
 800a890:	f7ff ff68 	bl	800a764 <sys_timeout_abs>
}
 800a894:	bf00      	nop
 800a896:	3718      	adds	r7, #24
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}
 800a89c:	20008318 	.word	0x20008318
 800a8a0:	0800a841 	.word	0x0800a841

0800a8a4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b082      	sub	sp, #8
 800a8a8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	607b      	str	r3, [r7, #4]
 800a8ae:	e00e      	b.n	800a8ce <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800a8b0:	4a0b      	ldr	r2, [pc, #44]	; (800a8e0 <sys_timeouts_init+0x3c>)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	00db      	lsls	r3, r3, #3
 800a8bc:	4a08      	ldr	r2, [pc, #32]	; (800a8e0 <sys_timeouts_init+0x3c>)
 800a8be:	4413      	add	r3, r2
 800a8c0:	461a      	mov	r2, r3
 800a8c2:	4908      	ldr	r1, [pc, #32]	; (800a8e4 <sys_timeouts_init+0x40>)
 800a8c4:	f000 f810 	bl	800a8e8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	3301      	adds	r3, #1
 800a8cc:	607b      	str	r3, [r7, #4]
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2b02      	cmp	r3, #2
 800a8d2:	d9ed      	bls.n	800a8b0 <sys_timeouts_init+0xc>
  }
}
 800a8d4:	bf00      	nop
 800a8d6:	bf00      	nop
 800a8d8:	3708      	adds	r7, #8
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}
 800a8de:	bf00      	nop
 800a8e0:	08010f28 	.word	0x08010f28
 800a8e4:	0800a841 	.word	0x0800a841

0800a8e8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b086      	sub	sp, #24
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	60f8      	str	r0, [r7, #12]
 800a8f0:	60b9      	str	r1, [r7, #8]
 800a8f2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8fa:	d306      	bcc.n	800a90a <sys_timeout+0x22>
 800a8fc:	4b0a      	ldr	r3, [pc, #40]	; (800a928 <sys_timeout+0x40>)
 800a8fe:	f240 1229 	movw	r2, #297	; 0x129
 800a902:	490a      	ldr	r1, [pc, #40]	; (800a92c <sys_timeout+0x44>)
 800a904:	480a      	ldr	r0, [pc, #40]	; (800a930 <sys_timeout+0x48>)
 800a906:	f002 fceb 	bl	800d2e0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800a90a:	f7f8 fd33 	bl	8003374 <sys_now>
 800a90e:	4602      	mov	r2, r0
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	4413      	add	r3, r2
 800a914:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800a916:	687a      	ldr	r2, [r7, #4]
 800a918:	68b9      	ldr	r1, [r7, #8]
 800a91a:	6978      	ldr	r0, [r7, #20]
 800a91c:	f7ff ff22 	bl	800a764 <sys_timeout_abs>
#endif
}
 800a920:	bf00      	nop
 800a922:	3718      	adds	r7, #24
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}
 800a928:	08010334 	.word	0x08010334
 800a92c:	080103d0 	.word	0x080103d0
 800a930:	080103a8 	.word	0x080103a8

0800a934 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800a938:	f002 fcea 	bl	800d310 <rand>
 800a93c:	4603      	mov	r3, r0
 800a93e:	b29b      	uxth	r3, r3
 800a940:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a944:	b29b      	uxth	r3, r3
 800a946:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800a94a:	b29a      	uxth	r2, r3
 800a94c:	4b01      	ldr	r3, [pc, #4]	; (800a954 <udp_init+0x20>)
 800a94e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800a950:	bf00      	nop
 800a952:	bd80      	pop	{r7, pc}
 800a954:	20000028 	.word	0x20000028

0800a958 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b084      	sub	sp, #16
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	60f8      	str	r0, [r7, #12]
 800a960:	60b9      	str	r1, [r7, #8]
 800a962:	4613      	mov	r3, r2
 800a964:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d105      	bne.n	800a978 <udp_input_local_match+0x20>
 800a96c:	4b27      	ldr	r3, [pc, #156]	; (800aa0c <udp_input_local_match+0xb4>)
 800a96e:	2287      	movs	r2, #135	; 0x87
 800a970:	4927      	ldr	r1, [pc, #156]	; (800aa10 <udp_input_local_match+0xb8>)
 800a972:	4828      	ldr	r0, [pc, #160]	; (800aa14 <udp_input_local_match+0xbc>)
 800a974:	f002 fcb4 	bl	800d2e0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d105      	bne.n	800a98a <udp_input_local_match+0x32>
 800a97e:	4b23      	ldr	r3, [pc, #140]	; (800aa0c <udp_input_local_match+0xb4>)
 800a980:	2288      	movs	r2, #136	; 0x88
 800a982:	4925      	ldr	r1, [pc, #148]	; (800aa18 <udp_input_local_match+0xc0>)
 800a984:	4823      	ldr	r0, [pc, #140]	; (800aa14 <udp_input_local_match+0xbc>)
 800a986:	f002 fcab 	bl	800d2e0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	7a1b      	ldrb	r3, [r3, #8]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d00b      	beq.n	800a9aa <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	7a1a      	ldrb	r2, [r3, #8]
 800a996:	4b21      	ldr	r3, [pc, #132]	; (800aa1c <udp_input_local_match+0xc4>)
 800a998:	685b      	ldr	r3, [r3, #4]
 800a99a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a99e:	3301      	adds	r3, #1
 800a9a0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	d001      	beq.n	800a9aa <udp_input_local_match+0x52>
    return 0;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	e02b      	b.n	800aa02 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800a9aa:	79fb      	ldrb	r3, [r7, #7]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d018      	beq.n	800a9e2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d013      	beq.n	800a9de <udp_input_local_match+0x86>
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d00f      	beq.n	800a9de <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800a9be:	4b17      	ldr	r3, [pc, #92]	; (800aa1c <udp_input_local_match+0xc4>)
 800a9c0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a9c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9c6:	d00a      	beq.n	800a9de <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	4b13      	ldr	r3, [pc, #76]	; (800aa1c <udp_input_local_match+0xc4>)
 800a9ce:	695b      	ldr	r3, [r3, #20]
 800a9d0:	405a      	eors	r2, r3
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	3308      	adds	r3, #8
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d110      	bne.n	800aa00 <udp_input_local_match+0xa8>
          return 1;
 800a9de:	2301      	movs	r3, #1
 800a9e0:	e00f      	b.n	800aa02 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d009      	beq.n	800a9fc <udp_input_local_match+0xa4>
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d005      	beq.n	800a9fc <udp_input_local_match+0xa4>
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681a      	ldr	r2, [r3, #0]
 800a9f4:	4b09      	ldr	r3, [pc, #36]	; (800aa1c <udp_input_local_match+0xc4>)
 800a9f6:	695b      	ldr	r3, [r3, #20]
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	d101      	bne.n	800aa00 <udp_input_local_match+0xa8>
        return 1;
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	e000      	b.n	800aa02 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800aa00:	2300      	movs	r3, #0
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3710      	adds	r7, #16
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}
 800aa0a:	bf00      	nop
 800aa0c:	0801041c 	.word	0x0801041c
 800aa10:	0801044c 	.word	0x0801044c
 800aa14:	08010470 	.word	0x08010470
 800aa18:	08010498 	.word	0x08010498
 800aa1c:	20004cd8 	.word	0x20004cd8

0800aa20 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800aa20:	b590      	push	{r4, r7, lr}
 800aa22:	b08d      	sub	sp, #52	; 0x34
 800aa24:	af02      	add	r7, sp, #8
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d105      	bne.n	800aa40 <udp_input+0x20>
 800aa34:	4b7c      	ldr	r3, [pc, #496]	; (800ac28 <udp_input+0x208>)
 800aa36:	22cf      	movs	r2, #207	; 0xcf
 800aa38:	497c      	ldr	r1, [pc, #496]	; (800ac2c <udp_input+0x20c>)
 800aa3a:	487d      	ldr	r0, [pc, #500]	; (800ac30 <udp_input+0x210>)
 800aa3c:	f002 fc50 	bl	800d2e0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d105      	bne.n	800aa52 <udp_input+0x32>
 800aa46:	4b78      	ldr	r3, [pc, #480]	; (800ac28 <udp_input+0x208>)
 800aa48:	22d0      	movs	r2, #208	; 0xd0
 800aa4a:	497a      	ldr	r1, [pc, #488]	; (800ac34 <udp_input+0x214>)
 800aa4c:	4878      	ldr	r0, [pc, #480]	; (800ac30 <udp_input+0x210>)
 800aa4e:	f002 fc47 	bl	800d2e0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	895b      	ldrh	r3, [r3, #10]
 800aa56:	2b07      	cmp	r3, #7
 800aa58:	d803      	bhi.n	800aa62 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f7fa f98c 	bl	8004d78 <pbuf_free>
    goto end;
 800aa60:	e0de      	b.n	800ac20 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	685b      	ldr	r3, [r3, #4]
 800aa66:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800aa68:	4b73      	ldr	r3, [pc, #460]	; (800ac38 <udp_input+0x218>)
 800aa6a:	695b      	ldr	r3, [r3, #20]
 800aa6c:	4a72      	ldr	r2, [pc, #456]	; (800ac38 <udp_input+0x218>)
 800aa6e:	6812      	ldr	r2, [r2, #0]
 800aa70:	4611      	mov	r1, r2
 800aa72:	4618      	mov	r0, r3
 800aa74:	f001 fc94 	bl	800c3a0 <ip4_addr_isbroadcast_u32>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	881b      	ldrh	r3, [r3, #0]
 800aa80:	b29b      	uxth	r3, r3
 800aa82:	4618      	mov	r0, r3
 800aa84:	f7f8 fe36 	bl	80036f4 <lwip_htons>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	885b      	ldrh	r3, [r3, #2]
 800aa90:	b29b      	uxth	r3, r3
 800aa92:	4618      	mov	r0, r3
 800aa94:	f7f8 fe2e 	bl	80036f4 <lwip_htons>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800aaa8:	4b64      	ldr	r3, [pc, #400]	; (800ac3c <udp_input+0x21c>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	627b      	str	r3, [r7, #36]	; 0x24
 800aaae:	e054      	b.n	800ab5a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800aab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab2:	8a5b      	ldrh	r3, [r3, #18]
 800aab4:	89fa      	ldrh	r2, [r7, #14]
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d14a      	bne.n	800ab50 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800aaba:	7cfb      	ldrb	r3, [r7, #19]
 800aabc:	461a      	mov	r2, r3
 800aabe:	6839      	ldr	r1, [r7, #0]
 800aac0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aac2:	f7ff ff49 	bl	800a958 <udp_input_local_match>
 800aac6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d041      	beq.n	800ab50 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800aacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aace:	7c1b      	ldrb	r3, [r3, #16]
 800aad0:	f003 0304 	and.w	r3, r3, #4
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d11d      	bne.n	800ab14 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800aad8:	69fb      	ldr	r3, [r7, #28]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d102      	bne.n	800aae4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800aade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae0:	61fb      	str	r3, [r7, #28]
 800aae2:	e017      	b.n	800ab14 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800aae4:	7cfb      	ldrb	r3, [r7, #19]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d014      	beq.n	800ab14 <udp_input+0xf4>
 800aaea:	4b53      	ldr	r3, [pc, #332]	; (800ac38 <udp_input+0x218>)
 800aaec:	695b      	ldr	r3, [r3, #20]
 800aaee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaf2:	d10f      	bne.n	800ab14 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800aaf4:	69fb      	ldr	r3, [r7, #28]
 800aaf6:	681a      	ldr	r2, [r3, #0]
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	3304      	adds	r3, #4
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d008      	beq.n	800ab14 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800ab02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab04:	681a      	ldr	r2, [r3, #0]
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	3304      	adds	r3, #4
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	d101      	bne.n	800ab14 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800ab10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab12:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800ab14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab16:	8a9b      	ldrh	r3, [r3, #20]
 800ab18:	8a3a      	ldrh	r2, [r7, #16]
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	d118      	bne.n	800ab50 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ab1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab20:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d005      	beq.n	800ab32 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800ab26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab28:	685a      	ldr	r2, [r3, #4]
 800ab2a:	4b43      	ldr	r3, [pc, #268]	; (800ac38 <udp_input+0x218>)
 800ab2c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ab2e:	429a      	cmp	r2, r3
 800ab30:	d10e      	bne.n	800ab50 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800ab32:	6a3b      	ldr	r3, [r7, #32]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d014      	beq.n	800ab62 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800ab38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab3a:	68da      	ldr	r2, [r3, #12]
 800ab3c:	6a3b      	ldr	r3, [r7, #32]
 800ab3e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800ab40:	4b3e      	ldr	r3, [pc, #248]	; (800ac3c <udp_input+0x21c>)
 800ab42:	681a      	ldr	r2, [r3, #0]
 800ab44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab46:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800ab48:	4a3c      	ldr	r2, [pc, #240]	; (800ac3c <udp_input+0x21c>)
 800ab4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab4c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800ab4e:	e008      	b.n	800ab62 <udp_input+0x142>
      }
    }

    prev = pcb;
 800ab50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab52:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ab54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab56:	68db      	ldr	r3, [r3, #12]
 800ab58:	627b      	str	r3, [r7, #36]	; 0x24
 800ab5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d1a7      	bne.n	800aab0 <udp_input+0x90>
 800ab60:	e000      	b.n	800ab64 <udp_input+0x144>
        break;
 800ab62:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800ab64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d101      	bne.n	800ab6e <udp_input+0x14e>
    pcb = uncon_pcb;
 800ab6a:	69fb      	ldr	r3, [r7, #28]
 800ab6c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800ab6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d002      	beq.n	800ab7a <udp_input+0x15a>
    for_us = 1;
 800ab74:	2301      	movs	r3, #1
 800ab76:	76fb      	strb	r3, [r7, #27]
 800ab78:	e00a      	b.n	800ab90 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	3304      	adds	r3, #4
 800ab7e:	681a      	ldr	r2, [r3, #0]
 800ab80:	4b2d      	ldr	r3, [pc, #180]	; (800ac38 <udp_input+0x218>)
 800ab82:	695b      	ldr	r3, [r3, #20]
 800ab84:	429a      	cmp	r2, r3
 800ab86:	bf0c      	ite	eq
 800ab88:	2301      	moveq	r3, #1
 800ab8a:	2300      	movne	r3, #0
 800ab8c:	b2db      	uxtb	r3, r3
 800ab8e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800ab90:	7efb      	ldrb	r3, [r7, #27]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d041      	beq.n	800ac1a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800ab96:	2108      	movs	r1, #8
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f7fa f867 	bl	8004c6c <pbuf_remove_header>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d00a      	beq.n	800abba <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800aba4:	4b20      	ldr	r3, [pc, #128]	; (800ac28 <udp_input+0x208>)
 800aba6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800abaa:	4925      	ldr	r1, [pc, #148]	; (800ac40 <udp_input+0x220>)
 800abac:	4820      	ldr	r0, [pc, #128]	; (800ac30 <udp_input+0x210>)
 800abae:	f002 fb97 	bl	800d2e0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f7fa f8e0 	bl	8004d78 <pbuf_free>
      goto end;
 800abb8:	e032      	b.n	800ac20 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800abba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d012      	beq.n	800abe6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800abc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc2:	699b      	ldr	r3, [r3, #24]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d00a      	beq.n	800abde <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800abc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abca:	699c      	ldr	r4, [r3, #24]
 800abcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abce:	69d8      	ldr	r0, [r3, #28]
 800abd0:	8a3b      	ldrh	r3, [r7, #16]
 800abd2:	9300      	str	r3, [sp, #0]
 800abd4:	4b1b      	ldr	r3, [pc, #108]	; (800ac44 <udp_input+0x224>)
 800abd6:	687a      	ldr	r2, [r7, #4]
 800abd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800abda:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800abdc:	e021      	b.n	800ac22 <udp_input+0x202>
        pbuf_free(p);
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f7fa f8ca 	bl	8004d78 <pbuf_free>
        goto end;
 800abe4:	e01c      	b.n	800ac20 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800abe6:	7cfb      	ldrb	r3, [r7, #19]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d112      	bne.n	800ac12 <udp_input+0x1f2>
 800abec:	4b12      	ldr	r3, [pc, #72]	; (800ac38 <udp_input+0x218>)
 800abee:	695b      	ldr	r3, [r3, #20]
 800abf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800abf4:	2be0      	cmp	r3, #224	; 0xe0
 800abf6:	d00c      	beq.n	800ac12 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800abf8:	4b0f      	ldr	r3, [pc, #60]	; (800ac38 <udp_input+0x218>)
 800abfa:	899b      	ldrh	r3, [r3, #12]
 800abfc:	3308      	adds	r3, #8
 800abfe:	b29b      	uxth	r3, r3
 800ac00:	b21b      	sxth	r3, r3
 800ac02:	4619      	mov	r1, r3
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f7fa f8a4 	bl	8004d52 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800ac0a:	2103      	movs	r1, #3
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f001 f89b 	bl	800bd48 <icmp_dest_unreach>
      pbuf_free(p);
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f7fa f8b0 	bl	8004d78 <pbuf_free>
  return;
 800ac18:	e003      	b.n	800ac22 <udp_input+0x202>
    pbuf_free(p);
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f7fa f8ac 	bl	8004d78 <pbuf_free>
  return;
 800ac20:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800ac22:	372c      	adds	r7, #44	; 0x2c
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd90      	pop	{r4, r7, pc}
 800ac28:	0801041c 	.word	0x0801041c
 800ac2c:	080104c0 	.word	0x080104c0
 800ac30:	08010470 	.word	0x08010470
 800ac34:	080104d8 	.word	0x080104d8
 800ac38:	20004cd8 	.word	0x20004cd8
 800ac3c:	20008320 	.word	0x20008320
 800ac40:	080104f4 	.word	0x080104f4
 800ac44:	20004ce8 	.word	0x20004ce8

0800ac48 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b085      	sub	sp, #20
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
 800ac50:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d01e      	beq.n	800ac96 <udp_netif_ip_addr_changed+0x4e>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d01a      	beq.n	800ac96 <udp_netif_ip_addr_changed+0x4e>
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d017      	beq.n	800ac96 <udp_netif_ip_addr_changed+0x4e>
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d013      	beq.n	800ac96 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ac6e:	4b0d      	ldr	r3, [pc, #52]	; (800aca4 <udp_netif_ip_addr_changed+0x5c>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	60fb      	str	r3, [r7, #12]
 800ac74:	e00c      	b.n	800ac90 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681a      	ldr	r2, [r3, #0]
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	429a      	cmp	r2, r3
 800ac80:	d103      	bne.n	800ac8a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	681a      	ldr	r2, [r3, #0]
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	68db      	ldr	r3, [r3, #12]
 800ac8e:	60fb      	str	r3, [r7, #12]
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d1ef      	bne.n	800ac76 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800ac96:	bf00      	nop
 800ac98:	3714      	adds	r7, #20
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca0:	4770      	bx	lr
 800aca2:	bf00      	nop
 800aca4:	20008320 	.word	0x20008320

0800aca8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b082      	sub	sp, #8
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800acb0:	4915      	ldr	r1, [pc, #84]	; (800ad08 <etharp_free_entry+0x60>)
 800acb2:	687a      	ldr	r2, [r7, #4]
 800acb4:	4613      	mov	r3, r2
 800acb6:	005b      	lsls	r3, r3, #1
 800acb8:	4413      	add	r3, r2
 800acba:	00db      	lsls	r3, r3, #3
 800acbc:	440b      	add	r3, r1
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d013      	beq.n	800acec <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800acc4:	4910      	ldr	r1, [pc, #64]	; (800ad08 <etharp_free_entry+0x60>)
 800acc6:	687a      	ldr	r2, [r7, #4]
 800acc8:	4613      	mov	r3, r2
 800acca:	005b      	lsls	r3, r3, #1
 800accc:	4413      	add	r3, r2
 800acce:	00db      	lsls	r3, r3, #3
 800acd0:	440b      	add	r3, r1
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	4618      	mov	r0, r3
 800acd6:	f7fa f84f 	bl	8004d78 <pbuf_free>
    arp_table[i].q = NULL;
 800acda:	490b      	ldr	r1, [pc, #44]	; (800ad08 <etharp_free_entry+0x60>)
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	4613      	mov	r3, r2
 800ace0:	005b      	lsls	r3, r3, #1
 800ace2:	4413      	add	r3, r2
 800ace4:	00db      	lsls	r3, r3, #3
 800ace6:	440b      	add	r3, r1
 800ace8:	2200      	movs	r2, #0
 800acea:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800acec:	4906      	ldr	r1, [pc, #24]	; (800ad08 <etharp_free_entry+0x60>)
 800acee:	687a      	ldr	r2, [r7, #4]
 800acf0:	4613      	mov	r3, r2
 800acf2:	005b      	lsls	r3, r3, #1
 800acf4:	4413      	add	r3, r2
 800acf6:	00db      	lsls	r3, r3, #3
 800acf8:	440b      	add	r3, r1
 800acfa:	3314      	adds	r3, #20
 800acfc:	2200      	movs	r2, #0
 800acfe:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800ad00:	bf00      	nop
 800ad02:	3708      	adds	r7, #8
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}
 800ad08:	20008324 	.word	0x20008324

0800ad0c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b082      	sub	sp, #8
 800ad10:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ad12:	2300      	movs	r3, #0
 800ad14:	607b      	str	r3, [r7, #4]
 800ad16:	e096      	b.n	800ae46 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800ad18:	494f      	ldr	r1, [pc, #316]	; (800ae58 <etharp_tmr+0x14c>)
 800ad1a:	687a      	ldr	r2, [r7, #4]
 800ad1c:	4613      	mov	r3, r2
 800ad1e:	005b      	lsls	r3, r3, #1
 800ad20:	4413      	add	r3, r2
 800ad22:	00db      	lsls	r3, r3, #3
 800ad24:	440b      	add	r3, r1
 800ad26:	3314      	adds	r3, #20
 800ad28:	781b      	ldrb	r3, [r3, #0]
 800ad2a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800ad2c:	78fb      	ldrb	r3, [r7, #3]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	f000 8086 	beq.w	800ae40 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800ad34:	4948      	ldr	r1, [pc, #288]	; (800ae58 <etharp_tmr+0x14c>)
 800ad36:	687a      	ldr	r2, [r7, #4]
 800ad38:	4613      	mov	r3, r2
 800ad3a:	005b      	lsls	r3, r3, #1
 800ad3c:	4413      	add	r3, r2
 800ad3e:	00db      	lsls	r3, r3, #3
 800ad40:	440b      	add	r3, r1
 800ad42:	3312      	adds	r3, #18
 800ad44:	881b      	ldrh	r3, [r3, #0]
 800ad46:	3301      	adds	r3, #1
 800ad48:	b298      	uxth	r0, r3
 800ad4a:	4943      	ldr	r1, [pc, #268]	; (800ae58 <etharp_tmr+0x14c>)
 800ad4c:	687a      	ldr	r2, [r7, #4]
 800ad4e:	4613      	mov	r3, r2
 800ad50:	005b      	lsls	r3, r3, #1
 800ad52:	4413      	add	r3, r2
 800ad54:	00db      	lsls	r3, r3, #3
 800ad56:	440b      	add	r3, r1
 800ad58:	3312      	adds	r3, #18
 800ad5a:	4602      	mov	r2, r0
 800ad5c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ad5e:	493e      	ldr	r1, [pc, #248]	; (800ae58 <etharp_tmr+0x14c>)
 800ad60:	687a      	ldr	r2, [r7, #4]
 800ad62:	4613      	mov	r3, r2
 800ad64:	005b      	lsls	r3, r3, #1
 800ad66:	4413      	add	r3, r2
 800ad68:	00db      	lsls	r3, r3, #3
 800ad6a:	440b      	add	r3, r1
 800ad6c:	3312      	adds	r3, #18
 800ad6e:	881b      	ldrh	r3, [r3, #0]
 800ad70:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800ad74:	d215      	bcs.n	800ada2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ad76:	4938      	ldr	r1, [pc, #224]	; (800ae58 <etharp_tmr+0x14c>)
 800ad78:	687a      	ldr	r2, [r7, #4]
 800ad7a:	4613      	mov	r3, r2
 800ad7c:	005b      	lsls	r3, r3, #1
 800ad7e:	4413      	add	r3, r2
 800ad80:	00db      	lsls	r3, r3, #3
 800ad82:	440b      	add	r3, r1
 800ad84:	3314      	adds	r3, #20
 800ad86:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ad88:	2b01      	cmp	r3, #1
 800ad8a:	d10e      	bne.n	800adaa <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800ad8c:	4932      	ldr	r1, [pc, #200]	; (800ae58 <etharp_tmr+0x14c>)
 800ad8e:	687a      	ldr	r2, [r7, #4]
 800ad90:	4613      	mov	r3, r2
 800ad92:	005b      	lsls	r3, r3, #1
 800ad94:	4413      	add	r3, r2
 800ad96:	00db      	lsls	r3, r3, #3
 800ad98:	440b      	add	r3, r1
 800ad9a:	3312      	adds	r3, #18
 800ad9c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ad9e:	2b04      	cmp	r3, #4
 800ada0:	d903      	bls.n	800adaa <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f7ff ff80 	bl	800aca8 <etharp_free_entry>
 800ada8:	e04a      	b.n	800ae40 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800adaa:	492b      	ldr	r1, [pc, #172]	; (800ae58 <etharp_tmr+0x14c>)
 800adac:	687a      	ldr	r2, [r7, #4]
 800adae:	4613      	mov	r3, r2
 800adb0:	005b      	lsls	r3, r3, #1
 800adb2:	4413      	add	r3, r2
 800adb4:	00db      	lsls	r3, r3, #3
 800adb6:	440b      	add	r3, r1
 800adb8:	3314      	adds	r3, #20
 800adba:	781b      	ldrb	r3, [r3, #0]
 800adbc:	2b03      	cmp	r3, #3
 800adbe:	d10a      	bne.n	800add6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800adc0:	4925      	ldr	r1, [pc, #148]	; (800ae58 <etharp_tmr+0x14c>)
 800adc2:	687a      	ldr	r2, [r7, #4]
 800adc4:	4613      	mov	r3, r2
 800adc6:	005b      	lsls	r3, r3, #1
 800adc8:	4413      	add	r3, r2
 800adca:	00db      	lsls	r3, r3, #3
 800adcc:	440b      	add	r3, r1
 800adce:	3314      	adds	r3, #20
 800add0:	2204      	movs	r2, #4
 800add2:	701a      	strb	r2, [r3, #0]
 800add4:	e034      	b.n	800ae40 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800add6:	4920      	ldr	r1, [pc, #128]	; (800ae58 <etharp_tmr+0x14c>)
 800add8:	687a      	ldr	r2, [r7, #4]
 800adda:	4613      	mov	r3, r2
 800addc:	005b      	lsls	r3, r3, #1
 800adde:	4413      	add	r3, r2
 800ade0:	00db      	lsls	r3, r3, #3
 800ade2:	440b      	add	r3, r1
 800ade4:	3314      	adds	r3, #20
 800ade6:	781b      	ldrb	r3, [r3, #0]
 800ade8:	2b04      	cmp	r3, #4
 800adea:	d10a      	bne.n	800ae02 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800adec:	491a      	ldr	r1, [pc, #104]	; (800ae58 <etharp_tmr+0x14c>)
 800adee:	687a      	ldr	r2, [r7, #4]
 800adf0:	4613      	mov	r3, r2
 800adf2:	005b      	lsls	r3, r3, #1
 800adf4:	4413      	add	r3, r2
 800adf6:	00db      	lsls	r3, r3, #3
 800adf8:	440b      	add	r3, r1
 800adfa:	3314      	adds	r3, #20
 800adfc:	2202      	movs	r2, #2
 800adfe:	701a      	strb	r2, [r3, #0]
 800ae00:	e01e      	b.n	800ae40 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ae02:	4915      	ldr	r1, [pc, #84]	; (800ae58 <etharp_tmr+0x14c>)
 800ae04:	687a      	ldr	r2, [r7, #4]
 800ae06:	4613      	mov	r3, r2
 800ae08:	005b      	lsls	r3, r3, #1
 800ae0a:	4413      	add	r3, r2
 800ae0c:	00db      	lsls	r3, r3, #3
 800ae0e:	440b      	add	r3, r1
 800ae10:	3314      	adds	r3, #20
 800ae12:	781b      	ldrb	r3, [r3, #0]
 800ae14:	2b01      	cmp	r3, #1
 800ae16:	d113      	bne.n	800ae40 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800ae18:	490f      	ldr	r1, [pc, #60]	; (800ae58 <etharp_tmr+0x14c>)
 800ae1a:	687a      	ldr	r2, [r7, #4]
 800ae1c:	4613      	mov	r3, r2
 800ae1e:	005b      	lsls	r3, r3, #1
 800ae20:	4413      	add	r3, r2
 800ae22:	00db      	lsls	r3, r3, #3
 800ae24:	440b      	add	r3, r1
 800ae26:	3308      	adds	r3, #8
 800ae28:	6818      	ldr	r0, [r3, #0]
 800ae2a:	687a      	ldr	r2, [r7, #4]
 800ae2c:	4613      	mov	r3, r2
 800ae2e:	005b      	lsls	r3, r3, #1
 800ae30:	4413      	add	r3, r2
 800ae32:	00db      	lsls	r3, r3, #3
 800ae34:	4a08      	ldr	r2, [pc, #32]	; (800ae58 <etharp_tmr+0x14c>)
 800ae36:	4413      	add	r3, r2
 800ae38:	3304      	adds	r3, #4
 800ae3a:	4619      	mov	r1, r3
 800ae3c:	f000 fe6e 	bl	800bb1c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	3301      	adds	r3, #1
 800ae44:	607b      	str	r3, [r7, #4]
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2b09      	cmp	r3, #9
 800ae4a:	f77f af65 	ble.w	800ad18 <etharp_tmr+0xc>
      }
    }
  }
}
 800ae4e:	bf00      	nop
 800ae50:	bf00      	nop
 800ae52:	3708      	adds	r7, #8
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}
 800ae58:	20008324 	.word	0x20008324

0800ae5c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b08a      	sub	sp, #40	; 0x28
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	60f8      	str	r0, [r7, #12]
 800ae64:	460b      	mov	r3, r1
 800ae66:	607a      	str	r2, [r7, #4]
 800ae68:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800ae6a:	230a      	movs	r3, #10
 800ae6c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ae6e:	230a      	movs	r3, #10
 800ae70:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800ae72:	230a      	movs	r3, #10
 800ae74:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800ae76:	2300      	movs	r3, #0
 800ae78:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800ae7a:	230a      	movs	r3, #10
 800ae7c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	83bb      	strh	r3, [r7, #28]
 800ae82:	2300      	movs	r3, #0
 800ae84:	837b      	strh	r3, [r7, #26]
 800ae86:	2300      	movs	r3, #0
 800ae88:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	843b      	strh	r3, [r7, #32]
 800ae8e:	e0ae      	b.n	800afee <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800ae90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ae94:	49a6      	ldr	r1, [pc, #664]	; (800b130 <etharp_find_entry+0x2d4>)
 800ae96:	4613      	mov	r3, r2
 800ae98:	005b      	lsls	r3, r3, #1
 800ae9a:	4413      	add	r3, r2
 800ae9c:	00db      	lsls	r3, r3, #3
 800ae9e:	440b      	add	r3, r1
 800aea0:	3314      	adds	r3, #20
 800aea2:	781b      	ldrb	r3, [r3, #0]
 800aea4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800aea6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800aeaa:	2b0a      	cmp	r3, #10
 800aeac:	d105      	bne.n	800aeba <etharp_find_entry+0x5e>
 800aeae:	7dfb      	ldrb	r3, [r7, #23]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d102      	bne.n	800aeba <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800aeb4:	8c3b      	ldrh	r3, [r7, #32]
 800aeb6:	847b      	strh	r3, [r7, #34]	; 0x22
 800aeb8:	e095      	b.n	800afe6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800aeba:	7dfb      	ldrb	r3, [r7, #23]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	f000 8092 	beq.w	800afe6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800aec2:	7dfb      	ldrb	r3, [r7, #23]
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	d009      	beq.n	800aedc <etharp_find_entry+0x80>
 800aec8:	7dfb      	ldrb	r3, [r7, #23]
 800aeca:	2b01      	cmp	r3, #1
 800aecc:	d806      	bhi.n	800aedc <etharp_find_entry+0x80>
 800aece:	4b99      	ldr	r3, [pc, #612]	; (800b134 <etharp_find_entry+0x2d8>)
 800aed0:	f240 1223 	movw	r2, #291	; 0x123
 800aed4:	4998      	ldr	r1, [pc, #608]	; (800b138 <etharp_find_entry+0x2dc>)
 800aed6:	4899      	ldr	r0, [pc, #612]	; (800b13c <etharp_find_entry+0x2e0>)
 800aed8:	f002 fa02 	bl	800d2e0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d020      	beq.n	800af24 <etharp_find_entry+0xc8>
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	6819      	ldr	r1, [r3, #0]
 800aee6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800aeea:	4891      	ldr	r0, [pc, #580]	; (800b130 <etharp_find_entry+0x2d4>)
 800aeec:	4613      	mov	r3, r2
 800aeee:	005b      	lsls	r3, r3, #1
 800aef0:	4413      	add	r3, r2
 800aef2:	00db      	lsls	r3, r3, #3
 800aef4:	4403      	add	r3, r0
 800aef6:	3304      	adds	r3, #4
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	4299      	cmp	r1, r3
 800aefc:	d112      	bne.n	800af24 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d00c      	beq.n	800af1e <etharp_find_entry+0xc2>
 800af04:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800af08:	4989      	ldr	r1, [pc, #548]	; (800b130 <etharp_find_entry+0x2d4>)
 800af0a:	4613      	mov	r3, r2
 800af0c:	005b      	lsls	r3, r3, #1
 800af0e:	4413      	add	r3, r2
 800af10:	00db      	lsls	r3, r3, #3
 800af12:	440b      	add	r3, r1
 800af14:	3308      	adds	r3, #8
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	687a      	ldr	r2, [r7, #4]
 800af1a:	429a      	cmp	r2, r3
 800af1c:	d102      	bne.n	800af24 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800af1e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800af22:	e100      	b.n	800b126 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800af24:	7dfb      	ldrb	r3, [r7, #23]
 800af26:	2b01      	cmp	r3, #1
 800af28:	d140      	bne.n	800afac <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800af2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800af2e:	4980      	ldr	r1, [pc, #512]	; (800b130 <etharp_find_entry+0x2d4>)
 800af30:	4613      	mov	r3, r2
 800af32:	005b      	lsls	r3, r3, #1
 800af34:	4413      	add	r3, r2
 800af36:	00db      	lsls	r3, r3, #3
 800af38:	440b      	add	r3, r1
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d01a      	beq.n	800af76 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800af40:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800af44:	497a      	ldr	r1, [pc, #488]	; (800b130 <etharp_find_entry+0x2d4>)
 800af46:	4613      	mov	r3, r2
 800af48:	005b      	lsls	r3, r3, #1
 800af4a:	4413      	add	r3, r2
 800af4c:	00db      	lsls	r3, r3, #3
 800af4e:	440b      	add	r3, r1
 800af50:	3312      	adds	r3, #18
 800af52:	881b      	ldrh	r3, [r3, #0]
 800af54:	8bba      	ldrh	r2, [r7, #28]
 800af56:	429a      	cmp	r2, r3
 800af58:	d845      	bhi.n	800afe6 <etharp_find_entry+0x18a>
            old_queue = i;
 800af5a:	8c3b      	ldrh	r3, [r7, #32]
 800af5c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800af5e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800af62:	4973      	ldr	r1, [pc, #460]	; (800b130 <etharp_find_entry+0x2d4>)
 800af64:	4613      	mov	r3, r2
 800af66:	005b      	lsls	r3, r3, #1
 800af68:	4413      	add	r3, r2
 800af6a:	00db      	lsls	r3, r3, #3
 800af6c:	440b      	add	r3, r1
 800af6e:	3312      	adds	r3, #18
 800af70:	881b      	ldrh	r3, [r3, #0]
 800af72:	83bb      	strh	r3, [r7, #28]
 800af74:	e037      	b.n	800afe6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800af76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800af7a:	496d      	ldr	r1, [pc, #436]	; (800b130 <etharp_find_entry+0x2d4>)
 800af7c:	4613      	mov	r3, r2
 800af7e:	005b      	lsls	r3, r3, #1
 800af80:	4413      	add	r3, r2
 800af82:	00db      	lsls	r3, r3, #3
 800af84:	440b      	add	r3, r1
 800af86:	3312      	adds	r3, #18
 800af88:	881b      	ldrh	r3, [r3, #0]
 800af8a:	8b7a      	ldrh	r2, [r7, #26]
 800af8c:	429a      	cmp	r2, r3
 800af8e:	d82a      	bhi.n	800afe6 <etharp_find_entry+0x18a>
            old_pending = i;
 800af90:	8c3b      	ldrh	r3, [r7, #32]
 800af92:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800af94:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800af98:	4965      	ldr	r1, [pc, #404]	; (800b130 <etharp_find_entry+0x2d4>)
 800af9a:	4613      	mov	r3, r2
 800af9c:	005b      	lsls	r3, r3, #1
 800af9e:	4413      	add	r3, r2
 800afa0:	00db      	lsls	r3, r3, #3
 800afa2:	440b      	add	r3, r1
 800afa4:	3312      	adds	r3, #18
 800afa6:	881b      	ldrh	r3, [r3, #0]
 800afa8:	837b      	strh	r3, [r7, #26]
 800afaa:	e01c      	b.n	800afe6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800afac:	7dfb      	ldrb	r3, [r7, #23]
 800afae:	2b01      	cmp	r3, #1
 800afb0:	d919      	bls.n	800afe6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800afb2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800afb6:	495e      	ldr	r1, [pc, #376]	; (800b130 <etharp_find_entry+0x2d4>)
 800afb8:	4613      	mov	r3, r2
 800afba:	005b      	lsls	r3, r3, #1
 800afbc:	4413      	add	r3, r2
 800afbe:	00db      	lsls	r3, r3, #3
 800afc0:	440b      	add	r3, r1
 800afc2:	3312      	adds	r3, #18
 800afc4:	881b      	ldrh	r3, [r3, #0]
 800afc6:	8b3a      	ldrh	r2, [r7, #24]
 800afc8:	429a      	cmp	r2, r3
 800afca:	d80c      	bhi.n	800afe6 <etharp_find_entry+0x18a>
            old_stable = i;
 800afcc:	8c3b      	ldrh	r3, [r7, #32]
 800afce:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800afd0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800afd4:	4956      	ldr	r1, [pc, #344]	; (800b130 <etharp_find_entry+0x2d4>)
 800afd6:	4613      	mov	r3, r2
 800afd8:	005b      	lsls	r3, r3, #1
 800afda:	4413      	add	r3, r2
 800afdc:	00db      	lsls	r3, r3, #3
 800afde:	440b      	add	r3, r1
 800afe0:	3312      	adds	r3, #18
 800afe2:	881b      	ldrh	r3, [r3, #0]
 800afe4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800afe6:	8c3b      	ldrh	r3, [r7, #32]
 800afe8:	3301      	adds	r3, #1
 800afea:	b29b      	uxth	r3, r3
 800afec:	843b      	strh	r3, [r7, #32]
 800afee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800aff2:	2b09      	cmp	r3, #9
 800aff4:	f77f af4c 	ble.w	800ae90 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800aff8:	7afb      	ldrb	r3, [r7, #11]
 800affa:	f003 0302 	and.w	r3, r3, #2
 800affe:	2b00      	cmp	r3, #0
 800b000:	d108      	bne.n	800b014 <etharp_find_entry+0x1b8>
 800b002:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b006:	2b0a      	cmp	r3, #10
 800b008:	d107      	bne.n	800b01a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800b00a:	7afb      	ldrb	r3, [r7, #11]
 800b00c:	f003 0301 	and.w	r3, r3, #1
 800b010:	2b00      	cmp	r3, #0
 800b012:	d102      	bne.n	800b01a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800b014:	f04f 33ff 	mov.w	r3, #4294967295
 800b018:	e085      	b.n	800b126 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800b01a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b01e:	2b09      	cmp	r3, #9
 800b020:	dc02      	bgt.n	800b028 <etharp_find_entry+0x1cc>
    i = empty;
 800b022:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b024:	843b      	strh	r3, [r7, #32]
 800b026:	e039      	b.n	800b09c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800b028:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800b02c:	2b09      	cmp	r3, #9
 800b02e:	dc14      	bgt.n	800b05a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800b030:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b032:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800b034:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b038:	493d      	ldr	r1, [pc, #244]	; (800b130 <etharp_find_entry+0x2d4>)
 800b03a:	4613      	mov	r3, r2
 800b03c:	005b      	lsls	r3, r3, #1
 800b03e:	4413      	add	r3, r2
 800b040:	00db      	lsls	r3, r3, #3
 800b042:	440b      	add	r3, r1
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d018      	beq.n	800b07c <etharp_find_entry+0x220>
 800b04a:	4b3a      	ldr	r3, [pc, #232]	; (800b134 <etharp_find_entry+0x2d8>)
 800b04c:	f240 126d 	movw	r2, #365	; 0x16d
 800b050:	493b      	ldr	r1, [pc, #236]	; (800b140 <etharp_find_entry+0x2e4>)
 800b052:	483a      	ldr	r0, [pc, #232]	; (800b13c <etharp_find_entry+0x2e0>)
 800b054:	f002 f944 	bl	800d2e0 <iprintf>
 800b058:	e010      	b.n	800b07c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800b05a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800b05e:	2b09      	cmp	r3, #9
 800b060:	dc02      	bgt.n	800b068 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800b062:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b064:	843b      	strh	r3, [r7, #32]
 800b066:	e009      	b.n	800b07c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800b068:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800b06c:	2b09      	cmp	r3, #9
 800b06e:	dc02      	bgt.n	800b076 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800b070:	8bfb      	ldrh	r3, [r7, #30]
 800b072:	843b      	strh	r3, [r7, #32]
 800b074:	e002      	b.n	800b07c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800b076:	f04f 33ff 	mov.w	r3, #4294967295
 800b07a:	e054      	b.n	800b126 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800b07c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b080:	2b09      	cmp	r3, #9
 800b082:	dd06      	ble.n	800b092 <etharp_find_entry+0x236>
 800b084:	4b2b      	ldr	r3, [pc, #172]	; (800b134 <etharp_find_entry+0x2d8>)
 800b086:	f240 127f 	movw	r2, #383	; 0x17f
 800b08a:	492e      	ldr	r1, [pc, #184]	; (800b144 <etharp_find_entry+0x2e8>)
 800b08c:	482b      	ldr	r0, [pc, #172]	; (800b13c <etharp_find_entry+0x2e0>)
 800b08e:	f002 f927 	bl	800d2e0 <iprintf>
    etharp_free_entry(i);
 800b092:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b096:	4618      	mov	r0, r3
 800b098:	f7ff fe06 	bl	800aca8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800b09c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b0a0:	2b09      	cmp	r3, #9
 800b0a2:	dd06      	ble.n	800b0b2 <etharp_find_entry+0x256>
 800b0a4:	4b23      	ldr	r3, [pc, #140]	; (800b134 <etharp_find_entry+0x2d8>)
 800b0a6:	f240 1283 	movw	r2, #387	; 0x183
 800b0aa:	4926      	ldr	r1, [pc, #152]	; (800b144 <etharp_find_entry+0x2e8>)
 800b0ac:	4823      	ldr	r0, [pc, #140]	; (800b13c <etharp_find_entry+0x2e0>)
 800b0ae:	f002 f917 	bl	800d2e0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800b0b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b0b6:	491e      	ldr	r1, [pc, #120]	; (800b130 <etharp_find_entry+0x2d4>)
 800b0b8:	4613      	mov	r3, r2
 800b0ba:	005b      	lsls	r3, r3, #1
 800b0bc:	4413      	add	r3, r2
 800b0be:	00db      	lsls	r3, r3, #3
 800b0c0:	440b      	add	r3, r1
 800b0c2:	3314      	adds	r3, #20
 800b0c4:	781b      	ldrb	r3, [r3, #0]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d006      	beq.n	800b0d8 <etharp_find_entry+0x27c>
 800b0ca:	4b1a      	ldr	r3, [pc, #104]	; (800b134 <etharp_find_entry+0x2d8>)
 800b0cc:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800b0d0:	491d      	ldr	r1, [pc, #116]	; (800b148 <etharp_find_entry+0x2ec>)
 800b0d2:	481a      	ldr	r0, [pc, #104]	; (800b13c <etharp_find_entry+0x2e0>)
 800b0d4:	f002 f904 	bl	800d2e0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d00b      	beq.n	800b0f6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800b0de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	6819      	ldr	r1, [r3, #0]
 800b0e6:	4812      	ldr	r0, [pc, #72]	; (800b130 <etharp_find_entry+0x2d4>)
 800b0e8:	4613      	mov	r3, r2
 800b0ea:	005b      	lsls	r3, r3, #1
 800b0ec:	4413      	add	r3, r2
 800b0ee:	00db      	lsls	r3, r3, #3
 800b0f0:	4403      	add	r3, r0
 800b0f2:	3304      	adds	r3, #4
 800b0f4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800b0f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b0fa:	490d      	ldr	r1, [pc, #52]	; (800b130 <etharp_find_entry+0x2d4>)
 800b0fc:	4613      	mov	r3, r2
 800b0fe:	005b      	lsls	r3, r3, #1
 800b100:	4413      	add	r3, r2
 800b102:	00db      	lsls	r3, r3, #3
 800b104:	440b      	add	r3, r1
 800b106:	3312      	adds	r3, #18
 800b108:	2200      	movs	r2, #0
 800b10a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800b10c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b110:	4907      	ldr	r1, [pc, #28]	; (800b130 <etharp_find_entry+0x2d4>)
 800b112:	4613      	mov	r3, r2
 800b114:	005b      	lsls	r3, r3, #1
 800b116:	4413      	add	r3, r2
 800b118:	00db      	lsls	r3, r3, #3
 800b11a:	440b      	add	r3, r1
 800b11c:	3308      	adds	r3, #8
 800b11e:	687a      	ldr	r2, [r7, #4]
 800b120:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800b122:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800b126:	4618      	mov	r0, r3
 800b128:	3728      	adds	r7, #40	; 0x28
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}
 800b12e:	bf00      	nop
 800b130:	20008324 	.word	0x20008324
 800b134:	08010780 	.word	0x08010780
 800b138:	080107b8 	.word	0x080107b8
 800b13c:	080107f8 	.word	0x080107f8
 800b140:	08010820 	.word	0x08010820
 800b144:	08010838 	.word	0x08010838
 800b148:	0801084c 	.word	0x0801084c

0800b14c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b088      	sub	sp, #32
 800b150:	af02      	add	r7, sp, #8
 800b152:	60f8      	str	r0, [r7, #12]
 800b154:	60b9      	str	r1, [r7, #8]
 800b156:	607a      	str	r2, [r7, #4]
 800b158:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b160:	2b06      	cmp	r3, #6
 800b162:	d006      	beq.n	800b172 <etharp_update_arp_entry+0x26>
 800b164:	4b48      	ldr	r3, [pc, #288]	; (800b288 <etharp_update_arp_entry+0x13c>)
 800b166:	f240 12a9 	movw	r2, #425	; 0x1a9
 800b16a:	4948      	ldr	r1, [pc, #288]	; (800b28c <etharp_update_arp_entry+0x140>)
 800b16c:	4848      	ldr	r0, [pc, #288]	; (800b290 <etharp_update_arp_entry+0x144>)
 800b16e:	f002 f8b7 	bl	800d2e0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800b172:	68bb      	ldr	r3, [r7, #8]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d012      	beq.n	800b19e <etharp_update_arp_entry+0x52>
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d00e      	beq.n	800b19e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	68f9      	ldr	r1, [r7, #12]
 800b186:	4618      	mov	r0, r3
 800b188:	f001 f90a 	bl	800c3a0 <ip4_addr_isbroadcast_u32>
 800b18c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d105      	bne.n	800b19e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800b19a:	2be0      	cmp	r3, #224	; 0xe0
 800b19c:	d102      	bne.n	800b1a4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800b19e:	f06f 030f 	mvn.w	r3, #15
 800b1a2:	e06c      	b.n	800b27e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800b1a4:	78fb      	ldrb	r3, [r7, #3]
 800b1a6:	68fa      	ldr	r2, [r7, #12]
 800b1a8:	4619      	mov	r1, r3
 800b1aa:	68b8      	ldr	r0, [r7, #8]
 800b1ac:	f7ff fe56 	bl	800ae5c <etharp_find_entry>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800b1b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	da02      	bge.n	800b1c2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800b1bc:	8afb      	ldrh	r3, [r7, #22]
 800b1be:	b25b      	sxtb	r3, r3
 800b1c0:	e05d      	b.n	800b27e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800b1c2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b1c6:	4933      	ldr	r1, [pc, #204]	; (800b294 <etharp_update_arp_entry+0x148>)
 800b1c8:	4613      	mov	r3, r2
 800b1ca:	005b      	lsls	r3, r3, #1
 800b1cc:	4413      	add	r3, r2
 800b1ce:	00db      	lsls	r3, r3, #3
 800b1d0:	440b      	add	r3, r1
 800b1d2:	3314      	adds	r3, #20
 800b1d4:	2202      	movs	r2, #2
 800b1d6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800b1d8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b1dc:	492d      	ldr	r1, [pc, #180]	; (800b294 <etharp_update_arp_entry+0x148>)
 800b1de:	4613      	mov	r3, r2
 800b1e0:	005b      	lsls	r3, r3, #1
 800b1e2:	4413      	add	r3, r2
 800b1e4:	00db      	lsls	r3, r3, #3
 800b1e6:	440b      	add	r3, r1
 800b1e8:	3308      	adds	r3, #8
 800b1ea:	68fa      	ldr	r2, [r7, #12]
 800b1ec:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800b1ee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b1f2:	4613      	mov	r3, r2
 800b1f4:	005b      	lsls	r3, r3, #1
 800b1f6:	4413      	add	r3, r2
 800b1f8:	00db      	lsls	r3, r3, #3
 800b1fa:	3308      	adds	r3, #8
 800b1fc:	4a25      	ldr	r2, [pc, #148]	; (800b294 <etharp_update_arp_entry+0x148>)
 800b1fe:	4413      	add	r3, r2
 800b200:	3304      	adds	r3, #4
 800b202:	2206      	movs	r2, #6
 800b204:	6879      	ldr	r1, [r7, #4]
 800b206:	4618      	mov	r0, r3
 800b208:	f002 f854 	bl	800d2b4 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800b20c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b210:	4920      	ldr	r1, [pc, #128]	; (800b294 <etharp_update_arp_entry+0x148>)
 800b212:	4613      	mov	r3, r2
 800b214:	005b      	lsls	r3, r3, #1
 800b216:	4413      	add	r3, r2
 800b218:	00db      	lsls	r3, r3, #3
 800b21a:	440b      	add	r3, r1
 800b21c:	3312      	adds	r3, #18
 800b21e:	2200      	movs	r2, #0
 800b220:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800b222:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b226:	491b      	ldr	r1, [pc, #108]	; (800b294 <etharp_update_arp_entry+0x148>)
 800b228:	4613      	mov	r3, r2
 800b22a:	005b      	lsls	r3, r3, #1
 800b22c:	4413      	add	r3, r2
 800b22e:	00db      	lsls	r3, r3, #3
 800b230:	440b      	add	r3, r1
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d021      	beq.n	800b27c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800b238:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b23c:	4915      	ldr	r1, [pc, #84]	; (800b294 <etharp_update_arp_entry+0x148>)
 800b23e:	4613      	mov	r3, r2
 800b240:	005b      	lsls	r3, r3, #1
 800b242:	4413      	add	r3, r2
 800b244:	00db      	lsls	r3, r3, #3
 800b246:	440b      	add	r3, r1
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800b24c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b250:	4910      	ldr	r1, [pc, #64]	; (800b294 <etharp_update_arp_entry+0x148>)
 800b252:	4613      	mov	r3, r2
 800b254:	005b      	lsls	r3, r3, #1
 800b256:	4413      	add	r3, r2
 800b258:	00db      	lsls	r3, r3, #3
 800b25a:	440b      	add	r3, r1
 800b25c:	2200      	movs	r2, #0
 800b25e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800b266:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b26a:	9300      	str	r3, [sp, #0]
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6939      	ldr	r1, [r7, #16]
 800b270:	68f8      	ldr	r0, [r7, #12]
 800b272:	f001 ffa3 	bl	800d1bc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800b276:	6938      	ldr	r0, [r7, #16]
 800b278:	f7f9 fd7e 	bl	8004d78 <pbuf_free>
  }
  return ERR_OK;
 800b27c:	2300      	movs	r3, #0
}
 800b27e:	4618      	mov	r0, r3
 800b280:	3718      	adds	r7, #24
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}
 800b286:	bf00      	nop
 800b288:	08010780 	.word	0x08010780
 800b28c:	08010878 	.word	0x08010878
 800b290:	080107f8 	.word	0x080107f8
 800b294:	20008324 	.word	0x20008324

0800b298 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b084      	sub	sp, #16
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	60fb      	str	r3, [r7, #12]
 800b2a4:	e01e      	b.n	800b2e4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800b2a6:	4913      	ldr	r1, [pc, #76]	; (800b2f4 <etharp_cleanup_netif+0x5c>)
 800b2a8:	68fa      	ldr	r2, [r7, #12]
 800b2aa:	4613      	mov	r3, r2
 800b2ac:	005b      	lsls	r3, r3, #1
 800b2ae:	4413      	add	r3, r2
 800b2b0:	00db      	lsls	r3, r3, #3
 800b2b2:	440b      	add	r3, r1
 800b2b4:	3314      	adds	r3, #20
 800b2b6:	781b      	ldrb	r3, [r3, #0]
 800b2b8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800b2ba:	7afb      	ldrb	r3, [r7, #11]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d00e      	beq.n	800b2de <etharp_cleanup_netif+0x46>
 800b2c0:	490c      	ldr	r1, [pc, #48]	; (800b2f4 <etharp_cleanup_netif+0x5c>)
 800b2c2:	68fa      	ldr	r2, [r7, #12]
 800b2c4:	4613      	mov	r3, r2
 800b2c6:	005b      	lsls	r3, r3, #1
 800b2c8:	4413      	add	r3, r2
 800b2ca:	00db      	lsls	r3, r3, #3
 800b2cc:	440b      	add	r3, r1
 800b2ce:	3308      	adds	r3, #8
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	687a      	ldr	r2, [r7, #4]
 800b2d4:	429a      	cmp	r2, r3
 800b2d6:	d102      	bne.n	800b2de <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800b2d8:	68f8      	ldr	r0, [r7, #12]
 800b2da:	f7ff fce5 	bl	800aca8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	3301      	adds	r3, #1
 800b2e2:	60fb      	str	r3, [r7, #12]
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	2b09      	cmp	r3, #9
 800b2e8:	dddd      	ble.n	800b2a6 <etharp_cleanup_netif+0xe>
    }
  }
}
 800b2ea:	bf00      	nop
 800b2ec:	bf00      	nop
 800b2ee:	3710      	adds	r7, #16
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}
 800b2f4:	20008324 	.word	0x20008324

0800b2f8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800b2f8:	b5b0      	push	{r4, r5, r7, lr}
 800b2fa:	b08a      	sub	sp, #40	; 0x28
 800b2fc:	af04      	add	r7, sp, #16
 800b2fe:	6078      	str	r0, [r7, #4]
 800b300:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d107      	bne.n	800b318 <etharp_input+0x20>
 800b308:	4b3d      	ldr	r3, [pc, #244]	; (800b400 <etharp_input+0x108>)
 800b30a:	f240 228a 	movw	r2, #650	; 0x28a
 800b30e:	493d      	ldr	r1, [pc, #244]	; (800b404 <etharp_input+0x10c>)
 800b310:	483d      	ldr	r0, [pc, #244]	; (800b408 <etharp_input+0x110>)
 800b312:	f001 ffe5 	bl	800d2e0 <iprintf>
 800b316:	e06f      	b.n	800b3f8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	685b      	ldr	r3, [r3, #4]
 800b31c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800b31e:	693b      	ldr	r3, [r7, #16]
 800b320:	881b      	ldrh	r3, [r3, #0]
 800b322:	b29b      	uxth	r3, r3
 800b324:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b328:	d10c      	bne.n	800b344 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800b32a:	693b      	ldr	r3, [r7, #16]
 800b32c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800b32e:	2b06      	cmp	r3, #6
 800b330:	d108      	bne.n	800b344 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800b336:	2b04      	cmp	r3, #4
 800b338:	d104      	bne.n	800b344 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800b33a:	693b      	ldr	r3, [r7, #16]
 800b33c:	885b      	ldrh	r3, [r3, #2]
 800b33e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800b340:	2b08      	cmp	r3, #8
 800b342:	d003      	beq.n	800b34c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f7f9 fd17 	bl	8004d78 <pbuf_free>
    return;
 800b34a:	e055      	b.n	800b3f8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	330e      	adds	r3, #14
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	3318      	adds	r3, #24
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	3304      	adds	r3, #4
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d102      	bne.n	800b36c <etharp_input+0x74>
    for_us = 0;
 800b366:	2300      	movs	r3, #0
 800b368:	75fb      	strb	r3, [r7, #23]
 800b36a:	e009      	b.n	800b380 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800b36c:	68ba      	ldr	r2, [r7, #8]
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	3304      	adds	r3, #4
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	429a      	cmp	r2, r3
 800b376:	bf0c      	ite	eq
 800b378:	2301      	moveq	r3, #1
 800b37a:	2300      	movne	r3, #0
 800b37c:	b2db      	uxtb	r3, r3
 800b37e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	f103 0208 	add.w	r2, r3, #8
 800b386:	7dfb      	ldrb	r3, [r7, #23]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d001      	beq.n	800b390 <etharp_input+0x98>
 800b38c:	2301      	movs	r3, #1
 800b38e:	e000      	b.n	800b392 <etharp_input+0x9a>
 800b390:	2302      	movs	r3, #2
 800b392:	f107 010c 	add.w	r1, r7, #12
 800b396:	6838      	ldr	r0, [r7, #0]
 800b398:	f7ff fed8 	bl	800b14c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800b39c:	693b      	ldr	r3, [r7, #16]
 800b39e:	88db      	ldrh	r3, [r3, #6]
 800b3a0:	b29b      	uxth	r3, r3
 800b3a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3a6:	d003      	beq.n	800b3b0 <etharp_input+0xb8>
 800b3a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3ac:	d01e      	beq.n	800b3ec <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800b3ae:	e020      	b.n	800b3f2 <etharp_input+0xfa>
      if (for_us) {
 800b3b0:	7dfb      	ldrb	r3, [r7, #23]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d01c      	beq.n	800b3f0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800b3cc:	693a      	ldr	r2, [r7, #16]
 800b3ce:	3208      	adds	r2, #8
        etharp_raw(netif,
 800b3d0:	2102      	movs	r1, #2
 800b3d2:	9103      	str	r1, [sp, #12]
 800b3d4:	f107 010c 	add.w	r1, r7, #12
 800b3d8:	9102      	str	r1, [sp, #8]
 800b3da:	9201      	str	r2, [sp, #4]
 800b3dc:	9300      	str	r3, [sp, #0]
 800b3de:	462b      	mov	r3, r5
 800b3e0:	4622      	mov	r2, r4
 800b3e2:	4601      	mov	r1, r0
 800b3e4:	6838      	ldr	r0, [r7, #0]
 800b3e6:	f000 faeb 	bl	800b9c0 <etharp_raw>
      break;
 800b3ea:	e001      	b.n	800b3f0 <etharp_input+0xf8>
      break;
 800b3ec:	bf00      	nop
 800b3ee:	e000      	b.n	800b3f2 <etharp_input+0xfa>
      break;
 800b3f0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f7f9 fcc0 	bl	8004d78 <pbuf_free>
}
 800b3f8:	3718      	adds	r7, #24
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bdb0      	pop	{r4, r5, r7, pc}
 800b3fe:	bf00      	nop
 800b400:	08010780 	.word	0x08010780
 800b404:	080108d0 	.word	0x080108d0
 800b408:	080107f8 	.word	0x080107f8

0800b40c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b086      	sub	sp, #24
 800b410:	af02      	add	r7, sp, #8
 800b412:	60f8      	str	r0, [r7, #12]
 800b414:	60b9      	str	r1, [r7, #8]
 800b416:	4613      	mov	r3, r2
 800b418:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800b41a:	79fa      	ldrb	r2, [r7, #7]
 800b41c:	4944      	ldr	r1, [pc, #272]	; (800b530 <etharp_output_to_arp_index+0x124>)
 800b41e:	4613      	mov	r3, r2
 800b420:	005b      	lsls	r3, r3, #1
 800b422:	4413      	add	r3, r2
 800b424:	00db      	lsls	r3, r3, #3
 800b426:	440b      	add	r3, r1
 800b428:	3314      	adds	r3, #20
 800b42a:	781b      	ldrb	r3, [r3, #0]
 800b42c:	2b01      	cmp	r3, #1
 800b42e:	d806      	bhi.n	800b43e <etharp_output_to_arp_index+0x32>
 800b430:	4b40      	ldr	r3, [pc, #256]	; (800b534 <etharp_output_to_arp_index+0x128>)
 800b432:	f240 22ee 	movw	r2, #750	; 0x2ee
 800b436:	4940      	ldr	r1, [pc, #256]	; (800b538 <etharp_output_to_arp_index+0x12c>)
 800b438:	4840      	ldr	r0, [pc, #256]	; (800b53c <etharp_output_to_arp_index+0x130>)
 800b43a:	f001 ff51 	bl	800d2e0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800b43e:	79fa      	ldrb	r2, [r7, #7]
 800b440:	493b      	ldr	r1, [pc, #236]	; (800b530 <etharp_output_to_arp_index+0x124>)
 800b442:	4613      	mov	r3, r2
 800b444:	005b      	lsls	r3, r3, #1
 800b446:	4413      	add	r3, r2
 800b448:	00db      	lsls	r3, r3, #3
 800b44a:	440b      	add	r3, r1
 800b44c:	3314      	adds	r3, #20
 800b44e:	781b      	ldrb	r3, [r3, #0]
 800b450:	2b02      	cmp	r3, #2
 800b452:	d153      	bne.n	800b4fc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800b454:	79fa      	ldrb	r2, [r7, #7]
 800b456:	4936      	ldr	r1, [pc, #216]	; (800b530 <etharp_output_to_arp_index+0x124>)
 800b458:	4613      	mov	r3, r2
 800b45a:	005b      	lsls	r3, r3, #1
 800b45c:	4413      	add	r3, r2
 800b45e:	00db      	lsls	r3, r3, #3
 800b460:	440b      	add	r3, r1
 800b462:	3312      	adds	r3, #18
 800b464:	881b      	ldrh	r3, [r3, #0]
 800b466:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800b46a:	d919      	bls.n	800b4a0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800b46c:	79fa      	ldrb	r2, [r7, #7]
 800b46e:	4613      	mov	r3, r2
 800b470:	005b      	lsls	r3, r3, #1
 800b472:	4413      	add	r3, r2
 800b474:	00db      	lsls	r3, r3, #3
 800b476:	4a2e      	ldr	r2, [pc, #184]	; (800b530 <etharp_output_to_arp_index+0x124>)
 800b478:	4413      	add	r3, r2
 800b47a:	3304      	adds	r3, #4
 800b47c:	4619      	mov	r1, r3
 800b47e:	68f8      	ldr	r0, [r7, #12]
 800b480:	f000 fb4c 	bl	800bb1c <etharp_request>
 800b484:	4603      	mov	r3, r0
 800b486:	2b00      	cmp	r3, #0
 800b488:	d138      	bne.n	800b4fc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800b48a:	79fa      	ldrb	r2, [r7, #7]
 800b48c:	4928      	ldr	r1, [pc, #160]	; (800b530 <etharp_output_to_arp_index+0x124>)
 800b48e:	4613      	mov	r3, r2
 800b490:	005b      	lsls	r3, r3, #1
 800b492:	4413      	add	r3, r2
 800b494:	00db      	lsls	r3, r3, #3
 800b496:	440b      	add	r3, r1
 800b498:	3314      	adds	r3, #20
 800b49a:	2203      	movs	r2, #3
 800b49c:	701a      	strb	r2, [r3, #0]
 800b49e:	e02d      	b.n	800b4fc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800b4a0:	79fa      	ldrb	r2, [r7, #7]
 800b4a2:	4923      	ldr	r1, [pc, #140]	; (800b530 <etharp_output_to_arp_index+0x124>)
 800b4a4:	4613      	mov	r3, r2
 800b4a6:	005b      	lsls	r3, r3, #1
 800b4a8:	4413      	add	r3, r2
 800b4aa:	00db      	lsls	r3, r3, #3
 800b4ac:	440b      	add	r3, r1
 800b4ae:	3312      	adds	r3, #18
 800b4b0:	881b      	ldrh	r3, [r3, #0]
 800b4b2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800b4b6:	d321      	bcc.n	800b4fc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800b4b8:	79fa      	ldrb	r2, [r7, #7]
 800b4ba:	4613      	mov	r3, r2
 800b4bc:	005b      	lsls	r3, r3, #1
 800b4be:	4413      	add	r3, r2
 800b4c0:	00db      	lsls	r3, r3, #3
 800b4c2:	4a1b      	ldr	r2, [pc, #108]	; (800b530 <etharp_output_to_arp_index+0x124>)
 800b4c4:	4413      	add	r3, r2
 800b4c6:	1d19      	adds	r1, r3, #4
 800b4c8:	79fa      	ldrb	r2, [r7, #7]
 800b4ca:	4613      	mov	r3, r2
 800b4cc:	005b      	lsls	r3, r3, #1
 800b4ce:	4413      	add	r3, r2
 800b4d0:	00db      	lsls	r3, r3, #3
 800b4d2:	3308      	adds	r3, #8
 800b4d4:	4a16      	ldr	r2, [pc, #88]	; (800b530 <etharp_output_to_arp_index+0x124>)
 800b4d6:	4413      	add	r3, r2
 800b4d8:	3304      	adds	r3, #4
 800b4da:	461a      	mov	r2, r3
 800b4dc:	68f8      	ldr	r0, [r7, #12]
 800b4de:	f000 fafb 	bl	800bad8 <etharp_request_dst>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d109      	bne.n	800b4fc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800b4e8:	79fa      	ldrb	r2, [r7, #7]
 800b4ea:	4911      	ldr	r1, [pc, #68]	; (800b530 <etharp_output_to_arp_index+0x124>)
 800b4ec:	4613      	mov	r3, r2
 800b4ee:	005b      	lsls	r3, r3, #1
 800b4f0:	4413      	add	r3, r2
 800b4f2:	00db      	lsls	r3, r3, #3
 800b4f4:	440b      	add	r3, r1
 800b4f6:	3314      	adds	r3, #20
 800b4f8:	2203      	movs	r2, #3
 800b4fa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800b502:	79fa      	ldrb	r2, [r7, #7]
 800b504:	4613      	mov	r3, r2
 800b506:	005b      	lsls	r3, r3, #1
 800b508:	4413      	add	r3, r2
 800b50a:	00db      	lsls	r3, r3, #3
 800b50c:	3308      	adds	r3, #8
 800b50e:	4a08      	ldr	r2, [pc, #32]	; (800b530 <etharp_output_to_arp_index+0x124>)
 800b510:	4413      	add	r3, r2
 800b512:	3304      	adds	r3, #4
 800b514:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b518:	9200      	str	r2, [sp, #0]
 800b51a:	460a      	mov	r2, r1
 800b51c:	68b9      	ldr	r1, [r7, #8]
 800b51e:	68f8      	ldr	r0, [r7, #12]
 800b520:	f001 fe4c 	bl	800d1bc <ethernet_output>
 800b524:	4603      	mov	r3, r0
}
 800b526:	4618      	mov	r0, r3
 800b528:	3710      	adds	r7, #16
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}
 800b52e:	bf00      	nop
 800b530:	20008324 	.word	0x20008324
 800b534:	08010780 	.word	0x08010780
 800b538:	080108f0 	.word	0x080108f0
 800b53c:	080107f8 	.word	0x080107f8

0800b540 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b08a      	sub	sp, #40	; 0x28
 800b544:	af02      	add	r7, sp, #8
 800b546:	60f8      	str	r0, [r7, #12]
 800b548:	60b9      	str	r1, [r7, #8]
 800b54a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d106      	bne.n	800b564 <etharp_output+0x24>
 800b556:	4b73      	ldr	r3, [pc, #460]	; (800b724 <etharp_output+0x1e4>)
 800b558:	f240 321e 	movw	r2, #798	; 0x31e
 800b55c:	4972      	ldr	r1, [pc, #456]	; (800b728 <etharp_output+0x1e8>)
 800b55e:	4873      	ldr	r0, [pc, #460]	; (800b72c <etharp_output+0x1ec>)
 800b560:	f001 febe 	bl	800d2e0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d106      	bne.n	800b578 <etharp_output+0x38>
 800b56a:	4b6e      	ldr	r3, [pc, #440]	; (800b724 <etharp_output+0x1e4>)
 800b56c:	f240 321f 	movw	r2, #799	; 0x31f
 800b570:	496f      	ldr	r1, [pc, #444]	; (800b730 <etharp_output+0x1f0>)
 800b572:	486e      	ldr	r0, [pc, #440]	; (800b72c <etharp_output+0x1ec>)
 800b574:	f001 feb4 	bl	800d2e0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d106      	bne.n	800b58c <etharp_output+0x4c>
 800b57e:	4b69      	ldr	r3, [pc, #420]	; (800b724 <etharp_output+0x1e4>)
 800b580:	f44f 7248 	mov.w	r2, #800	; 0x320
 800b584:	496b      	ldr	r1, [pc, #428]	; (800b734 <etharp_output+0x1f4>)
 800b586:	4869      	ldr	r0, [pc, #420]	; (800b72c <etharp_output+0x1ec>)
 800b588:	f001 feaa 	bl	800d2e0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	68f9      	ldr	r1, [r7, #12]
 800b592:	4618      	mov	r0, r3
 800b594:	f000 ff04 	bl	800c3a0 <ip4_addr_isbroadcast_u32>
 800b598:	4603      	mov	r3, r0
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d002      	beq.n	800b5a4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800b59e:	4b66      	ldr	r3, [pc, #408]	; (800b738 <etharp_output+0x1f8>)
 800b5a0:	61fb      	str	r3, [r7, #28]
 800b5a2:	e0af      	b.n	800b704 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b5ac:	2be0      	cmp	r3, #224	; 0xe0
 800b5ae:	d118      	bne.n	800b5e2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800b5b8:	235e      	movs	r3, #94	; 0x5e
 800b5ba:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	3301      	adds	r3, #1
 800b5c0:	781b      	ldrb	r3, [r3, #0]
 800b5c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5c6:	b2db      	uxtb	r3, r3
 800b5c8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	3302      	adds	r3, #2
 800b5ce:	781b      	ldrb	r3, [r3, #0]
 800b5d0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	3303      	adds	r3, #3
 800b5d6:	781b      	ldrb	r3, [r3, #0]
 800b5d8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800b5da:	f107 0310 	add.w	r3, r7, #16
 800b5de:	61fb      	str	r3, [r7, #28]
 800b5e0:	e090      	b.n	800b704 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681a      	ldr	r2, [r3, #0]
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	3304      	adds	r3, #4
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	405a      	eors	r2, r3
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	3308      	adds	r3, #8
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	4013      	ands	r3, r2
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d012      	beq.n	800b620 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800b600:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800b604:	4293      	cmp	r3, r2
 800b606:	d00b      	beq.n	800b620 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	330c      	adds	r3, #12
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d003      	beq.n	800b61a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	330c      	adds	r3, #12
 800b616:	61bb      	str	r3, [r7, #24]
 800b618:	e002      	b.n	800b620 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800b61a:	f06f 0303 	mvn.w	r3, #3
 800b61e:	e07d      	b.n	800b71c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800b620:	4b46      	ldr	r3, [pc, #280]	; (800b73c <etharp_output+0x1fc>)
 800b622:	781b      	ldrb	r3, [r3, #0]
 800b624:	4619      	mov	r1, r3
 800b626:	4a46      	ldr	r2, [pc, #280]	; (800b740 <etharp_output+0x200>)
 800b628:	460b      	mov	r3, r1
 800b62a:	005b      	lsls	r3, r3, #1
 800b62c:	440b      	add	r3, r1
 800b62e:	00db      	lsls	r3, r3, #3
 800b630:	4413      	add	r3, r2
 800b632:	3314      	adds	r3, #20
 800b634:	781b      	ldrb	r3, [r3, #0]
 800b636:	2b01      	cmp	r3, #1
 800b638:	d925      	bls.n	800b686 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800b63a:	4b40      	ldr	r3, [pc, #256]	; (800b73c <etharp_output+0x1fc>)
 800b63c:	781b      	ldrb	r3, [r3, #0]
 800b63e:	4619      	mov	r1, r3
 800b640:	4a3f      	ldr	r2, [pc, #252]	; (800b740 <etharp_output+0x200>)
 800b642:	460b      	mov	r3, r1
 800b644:	005b      	lsls	r3, r3, #1
 800b646:	440b      	add	r3, r1
 800b648:	00db      	lsls	r3, r3, #3
 800b64a:	4413      	add	r3, r2
 800b64c:	3308      	adds	r3, #8
 800b64e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800b650:	68fa      	ldr	r2, [r7, #12]
 800b652:	429a      	cmp	r2, r3
 800b654:	d117      	bne.n	800b686 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800b656:	69bb      	ldr	r3, [r7, #24]
 800b658:	681a      	ldr	r2, [r3, #0]
 800b65a:	4b38      	ldr	r3, [pc, #224]	; (800b73c <etharp_output+0x1fc>)
 800b65c:	781b      	ldrb	r3, [r3, #0]
 800b65e:	4618      	mov	r0, r3
 800b660:	4937      	ldr	r1, [pc, #220]	; (800b740 <etharp_output+0x200>)
 800b662:	4603      	mov	r3, r0
 800b664:	005b      	lsls	r3, r3, #1
 800b666:	4403      	add	r3, r0
 800b668:	00db      	lsls	r3, r3, #3
 800b66a:	440b      	add	r3, r1
 800b66c:	3304      	adds	r3, #4
 800b66e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800b670:	429a      	cmp	r2, r3
 800b672:	d108      	bne.n	800b686 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800b674:	4b31      	ldr	r3, [pc, #196]	; (800b73c <etharp_output+0x1fc>)
 800b676:	781b      	ldrb	r3, [r3, #0]
 800b678:	461a      	mov	r2, r3
 800b67a:	68b9      	ldr	r1, [r7, #8]
 800b67c:	68f8      	ldr	r0, [r7, #12]
 800b67e:	f7ff fec5 	bl	800b40c <etharp_output_to_arp_index>
 800b682:	4603      	mov	r3, r0
 800b684:	e04a      	b.n	800b71c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800b686:	2300      	movs	r3, #0
 800b688:	75fb      	strb	r3, [r7, #23]
 800b68a:	e031      	b.n	800b6f0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800b68c:	7dfa      	ldrb	r2, [r7, #23]
 800b68e:	492c      	ldr	r1, [pc, #176]	; (800b740 <etharp_output+0x200>)
 800b690:	4613      	mov	r3, r2
 800b692:	005b      	lsls	r3, r3, #1
 800b694:	4413      	add	r3, r2
 800b696:	00db      	lsls	r3, r3, #3
 800b698:	440b      	add	r3, r1
 800b69a:	3314      	adds	r3, #20
 800b69c:	781b      	ldrb	r3, [r3, #0]
 800b69e:	2b01      	cmp	r3, #1
 800b6a0:	d923      	bls.n	800b6ea <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800b6a2:	7dfa      	ldrb	r2, [r7, #23]
 800b6a4:	4926      	ldr	r1, [pc, #152]	; (800b740 <etharp_output+0x200>)
 800b6a6:	4613      	mov	r3, r2
 800b6a8:	005b      	lsls	r3, r3, #1
 800b6aa:	4413      	add	r3, r2
 800b6ac:	00db      	lsls	r3, r3, #3
 800b6ae:	440b      	add	r3, r1
 800b6b0:	3308      	adds	r3, #8
 800b6b2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800b6b4:	68fa      	ldr	r2, [r7, #12]
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	d117      	bne.n	800b6ea <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800b6ba:	69bb      	ldr	r3, [r7, #24]
 800b6bc:	6819      	ldr	r1, [r3, #0]
 800b6be:	7dfa      	ldrb	r2, [r7, #23]
 800b6c0:	481f      	ldr	r0, [pc, #124]	; (800b740 <etharp_output+0x200>)
 800b6c2:	4613      	mov	r3, r2
 800b6c4:	005b      	lsls	r3, r3, #1
 800b6c6:	4413      	add	r3, r2
 800b6c8:	00db      	lsls	r3, r3, #3
 800b6ca:	4403      	add	r3, r0
 800b6cc:	3304      	adds	r3, #4
 800b6ce:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800b6d0:	4299      	cmp	r1, r3
 800b6d2:	d10a      	bne.n	800b6ea <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800b6d4:	4a19      	ldr	r2, [pc, #100]	; (800b73c <etharp_output+0x1fc>)
 800b6d6:	7dfb      	ldrb	r3, [r7, #23]
 800b6d8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800b6da:	7dfb      	ldrb	r3, [r7, #23]
 800b6dc:	461a      	mov	r2, r3
 800b6de:	68b9      	ldr	r1, [r7, #8]
 800b6e0:	68f8      	ldr	r0, [r7, #12]
 800b6e2:	f7ff fe93 	bl	800b40c <etharp_output_to_arp_index>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	e018      	b.n	800b71c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800b6ea:	7dfb      	ldrb	r3, [r7, #23]
 800b6ec:	3301      	adds	r3, #1
 800b6ee:	75fb      	strb	r3, [r7, #23]
 800b6f0:	7dfb      	ldrb	r3, [r7, #23]
 800b6f2:	2b09      	cmp	r3, #9
 800b6f4:	d9ca      	bls.n	800b68c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800b6f6:	68ba      	ldr	r2, [r7, #8]
 800b6f8:	69b9      	ldr	r1, [r7, #24]
 800b6fa:	68f8      	ldr	r0, [r7, #12]
 800b6fc:	f000 f822 	bl	800b744 <etharp_query>
 800b700:	4603      	mov	r3, r0
 800b702:	e00b      	b.n	800b71c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800b70a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b70e:	9300      	str	r3, [sp, #0]
 800b710:	69fb      	ldr	r3, [r7, #28]
 800b712:	68b9      	ldr	r1, [r7, #8]
 800b714:	68f8      	ldr	r0, [r7, #12]
 800b716:	f001 fd51 	bl	800d1bc <ethernet_output>
 800b71a:	4603      	mov	r3, r0
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3720      	adds	r7, #32
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}
 800b724:	08010780 	.word	0x08010780
 800b728:	080108d0 	.word	0x080108d0
 800b72c:	080107f8 	.word	0x080107f8
 800b730:	08010920 	.word	0x08010920
 800b734:	080108c0 	.word	0x080108c0
 800b738:	08010f44 	.word	0x08010f44
 800b73c:	20008414 	.word	0x20008414
 800b740:	20008324 	.word	0x20008324

0800b744 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b08c      	sub	sp, #48	; 0x30
 800b748:	af02      	add	r7, sp, #8
 800b74a:	60f8      	str	r0, [r7, #12]
 800b74c:	60b9      	str	r1, [r7, #8]
 800b74e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	3326      	adds	r3, #38	; 0x26
 800b754:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800b756:	23ff      	movs	r3, #255	; 0xff
 800b758:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800b75c:	2300      	movs	r3, #0
 800b75e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	68f9      	ldr	r1, [r7, #12]
 800b766:	4618      	mov	r0, r3
 800b768:	f000 fe1a 	bl	800c3a0 <ip4_addr_isbroadcast_u32>
 800b76c:	4603      	mov	r3, r0
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d10c      	bne.n	800b78c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800b77a:	2be0      	cmp	r3, #224	; 0xe0
 800b77c:	d006      	beq.n	800b78c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d003      	beq.n	800b78c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d102      	bne.n	800b792 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800b78c:	f06f 030f 	mvn.w	r3, #15
 800b790:	e101      	b.n	800b996 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800b792:	68fa      	ldr	r2, [r7, #12]
 800b794:	2101      	movs	r1, #1
 800b796:	68b8      	ldr	r0, [r7, #8]
 800b798:	f7ff fb60 	bl	800ae5c <etharp_find_entry>
 800b79c:	4603      	mov	r3, r0
 800b79e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800b7a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	da02      	bge.n	800b7ae <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800b7a8:	8a7b      	ldrh	r3, [r7, #18]
 800b7aa:	b25b      	sxtb	r3, r3
 800b7ac:	e0f3      	b.n	800b996 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800b7ae:	8a7b      	ldrh	r3, [r7, #18]
 800b7b0:	2b7e      	cmp	r3, #126	; 0x7e
 800b7b2:	d906      	bls.n	800b7c2 <etharp_query+0x7e>
 800b7b4:	4b7a      	ldr	r3, [pc, #488]	; (800b9a0 <etharp_query+0x25c>)
 800b7b6:	f240 32c1 	movw	r2, #961	; 0x3c1
 800b7ba:	497a      	ldr	r1, [pc, #488]	; (800b9a4 <etharp_query+0x260>)
 800b7bc:	487a      	ldr	r0, [pc, #488]	; (800b9a8 <etharp_query+0x264>)
 800b7be:	f001 fd8f 	bl	800d2e0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800b7c2:	8a7b      	ldrh	r3, [r7, #18]
 800b7c4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800b7c6:	7c7a      	ldrb	r2, [r7, #17]
 800b7c8:	4978      	ldr	r1, [pc, #480]	; (800b9ac <etharp_query+0x268>)
 800b7ca:	4613      	mov	r3, r2
 800b7cc:	005b      	lsls	r3, r3, #1
 800b7ce:	4413      	add	r3, r2
 800b7d0:	00db      	lsls	r3, r3, #3
 800b7d2:	440b      	add	r3, r1
 800b7d4:	3314      	adds	r3, #20
 800b7d6:	781b      	ldrb	r3, [r3, #0]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d115      	bne.n	800b808 <etharp_query+0xc4>
    is_new_entry = 1;
 800b7dc:	2301      	movs	r3, #1
 800b7de:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800b7e0:	7c7a      	ldrb	r2, [r7, #17]
 800b7e2:	4972      	ldr	r1, [pc, #456]	; (800b9ac <etharp_query+0x268>)
 800b7e4:	4613      	mov	r3, r2
 800b7e6:	005b      	lsls	r3, r3, #1
 800b7e8:	4413      	add	r3, r2
 800b7ea:	00db      	lsls	r3, r3, #3
 800b7ec:	440b      	add	r3, r1
 800b7ee:	3314      	adds	r3, #20
 800b7f0:	2201      	movs	r2, #1
 800b7f2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800b7f4:	7c7a      	ldrb	r2, [r7, #17]
 800b7f6:	496d      	ldr	r1, [pc, #436]	; (800b9ac <etharp_query+0x268>)
 800b7f8:	4613      	mov	r3, r2
 800b7fa:	005b      	lsls	r3, r3, #1
 800b7fc:	4413      	add	r3, r2
 800b7fe:	00db      	lsls	r3, r3, #3
 800b800:	440b      	add	r3, r1
 800b802:	3308      	adds	r3, #8
 800b804:	68fa      	ldr	r2, [r7, #12]
 800b806:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800b808:	7c7a      	ldrb	r2, [r7, #17]
 800b80a:	4968      	ldr	r1, [pc, #416]	; (800b9ac <etharp_query+0x268>)
 800b80c:	4613      	mov	r3, r2
 800b80e:	005b      	lsls	r3, r3, #1
 800b810:	4413      	add	r3, r2
 800b812:	00db      	lsls	r3, r3, #3
 800b814:	440b      	add	r3, r1
 800b816:	3314      	adds	r3, #20
 800b818:	781b      	ldrb	r3, [r3, #0]
 800b81a:	2b01      	cmp	r3, #1
 800b81c:	d011      	beq.n	800b842 <etharp_query+0xfe>
 800b81e:	7c7a      	ldrb	r2, [r7, #17]
 800b820:	4962      	ldr	r1, [pc, #392]	; (800b9ac <etharp_query+0x268>)
 800b822:	4613      	mov	r3, r2
 800b824:	005b      	lsls	r3, r3, #1
 800b826:	4413      	add	r3, r2
 800b828:	00db      	lsls	r3, r3, #3
 800b82a:	440b      	add	r3, r1
 800b82c:	3314      	adds	r3, #20
 800b82e:	781b      	ldrb	r3, [r3, #0]
 800b830:	2b01      	cmp	r3, #1
 800b832:	d806      	bhi.n	800b842 <etharp_query+0xfe>
 800b834:	4b5a      	ldr	r3, [pc, #360]	; (800b9a0 <etharp_query+0x25c>)
 800b836:	f240 32cd 	movw	r2, #973	; 0x3cd
 800b83a:	495d      	ldr	r1, [pc, #372]	; (800b9b0 <etharp_query+0x26c>)
 800b83c:	485a      	ldr	r0, [pc, #360]	; (800b9a8 <etharp_query+0x264>)
 800b83e:	f001 fd4f 	bl	800d2e0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800b842:	6a3b      	ldr	r3, [r7, #32]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d102      	bne.n	800b84e <etharp_query+0x10a>
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d10c      	bne.n	800b868 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800b84e:	68b9      	ldr	r1, [r7, #8]
 800b850:	68f8      	ldr	r0, [r7, #12]
 800b852:	f000 f963 	bl	800bb1c <etharp_request>
 800b856:	4603      	mov	r3, r0
 800b858:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d102      	bne.n	800b868 <etharp_query+0x124>
      return result;
 800b862:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b866:	e096      	b.n	800b996 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d106      	bne.n	800b87c <etharp_query+0x138>
 800b86e:	4b4c      	ldr	r3, [pc, #304]	; (800b9a0 <etharp_query+0x25c>)
 800b870:	f240 32e1 	movw	r2, #993	; 0x3e1
 800b874:	494f      	ldr	r1, [pc, #316]	; (800b9b4 <etharp_query+0x270>)
 800b876:	484c      	ldr	r0, [pc, #304]	; (800b9a8 <etharp_query+0x264>)
 800b878:	f001 fd32 	bl	800d2e0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800b87c:	7c7a      	ldrb	r2, [r7, #17]
 800b87e:	494b      	ldr	r1, [pc, #300]	; (800b9ac <etharp_query+0x268>)
 800b880:	4613      	mov	r3, r2
 800b882:	005b      	lsls	r3, r3, #1
 800b884:	4413      	add	r3, r2
 800b886:	00db      	lsls	r3, r3, #3
 800b888:	440b      	add	r3, r1
 800b88a:	3314      	adds	r3, #20
 800b88c:	781b      	ldrb	r3, [r3, #0]
 800b88e:	2b01      	cmp	r3, #1
 800b890:	d917      	bls.n	800b8c2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800b892:	4a49      	ldr	r2, [pc, #292]	; (800b9b8 <etharp_query+0x274>)
 800b894:	7c7b      	ldrb	r3, [r7, #17]
 800b896:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800b898:	7c7a      	ldrb	r2, [r7, #17]
 800b89a:	4613      	mov	r3, r2
 800b89c:	005b      	lsls	r3, r3, #1
 800b89e:	4413      	add	r3, r2
 800b8a0:	00db      	lsls	r3, r3, #3
 800b8a2:	3308      	adds	r3, #8
 800b8a4:	4a41      	ldr	r2, [pc, #260]	; (800b9ac <etharp_query+0x268>)
 800b8a6:	4413      	add	r3, r2
 800b8a8:	3304      	adds	r3, #4
 800b8aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b8ae:	9200      	str	r2, [sp, #0]
 800b8b0:	697a      	ldr	r2, [r7, #20]
 800b8b2:	6879      	ldr	r1, [r7, #4]
 800b8b4:	68f8      	ldr	r0, [r7, #12]
 800b8b6:	f001 fc81 	bl	800d1bc <ethernet_output>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b8c0:	e067      	b.n	800b992 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800b8c2:	7c7a      	ldrb	r2, [r7, #17]
 800b8c4:	4939      	ldr	r1, [pc, #228]	; (800b9ac <etharp_query+0x268>)
 800b8c6:	4613      	mov	r3, r2
 800b8c8:	005b      	lsls	r3, r3, #1
 800b8ca:	4413      	add	r3, r2
 800b8cc:	00db      	lsls	r3, r3, #3
 800b8ce:	440b      	add	r3, r1
 800b8d0:	3314      	adds	r3, #20
 800b8d2:	781b      	ldrb	r3, [r3, #0]
 800b8d4:	2b01      	cmp	r3, #1
 800b8d6:	d15c      	bne.n	800b992 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	61fb      	str	r3, [r7, #28]
    while (p) {
 800b8e0:	e01c      	b.n	800b91c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800b8e2:	69fb      	ldr	r3, [r7, #28]
 800b8e4:	895a      	ldrh	r2, [r3, #10]
 800b8e6:	69fb      	ldr	r3, [r7, #28]
 800b8e8:	891b      	ldrh	r3, [r3, #8]
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	d10a      	bne.n	800b904 <etharp_query+0x1c0>
 800b8ee:	69fb      	ldr	r3, [r7, #28]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d006      	beq.n	800b904 <etharp_query+0x1c0>
 800b8f6:	4b2a      	ldr	r3, [pc, #168]	; (800b9a0 <etharp_query+0x25c>)
 800b8f8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800b8fc:	492f      	ldr	r1, [pc, #188]	; (800b9bc <etharp_query+0x278>)
 800b8fe:	482a      	ldr	r0, [pc, #168]	; (800b9a8 <etharp_query+0x264>)
 800b900:	f001 fcee 	bl	800d2e0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800b904:	69fb      	ldr	r3, [r7, #28]
 800b906:	7b1b      	ldrb	r3, [r3, #12]
 800b908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d002      	beq.n	800b916 <etharp_query+0x1d2>
        copy_needed = 1;
 800b910:	2301      	movs	r3, #1
 800b912:	61bb      	str	r3, [r7, #24]
        break;
 800b914:	e005      	b.n	800b922 <etharp_query+0x1de>
      }
      p = p->next;
 800b916:	69fb      	ldr	r3, [r7, #28]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800b91c:	69fb      	ldr	r3, [r7, #28]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d1df      	bne.n	800b8e2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800b922:	69bb      	ldr	r3, [r7, #24]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d007      	beq.n	800b938 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800b928:	687a      	ldr	r2, [r7, #4]
 800b92a:	f44f 7120 	mov.w	r1, #640	; 0x280
 800b92e:	200e      	movs	r0, #14
 800b930:	f7f9 fc7e 	bl	8005230 <pbuf_clone>
 800b934:	61f8      	str	r0, [r7, #28]
 800b936:	e004      	b.n	800b942 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800b93c:	69f8      	ldr	r0, [r7, #28]
 800b93e:	f7f9 fabb 	bl	8004eb8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800b942:	69fb      	ldr	r3, [r7, #28]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d021      	beq.n	800b98c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800b948:	7c7a      	ldrb	r2, [r7, #17]
 800b94a:	4918      	ldr	r1, [pc, #96]	; (800b9ac <etharp_query+0x268>)
 800b94c:	4613      	mov	r3, r2
 800b94e:	005b      	lsls	r3, r3, #1
 800b950:	4413      	add	r3, r2
 800b952:	00db      	lsls	r3, r3, #3
 800b954:	440b      	add	r3, r1
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d00a      	beq.n	800b972 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800b95c:	7c7a      	ldrb	r2, [r7, #17]
 800b95e:	4913      	ldr	r1, [pc, #76]	; (800b9ac <etharp_query+0x268>)
 800b960:	4613      	mov	r3, r2
 800b962:	005b      	lsls	r3, r3, #1
 800b964:	4413      	add	r3, r2
 800b966:	00db      	lsls	r3, r3, #3
 800b968:	440b      	add	r3, r1
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	4618      	mov	r0, r3
 800b96e:	f7f9 fa03 	bl	8004d78 <pbuf_free>
      }
      arp_table[i].q = p;
 800b972:	7c7a      	ldrb	r2, [r7, #17]
 800b974:	490d      	ldr	r1, [pc, #52]	; (800b9ac <etharp_query+0x268>)
 800b976:	4613      	mov	r3, r2
 800b978:	005b      	lsls	r3, r3, #1
 800b97a:	4413      	add	r3, r2
 800b97c:	00db      	lsls	r3, r3, #3
 800b97e:	440b      	add	r3, r1
 800b980:	69fa      	ldr	r2, [r7, #28]
 800b982:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800b984:	2300      	movs	r3, #0
 800b986:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b98a:	e002      	b.n	800b992 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800b98c:	23ff      	movs	r3, #255	; 0xff
 800b98e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800b992:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b996:	4618      	mov	r0, r3
 800b998:	3728      	adds	r7, #40	; 0x28
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}
 800b99e:	bf00      	nop
 800b9a0:	08010780 	.word	0x08010780
 800b9a4:	0801092c 	.word	0x0801092c
 800b9a8:	080107f8 	.word	0x080107f8
 800b9ac:	20008324 	.word	0x20008324
 800b9b0:	0801093c 	.word	0x0801093c
 800b9b4:	08010920 	.word	0x08010920
 800b9b8:	20008414 	.word	0x20008414
 800b9bc:	08010964 	.word	0x08010964

0800b9c0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b08a      	sub	sp, #40	; 0x28
 800b9c4:	af02      	add	r7, sp, #8
 800b9c6:	60f8      	str	r0, [r7, #12]
 800b9c8:	60b9      	str	r1, [r7, #8]
 800b9ca:	607a      	str	r2, [r7, #4]
 800b9cc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d106      	bne.n	800b9e6 <etharp_raw+0x26>
 800b9d8:	4b3a      	ldr	r3, [pc, #232]	; (800bac4 <etharp_raw+0x104>)
 800b9da:	f240 4257 	movw	r2, #1111	; 0x457
 800b9de:	493a      	ldr	r1, [pc, #232]	; (800bac8 <etharp_raw+0x108>)
 800b9e0:	483a      	ldr	r0, [pc, #232]	; (800bacc <etharp_raw+0x10c>)
 800b9e2:	f001 fc7d 	bl	800d2e0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800b9e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b9ea:	211c      	movs	r1, #28
 800b9ec:	200e      	movs	r0, #14
 800b9ee:	f7f8 fedf 	bl	80047b0 <pbuf_alloc>
 800b9f2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800b9f4:	69bb      	ldr	r3, [r7, #24]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d102      	bne.n	800ba00 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800b9fa:	f04f 33ff 	mov.w	r3, #4294967295
 800b9fe:	e05d      	b.n	800babc <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800ba00:	69bb      	ldr	r3, [r7, #24]
 800ba02:	895b      	ldrh	r3, [r3, #10]
 800ba04:	2b1b      	cmp	r3, #27
 800ba06:	d806      	bhi.n	800ba16 <etharp_raw+0x56>
 800ba08:	4b2e      	ldr	r3, [pc, #184]	; (800bac4 <etharp_raw+0x104>)
 800ba0a:	f240 4262 	movw	r2, #1122	; 0x462
 800ba0e:	4930      	ldr	r1, [pc, #192]	; (800bad0 <etharp_raw+0x110>)
 800ba10:	482e      	ldr	r0, [pc, #184]	; (800bacc <etharp_raw+0x10c>)
 800ba12:	f001 fc65 	bl	800d2e0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800ba16:	69bb      	ldr	r3, [r7, #24]
 800ba18:	685b      	ldr	r3, [r3, #4]
 800ba1a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800ba1c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f7f7 fe68 	bl	80036f4 <lwip_htons>
 800ba24:	4603      	mov	r3, r0
 800ba26:	461a      	mov	r2, r3
 800ba28:	697b      	ldr	r3, [r7, #20]
 800ba2a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ba32:	2b06      	cmp	r3, #6
 800ba34:	d006      	beq.n	800ba44 <etharp_raw+0x84>
 800ba36:	4b23      	ldr	r3, [pc, #140]	; (800bac4 <etharp_raw+0x104>)
 800ba38:	f240 4269 	movw	r2, #1129	; 0x469
 800ba3c:	4925      	ldr	r1, [pc, #148]	; (800bad4 <etharp_raw+0x114>)
 800ba3e:	4823      	ldr	r0, [pc, #140]	; (800bacc <etharp_raw+0x10c>)
 800ba40:	f001 fc4e 	bl	800d2e0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800ba44:	697b      	ldr	r3, [r7, #20]
 800ba46:	3308      	adds	r3, #8
 800ba48:	2206      	movs	r2, #6
 800ba4a:	6839      	ldr	r1, [r7, #0]
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f001 fc31 	bl	800d2b4 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	3312      	adds	r3, #18
 800ba56:	2206      	movs	r2, #6
 800ba58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f001 fc2a 	bl	800d2b4 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	330e      	adds	r3, #14
 800ba64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba66:	6812      	ldr	r2, [r2, #0]
 800ba68:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800ba6a:	697b      	ldr	r3, [r7, #20]
 800ba6c:	3318      	adds	r3, #24
 800ba6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba70:	6812      	ldr	r2, [r2, #0]
 800ba72:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800ba74:	697b      	ldr	r3, [r7, #20]
 800ba76:	2200      	movs	r2, #0
 800ba78:	701a      	strb	r2, [r3, #0]
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	f042 0201 	orr.w	r2, r2, #1
 800ba80:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800ba82:	697b      	ldr	r3, [r7, #20]
 800ba84:	2200      	movs	r2, #0
 800ba86:	f042 0208 	orr.w	r2, r2, #8
 800ba8a:	709a      	strb	r2, [r3, #2]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800ba90:	697b      	ldr	r3, [r7, #20]
 800ba92:	2206      	movs	r2, #6
 800ba94:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	2204      	movs	r2, #4
 800ba9a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800ba9c:	f640 0306 	movw	r3, #2054	; 0x806
 800baa0:	9300      	str	r3, [sp, #0]
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	68ba      	ldr	r2, [r7, #8]
 800baa6:	69b9      	ldr	r1, [r7, #24]
 800baa8:	68f8      	ldr	r0, [r7, #12]
 800baaa:	f001 fb87 	bl	800d1bc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800baae:	69b8      	ldr	r0, [r7, #24]
 800bab0:	f7f9 f962 	bl	8004d78 <pbuf_free>
  p = NULL;
 800bab4:	2300      	movs	r3, #0
 800bab6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800bab8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800babc:	4618      	mov	r0, r3
 800babe:	3720      	adds	r7, #32
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}
 800bac4:	08010780 	.word	0x08010780
 800bac8:	080108d0 	.word	0x080108d0
 800bacc:	080107f8 	.word	0x080107f8
 800bad0:	08010980 	.word	0x08010980
 800bad4:	080109b4 	.word	0x080109b4

0800bad8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b088      	sub	sp, #32
 800badc:	af04      	add	r7, sp, #16
 800bade:	60f8      	str	r0, [r7, #12]
 800bae0:	60b9      	str	r1, [r7, #8]
 800bae2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800baf4:	2201      	movs	r2, #1
 800baf6:	9203      	str	r2, [sp, #12]
 800baf8:	68ba      	ldr	r2, [r7, #8]
 800bafa:	9202      	str	r2, [sp, #8]
 800bafc:	4a06      	ldr	r2, [pc, #24]	; (800bb18 <etharp_request_dst+0x40>)
 800bafe:	9201      	str	r2, [sp, #4]
 800bb00:	9300      	str	r3, [sp, #0]
 800bb02:	4603      	mov	r3, r0
 800bb04:	687a      	ldr	r2, [r7, #4]
 800bb06:	68f8      	ldr	r0, [r7, #12]
 800bb08:	f7ff ff5a 	bl	800b9c0 <etharp_raw>
 800bb0c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3710      	adds	r7, #16
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}
 800bb16:	bf00      	nop
 800bb18:	08010f4c 	.word	0x08010f4c

0800bb1c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b082      	sub	sp, #8
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800bb26:	4a05      	ldr	r2, [pc, #20]	; (800bb3c <etharp_request+0x20>)
 800bb28:	6839      	ldr	r1, [r7, #0]
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f7ff ffd4 	bl	800bad8 <etharp_request_dst>
 800bb30:	4603      	mov	r3, r0
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3708      	adds	r7, #8
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}
 800bb3a:	bf00      	nop
 800bb3c:	08010f44 	.word	0x08010f44

0800bb40 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b08e      	sub	sp, #56	; 0x38
 800bb44:	af04      	add	r7, sp, #16
 800bb46:	6078      	str	r0, [r7, #4]
 800bb48:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800bb4a:	4b79      	ldr	r3, [pc, #484]	; (800bd30 <icmp_input+0x1f0>)
 800bb4c:	689b      	ldr	r3, [r3, #8]
 800bb4e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800bb50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb52:	781b      	ldrb	r3, [r3, #0]
 800bb54:	f003 030f 	and.w	r3, r3, #15
 800bb58:	b2db      	uxtb	r3, r3
 800bb5a:	009b      	lsls	r3, r3, #2
 800bb5c:	b2db      	uxtb	r3, r3
 800bb5e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800bb60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bb62:	2b13      	cmp	r3, #19
 800bb64:	f240 80cd 	bls.w	800bd02 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	895b      	ldrh	r3, [r3, #10]
 800bb6c:	2b03      	cmp	r3, #3
 800bb6e:	f240 80ca 	bls.w	800bd06 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	685b      	ldr	r3, [r3, #4]
 800bb76:	781b      	ldrb	r3, [r3, #0]
 800bb78:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800bb7c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	f000 80b7 	beq.w	800bcf4 <icmp_input+0x1b4>
 800bb86:	2b08      	cmp	r3, #8
 800bb88:	f040 80b7 	bne.w	800bcfa <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800bb8c:	4b69      	ldr	r3, [pc, #420]	; (800bd34 <icmp_input+0x1f4>)
 800bb8e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800bb90:	4b67      	ldr	r3, [pc, #412]	; (800bd30 <icmp_input+0x1f0>)
 800bb92:	695b      	ldr	r3, [r3, #20]
 800bb94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bb98:	2be0      	cmp	r3, #224	; 0xe0
 800bb9a:	f000 80bb 	beq.w	800bd14 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800bb9e:	4b64      	ldr	r3, [pc, #400]	; (800bd30 <icmp_input+0x1f0>)
 800bba0:	695b      	ldr	r3, [r3, #20]
 800bba2:	4a63      	ldr	r2, [pc, #396]	; (800bd30 <icmp_input+0x1f0>)
 800bba4:	6812      	ldr	r2, [r2, #0]
 800bba6:	4611      	mov	r1, r2
 800bba8:	4618      	mov	r0, r3
 800bbaa:	f000 fbf9 	bl	800c3a0 <ip4_addr_isbroadcast_u32>
 800bbae:	4603      	mov	r3, r0
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	f040 80b1 	bne.w	800bd18 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	891b      	ldrh	r3, [r3, #8]
 800bbba:	2b07      	cmp	r3, #7
 800bbbc:	f240 80a5 	bls.w	800bd0a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800bbc0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bbc2:	330e      	adds	r3, #14
 800bbc4:	4619      	mov	r1, r3
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f7f9 f840 	bl	8004c4c <pbuf_add_header>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d04b      	beq.n	800bc6a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	891a      	ldrh	r2, [r3, #8]
 800bbd6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bbd8:	4413      	add	r3, r2
 800bbda:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	891b      	ldrh	r3, [r3, #8]
 800bbe0:	8b7a      	ldrh	r2, [r7, #26]
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	f0c0 809a 	bcc.w	800bd1c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800bbe8:	8b7b      	ldrh	r3, [r7, #26]
 800bbea:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bbee:	4619      	mov	r1, r3
 800bbf0:	200e      	movs	r0, #14
 800bbf2:	f7f8 fddd 	bl	80047b0 <pbuf_alloc>
 800bbf6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	f000 8090 	beq.w	800bd20 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800bc00:	697b      	ldr	r3, [r7, #20]
 800bc02:	895b      	ldrh	r3, [r3, #10]
 800bc04:	461a      	mov	r2, r3
 800bc06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bc08:	3308      	adds	r3, #8
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d203      	bcs.n	800bc16 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800bc0e:	6978      	ldr	r0, [r7, #20]
 800bc10:	f7f9 f8b2 	bl	8004d78 <pbuf_free>
          goto icmperr;
 800bc14:	e085      	b.n	800bd22 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	685b      	ldr	r3, [r3, #4]
 800bc1a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800bc1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f001 fb48 	bl	800d2b4 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800bc24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bc26:	4619      	mov	r1, r3
 800bc28:	6978      	ldr	r0, [r7, #20]
 800bc2a:	f7f9 f81f 	bl	8004c6c <pbuf_remove_header>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d009      	beq.n	800bc48 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800bc34:	4b40      	ldr	r3, [pc, #256]	; (800bd38 <icmp_input+0x1f8>)
 800bc36:	22b6      	movs	r2, #182	; 0xb6
 800bc38:	4940      	ldr	r1, [pc, #256]	; (800bd3c <icmp_input+0x1fc>)
 800bc3a:	4841      	ldr	r0, [pc, #260]	; (800bd40 <icmp_input+0x200>)
 800bc3c:	f001 fb50 	bl	800d2e0 <iprintf>
          pbuf_free(r);
 800bc40:	6978      	ldr	r0, [r7, #20]
 800bc42:	f7f9 f899 	bl	8004d78 <pbuf_free>
          goto icmperr;
 800bc46:	e06c      	b.n	800bd22 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800bc48:	6879      	ldr	r1, [r7, #4]
 800bc4a:	6978      	ldr	r0, [r7, #20]
 800bc4c:	f7f9 f9ac 	bl	8004fa8 <pbuf_copy>
 800bc50:	4603      	mov	r3, r0
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d003      	beq.n	800bc5e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800bc56:	6978      	ldr	r0, [r7, #20]
 800bc58:	f7f9 f88e 	bl	8004d78 <pbuf_free>
          goto icmperr;
 800bc5c:	e061      	b.n	800bd22 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f7f9 f88a 	bl	8004d78 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	607b      	str	r3, [r7, #4]
 800bc68:	e00f      	b.n	800bc8a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800bc6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bc6c:	330e      	adds	r3, #14
 800bc6e:	4619      	mov	r1, r3
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	f7f8 fffb 	bl	8004c6c <pbuf_remove_header>
 800bc76:	4603      	mov	r3, r0
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d006      	beq.n	800bc8a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800bc7c:	4b2e      	ldr	r3, [pc, #184]	; (800bd38 <icmp_input+0x1f8>)
 800bc7e:	22c7      	movs	r2, #199	; 0xc7
 800bc80:	4930      	ldr	r1, [pc, #192]	; (800bd44 <icmp_input+0x204>)
 800bc82:	482f      	ldr	r0, [pc, #188]	; (800bd40 <icmp_input+0x200>)
 800bc84:	f001 fb2c 	bl	800d2e0 <iprintf>
          goto icmperr;
 800bc88:	e04b      	b.n	800bd22 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	685b      	ldr	r3, [r3, #4]
 800bc8e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800bc90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bc92:	4619      	mov	r1, r3
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f7f8 ffd9 	bl	8004c4c <pbuf_add_header>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d12b      	bne.n	800bcf8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	685b      	ldr	r3, [r3, #4]
 800bca4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800bca6:	69fb      	ldr	r3, [r7, #28]
 800bca8:	681a      	ldr	r2, [r3, #0]
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800bcae:	4b20      	ldr	r3, [pc, #128]	; (800bd30 <icmp_input+0x1f0>)
 800bcb0:	691a      	ldr	r2, [r3, #16]
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800bcb6:	693b      	ldr	r3, [r7, #16]
 800bcb8:	2200      	movs	r2, #0
 800bcba:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800bcbc:	693b      	ldr	r3, [r7, #16]
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	709a      	strb	r2, [r3, #2]
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	22ff      	movs	r2, #255	; 0xff
 800bcca:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	729a      	strb	r2, [r3, #10]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	9302      	str	r3, [sp, #8]
 800bcda:	2301      	movs	r3, #1
 800bcdc:	9301      	str	r3, [sp, #4]
 800bcde:	2300      	movs	r3, #0
 800bce0:	9300      	str	r3, [sp, #0]
 800bce2:	23ff      	movs	r3, #255	; 0xff
 800bce4:	2200      	movs	r2, #0
 800bce6:	69f9      	ldr	r1, [r7, #28]
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f000 fa81 	bl	800c1f0 <ip4_output_if>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800bcf2:	e001      	b.n	800bcf8 <icmp_input+0x1b8>
      break;
 800bcf4:	bf00      	nop
 800bcf6:	e000      	b.n	800bcfa <icmp_input+0x1ba>
      break;
 800bcf8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f7f9 f83c 	bl	8004d78 <pbuf_free>
  return;
 800bd00:	e013      	b.n	800bd2a <icmp_input+0x1ea>
    goto lenerr;
 800bd02:	bf00      	nop
 800bd04:	e002      	b.n	800bd0c <icmp_input+0x1cc>
    goto lenerr;
 800bd06:	bf00      	nop
 800bd08:	e000      	b.n	800bd0c <icmp_input+0x1cc>
        goto lenerr;
 800bd0a:	bf00      	nop
lenerr:
  pbuf_free(p);
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	f7f9 f833 	bl	8004d78 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800bd12:	e00a      	b.n	800bd2a <icmp_input+0x1ea>
        goto icmperr;
 800bd14:	bf00      	nop
 800bd16:	e004      	b.n	800bd22 <icmp_input+0x1e2>
        goto icmperr;
 800bd18:	bf00      	nop
 800bd1a:	e002      	b.n	800bd22 <icmp_input+0x1e2>
          goto icmperr;
 800bd1c:	bf00      	nop
 800bd1e:	e000      	b.n	800bd22 <icmp_input+0x1e2>
          goto icmperr;
 800bd20:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f7f9 f828 	bl	8004d78 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800bd28:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800bd2a:	3728      	adds	r7, #40	; 0x28
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}
 800bd30:	20004cd8 	.word	0x20004cd8
 800bd34:	20004cec 	.word	0x20004cec
 800bd38:	080109f8 	.word	0x080109f8
 800bd3c:	08010a30 	.word	0x08010a30
 800bd40:	08010a68 	.word	0x08010a68
 800bd44:	08010a90 	.word	0x08010a90

0800bd48 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b082      	sub	sp, #8
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
 800bd50:	460b      	mov	r3, r1
 800bd52:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800bd54:	78fb      	ldrb	r3, [r7, #3]
 800bd56:	461a      	mov	r2, r3
 800bd58:	2103      	movs	r1, #3
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f000 f814 	bl	800bd88 <icmp_send_response>
}
 800bd60:	bf00      	nop
 800bd62:	3708      	adds	r7, #8
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}

0800bd68 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b082      	sub	sp, #8
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
 800bd70:	460b      	mov	r3, r1
 800bd72:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800bd74:	78fb      	ldrb	r3, [r7, #3]
 800bd76:	461a      	mov	r2, r3
 800bd78:	210b      	movs	r1, #11
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f000 f804 	bl	800bd88 <icmp_send_response>
}
 800bd80:	bf00      	nop
 800bd82:	3708      	adds	r7, #8
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}

0800bd88 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b08c      	sub	sp, #48	; 0x30
 800bd8c:	af04      	add	r7, sp, #16
 800bd8e:	6078      	str	r0, [r7, #4]
 800bd90:	460b      	mov	r3, r1
 800bd92:	70fb      	strb	r3, [r7, #3]
 800bd94:	4613      	mov	r3, r2
 800bd96:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800bd98:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bd9c:	2124      	movs	r1, #36	; 0x24
 800bd9e:	2022      	movs	r0, #34	; 0x22
 800bda0:	f7f8 fd06 	bl	80047b0 <pbuf_alloc>
 800bda4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800bda6:	69fb      	ldr	r3, [r7, #28]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d04c      	beq.n	800be46 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800bdac:	69fb      	ldr	r3, [r7, #28]
 800bdae:	895b      	ldrh	r3, [r3, #10]
 800bdb0:	2b23      	cmp	r3, #35	; 0x23
 800bdb2:	d806      	bhi.n	800bdc2 <icmp_send_response+0x3a>
 800bdb4:	4b26      	ldr	r3, [pc, #152]	; (800be50 <icmp_send_response+0xc8>)
 800bdb6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800bdba:	4926      	ldr	r1, [pc, #152]	; (800be54 <icmp_send_response+0xcc>)
 800bdbc:	4826      	ldr	r0, [pc, #152]	; (800be58 <icmp_send_response+0xd0>)
 800bdbe:	f001 fa8f 	bl	800d2e0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	685b      	ldr	r3, [r3, #4]
 800bdc6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800bdc8:	69fb      	ldr	r3, [r7, #28]
 800bdca:	685b      	ldr	r3, [r3, #4]
 800bdcc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	78fa      	ldrb	r2, [r7, #3]
 800bdd2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	78ba      	ldrb	r2, [r7, #2]
 800bdd8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800bdda:	697b      	ldr	r3, [r7, #20]
 800bddc:	2200      	movs	r2, #0
 800bdde:	711a      	strb	r2, [r3, #4]
 800bde0:	2200      	movs	r2, #0
 800bde2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800bde4:	697b      	ldr	r3, [r7, #20]
 800bde6:	2200      	movs	r2, #0
 800bde8:	719a      	strb	r2, [r3, #6]
 800bdea:	2200      	movs	r2, #0
 800bdec:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800bdee:	69fb      	ldr	r3, [r7, #28]
 800bdf0:	685b      	ldr	r3, [r3, #4]
 800bdf2:	f103 0008 	add.w	r0, r3, #8
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	685b      	ldr	r3, [r3, #4]
 800bdfa:	221c      	movs	r2, #28
 800bdfc:	4619      	mov	r1, r3
 800bdfe:	f001 fa59 	bl	800d2b4 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800be02:	69bb      	ldr	r3, [r7, #24]
 800be04:	68db      	ldr	r3, [r3, #12]
 800be06:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800be08:	f107 030c 	add.w	r3, r7, #12
 800be0c:	4618      	mov	r0, r3
 800be0e:	f000 f825 	bl	800be5c <ip4_route>
 800be12:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d011      	beq.n	800be3e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800be1a:	697b      	ldr	r3, [r7, #20]
 800be1c:	2200      	movs	r2, #0
 800be1e:	709a      	strb	r2, [r3, #2]
 800be20:	2200      	movs	r2, #0
 800be22:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800be24:	f107 020c 	add.w	r2, r7, #12
 800be28:	693b      	ldr	r3, [r7, #16]
 800be2a:	9302      	str	r3, [sp, #8]
 800be2c:	2301      	movs	r3, #1
 800be2e:	9301      	str	r3, [sp, #4]
 800be30:	2300      	movs	r3, #0
 800be32:	9300      	str	r3, [sp, #0]
 800be34:	23ff      	movs	r3, #255	; 0xff
 800be36:	2100      	movs	r1, #0
 800be38:	69f8      	ldr	r0, [r7, #28]
 800be3a:	f000 f9d9 	bl	800c1f0 <ip4_output_if>
  }
  pbuf_free(q);
 800be3e:	69f8      	ldr	r0, [r7, #28]
 800be40:	f7f8 ff9a 	bl	8004d78 <pbuf_free>
 800be44:	e000      	b.n	800be48 <icmp_send_response+0xc0>
    return;
 800be46:	bf00      	nop
}
 800be48:	3720      	adds	r7, #32
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}
 800be4e:	bf00      	nop
 800be50:	080109f8 	.word	0x080109f8
 800be54:	08010ac4 	.word	0x08010ac4
 800be58:	08010a68 	.word	0x08010a68

0800be5c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800be5c:	b480      	push	{r7}
 800be5e:	b085      	sub	sp, #20
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800be64:	4b33      	ldr	r3, [pc, #204]	; (800bf34 <ip4_route+0xd8>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	60fb      	str	r3, [r7, #12]
 800be6a:	e036      	b.n	800beda <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800be72:	f003 0301 	and.w	r3, r3, #1
 800be76:	b2db      	uxtb	r3, r3
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d02b      	beq.n	800bed4 <ip4_route+0x78>
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800be82:	089b      	lsrs	r3, r3, #2
 800be84:	f003 0301 	and.w	r3, r3, #1
 800be88:	b2db      	uxtb	r3, r3
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d022      	beq.n	800bed4 <ip4_route+0x78>
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	3304      	adds	r3, #4
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d01d      	beq.n	800bed4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681a      	ldr	r2, [r3, #0]
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	3304      	adds	r3, #4
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	405a      	eors	r2, r3
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	3308      	adds	r3, #8
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	4013      	ands	r3, r2
 800beac:	2b00      	cmp	r3, #0
 800beae:	d101      	bne.n	800beb4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	e038      	b.n	800bf26 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800beba:	f003 0302 	and.w	r3, r3, #2
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d108      	bne.n	800bed4 <ip4_route+0x78>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681a      	ldr	r2, [r3, #0]
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	330c      	adds	r3, #12
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	429a      	cmp	r2, r3
 800bece:	d101      	bne.n	800bed4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	e028      	b.n	800bf26 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	60fb      	str	r3, [r7, #12]
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d1c5      	bne.n	800be6c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800bee0:	4b15      	ldr	r3, [pc, #84]	; (800bf38 <ip4_route+0xdc>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d01a      	beq.n	800bf1e <ip4_route+0xc2>
 800bee8:	4b13      	ldr	r3, [pc, #76]	; (800bf38 <ip4_route+0xdc>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bef0:	f003 0301 	and.w	r3, r3, #1
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d012      	beq.n	800bf1e <ip4_route+0xc2>
 800bef8:	4b0f      	ldr	r3, [pc, #60]	; (800bf38 <ip4_route+0xdc>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bf00:	f003 0304 	and.w	r3, r3, #4
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d00a      	beq.n	800bf1e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800bf08:	4b0b      	ldr	r3, [pc, #44]	; (800bf38 <ip4_route+0xdc>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	3304      	adds	r3, #4
 800bf0e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d004      	beq.n	800bf1e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	b2db      	uxtb	r3, r3
 800bf1a:	2b7f      	cmp	r3, #127	; 0x7f
 800bf1c:	d101      	bne.n	800bf22 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	e001      	b.n	800bf26 <ip4_route+0xca>
  }

  return netif_default;
 800bf22:	4b05      	ldr	r3, [pc, #20]	; (800bf38 <ip4_route+0xdc>)
 800bf24:	681b      	ldr	r3, [r3, #0]
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	3714      	adds	r7, #20
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf30:	4770      	bx	lr
 800bf32:	bf00      	nop
 800bf34:	200082b4 	.word	0x200082b4
 800bf38:	200082b8 	.word	0x200082b8

0800bf3c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b082      	sub	sp, #8
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bf4a:	f003 0301 	and.w	r3, r3, #1
 800bf4e:	b2db      	uxtb	r3, r3
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d016      	beq.n	800bf82 <ip4_input_accept+0x46>
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	3304      	adds	r3, #4
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d011      	beq.n	800bf82 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800bf5e:	4b0b      	ldr	r3, [pc, #44]	; (800bf8c <ip4_input_accept+0x50>)
 800bf60:	695a      	ldr	r2, [r3, #20]
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	3304      	adds	r3, #4
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	429a      	cmp	r2, r3
 800bf6a:	d008      	beq.n	800bf7e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800bf6c:	4b07      	ldr	r3, [pc, #28]	; (800bf8c <ip4_input_accept+0x50>)
 800bf6e:	695b      	ldr	r3, [r3, #20]
 800bf70:	6879      	ldr	r1, [r7, #4]
 800bf72:	4618      	mov	r0, r3
 800bf74:	f000 fa14 	bl	800c3a0 <ip4_addr_isbroadcast_u32>
 800bf78:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d001      	beq.n	800bf82 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800bf7e:	2301      	movs	r3, #1
 800bf80:	e000      	b.n	800bf84 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800bf82:	2300      	movs	r3, #0
}
 800bf84:	4618      	mov	r0, r3
 800bf86:	3708      	adds	r7, #8
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	bd80      	pop	{r7, pc}
 800bf8c:	20004cd8 	.word	0x20004cd8

0800bf90 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b086      	sub	sp, #24
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
 800bf98:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	685b      	ldr	r3, [r3, #4]
 800bf9e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	781b      	ldrb	r3, [r3, #0]
 800bfa4:	091b      	lsrs	r3, r3, #4
 800bfa6:	b2db      	uxtb	r3, r3
 800bfa8:	2b04      	cmp	r3, #4
 800bfaa:	d004      	beq.n	800bfb6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800bfac:	6878      	ldr	r0, [r7, #4]
 800bfae:	f7f8 fee3 	bl	8004d78 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	e114      	b.n	800c1e0 <ip4_input+0x250>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800bfb6:	697b      	ldr	r3, [r7, #20]
 800bfb8:	781b      	ldrb	r3, [r3, #0]
 800bfba:	f003 030f 	and.w	r3, r3, #15
 800bfbe:	b2db      	uxtb	r3, r3
 800bfc0:	009b      	lsls	r3, r3, #2
 800bfc2:	b2db      	uxtb	r3, r3
 800bfc4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800bfc6:	697b      	ldr	r3, [r7, #20]
 800bfc8:	885b      	ldrh	r3, [r3, #2]
 800bfca:	b29b      	uxth	r3, r3
 800bfcc:	4618      	mov	r0, r3
 800bfce:	f7f7 fb91 	bl	80036f4 <lwip_htons>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	891b      	ldrh	r3, [r3, #8]
 800bfda:	89ba      	ldrh	r2, [r7, #12]
 800bfdc:	429a      	cmp	r2, r3
 800bfde:	d204      	bcs.n	800bfea <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800bfe0:	89bb      	ldrh	r3, [r7, #12]
 800bfe2:	4619      	mov	r1, r3
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f7f8 fd41 	bl	8004a6c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	895b      	ldrh	r3, [r3, #10]
 800bfee:	89fa      	ldrh	r2, [r7, #14]
 800bff0:	429a      	cmp	r2, r3
 800bff2:	d807      	bhi.n	800c004 <ip4_input+0x74>
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	891b      	ldrh	r3, [r3, #8]
 800bff8:	89ba      	ldrh	r2, [r7, #12]
 800bffa:	429a      	cmp	r2, r3
 800bffc:	d802      	bhi.n	800c004 <ip4_input+0x74>
 800bffe:	89fb      	ldrh	r3, [r7, #14]
 800c000:	2b13      	cmp	r3, #19
 800c002:	d804      	bhi.n	800c00e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f7f8 feb7 	bl	8004d78 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800c00a:	2300      	movs	r3, #0
 800c00c:	e0e8      	b.n	800c1e0 <ip4_input+0x250>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800c00e:	697b      	ldr	r3, [r7, #20]
 800c010:	691b      	ldr	r3, [r3, #16]
 800c012:	4a75      	ldr	r2, [pc, #468]	; (800c1e8 <ip4_input+0x258>)
 800c014:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800c016:	697b      	ldr	r3, [r7, #20]
 800c018:	68db      	ldr	r3, [r3, #12]
 800c01a:	4a73      	ldr	r2, [pc, #460]	; (800c1e8 <ip4_input+0x258>)
 800c01c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c01e:	4b72      	ldr	r3, [pc, #456]	; (800c1e8 <ip4_input+0x258>)
 800c020:	695b      	ldr	r3, [r3, #20]
 800c022:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c026:	2be0      	cmp	r3, #224	; 0xe0
 800c028:	d112      	bne.n	800c050 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c030:	f003 0301 	and.w	r3, r3, #1
 800c034:	b2db      	uxtb	r3, r3
 800c036:	2b00      	cmp	r3, #0
 800c038:	d007      	beq.n	800c04a <ip4_input+0xba>
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	3304      	adds	r3, #4
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d002      	beq.n	800c04a <ip4_input+0xba>
      netif = inp;
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	613b      	str	r3, [r7, #16]
 800c048:	e02a      	b.n	800c0a0 <ip4_input+0x110>
    } else {
      netif = NULL;
 800c04a:	2300      	movs	r3, #0
 800c04c:	613b      	str	r3, [r7, #16]
 800c04e:	e027      	b.n	800c0a0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800c050:	6838      	ldr	r0, [r7, #0]
 800c052:	f7ff ff73 	bl	800bf3c <ip4_input_accept>
 800c056:	4603      	mov	r3, r0
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d002      	beq.n	800c062 <ip4_input+0xd2>
      netif = inp;
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	613b      	str	r3, [r7, #16]
 800c060:	e01e      	b.n	800c0a0 <ip4_input+0x110>
    } else {
      netif = NULL;
 800c062:	2300      	movs	r3, #0
 800c064:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800c066:	4b60      	ldr	r3, [pc, #384]	; (800c1e8 <ip4_input+0x258>)
 800c068:	695b      	ldr	r3, [r3, #20]
 800c06a:	b2db      	uxtb	r3, r3
 800c06c:	2b7f      	cmp	r3, #127	; 0x7f
 800c06e:	d017      	beq.n	800c0a0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800c070:	4b5e      	ldr	r3, [pc, #376]	; (800c1ec <ip4_input+0x25c>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	613b      	str	r3, [r7, #16]
 800c076:	e00e      	b.n	800c096 <ip4_input+0x106>
          if (netif == inp) {
 800c078:	693a      	ldr	r2, [r7, #16]
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	429a      	cmp	r2, r3
 800c07e:	d006      	beq.n	800c08e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800c080:	6938      	ldr	r0, [r7, #16]
 800c082:	f7ff ff5b 	bl	800bf3c <ip4_input_accept>
 800c086:	4603      	mov	r3, r0
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d108      	bne.n	800c09e <ip4_input+0x10e>
 800c08c:	e000      	b.n	800c090 <ip4_input+0x100>
            continue;
 800c08e:	bf00      	nop
        NETIF_FOREACH(netif) {
 800c090:	693b      	ldr	r3, [r7, #16]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	613b      	str	r3, [r7, #16]
 800c096:	693b      	ldr	r3, [r7, #16]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d1ed      	bne.n	800c078 <ip4_input+0xe8>
 800c09c:	e000      	b.n	800c0a0 <ip4_input+0x110>
            break;
 800c09e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800c0a0:	4b51      	ldr	r3, [pc, #324]	; (800c1e8 <ip4_input+0x258>)
 800c0a2:	691b      	ldr	r3, [r3, #16]
 800c0a4:	6839      	ldr	r1, [r7, #0]
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f000 f97a 	bl	800c3a0 <ip4_addr_isbroadcast_u32>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d105      	bne.n	800c0be <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800c0b2:	4b4d      	ldr	r3, [pc, #308]	; (800c1e8 <ip4_input+0x258>)
 800c0b4:	691b      	ldr	r3, [r3, #16]
 800c0b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800c0ba:	2be0      	cmp	r3, #224	; 0xe0
 800c0bc:	d104      	bne.n	800c0c8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f7f8 fe5a 	bl	8004d78 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	e08b      	b.n	800c1e0 <ip4_input+0x250>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d104      	bne.n	800c0d8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f7f8 fe52 	bl	8004d78 <pbuf_free>
    return ERR_OK;
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	e083      	b.n	800c1e0 <ip4_input+0x250>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800c0d8:	697b      	ldr	r3, [r7, #20]
 800c0da:	88db      	ldrh	r3, [r3, #6]
 800c0dc:	b29b      	uxth	r3, r3
 800c0de:	461a      	mov	r2, r3
 800c0e0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800c0e4:	4013      	ands	r3, r2
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d00b      	beq.n	800c102 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800c0ea:	6878      	ldr	r0, [r7, #4]
 800c0ec:	f000 fc9e 	bl	800ca2c <ip4_reass>
 800c0f0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d101      	bne.n	800c0fc <ip4_input+0x16c>
      return ERR_OK;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	e071      	b.n	800c1e0 <ip4_input+0x250>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	685b      	ldr	r3, [r3, #4]
 800c100:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800c102:	4a39      	ldr	r2, [pc, #228]	; (800c1e8 <ip4_input+0x258>)
 800c104:	693b      	ldr	r3, [r7, #16]
 800c106:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800c108:	4a37      	ldr	r2, [pc, #220]	; (800c1e8 <ip4_input+0x258>)
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800c10e:	4a36      	ldr	r2, [pc, #216]	; (800c1e8 <ip4_input+0x258>)
 800c110:	697b      	ldr	r3, [r7, #20]
 800c112:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800c114:	697b      	ldr	r3, [r7, #20]
 800c116:	781b      	ldrb	r3, [r3, #0]
 800c118:	f003 030f 	and.w	r3, r3, #15
 800c11c:	b2db      	uxtb	r3, r3
 800c11e:	009b      	lsls	r3, r3, #2
 800c120:	b2db      	uxtb	r3, r3
 800c122:	b29a      	uxth	r2, r3
 800c124:	4b30      	ldr	r3, [pc, #192]	; (800c1e8 <ip4_input+0x258>)
 800c126:	819a      	strh	r2, [r3, #12]

#if LWIP_RAW
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
 800c128:	6839      	ldr	r1, [r7, #0]
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f7f9 f8ec 	bl	8005308 <raw_input>
 800c130:	4603      	mov	r3, r0
 800c132:	72fb      	strb	r3, [r7, #11]
  if (raw_status != RAW_INPUT_EATEN)
 800c134:	7afb      	ldrb	r3, [r7, #11]
 800c136:	2b01      	cmp	r3, #1
 800c138:	d03e      	beq.n	800c1b8 <ip4_input+0x228>
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800c13a:	89fb      	ldrh	r3, [r7, #14]
 800c13c:	4619      	mov	r1, r3
 800c13e:	6878      	ldr	r0, [r7, #4]
 800c140:	f7f8 fd94 	bl	8004c6c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800c144:	697b      	ldr	r3, [r7, #20]
 800c146:	7a5b      	ldrb	r3, [r3, #9]
 800c148:	2b11      	cmp	r3, #17
 800c14a:	d006      	beq.n	800c15a <ip4_input+0x1ca>
 800c14c:	2b11      	cmp	r3, #17
 800c14e:	dc13      	bgt.n	800c178 <ip4_input+0x1e8>
 800c150:	2b01      	cmp	r3, #1
 800c152:	d00c      	beq.n	800c16e <ip4_input+0x1de>
 800c154:	2b06      	cmp	r3, #6
 800c156:	d005      	beq.n	800c164 <ip4_input+0x1d4>
 800c158:	e00e      	b.n	800c178 <ip4_input+0x1e8>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800c15a:	6839      	ldr	r1, [r7, #0]
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	f7fe fc5f 	bl	800aa20 <udp_input>
        break;
 800c162:	e02a      	b.n	800c1ba <ip4_input+0x22a>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800c164:	6839      	ldr	r1, [r7, #0]
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f7fa fd1a 	bl	8006ba0 <tcp_input>
        break;
 800c16c:	e025      	b.n	800c1ba <ip4_input+0x22a>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800c16e:	6839      	ldr	r1, [r7, #0]
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f7ff fce5 	bl	800bb40 <icmp_input>
        break;
 800c176:	e020      	b.n	800c1ba <ip4_input+0x22a>
        igmp_input(p, inp, ip4_current_dest_addr());
        break;
#endif /* LWIP_IGMP */
      default:
#if LWIP_RAW
        if (raw_status == RAW_INPUT_DELIVERED) {
 800c178:	7afb      	ldrb	r3, [r7, #11]
 800c17a:	2b02      	cmp	r3, #2
 800c17c:	d018      	beq.n	800c1b0 <ip4_input+0x220>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800c17e:	4b1a      	ldr	r3, [pc, #104]	; (800c1e8 <ip4_input+0x258>)
 800c180:	695b      	ldr	r3, [r3, #20]
 800c182:	6939      	ldr	r1, [r7, #16]
 800c184:	4618      	mov	r0, r3
 800c186:	f000 f90b 	bl	800c3a0 <ip4_addr_isbroadcast_u32>
 800c18a:	4603      	mov	r3, r0
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d10f      	bne.n	800c1b0 <ip4_input+0x220>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c190:	4b15      	ldr	r3, [pc, #84]	; (800c1e8 <ip4_input+0x258>)
 800c192:	695b      	ldr	r3, [r3, #20]
 800c194:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800c198:	2be0      	cmp	r3, #224	; 0xe0
 800c19a:	d009      	beq.n	800c1b0 <ip4_input+0x220>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800c19c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c1a0:	4619      	mov	r1, r3
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f7f8 fdd5 	bl	8004d52 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800c1a8:	2102      	movs	r1, #2
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f7ff fdcc 	bl	800bd48 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f7f8 fde1 	bl	8004d78 <pbuf_free>
        break;
 800c1b6:	e000      	b.n	800c1ba <ip4_input+0x22a>
    }
  }
 800c1b8:	bf00      	nop

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800c1ba:	4b0b      	ldr	r3, [pc, #44]	; (800c1e8 <ip4_input+0x258>)
 800c1bc:	2200      	movs	r2, #0
 800c1be:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800c1c0:	4b09      	ldr	r3, [pc, #36]	; (800c1e8 <ip4_input+0x258>)
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800c1c6:	4b08      	ldr	r3, [pc, #32]	; (800c1e8 <ip4_input+0x258>)
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800c1cc:	4b06      	ldr	r3, [pc, #24]	; (800c1e8 <ip4_input+0x258>)
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800c1d2:	4b05      	ldr	r3, [pc, #20]	; (800c1e8 <ip4_input+0x258>)
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800c1d8:	4b03      	ldr	r3, [pc, #12]	; (800c1e8 <ip4_input+0x258>)
 800c1da:	2200      	movs	r2, #0
 800c1dc:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800c1de:	2300      	movs	r3, #0
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	3718      	adds	r7, #24
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}
 800c1e8:	20004cd8 	.word	0x20004cd8
 800c1ec:	200082b4 	.word	0x200082b4

0800c1f0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b08a      	sub	sp, #40	; 0x28
 800c1f4:	af04      	add	r7, sp, #16
 800c1f6:	60f8      	str	r0, [r7, #12]
 800c1f8:	60b9      	str	r1, [r7, #8]
 800c1fa:	607a      	str	r2, [r7, #4]
 800c1fc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d009      	beq.n	800c21c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d003      	beq.n	800c216 <ip4_output_if+0x26>
 800c20e:	68bb      	ldr	r3, [r7, #8]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d102      	bne.n	800c21c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800c216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c218:	3304      	adds	r3, #4
 800c21a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800c21c:	78fa      	ldrb	r2, [r7, #3]
 800c21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c220:	9302      	str	r3, [sp, #8]
 800c222:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c226:	9301      	str	r3, [sp, #4]
 800c228:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c22c:	9300      	str	r3, [sp, #0]
 800c22e:	4613      	mov	r3, r2
 800c230:	687a      	ldr	r2, [r7, #4]
 800c232:	6979      	ldr	r1, [r7, #20]
 800c234:	68f8      	ldr	r0, [r7, #12]
 800c236:	f000 f805 	bl	800c244 <ip4_output_if_src>
 800c23a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	3718      	adds	r7, #24
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}

0800c244 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b088      	sub	sp, #32
 800c248:	af00      	add	r7, sp, #0
 800c24a:	60f8      	str	r0, [r7, #12]
 800c24c:	60b9      	str	r1, [r7, #8]
 800c24e:	607a      	str	r2, [r7, #4]
 800c250:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	7b9b      	ldrb	r3, [r3, #14]
 800c256:	2b01      	cmp	r3, #1
 800c258:	d006      	beq.n	800c268 <ip4_output_if_src+0x24>
 800c25a:	4b4b      	ldr	r3, [pc, #300]	; (800c388 <ip4_output_if_src+0x144>)
 800c25c:	f44f 7255 	mov.w	r2, #852	; 0x354
 800c260:	494a      	ldr	r1, [pc, #296]	; (800c38c <ip4_output_if_src+0x148>)
 800c262:	484b      	ldr	r0, [pc, #300]	; (800c390 <ip4_output_if_src+0x14c>)
 800c264:	f001 f83c 	bl	800d2e0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d060      	beq.n	800c330 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800c26e:	2314      	movs	r3, #20
 800c270:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800c272:	2114      	movs	r1, #20
 800c274:	68f8      	ldr	r0, [r7, #12]
 800c276:	f7f8 fce9 	bl	8004c4c <pbuf_add_header>
 800c27a:	4603      	mov	r3, r0
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d002      	beq.n	800c286 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800c280:	f06f 0301 	mvn.w	r3, #1
 800c284:	e07c      	b.n	800c380 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	685b      	ldr	r3, [r3, #4]
 800c28a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	895b      	ldrh	r3, [r3, #10]
 800c290:	2b13      	cmp	r3, #19
 800c292:	d806      	bhi.n	800c2a2 <ip4_output_if_src+0x5e>
 800c294:	4b3c      	ldr	r3, [pc, #240]	; (800c388 <ip4_output_if_src+0x144>)
 800c296:	f44f 7262 	mov.w	r2, #904	; 0x388
 800c29a:	493e      	ldr	r1, [pc, #248]	; (800c394 <ip4_output_if_src+0x150>)
 800c29c:	483c      	ldr	r0, [pc, #240]	; (800c390 <ip4_output_if_src+0x14c>)
 800c29e:	f001 f81f 	bl	800d2e0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800c2a2:	69fb      	ldr	r3, [r7, #28]
 800c2a4:	78fa      	ldrb	r2, [r7, #3]
 800c2a6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800c2a8:	69fb      	ldr	r3, [r7, #28]
 800c2aa:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800c2ae:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681a      	ldr	r2, [r3, #0]
 800c2b4:	69fb      	ldr	r3, [r7, #28]
 800c2b6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800c2b8:	8b7b      	ldrh	r3, [r7, #26]
 800c2ba:	089b      	lsrs	r3, r3, #2
 800c2bc:	b29b      	uxth	r3, r3
 800c2be:	b2db      	uxtb	r3, r3
 800c2c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2c4:	b2da      	uxtb	r2, r3
 800c2c6:	69fb      	ldr	r3, [r7, #28]
 800c2c8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800c2ca:	69fb      	ldr	r3, [r7, #28]
 800c2cc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800c2d0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	891b      	ldrh	r3, [r3, #8]
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f7f7 fa0c 	bl	80036f4 <lwip_htons>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	461a      	mov	r2, r3
 800c2e0:	69fb      	ldr	r3, [r7, #28]
 800c2e2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800c2e4:	69fb      	ldr	r3, [r7, #28]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	719a      	strb	r2, [r3, #6]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800c2ee:	4b2a      	ldr	r3, [pc, #168]	; (800c398 <ip4_output_if_src+0x154>)
 800c2f0:	881b      	ldrh	r3, [r3, #0]
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f7f7 f9fe 	bl	80036f4 <lwip_htons>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	461a      	mov	r2, r3
 800c2fc:	69fb      	ldr	r3, [r7, #28]
 800c2fe:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800c300:	4b25      	ldr	r3, [pc, #148]	; (800c398 <ip4_output_if_src+0x154>)
 800c302:	881b      	ldrh	r3, [r3, #0]
 800c304:	3301      	adds	r3, #1
 800c306:	b29a      	uxth	r2, r3
 800c308:	4b23      	ldr	r3, [pc, #140]	; (800c398 <ip4_output_if_src+0x154>)
 800c30a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d104      	bne.n	800c31c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800c312:	4b22      	ldr	r3, [pc, #136]	; (800c39c <ip4_output_if_src+0x158>)
 800c314:	681a      	ldr	r2, [r3, #0]
 800c316:	69fb      	ldr	r3, [r7, #28]
 800c318:	60da      	str	r2, [r3, #12]
 800c31a:	e003      	b.n	800c324 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	681a      	ldr	r2, [r3, #0]
 800c320:	69fb      	ldr	r3, [r7, #28]
 800c322:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800c324:	69fb      	ldr	r3, [r7, #28]
 800c326:	2200      	movs	r2, #0
 800c328:	729a      	strb	r2, [r3, #10]
 800c32a:	2200      	movs	r2, #0
 800c32c:	72da      	strb	r2, [r3, #11]
 800c32e:	e00f      	b.n	800c350 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	895b      	ldrh	r3, [r3, #10]
 800c334:	2b13      	cmp	r3, #19
 800c336:	d802      	bhi.n	800c33e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800c338:	f06f 0301 	mvn.w	r3, #1
 800c33c:	e020      	b.n	800c380 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	685b      	ldr	r3, [r3, #4]
 800c342:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800c344:	69fb      	ldr	r3, [r7, #28]
 800c346:	691b      	ldr	r3, [r3, #16]
 800c348:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800c34a:	f107 0314 	add.w	r3, r7, #20
 800c34e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800c350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c352:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c354:	2b00      	cmp	r3, #0
 800c356:	d00c      	beq.n	800c372 <ip4_output_if_src+0x12e>
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	891a      	ldrh	r2, [r3, #8]
 800c35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c35e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c360:	429a      	cmp	r2, r3
 800c362:	d906      	bls.n	800c372 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800c364:	687a      	ldr	r2, [r7, #4]
 800c366:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c368:	68f8      	ldr	r0, [r7, #12]
 800c36a:	f000 fd53 	bl	800ce14 <ip4_frag>
 800c36e:	4603      	mov	r3, r0
 800c370:	e006      	b.n	800c380 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800c372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c374:	695b      	ldr	r3, [r3, #20]
 800c376:	687a      	ldr	r2, [r7, #4]
 800c378:	68f9      	ldr	r1, [r7, #12]
 800c37a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c37c:	4798      	blx	r3
 800c37e:	4603      	mov	r3, r0
}
 800c380:	4618      	mov	r0, r3
 800c382:	3720      	adds	r7, #32
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}
 800c388:	08010af0 	.word	0x08010af0
 800c38c:	08010b24 	.word	0x08010b24
 800c390:	08010b30 	.word	0x08010b30
 800c394:	08010b58 	.word	0x08010b58
 800c398:	20008416 	.word	0x20008416
 800c39c:	08010f40 	.word	0x08010f40

0800c3a0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	b085      	sub	sp, #20
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
 800c3a8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3b4:	d002      	beq.n	800c3bc <ip4_addr_isbroadcast_u32+0x1c>
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d101      	bne.n	800c3c0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800c3bc:	2301      	movs	r3, #1
 800c3be:	e02a      	b.n	800c416 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c3c6:	f003 0302 	and.w	r3, r3, #2
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d101      	bne.n	800c3d2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	e021      	b.n	800c416 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	3304      	adds	r3, #4
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	687a      	ldr	r2, [r7, #4]
 800c3da:	429a      	cmp	r2, r3
 800c3dc:	d101      	bne.n	800c3e2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800c3de:	2300      	movs	r3, #0
 800c3e0:	e019      	b.n	800c416 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800c3e2:	68fa      	ldr	r2, [r7, #12]
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	3304      	adds	r3, #4
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	405a      	eors	r2, r3
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	3308      	adds	r3, #8
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	4013      	ands	r3, r2
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d10d      	bne.n	800c414 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800c3f8:	683b      	ldr	r3, [r7, #0]
 800c3fa:	3308      	adds	r3, #8
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	43da      	mvns	r2, r3
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	3308      	adds	r3, #8
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800c40c:	429a      	cmp	r2, r3
 800c40e:	d101      	bne.n	800c414 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800c410:	2301      	movs	r3, #1
 800c412:	e000      	b.n	800c416 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800c414:	2300      	movs	r3, #0
  }
}
 800c416:	4618      	mov	r0, r3
 800c418:	3714      	adds	r7, #20
 800c41a:	46bd      	mov	sp, r7
 800c41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c420:	4770      	bx	lr
	...

0800c424 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b084      	sub	sp, #16
 800c428:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800c42a:	2300      	movs	r3, #0
 800c42c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800c42e:	4b12      	ldr	r3, [pc, #72]	; (800c478 <ip_reass_tmr+0x54>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800c434:	e018      	b.n	800c468 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	7fdb      	ldrb	r3, [r3, #31]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d00b      	beq.n	800c456 <ip_reass_tmr+0x32>
      r->timer--;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	7fdb      	ldrb	r3, [r3, #31]
 800c442:	3b01      	subs	r3, #1
 800c444:	b2da      	uxtb	r2, r3
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	60fb      	str	r3, [r7, #12]
 800c454:	e008      	b.n	800c468 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800c460:	68b9      	ldr	r1, [r7, #8]
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	f000 f80a 	bl	800c47c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d1e3      	bne.n	800c436 <ip_reass_tmr+0x12>
    }
  }
}
 800c46e:	bf00      	nop
 800c470:	bf00      	nop
 800c472:	3710      	adds	r7, #16
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}
 800c478:	20008418 	.word	0x20008418

0800c47c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b088      	sub	sp, #32
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
 800c484:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800c486:	2300      	movs	r3, #0
 800c488:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800c48a:	683a      	ldr	r2, [r7, #0]
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	429a      	cmp	r2, r3
 800c490:	d105      	bne.n	800c49e <ip_reass_free_complete_datagram+0x22>
 800c492:	4b45      	ldr	r3, [pc, #276]	; (800c5a8 <ip_reass_free_complete_datagram+0x12c>)
 800c494:	22ab      	movs	r2, #171	; 0xab
 800c496:	4945      	ldr	r1, [pc, #276]	; (800c5ac <ip_reass_free_complete_datagram+0x130>)
 800c498:	4845      	ldr	r0, [pc, #276]	; (800c5b0 <ip_reass_free_complete_datagram+0x134>)
 800c49a:	f000 ff21 	bl	800d2e0 <iprintf>
  if (prev != NULL) {
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d00a      	beq.n	800c4ba <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	687a      	ldr	r2, [r7, #4]
 800c4aa:	429a      	cmp	r2, r3
 800c4ac:	d005      	beq.n	800c4ba <ip_reass_free_complete_datagram+0x3e>
 800c4ae:	4b3e      	ldr	r3, [pc, #248]	; (800c5a8 <ip_reass_free_complete_datagram+0x12c>)
 800c4b0:	22ad      	movs	r2, #173	; 0xad
 800c4b2:	4940      	ldr	r1, [pc, #256]	; (800c5b4 <ip_reass_free_complete_datagram+0x138>)
 800c4b4:	483e      	ldr	r0, [pc, #248]	; (800c5b0 <ip_reass_free_complete_datagram+0x134>)
 800c4b6:	f000 ff13 	bl	800d2e0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	685b      	ldr	r3, [r3, #4]
 800c4be:	685b      	ldr	r3, [r3, #4]
 800c4c0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800c4c2:	697b      	ldr	r3, [r7, #20]
 800c4c4:	889b      	ldrh	r3, [r3, #4]
 800c4c6:	b29b      	uxth	r3, r3
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d12a      	bne.n	800c522 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	685b      	ldr	r3, [r3, #4]
 800c4d0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	681a      	ldr	r2, [r3, #0]
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800c4da:	69bb      	ldr	r3, [r7, #24]
 800c4dc:	6858      	ldr	r0, [r3, #4]
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	3308      	adds	r3, #8
 800c4e2:	2214      	movs	r2, #20
 800c4e4:	4619      	mov	r1, r3
 800c4e6:	f000 fee5 	bl	800d2b4 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800c4ea:	2101      	movs	r1, #1
 800c4ec:	69b8      	ldr	r0, [r7, #24]
 800c4ee:	f7ff fc3b 	bl	800bd68 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800c4f2:	69b8      	ldr	r0, [r7, #24]
 800c4f4:	f7f8 fcc8 	bl	8004e88 <pbuf_clen>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800c4fc:	8bfa      	ldrh	r2, [r7, #30]
 800c4fe:	8a7b      	ldrh	r3, [r7, #18]
 800c500:	4413      	add	r3, r2
 800c502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c506:	db05      	blt.n	800c514 <ip_reass_free_complete_datagram+0x98>
 800c508:	4b27      	ldr	r3, [pc, #156]	; (800c5a8 <ip_reass_free_complete_datagram+0x12c>)
 800c50a:	22bc      	movs	r2, #188	; 0xbc
 800c50c:	492a      	ldr	r1, [pc, #168]	; (800c5b8 <ip_reass_free_complete_datagram+0x13c>)
 800c50e:	4828      	ldr	r0, [pc, #160]	; (800c5b0 <ip_reass_free_complete_datagram+0x134>)
 800c510:	f000 fee6 	bl	800d2e0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800c514:	8bfa      	ldrh	r2, [r7, #30]
 800c516:	8a7b      	ldrh	r3, [r7, #18]
 800c518:	4413      	add	r3, r2
 800c51a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800c51c:	69b8      	ldr	r0, [r7, #24]
 800c51e:	f7f8 fc2b 	bl	8004d78 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	685b      	ldr	r3, [r3, #4]
 800c526:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800c528:	e01f      	b.n	800c56a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800c52a:	69bb      	ldr	r3, [r7, #24]
 800c52c:	685b      	ldr	r3, [r3, #4]
 800c52e:	617b      	str	r3, [r7, #20]
    pcur = p;
 800c530:	69bb      	ldr	r3, [r7, #24]
 800c532:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800c534:	697b      	ldr	r3, [r7, #20]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800c53a:	68f8      	ldr	r0, [r7, #12]
 800c53c:	f7f8 fca4 	bl	8004e88 <pbuf_clen>
 800c540:	4603      	mov	r3, r0
 800c542:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800c544:	8bfa      	ldrh	r2, [r7, #30]
 800c546:	8a7b      	ldrh	r3, [r7, #18]
 800c548:	4413      	add	r3, r2
 800c54a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c54e:	db05      	blt.n	800c55c <ip_reass_free_complete_datagram+0xe0>
 800c550:	4b15      	ldr	r3, [pc, #84]	; (800c5a8 <ip_reass_free_complete_datagram+0x12c>)
 800c552:	22cc      	movs	r2, #204	; 0xcc
 800c554:	4918      	ldr	r1, [pc, #96]	; (800c5b8 <ip_reass_free_complete_datagram+0x13c>)
 800c556:	4816      	ldr	r0, [pc, #88]	; (800c5b0 <ip_reass_free_complete_datagram+0x134>)
 800c558:	f000 fec2 	bl	800d2e0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800c55c:	8bfa      	ldrh	r2, [r7, #30]
 800c55e:	8a7b      	ldrh	r3, [r7, #18]
 800c560:	4413      	add	r3, r2
 800c562:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800c564:	68f8      	ldr	r0, [r7, #12]
 800c566:	f7f8 fc07 	bl	8004d78 <pbuf_free>
  while (p != NULL) {
 800c56a:	69bb      	ldr	r3, [r7, #24]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d1dc      	bne.n	800c52a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800c570:	6839      	ldr	r1, [r7, #0]
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f000 f8c2 	bl	800c6fc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800c578:	4b10      	ldr	r3, [pc, #64]	; (800c5bc <ip_reass_free_complete_datagram+0x140>)
 800c57a:	881b      	ldrh	r3, [r3, #0]
 800c57c:	8bfa      	ldrh	r2, [r7, #30]
 800c57e:	429a      	cmp	r2, r3
 800c580:	d905      	bls.n	800c58e <ip_reass_free_complete_datagram+0x112>
 800c582:	4b09      	ldr	r3, [pc, #36]	; (800c5a8 <ip_reass_free_complete_datagram+0x12c>)
 800c584:	22d2      	movs	r2, #210	; 0xd2
 800c586:	490e      	ldr	r1, [pc, #56]	; (800c5c0 <ip_reass_free_complete_datagram+0x144>)
 800c588:	4809      	ldr	r0, [pc, #36]	; (800c5b0 <ip_reass_free_complete_datagram+0x134>)
 800c58a:	f000 fea9 	bl	800d2e0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800c58e:	4b0b      	ldr	r3, [pc, #44]	; (800c5bc <ip_reass_free_complete_datagram+0x140>)
 800c590:	881a      	ldrh	r2, [r3, #0]
 800c592:	8bfb      	ldrh	r3, [r7, #30]
 800c594:	1ad3      	subs	r3, r2, r3
 800c596:	b29a      	uxth	r2, r3
 800c598:	4b08      	ldr	r3, [pc, #32]	; (800c5bc <ip_reass_free_complete_datagram+0x140>)
 800c59a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800c59c:	8bfb      	ldrh	r3, [r7, #30]
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3720      	adds	r7, #32
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}
 800c5a6:	bf00      	nop
 800c5a8:	08010b88 	.word	0x08010b88
 800c5ac:	08010bc4 	.word	0x08010bc4
 800c5b0:	08010bd0 	.word	0x08010bd0
 800c5b4:	08010bf8 	.word	0x08010bf8
 800c5b8:	08010c0c 	.word	0x08010c0c
 800c5bc:	2000841c 	.word	0x2000841c
 800c5c0:	08010c2c 	.word	0x08010c2c

0800c5c4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b08a      	sub	sp, #40	; 0x28
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
 800c5cc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800c5da:	2300      	movs	r3, #0
 800c5dc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800c5e2:	4b28      	ldr	r3, [pc, #160]	; (800c684 <ip_reass_remove_oldest_datagram+0xc0>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800c5e8:	e030      	b.n	800c64c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800c5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ec:	695a      	ldr	r2, [r3, #20]
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	68db      	ldr	r3, [r3, #12]
 800c5f2:	429a      	cmp	r2, r3
 800c5f4:	d10c      	bne.n	800c610 <ip_reass_remove_oldest_datagram+0x4c>
 800c5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5f8:	699a      	ldr	r2, [r3, #24]
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	691b      	ldr	r3, [r3, #16]
 800c5fe:	429a      	cmp	r2, r3
 800c600:	d106      	bne.n	800c610 <ip_reass_remove_oldest_datagram+0x4c>
 800c602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c604:	899a      	ldrh	r2, [r3, #12]
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	889b      	ldrh	r3, [r3, #4]
 800c60a:	b29b      	uxth	r3, r3
 800c60c:	429a      	cmp	r2, r3
 800c60e:	d014      	beq.n	800c63a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800c610:	693b      	ldr	r3, [r7, #16]
 800c612:	3301      	adds	r3, #1
 800c614:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800c616:	6a3b      	ldr	r3, [r7, #32]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d104      	bne.n	800c626 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800c61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c61e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800c620:	69fb      	ldr	r3, [r7, #28]
 800c622:	61bb      	str	r3, [r7, #24]
 800c624:	e009      	b.n	800c63a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800c626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c628:	7fda      	ldrb	r2, [r3, #31]
 800c62a:	6a3b      	ldr	r3, [r7, #32]
 800c62c:	7fdb      	ldrb	r3, [r3, #31]
 800c62e:	429a      	cmp	r2, r3
 800c630:	d803      	bhi.n	800c63a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800c632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c634:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800c636:	69fb      	ldr	r3, [r7, #28]
 800c638:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800c63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d001      	beq.n	800c646 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800c642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c644:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800c646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800c64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d1cb      	bne.n	800c5ea <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800c652:	6a3b      	ldr	r3, [r7, #32]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d008      	beq.n	800c66a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800c658:	69b9      	ldr	r1, [r7, #24]
 800c65a:	6a38      	ldr	r0, [r7, #32]
 800c65c:	f7ff ff0e 	bl	800c47c <ip_reass_free_complete_datagram>
 800c660:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800c662:	697a      	ldr	r2, [r7, #20]
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	4413      	add	r3, r2
 800c668:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800c66a:	697a      	ldr	r2, [r7, #20]
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	429a      	cmp	r2, r3
 800c670:	da02      	bge.n	800c678 <ip_reass_remove_oldest_datagram+0xb4>
 800c672:	693b      	ldr	r3, [r7, #16]
 800c674:	2b01      	cmp	r3, #1
 800c676:	dcac      	bgt.n	800c5d2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800c678:	697b      	ldr	r3, [r7, #20]
}
 800c67a:	4618      	mov	r0, r3
 800c67c:	3728      	adds	r7, #40	; 0x28
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}
 800c682:	bf00      	nop
 800c684:	20008418 	.word	0x20008418

0800c688 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b084      	sub	sp, #16
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
 800c690:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800c692:	2005      	movs	r0, #5
 800c694:	f7f7 fca6 	bl	8003fe4 <memp_malloc>
 800c698:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d110      	bne.n	800c6c2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800c6a0:	6839      	ldr	r1, [r7, #0]
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f7ff ff8e 	bl	800c5c4 <ip_reass_remove_oldest_datagram>
 800c6a8:	4602      	mov	r2, r0
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	4293      	cmp	r3, r2
 800c6ae:	dc03      	bgt.n	800c6b8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800c6b0:	2005      	movs	r0, #5
 800c6b2:	f7f7 fc97 	bl	8003fe4 <memp_malloc>
 800c6b6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d101      	bne.n	800c6c2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800c6be:	2300      	movs	r3, #0
 800c6c0:	e016      	b.n	800c6f0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800c6c2:	2220      	movs	r2, #32
 800c6c4:	2100      	movs	r1, #0
 800c6c6:	68f8      	ldr	r0, [r7, #12]
 800c6c8:	f000 fe02 	bl	800d2d0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	220f      	movs	r2, #15
 800c6d0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800c6d2:	4b09      	ldr	r3, [pc, #36]	; (800c6f8 <ip_reass_enqueue_new_datagram+0x70>)
 800c6d4:	681a      	ldr	r2, [r3, #0]
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800c6da:	4a07      	ldr	r2, [pc, #28]	; (800c6f8 <ip_reass_enqueue_new_datagram+0x70>)
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	3308      	adds	r3, #8
 800c6e4:	2214      	movs	r2, #20
 800c6e6:	6879      	ldr	r1, [r7, #4]
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	f000 fde3 	bl	800d2b4 <memcpy>
  return ipr;
 800c6ee:	68fb      	ldr	r3, [r7, #12]
}
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	3710      	adds	r7, #16
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bd80      	pop	{r7, pc}
 800c6f8:	20008418 	.word	0x20008418

0800c6fc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b082      	sub	sp, #8
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
 800c704:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800c706:	4b10      	ldr	r3, [pc, #64]	; (800c748 <ip_reass_dequeue_datagram+0x4c>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	687a      	ldr	r2, [r7, #4]
 800c70c:	429a      	cmp	r2, r3
 800c70e:	d104      	bne.n	800c71a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	4a0c      	ldr	r2, [pc, #48]	; (800c748 <ip_reass_dequeue_datagram+0x4c>)
 800c716:	6013      	str	r3, [r2, #0]
 800c718:	e00d      	b.n	800c736 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d106      	bne.n	800c72e <ip_reass_dequeue_datagram+0x32>
 800c720:	4b0a      	ldr	r3, [pc, #40]	; (800c74c <ip_reass_dequeue_datagram+0x50>)
 800c722:	f240 1245 	movw	r2, #325	; 0x145
 800c726:	490a      	ldr	r1, [pc, #40]	; (800c750 <ip_reass_dequeue_datagram+0x54>)
 800c728:	480a      	ldr	r0, [pc, #40]	; (800c754 <ip_reass_dequeue_datagram+0x58>)
 800c72a:	f000 fdd9 	bl	800d2e0 <iprintf>
    prev->next = ipr->next;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681a      	ldr	r2, [r3, #0]
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800c736:	6879      	ldr	r1, [r7, #4]
 800c738:	2005      	movs	r0, #5
 800c73a:	f7f7 fcc3 	bl	80040c4 <memp_free>
}
 800c73e:	bf00      	nop
 800c740:	3708      	adds	r7, #8
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}
 800c746:	bf00      	nop
 800c748:	20008418 	.word	0x20008418
 800c74c:	08010b88 	.word	0x08010b88
 800c750:	08010c50 	.word	0x08010c50
 800c754:	08010bd0 	.word	0x08010bd0

0800c758 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b08c      	sub	sp, #48	; 0x30
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	60f8      	str	r0, [r7, #12]
 800c760:	60b9      	str	r1, [r7, #8]
 800c762:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800c764:	2300      	movs	r3, #0
 800c766:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800c768:	2301      	movs	r3, #1
 800c76a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800c76c:	68bb      	ldr	r3, [r7, #8]
 800c76e:	685b      	ldr	r3, [r3, #4]
 800c770:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800c772:	69fb      	ldr	r3, [r7, #28]
 800c774:	885b      	ldrh	r3, [r3, #2]
 800c776:	b29b      	uxth	r3, r3
 800c778:	4618      	mov	r0, r3
 800c77a:	f7f6 ffbb 	bl	80036f4 <lwip_htons>
 800c77e:	4603      	mov	r3, r0
 800c780:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800c782:	69fb      	ldr	r3, [r7, #28]
 800c784:	781b      	ldrb	r3, [r3, #0]
 800c786:	f003 030f 	and.w	r3, r3, #15
 800c78a:	b2db      	uxtb	r3, r3
 800c78c:	009b      	lsls	r3, r3, #2
 800c78e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800c790:	7e7b      	ldrb	r3, [r7, #25]
 800c792:	b29b      	uxth	r3, r3
 800c794:	8b7a      	ldrh	r2, [r7, #26]
 800c796:	429a      	cmp	r2, r3
 800c798:	d202      	bcs.n	800c7a0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c79a:	f04f 33ff 	mov.w	r3, #4294967295
 800c79e:	e135      	b.n	800ca0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800c7a0:	7e7b      	ldrb	r3, [r7, #25]
 800c7a2:	b29b      	uxth	r3, r3
 800c7a4:	8b7a      	ldrh	r2, [r7, #26]
 800c7a6:	1ad3      	subs	r3, r2, r3
 800c7a8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800c7aa:	69fb      	ldr	r3, [r7, #28]
 800c7ac:	88db      	ldrh	r3, [r3, #6]
 800c7ae:	b29b      	uxth	r3, r3
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	f7f6 ff9f 	bl	80036f4 <lwip_htons>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c7bc:	b29b      	uxth	r3, r3
 800c7be:	00db      	lsls	r3, r3, #3
 800c7c0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	685b      	ldr	r3, [r3, #4]
 800c7c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800c7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	701a      	strb	r2, [r3, #0]
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	705a      	strb	r2, [r3, #1]
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	709a      	strb	r2, [r3, #2]
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800c7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7dc:	8afa      	ldrh	r2, [r7, #22]
 800c7de:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800c7e0:	8afa      	ldrh	r2, [r7, #22]
 800c7e2:	8b7b      	ldrh	r3, [r7, #26]
 800c7e4:	4413      	add	r3, r2
 800c7e6:	b29a      	uxth	r2, r3
 800c7e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ea:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800c7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ee:	88db      	ldrh	r3, [r3, #6]
 800c7f0:	b29b      	uxth	r3, r3
 800c7f2:	8afa      	ldrh	r2, [r7, #22]
 800c7f4:	429a      	cmp	r2, r3
 800c7f6:	d902      	bls.n	800c7fe <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c7f8:	f04f 33ff 	mov.w	r3, #4294967295
 800c7fc:	e106      	b.n	800ca0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	685b      	ldr	r3, [r3, #4]
 800c802:	627b      	str	r3, [r7, #36]	; 0x24
 800c804:	e068      	b.n	800c8d8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800c806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c808:	685b      	ldr	r3, [r3, #4]
 800c80a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800c80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c80e:	889b      	ldrh	r3, [r3, #4]
 800c810:	b29a      	uxth	r2, r3
 800c812:	693b      	ldr	r3, [r7, #16]
 800c814:	889b      	ldrh	r3, [r3, #4]
 800c816:	b29b      	uxth	r3, r3
 800c818:	429a      	cmp	r2, r3
 800c81a:	d235      	bcs.n	800c888 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800c81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c81e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c820:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800c822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c824:	2b00      	cmp	r3, #0
 800c826:	d020      	beq.n	800c86a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800c828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c82a:	889b      	ldrh	r3, [r3, #4]
 800c82c:	b29a      	uxth	r2, r3
 800c82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c830:	88db      	ldrh	r3, [r3, #6]
 800c832:	b29b      	uxth	r3, r3
 800c834:	429a      	cmp	r2, r3
 800c836:	d307      	bcc.n	800c848 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800c838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c83a:	88db      	ldrh	r3, [r3, #6]
 800c83c:	b29a      	uxth	r2, r3
 800c83e:	693b      	ldr	r3, [r7, #16]
 800c840:	889b      	ldrh	r3, [r3, #4]
 800c842:	b29b      	uxth	r3, r3
 800c844:	429a      	cmp	r2, r3
 800c846:	d902      	bls.n	800c84e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c848:	f04f 33ff 	mov.w	r3, #4294967295
 800c84c:	e0de      	b.n	800ca0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800c84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c850:	68ba      	ldr	r2, [r7, #8]
 800c852:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800c854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c856:	88db      	ldrh	r3, [r3, #6]
 800c858:	b29a      	uxth	r2, r3
 800c85a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c85c:	889b      	ldrh	r3, [r3, #4]
 800c85e:	b29b      	uxth	r3, r3
 800c860:	429a      	cmp	r2, r3
 800c862:	d03d      	beq.n	800c8e0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800c864:	2300      	movs	r3, #0
 800c866:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800c868:	e03a      	b.n	800c8e0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800c86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c86c:	88db      	ldrh	r3, [r3, #6]
 800c86e:	b29a      	uxth	r2, r3
 800c870:	693b      	ldr	r3, [r7, #16]
 800c872:	889b      	ldrh	r3, [r3, #4]
 800c874:	b29b      	uxth	r3, r3
 800c876:	429a      	cmp	r2, r3
 800c878:	d902      	bls.n	800c880 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c87a:	f04f 33ff 	mov.w	r3, #4294967295
 800c87e:	e0c5      	b.n	800ca0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	68ba      	ldr	r2, [r7, #8]
 800c884:	605a      	str	r2, [r3, #4]
      break;
 800c886:	e02b      	b.n	800c8e0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800c888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c88a:	889b      	ldrh	r3, [r3, #4]
 800c88c:	b29a      	uxth	r2, r3
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	889b      	ldrh	r3, [r3, #4]
 800c892:	b29b      	uxth	r3, r3
 800c894:	429a      	cmp	r2, r3
 800c896:	d102      	bne.n	800c89e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c898:	f04f 33ff 	mov.w	r3, #4294967295
 800c89c:	e0b6      	b.n	800ca0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800c89e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8a0:	889b      	ldrh	r3, [r3, #4]
 800c8a2:	b29a      	uxth	r2, r3
 800c8a4:	693b      	ldr	r3, [r7, #16]
 800c8a6:	88db      	ldrh	r3, [r3, #6]
 800c8a8:	b29b      	uxth	r3, r3
 800c8aa:	429a      	cmp	r2, r3
 800c8ac:	d202      	bcs.n	800c8b4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c8ae:	f04f 33ff 	mov.w	r3, #4294967295
 800c8b2:	e0ab      	b.n	800ca0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800c8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d009      	beq.n	800c8ce <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800c8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8bc:	88db      	ldrh	r3, [r3, #6]
 800c8be:	b29a      	uxth	r2, r3
 800c8c0:	693b      	ldr	r3, [r7, #16]
 800c8c2:	889b      	ldrh	r3, [r3, #4]
 800c8c4:	b29b      	uxth	r3, r3
 800c8c6:	429a      	cmp	r2, r3
 800c8c8:	d001      	beq.n	800c8ce <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800c8ce:	693b      	ldr	r3, [r7, #16]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800c8d4:	693b      	ldr	r3, [r7, #16]
 800c8d6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800c8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d193      	bne.n	800c806 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800c8de:	e000      	b.n	800c8e2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800c8e0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800c8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d12d      	bne.n	800c944 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800c8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d01c      	beq.n	800c928 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800c8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8f0:	88db      	ldrh	r3, [r3, #6]
 800c8f2:	b29a      	uxth	r2, r3
 800c8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f6:	889b      	ldrh	r3, [r3, #4]
 800c8f8:	b29b      	uxth	r3, r3
 800c8fa:	429a      	cmp	r2, r3
 800c8fc:	d906      	bls.n	800c90c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800c8fe:	4b45      	ldr	r3, [pc, #276]	; (800ca14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c900:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800c904:	4944      	ldr	r1, [pc, #272]	; (800ca18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800c906:	4845      	ldr	r0, [pc, #276]	; (800ca1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c908:	f000 fcea 	bl	800d2e0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800c90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c90e:	68ba      	ldr	r2, [r7, #8]
 800c910:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800c912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c914:	88db      	ldrh	r3, [r3, #6]
 800c916:	b29a      	uxth	r2, r3
 800c918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c91a:	889b      	ldrh	r3, [r3, #4]
 800c91c:	b29b      	uxth	r3, r3
 800c91e:	429a      	cmp	r2, r3
 800c920:	d010      	beq.n	800c944 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800c922:	2300      	movs	r3, #0
 800c924:	623b      	str	r3, [r7, #32]
 800c926:	e00d      	b.n	800c944 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	685b      	ldr	r3, [r3, #4]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d006      	beq.n	800c93e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800c930:	4b38      	ldr	r3, [pc, #224]	; (800ca14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c932:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800c936:	493a      	ldr	r1, [pc, #232]	; (800ca20 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800c938:	4838      	ldr	r0, [pc, #224]	; (800ca1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c93a:	f000 fcd1 	bl	800d2e0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	68ba      	ldr	r2, [r7, #8]
 800c942:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d105      	bne.n	800c956 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	7f9b      	ldrb	r3, [r3, #30]
 800c94e:	f003 0301 	and.w	r3, r3, #1
 800c952:	2b00      	cmp	r3, #0
 800c954:	d059      	beq.n	800ca0a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800c956:	6a3b      	ldr	r3, [r7, #32]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d04f      	beq.n	800c9fc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	685b      	ldr	r3, [r3, #4]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d006      	beq.n	800c972 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	685b      	ldr	r3, [r3, #4]
 800c968:	685b      	ldr	r3, [r3, #4]
 800c96a:	889b      	ldrh	r3, [r3, #4]
 800c96c:	b29b      	uxth	r3, r3
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d002      	beq.n	800c978 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800c972:	2300      	movs	r3, #0
 800c974:	623b      	str	r3, [r7, #32]
 800c976:	e041      	b.n	800c9fc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800c978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c97a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800c97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800c982:	e012      	b.n	800c9aa <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800c984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c986:	685b      	ldr	r3, [r3, #4]
 800c988:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800c98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c98c:	88db      	ldrh	r3, [r3, #6]
 800c98e:	b29a      	uxth	r2, r3
 800c990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c992:	889b      	ldrh	r3, [r3, #4]
 800c994:	b29b      	uxth	r3, r3
 800c996:	429a      	cmp	r2, r3
 800c998:	d002      	beq.n	800c9a0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800c99a:	2300      	movs	r3, #0
 800c99c:	623b      	str	r3, [r7, #32]
            break;
 800c99e:	e007      	b.n	800c9b0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800c9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9a2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800c9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800c9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d1e9      	bne.n	800c984 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800c9b0:	6a3b      	ldr	r3, [r7, #32]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d022      	beq.n	800c9fc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	685b      	ldr	r3, [r3, #4]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d106      	bne.n	800c9cc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800c9be:	4b15      	ldr	r3, [pc, #84]	; (800ca14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c9c0:	f240 12df 	movw	r2, #479	; 0x1df
 800c9c4:	4917      	ldr	r1, [pc, #92]	; (800ca24 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800c9c6:	4815      	ldr	r0, [pc, #84]	; (800ca1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c9c8:	f000 fc8a 	bl	800d2e0 <iprintf>
          LWIP_ASSERT("sanity check",
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	685b      	ldr	r3, [r3, #4]
 800c9d0:	685b      	ldr	r3, [r3, #4]
 800c9d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9d4:	429a      	cmp	r2, r3
 800c9d6:	d106      	bne.n	800c9e6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800c9d8:	4b0e      	ldr	r3, [pc, #56]	; (800ca14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c9da:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c9de:	4911      	ldr	r1, [pc, #68]	; (800ca24 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800c9e0:	480e      	ldr	r0, [pc, #56]	; (800ca1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c9e2:	f000 fc7d 	bl	800d2e0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800c9e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d006      	beq.n	800c9fc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800c9ee:	4b09      	ldr	r3, [pc, #36]	; (800ca14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c9f0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800c9f4:	490c      	ldr	r1, [pc, #48]	; (800ca28 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800c9f6:	4809      	ldr	r0, [pc, #36]	; (800ca1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c9f8:	f000 fc72 	bl	800d2e0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800c9fc:	6a3b      	ldr	r3, [r7, #32]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	bf14      	ite	ne
 800ca02:	2301      	movne	r3, #1
 800ca04:	2300      	moveq	r3, #0
 800ca06:	b2db      	uxtb	r3, r3
 800ca08:	e000      	b.n	800ca0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800ca0a:	2300      	movs	r3, #0
}
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	3730      	adds	r7, #48	; 0x30
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bd80      	pop	{r7, pc}
 800ca14:	08010b88 	.word	0x08010b88
 800ca18:	08010c6c 	.word	0x08010c6c
 800ca1c:	08010bd0 	.word	0x08010bd0
 800ca20:	08010c8c 	.word	0x08010c8c
 800ca24:	08010cc4 	.word	0x08010cc4
 800ca28:	08010cd4 	.word	0x08010cd4

0800ca2c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b08e      	sub	sp, #56	; 0x38
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	685b      	ldr	r3, [r3, #4]
 800ca38:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800ca3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca3c:	781b      	ldrb	r3, [r3, #0]
 800ca3e:	f003 030f 	and.w	r3, r3, #15
 800ca42:	b2db      	uxtb	r3, r3
 800ca44:	009b      	lsls	r3, r3, #2
 800ca46:	b2db      	uxtb	r3, r3
 800ca48:	2b14      	cmp	r3, #20
 800ca4a:	f040 8171 	bne.w	800cd30 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800ca4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca50:	88db      	ldrh	r3, [r3, #6]
 800ca52:	b29b      	uxth	r3, r3
 800ca54:	4618      	mov	r0, r3
 800ca56:	f7f6 fe4d 	bl	80036f4 <lwip_htons>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ca60:	b29b      	uxth	r3, r3
 800ca62:	00db      	lsls	r3, r3, #3
 800ca64:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800ca66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca68:	885b      	ldrh	r3, [r3, #2]
 800ca6a:	b29b      	uxth	r3, r3
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	f7f6 fe41 	bl	80036f4 <lwip_htons>
 800ca72:	4603      	mov	r3, r0
 800ca74:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800ca76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca78:	781b      	ldrb	r3, [r3, #0]
 800ca7a:	f003 030f 	and.w	r3, r3, #15
 800ca7e:	b2db      	uxtb	r3, r3
 800ca80:	009b      	lsls	r3, r3, #2
 800ca82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800ca86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ca8a:	b29b      	uxth	r3, r3
 800ca8c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ca8e:	429a      	cmp	r2, r3
 800ca90:	f0c0 8150 	bcc.w	800cd34 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800ca94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ca98:	b29b      	uxth	r3, r3
 800ca9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ca9c:	1ad3      	subs	r3, r2, r3
 800ca9e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800caa0:	6878      	ldr	r0, [r7, #4]
 800caa2:	f7f8 f9f1 	bl	8004e88 <pbuf_clen>
 800caa6:	4603      	mov	r3, r0
 800caa8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800caaa:	4b8c      	ldr	r3, [pc, #560]	; (800ccdc <ip4_reass+0x2b0>)
 800caac:	881b      	ldrh	r3, [r3, #0]
 800caae:	461a      	mov	r2, r3
 800cab0:	8c3b      	ldrh	r3, [r7, #32]
 800cab2:	4413      	add	r3, r2
 800cab4:	2b0a      	cmp	r3, #10
 800cab6:	dd10      	ble.n	800cada <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800cab8:	8c3b      	ldrh	r3, [r7, #32]
 800caba:	4619      	mov	r1, r3
 800cabc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cabe:	f7ff fd81 	bl	800c5c4 <ip_reass_remove_oldest_datagram>
 800cac2:	4603      	mov	r3, r0
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	f000 8137 	beq.w	800cd38 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800caca:	4b84      	ldr	r3, [pc, #528]	; (800ccdc <ip4_reass+0x2b0>)
 800cacc:	881b      	ldrh	r3, [r3, #0]
 800cace:	461a      	mov	r2, r3
 800cad0:	8c3b      	ldrh	r3, [r7, #32]
 800cad2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800cad4:	2b0a      	cmp	r3, #10
 800cad6:	f300 812f 	bgt.w	800cd38 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800cada:	4b81      	ldr	r3, [pc, #516]	; (800cce0 <ip4_reass+0x2b4>)
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	633b      	str	r3, [r7, #48]	; 0x30
 800cae0:	e015      	b.n	800cb0e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800cae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cae4:	695a      	ldr	r2, [r3, #20]
 800cae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cae8:	68db      	ldr	r3, [r3, #12]
 800caea:	429a      	cmp	r2, r3
 800caec:	d10c      	bne.n	800cb08 <ip4_reass+0xdc>
 800caee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caf0:	699a      	ldr	r2, [r3, #24]
 800caf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caf4:	691b      	ldr	r3, [r3, #16]
 800caf6:	429a      	cmp	r2, r3
 800caf8:	d106      	bne.n	800cb08 <ip4_reass+0xdc>
 800cafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cafc:	899a      	ldrh	r2, [r3, #12]
 800cafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb00:	889b      	ldrh	r3, [r3, #4]
 800cb02:	b29b      	uxth	r3, r3
 800cb04:	429a      	cmp	r2, r3
 800cb06:	d006      	beq.n	800cb16 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800cb08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	633b      	str	r3, [r7, #48]	; 0x30
 800cb0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d1e6      	bne.n	800cae2 <ip4_reass+0xb6>
 800cb14:	e000      	b.n	800cb18 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800cb16:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800cb18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d109      	bne.n	800cb32 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800cb1e:	8c3b      	ldrh	r3, [r7, #32]
 800cb20:	4619      	mov	r1, r3
 800cb22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb24:	f7ff fdb0 	bl	800c688 <ip_reass_enqueue_new_datagram>
 800cb28:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800cb2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d11c      	bne.n	800cb6a <ip4_reass+0x13e>
      goto nullreturn;
 800cb30:	e105      	b.n	800cd3e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800cb32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb34:	88db      	ldrh	r3, [r3, #6]
 800cb36:	b29b      	uxth	r3, r3
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f7f6 fddb 	bl	80036f4 <lwip_htons>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d110      	bne.n	800cb6a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800cb48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb4a:	89db      	ldrh	r3, [r3, #14]
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	f7f6 fdd1 	bl	80036f4 <lwip_htons>
 800cb52:	4603      	mov	r3, r0
 800cb54:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d006      	beq.n	800cb6a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800cb5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb5e:	3308      	adds	r3, #8
 800cb60:	2214      	movs	r2, #20
 800cb62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb64:	4618      	mov	r0, r3
 800cb66:	f000 fba5 	bl	800d2b4 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800cb6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb6c:	88db      	ldrh	r3, [r3, #6]
 800cb6e:	b29b      	uxth	r3, r3
 800cb70:	f003 0320 	and.w	r3, r3, #32
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	bf0c      	ite	eq
 800cb78:	2301      	moveq	r3, #1
 800cb7a:	2300      	movne	r3, #0
 800cb7c:	b2db      	uxtb	r3, r3
 800cb7e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800cb80:	69fb      	ldr	r3, [r7, #28]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d00e      	beq.n	800cba4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800cb86:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cb88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb8a:	4413      	add	r3, r2
 800cb8c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800cb8e:	8b7a      	ldrh	r2, [r7, #26]
 800cb90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cb92:	429a      	cmp	r2, r3
 800cb94:	f0c0 80a0 	bcc.w	800ccd8 <ip4_reass+0x2ac>
 800cb98:	8b7b      	ldrh	r3, [r7, #26]
 800cb9a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800cb9e:	4293      	cmp	r3, r2
 800cba0:	f200 809a 	bhi.w	800ccd8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800cba4:	69fa      	ldr	r2, [r7, #28]
 800cba6:	6879      	ldr	r1, [r7, #4]
 800cba8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cbaa:	f7ff fdd5 	bl	800c758 <ip_reass_chain_frag_into_datagram_and_validate>
 800cbae:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800cbb0:	697b      	ldr	r3, [r7, #20]
 800cbb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbb6:	f000 809b 	beq.w	800ccf0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800cbba:	4b48      	ldr	r3, [pc, #288]	; (800ccdc <ip4_reass+0x2b0>)
 800cbbc:	881a      	ldrh	r2, [r3, #0]
 800cbbe:	8c3b      	ldrh	r3, [r7, #32]
 800cbc0:	4413      	add	r3, r2
 800cbc2:	b29a      	uxth	r2, r3
 800cbc4:	4b45      	ldr	r3, [pc, #276]	; (800ccdc <ip4_reass+0x2b0>)
 800cbc6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800cbc8:	69fb      	ldr	r3, [r7, #28]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d00d      	beq.n	800cbea <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800cbce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cbd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cbd2:	4413      	add	r3, r2
 800cbd4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800cbd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbd8:	8a7a      	ldrh	r2, [r7, #18]
 800cbda:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800cbdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbde:	7f9b      	ldrb	r3, [r3, #30]
 800cbe0:	f043 0301 	orr.w	r3, r3, #1
 800cbe4:	b2da      	uxtb	r2, r3
 800cbe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbe8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800cbea:	697b      	ldr	r3, [r7, #20]
 800cbec:	2b01      	cmp	r3, #1
 800cbee:	d171      	bne.n	800ccd4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800cbf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf2:	8b9b      	ldrh	r3, [r3, #28]
 800cbf4:	3314      	adds	r3, #20
 800cbf6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800cbf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbfa:	685b      	ldr	r3, [r3, #4]
 800cbfc:	685b      	ldr	r3, [r3, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800cc02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc04:	685b      	ldr	r3, [r3, #4]
 800cc06:	685b      	ldr	r3, [r3, #4]
 800cc08:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800cc0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc0c:	3308      	adds	r3, #8
 800cc0e:	2214      	movs	r2, #20
 800cc10:	4619      	mov	r1, r3
 800cc12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc14:	f000 fb4e 	bl	800d2b4 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800cc18:	8a3b      	ldrh	r3, [r7, #16]
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f7f6 fd6a 	bl	80036f4 <lwip_htons>
 800cc20:	4603      	mov	r3, r0
 800cc22:	461a      	mov	r2, r3
 800cc24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc26:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800cc28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	719a      	strb	r2, [r3, #6]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800cc32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc34:	2200      	movs	r2, #0
 800cc36:	729a      	strb	r2, [r3, #10]
 800cc38:	2200      	movs	r2, #0
 800cc3a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800cc3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc3e:	685b      	ldr	r3, [r3, #4]
 800cc40:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800cc42:	e00d      	b.n	800cc60 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800cc44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc46:	685b      	ldr	r3, [r3, #4]
 800cc48:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800cc4a:	2114      	movs	r1, #20
 800cc4c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800cc4e:	f7f8 f80d 	bl	8004c6c <pbuf_remove_header>
      pbuf_cat(p, r);
 800cc52:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cc54:	6878      	ldr	r0, [r7, #4]
 800cc56:	f7f8 f951 	bl	8004efc <pbuf_cat>
      r = iprh->next_pbuf;
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800cc60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d1ee      	bne.n	800cc44 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800cc66:	4b1e      	ldr	r3, [pc, #120]	; (800cce0 <ip4_reass+0x2b4>)
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc6c:	429a      	cmp	r2, r3
 800cc6e:	d102      	bne.n	800cc76 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800cc70:	2300      	movs	r3, #0
 800cc72:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc74:	e010      	b.n	800cc98 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800cc76:	4b1a      	ldr	r3, [pc, #104]	; (800cce0 <ip4_reass+0x2b4>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc7c:	e007      	b.n	800cc8e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800cc7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc84:	429a      	cmp	r2, r3
 800cc86:	d006      	beq.n	800cc96 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800cc88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d1f4      	bne.n	800cc7e <ip4_reass+0x252>
 800cc94:	e000      	b.n	800cc98 <ip4_reass+0x26c>
          break;
 800cc96:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800cc98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cc9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc9c:	f7ff fd2e 	bl	800c6fc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800cca0:	6878      	ldr	r0, [r7, #4]
 800cca2:	f7f8 f8f1 	bl	8004e88 <pbuf_clen>
 800cca6:	4603      	mov	r3, r0
 800cca8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800ccaa:	4b0c      	ldr	r3, [pc, #48]	; (800ccdc <ip4_reass+0x2b0>)
 800ccac:	881b      	ldrh	r3, [r3, #0]
 800ccae:	8c3a      	ldrh	r2, [r7, #32]
 800ccb0:	429a      	cmp	r2, r3
 800ccb2:	d906      	bls.n	800ccc2 <ip4_reass+0x296>
 800ccb4:	4b0b      	ldr	r3, [pc, #44]	; (800cce4 <ip4_reass+0x2b8>)
 800ccb6:	f240 229b 	movw	r2, #667	; 0x29b
 800ccba:	490b      	ldr	r1, [pc, #44]	; (800cce8 <ip4_reass+0x2bc>)
 800ccbc:	480b      	ldr	r0, [pc, #44]	; (800ccec <ip4_reass+0x2c0>)
 800ccbe:	f000 fb0f 	bl	800d2e0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800ccc2:	4b06      	ldr	r3, [pc, #24]	; (800ccdc <ip4_reass+0x2b0>)
 800ccc4:	881a      	ldrh	r2, [r3, #0]
 800ccc6:	8c3b      	ldrh	r3, [r7, #32]
 800ccc8:	1ad3      	subs	r3, r2, r3
 800ccca:	b29a      	uxth	r2, r3
 800cccc:	4b03      	ldr	r3, [pc, #12]	; (800ccdc <ip4_reass+0x2b0>)
 800ccce:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	e038      	b.n	800cd46 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	e036      	b.n	800cd46 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800ccd8:	bf00      	nop
 800ccda:	e00a      	b.n	800ccf2 <ip4_reass+0x2c6>
 800ccdc:	2000841c 	.word	0x2000841c
 800cce0:	20008418 	.word	0x20008418
 800cce4:	08010b88 	.word	0x08010b88
 800cce8:	08010cf8 	.word	0x08010cf8
 800ccec:	08010bd0 	.word	0x08010bd0
    goto nullreturn_ipr;
 800ccf0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800ccf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d106      	bne.n	800cd06 <ip4_reass+0x2da>
 800ccf8:	4b15      	ldr	r3, [pc, #84]	; (800cd50 <ip4_reass+0x324>)
 800ccfa:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800ccfe:	4915      	ldr	r1, [pc, #84]	; (800cd54 <ip4_reass+0x328>)
 800cd00:	4815      	ldr	r0, [pc, #84]	; (800cd58 <ip4_reass+0x32c>)
 800cd02:	f000 faed 	bl	800d2e0 <iprintf>
  if (ipr->p == NULL) {
 800cd06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd08:	685b      	ldr	r3, [r3, #4]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d116      	bne.n	800cd3c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800cd0e:	4b13      	ldr	r3, [pc, #76]	; (800cd5c <ip4_reass+0x330>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd14:	429a      	cmp	r2, r3
 800cd16:	d006      	beq.n	800cd26 <ip4_reass+0x2fa>
 800cd18:	4b0d      	ldr	r3, [pc, #52]	; (800cd50 <ip4_reass+0x324>)
 800cd1a:	f240 22ab 	movw	r2, #683	; 0x2ab
 800cd1e:	4910      	ldr	r1, [pc, #64]	; (800cd60 <ip4_reass+0x334>)
 800cd20:	480d      	ldr	r0, [pc, #52]	; (800cd58 <ip4_reass+0x32c>)
 800cd22:	f000 fadd 	bl	800d2e0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800cd26:	2100      	movs	r1, #0
 800cd28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd2a:	f7ff fce7 	bl	800c6fc <ip_reass_dequeue_datagram>
 800cd2e:	e006      	b.n	800cd3e <ip4_reass+0x312>
    goto nullreturn;
 800cd30:	bf00      	nop
 800cd32:	e004      	b.n	800cd3e <ip4_reass+0x312>
    goto nullreturn;
 800cd34:	bf00      	nop
 800cd36:	e002      	b.n	800cd3e <ip4_reass+0x312>
      goto nullreturn;
 800cd38:	bf00      	nop
 800cd3a:	e000      	b.n	800cd3e <ip4_reass+0x312>
  }

nullreturn:
 800cd3c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800cd3e:	6878      	ldr	r0, [r7, #4]
 800cd40:	f7f8 f81a 	bl	8004d78 <pbuf_free>
  return NULL;
 800cd44:	2300      	movs	r3, #0
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	3738      	adds	r7, #56	; 0x38
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bd80      	pop	{r7, pc}
 800cd4e:	bf00      	nop
 800cd50:	08010b88 	.word	0x08010b88
 800cd54:	08010d14 	.word	0x08010d14
 800cd58:	08010bd0 	.word	0x08010bd0
 800cd5c:	20008418 	.word	0x20008418
 800cd60:	08010d20 	.word	0x08010d20

0800cd64 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800cd68:	2006      	movs	r0, #6
 800cd6a:	f7f7 f93b 	bl	8003fe4 <memp_malloc>
 800cd6e:	4603      	mov	r3, r0
}
 800cd70:	4618      	mov	r0, r3
 800cd72:	bd80      	pop	{r7, pc}

0800cd74 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b082      	sub	sp, #8
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d106      	bne.n	800cd90 <ip_frag_free_pbuf_custom_ref+0x1c>
 800cd82:	4b07      	ldr	r3, [pc, #28]	; (800cda0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800cd84:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800cd88:	4906      	ldr	r1, [pc, #24]	; (800cda4 <ip_frag_free_pbuf_custom_ref+0x30>)
 800cd8a:	4807      	ldr	r0, [pc, #28]	; (800cda8 <ip_frag_free_pbuf_custom_ref+0x34>)
 800cd8c:	f000 faa8 	bl	800d2e0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800cd90:	6879      	ldr	r1, [r7, #4]
 800cd92:	2006      	movs	r0, #6
 800cd94:	f7f7 f996 	bl	80040c4 <memp_free>
}
 800cd98:	bf00      	nop
 800cd9a:	3708      	adds	r7, #8
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}
 800cda0:	08010b88 	.word	0x08010b88
 800cda4:	08010d40 	.word	0x08010d40
 800cda8:	08010bd0 	.word	0x08010bd0

0800cdac <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b084      	sub	sp, #16
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d106      	bne.n	800cdcc <ipfrag_free_pbuf_custom+0x20>
 800cdbe:	4b11      	ldr	r3, [pc, #68]	; (800ce04 <ipfrag_free_pbuf_custom+0x58>)
 800cdc0:	f240 22ce 	movw	r2, #718	; 0x2ce
 800cdc4:	4910      	ldr	r1, [pc, #64]	; (800ce08 <ipfrag_free_pbuf_custom+0x5c>)
 800cdc6:	4811      	ldr	r0, [pc, #68]	; (800ce0c <ipfrag_free_pbuf_custom+0x60>)
 800cdc8:	f000 fa8a 	bl	800d2e0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800cdcc:	68fa      	ldr	r2, [r7, #12]
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	429a      	cmp	r2, r3
 800cdd2:	d006      	beq.n	800cde2 <ipfrag_free_pbuf_custom+0x36>
 800cdd4:	4b0b      	ldr	r3, [pc, #44]	; (800ce04 <ipfrag_free_pbuf_custom+0x58>)
 800cdd6:	f240 22cf 	movw	r2, #719	; 0x2cf
 800cdda:	490d      	ldr	r1, [pc, #52]	; (800ce10 <ipfrag_free_pbuf_custom+0x64>)
 800cddc:	480b      	ldr	r0, [pc, #44]	; (800ce0c <ipfrag_free_pbuf_custom+0x60>)
 800cdde:	f000 fa7f 	bl	800d2e0 <iprintf>
  if (pcr->original != NULL) {
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	695b      	ldr	r3, [r3, #20]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d004      	beq.n	800cdf4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	695b      	ldr	r3, [r3, #20]
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f7f7 ffc2 	bl	8004d78 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800cdf4:	68f8      	ldr	r0, [r7, #12]
 800cdf6:	f7ff ffbd 	bl	800cd74 <ip_frag_free_pbuf_custom_ref>
}
 800cdfa:	bf00      	nop
 800cdfc:	3710      	adds	r7, #16
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}
 800ce02:	bf00      	nop
 800ce04:	08010b88 	.word	0x08010b88
 800ce08:	08010d4c 	.word	0x08010d4c
 800ce0c:	08010bd0 	.word	0x08010bd0
 800ce10:	08010d58 	.word	0x08010d58

0800ce14 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b094      	sub	sp, #80	; 0x50
 800ce18:	af02      	add	r7, sp, #8
 800ce1a:	60f8      	str	r0, [r7, #12]
 800ce1c:	60b9      	str	r1, [r7, #8]
 800ce1e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800ce20:	2300      	movs	r3, #0
 800ce22:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800ce26:	68bb      	ldr	r3, [r7, #8]
 800ce28:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ce2a:	3b14      	subs	r3, #20
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	da00      	bge.n	800ce32 <ip4_frag+0x1e>
 800ce30:	3307      	adds	r3, #7
 800ce32:	10db      	asrs	r3, r3, #3
 800ce34:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800ce36:	2314      	movs	r3, #20
 800ce38:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	685b      	ldr	r3, [r3, #4]
 800ce3e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800ce40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce42:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800ce44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce46:	781b      	ldrb	r3, [r3, #0]
 800ce48:	f003 030f 	and.w	r3, r3, #15
 800ce4c:	b2db      	uxtb	r3, r3
 800ce4e:	009b      	lsls	r3, r3, #2
 800ce50:	b2db      	uxtb	r3, r3
 800ce52:	2b14      	cmp	r3, #20
 800ce54:	d002      	beq.n	800ce5c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800ce56:	f06f 0305 	mvn.w	r3, #5
 800ce5a:	e110      	b.n	800d07e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	895b      	ldrh	r3, [r3, #10]
 800ce60:	2b13      	cmp	r3, #19
 800ce62:	d809      	bhi.n	800ce78 <ip4_frag+0x64>
 800ce64:	4b88      	ldr	r3, [pc, #544]	; (800d088 <ip4_frag+0x274>)
 800ce66:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800ce6a:	4988      	ldr	r1, [pc, #544]	; (800d08c <ip4_frag+0x278>)
 800ce6c:	4888      	ldr	r0, [pc, #544]	; (800d090 <ip4_frag+0x27c>)
 800ce6e:	f000 fa37 	bl	800d2e0 <iprintf>
 800ce72:	f06f 0305 	mvn.w	r3, #5
 800ce76:	e102      	b.n	800d07e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800ce78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce7a:	88db      	ldrh	r3, [r3, #6]
 800ce7c:	b29b      	uxth	r3, r3
 800ce7e:	4618      	mov	r0, r3
 800ce80:	f7f6 fc38 	bl	80036f4 <lwip_htons>
 800ce84:	4603      	mov	r3, r0
 800ce86:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800ce88:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ce8a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ce8e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800ce92:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ce94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ce98:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	891b      	ldrh	r3, [r3, #8]
 800ce9e:	3b14      	subs	r3, #20
 800cea0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800cea4:	e0e1      	b.n	800d06a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800cea6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cea8:	00db      	lsls	r3, r3, #3
 800ceaa:	b29b      	uxth	r3, r3
 800ceac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ceb0:	4293      	cmp	r3, r2
 800ceb2:	bf28      	it	cs
 800ceb4:	4613      	movcs	r3, r2
 800ceb6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800ceb8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cebc:	2114      	movs	r1, #20
 800cebe:	200e      	movs	r0, #14
 800cec0:	f7f7 fc76 	bl	80047b0 <pbuf_alloc>
 800cec4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800cec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	f000 80d5 	beq.w	800d078 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800cece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ced0:	895b      	ldrh	r3, [r3, #10]
 800ced2:	2b13      	cmp	r3, #19
 800ced4:	d806      	bhi.n	800cee4 <ip4_frag+0xd0>
 800ced6:	4b6c      	ldr	r3, [pc, #432]	; (800d088 <ip4_frag+0x274>)
 800ced8:	f44f 7249 	mov.w	r2, #804	; 0x324
 800cedc:	496d      	ldr	r1, [pc, #436]	; (800d094 <ip4_frag+0x280>)
 800cede:	486c      	ldr	r0, [pc, #432]	; (800d090 <ip4_frag+0x27c>)
 800cee0:	f000 f9fe 	bl	800d2e0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800cee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cee6:	685b      	ldr	r3, [r3, #4]
 800cee8:	2214      	movs	r2, #20
 800ceea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ceec:	4618      	mov	r0, r3
 800ceee:	f000 f9e1 	bl	800d2b4 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800cef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cef4:	685b      	ldr	r3, [r3, #4]
 800cef6:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800cef8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800cefa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800cefe:	e064      	b.n	800cfca <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	895a      	ldrh	r2, [r3, #10]
 800cf04:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cf06:	1ad3      	subs	r3, r2, r3
 800cf08:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	895b      	ldrh	r3, [r3, #10]
 800cf0e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800cf10:	429a      	cmp	r2, r3
 800cf12:	d906      	bls.n	800cf22 <ip4_frag+0x10e>
 800cf14:	4b5c      	ldr	r3, [pc, #368]	; (800d088 <ip4_frag+0x274>)
 800cf16:	f240 322d 	movw	r2, #813	; 0x32d
 800cf1a:	495f      	ldr	r1, [pc, #380]	; (800d098 <ip4_frag+0x284>)
 800cf1c:	485c      	ldr	r0, [pc, #368]	; (800d090 <ip4_frag+0x27c>)
 800cf1e:	f000 f9df 	bl	800d2e0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800cf22:	8bfa      	ldrh	r2, [r7, #30]
 800cf24:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800cf28:	4293      	cmp	r3, r2
 800cf2a:	bf28      	it	cs
 800cf2c:	4613      	movcs	r3, r2
 800cf2e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800cf32:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d105      	bne.n	800cf46 <ip4_frag+0x132>
        poff = 0;
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	60fb      	str	r3, [r7, #12]
        continue;
 800cf44:	e041      	b.n	800cfca <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800cf46:	f7ff ff0d 	bl	800cd64 <ip_frag_alloc_pbuf_custom_ref>
 800cf4a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800cf4c:	69bb      	ldr	r3, [r7, #24]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d103      	bne.n	800cf5a <ip4_frag+0x146>
        pbuf_free(rambuf);
 800cf52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cf54:	f7f7 ff10 	bl	8004d78 <pbuf_free>
        goto memerr;
 800cf58:	e08f      	b.n	800d07a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800cf5a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800cf60:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cf62:	4413      	add	r3, r2
 800cf64:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800cf68:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800cf6c:	9201      	str	r2, [sp, #4]
 800cf6e:	9300      	str	r3, [sp, #0]
 800cf70:	4603      	mov	r3, r0
 800cf72:	2241      	movs	r2, #65	; 0x41
 800cf74:	2000      	movs	r0, #0
 800cf76:	f7f7 fd45 	bl	8004a04 <pbuf_alloced_custom>
 800cf7a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800cf7c:	697b      	ldr	r3, [r7, #20]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d106      	bne.n	800cf90 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800cf82:	69b8      	ldr	r0, [r7, #24]
 800cf84:	f7ff fef6 	bl	800cd74 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800cf88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cf8a:	f7f7 fef5 	bl	8004d78 <pbuf_free>
        goto memerr;
 800cf8e:	e074      	b.n	800d07a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800cf90:	68f8      	ldr	r0, [r7, #12]
 800cf92:	f7f7 ff91 	bl	8004eb8 <pbuf_ref>
      pcr->original = p;
 800cf96:	69bb      	ldr	r3, [r7, #24]
 800cf98:	68fa      	ldr	r2, [r7, #12]
 800cf9a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800cf9c:	69bb      	ldr	r3, [r7, #24]
 800cf9e:	4a3f      	ldr	r2, [pc, #252]	; (800d09c <ip4_frag+0x288>)
 800cfa0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800cfa2:	6979      	ldr	r1, [r7, #20]
 800cfa4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cfa6:	f7f7 ffa9 	bl	8004efc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800cfaa:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800cfae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800cfb2:	1ad3      	subs	r3, r2, r3
 800cfb4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800cfb8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d004      	beq.n	800cfca <ip4_frag+0x1b6>
        poff = 0;
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800cfca:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d196      	bne.n	800cf00 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800cfd2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800cfd4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800cfd8:	4413      	add	r3, r2
 800cfda:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800cfdc:	68bb      	ldr	r3, [r7, #8]
 800cfde:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cfe0:	f1a3 0213 	sub.w	r2, r3, #19
 800cfe4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cfe8:	429a      	cmp	r2, r3
 800cfea:	bfcc      	ite	gt
 800cfec:	2301      	movgt	r3, #1
 800cfee:	2300      	movle	r3, #0
 800cff0:	b2db      	uxtb	r3, r3
 800cff2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800cff4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cff8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cffc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800cffe:	6a3b      	ldr	r3, [r7, #32]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d002      	beq.n	800d00a <ip4_frag+0x1f6>
 800d004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d006:	2b00      	cmp	r3, #0
 800d008:	d003      	beq.n	800d012 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800d00a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d00c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d010:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800d012:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d014:	4618      	mov	r0, r3
 800d016:	f7f6 fb6d 	bl	80036f4 <lwip_htons>
 800d01a:	4603      	mov	r3, r0
 800d01c:	461a      	mov	r2, r3
 800d01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d020:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800d022:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d024:	3314      	adds	r3, #20
 800d026:	b29b      	uxth	r3, r3
 800d028:	4618      	mov	r0, r3
 800d02a:	f7f6 fb63 	bl	80036f4 <lwip_htons>
 800d02e:	4603      	mov	r3, r0
 800d030:	461a      	mov	r2, r3
 800d032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d034:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800d036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d038:	2200      	movs	r2, #0
 800d03a:	729a      	strb	r2, [r3, #10]
 800d03c:	2200      	movs	r2, #0
 800d03e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800d040:	68bb      	ldr	r3, [r7, #8]
 800d042:	695b      	ldr	r3, [r3, #20]
 800d044:	687a      	ldr	r2, [r7, #4]
 800d046:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d048:	68b8      	ldr	r0, [r7, #8]
 800d04a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800d04c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d04e:	f7f7 fe93 	bl	8004d78 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800d052:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d056:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d058:	1ad3      	subs	r3, r2, r3
 800d05a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800d05e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800d062:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d064:	4413      	add	r3, r2
 800d066:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800d06a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d06e:	2b00      	cmp	r3, #0
 800d070:	f47f af19 	bne.w	800cea6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800d074:	2300      	movs	r3, #0
 800d076:	e002      	b.n	800d07e <ip4_frag+0x26a>
      goto memerr;
 800d078:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800d07a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d07e:	4618      	mov	r0, r3
 800d080:	3748      	adds	r7, #72	; 0x48
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}
 800d086:	bf00      	nop
 800d088:	08010b88 	.word	0x08010b88
 800d08c:	08010d64 	.word	0x08010d64
 800d090:	08010bd0 	.word	0x08010bd0
 800d094:	08010d80 	.word	0x08010d80
 800d098:	08010da0 	.word	0x08010da0
 800d09c:	0800cdad 	.word	0x0800cdad

0800d0a0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b086      	sub	sp, #24
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
 800d0a8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800d0aa:	230e      	movs	r3, #14
 800d0ac:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	895b      	ldrh	r3, [r3, #10]
 800d0b2:	2b0e      	cmp	r3, #14
 800d0b4:	d96e      	bls.n	800d194 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	7bdb      	ldrb	r3, [r3, #15]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d106      	bne.n	800d0cc <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d0c4:	3301      	adds	r3, #1
 800d0c6:	b2da      	uxtb	r2, r3
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	685b      	ldr	r3, [r3, #4]
 800d0d0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800d0d2:	693b      	ldr	r3, [r7, #16]
 800d0d4:	7b1a      	ldrb	r2, [r3, #12]
 800d0d6:	7b5b      	ldrb	r3, [r3, #13]
 800d0d8:	021b      	lsls	r3, r3, #8
 800d0da:	4313      	orrs	r3, r2
 800d0dc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800d0de:	693b      	ldr	r3, [r7, #16]
 800d0e0:	781b      	ldrb	r3, [r3, #0]
 800d0e2:	f003 0301 	and.w	r3, r3, #1
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d023      	beq.n	800d132 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800d0ea:	693b      	ldr	r3, [r7, #16]
 800d0ec:	781b      	ldrb	r3, [r3, #0]
 800d0ee:	2b01      	cmp	r3, #1
 800d0f0:	d10f      	bne.n	800d112 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d0f2:	693b      	ldr	r3, [r7, #16]
 800d0f4:	785b      	ldrb	r3, [r3, #1]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d11b      	bne.n	800d132 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800d0fa:	693b      	ldr	r3, [r7, #16]
 800d0fc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d0fe:	2b5e      	cmp	r3, #94	; 0x5e
 800d100:	d117      	bne.n	800d132 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	7b5b      	ldrb	r3, [r3, #13]
 800d106:	f043 0310 	orr.w	r3, r3, #16
 800d10a:	b2da      	uxtb	r2, r3
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	735a      	strb	r2, [r3, #13]
 800d110:	e00f      	b.n	800d132 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800d112:	693b      	ldr	r3, [r7, #16]
 800d114:	2206      	movs	r2, #6
 800d116:	4928      	ldr	r1, [pc, #160]	; (800d1b8 <ethernet_input+0x118>)
 800d118:	4618      	mov	r0, r3
 800d11a:	f000 f8bb 	bl	800d294 <memcmp>
 800d11e:	4603      	mov	r3, r0
 800d120:	2b00      	cmp	r3, #0
 800d122:	d106      	bne.n	800d132 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	7b5b      	ldrb	r3, [r3, #13]
 800d128:	f043 0308 	orr.w	r3, r3, #8
 800d12c:	b2da      	uxtb	r2, r3
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800d132:	89fb      	ldrh	r3, [r7, #14]
 800d134:	2b08      	cmp	r3, #8
 800d136:	d003      	beq.n	800d140 <ethernet_input+0xa0>
 800d138:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800d13c:	d014      	beq.n	800d168 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800d13e:	e032      	b.n	800d1a6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d146:	f003 0308 	and.w	r3, r3, #8
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d024      	beq.n	800d198 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800d14e:	8afb      	ldrh	r3, [r7, #22]
 800d150:	4619      	mov	r1, r3
 800d152:	6878      	ldr	r0, [r7, #4]
 800d154:	f7f7 fd8a 	bl	8004c6c <pbuf_remove_header>
 800d158:	4603      	mov	r3, r0
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d11e      	bne.n	800d19c <ethernet_input+0xfc>
        ip4_input(p, netif);
 800d15e:	6839      	ldr	r1, [r7, #0]
 800d160:	6878      	ldr	r0, [r7, #4]
 800d162:	f7fe ff15 	bl	800bf90 <ip4_input>
      break;
 800d166:	e013      	b.n	800d190 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d16e:	f003 0308 	and.w	r3, r3, #8
 800d172:	2b00      	cmp	r3, #0
 800d174:	d014      	beq.n	800d1a0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800d176:	8afb      	ldrh	r3, [r7, #22]
 800d178:	4619      	mov	r1, r3
 800d17a:	6878      	ldr	r0, [r7, #4]
 800d17c:	f7f7 fd76 	bl	8004c6c <pbuf_remove_header>
 800d180:	4603      	mov	r3, r0
 800d182:	2b00      	cmp	r3, #0
 800d184:	d10e      	bne.n	800d1a4 <ethernet_input+0x104>
        etharp_input(p, netif);
 800d186:	6839      	ldr	r1, [r7, #0]
 800d188:	6878      	ldr	r0, [r7, #4]
 800d18a:	f7fe f8b5 	bl	800b2f8 <etharp_input>
      break;
 800d18e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800d190:	2300      	movs	r3, #0
 800d192:	e00c      	b.n	800d1ae <ethernet_input+0x10e>
    goto free_and_return;
 800d194:	bf00      	nop
 800d196:	e006      	b.n	800d1a6 <ethernet_input+0x106>
        goto free_and_return;
 800d198:	bf00      	nop
 800d19a:	e004      	b.n	800d1a6 <ethernet_input+0x106>
        goto free_and_return;
 800d19c:	bf00      	nop
 800d19e:	e002      	b.n	800d1a6 <ethernet_input+0x106>
        goto free_and_return;
 800d1a0:	bf00      	nop
 800d1a2:	e000      	b.n	800d1a6 <ethernet_input+0x106>
        goto free_and_return;
 800d1a4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	f7f7 fde6 	bl	8004d78 <pbuf_free>
  return ERR_OK;
 800d1ac:	2300      	movs	r3, #0
}
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	3718      	adds	r7, #24
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bd80      	pop	{r7, pc}
 800d1b6:	bf00      	nop
 800d1b8:	08010f44 	.word	0x08010f44

0800d1bc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b086      	sub	sp, #24
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	60f8      	str	r0, [r7, #12]
 800d1c4:	60b9      	str	r1, [r7, #8]
 800d1c6:	607a      	str	r2, [r7, #4]
 800d1c8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800d1ca:	8c3b      	ldrh	r3, [r7, #32]
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	f7f6 fa91 	bl	80036f4 <lwip_htons>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800d1d6:	210e      	movs	r1, #14
 800d1d8:	68b8      	ldr	r0, [r7, #8]
 800d1da:	f7f7 fd37 	bl	8004c4c <pbuf_add_header>
 800d1de:	4603      	mov	r3, r0
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d125      	bne.n	800d230 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800d1e4:	68bb      	ldr	r3, [r7, #8]
 800d1e6:	685b      	ldr	r3, [r3, #4]
 800d1e8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800d1ea:	693b      	ldr	r3, [r7, #16]
 800d1ec:	8afa      	ldrh	r2, [r7, #22]
 800d1ee:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800d1f0:	693b      	ldr	r3, [r7, #16]
 800d1f2:	2206      	movs	r2, #6
 800d1f4:	6839      	ldr	r1, [r7, #0]
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f000 f85c 	bl	800d2b4 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800d1fc:	693b      	ldr	r3, [r7, #16]
 800d1fe:	3306      	adds	r3, #6
 800d200:	2206      	movs	r2, #6
 800d202:	6879      	ldr	r1, [r7, #4]
 800d204:	4618      	mov	r0, r3
 800d206:	f000 f855 	bl	800d2b4 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d210:	2b06      	cmp	r3, #6
 800d212:	d006      	beq.n	800d222 <ethernet_output+0x66>
 800d214:	4b0a      	ldr	r3, [pc, #40]	; (800d240 <ethernet_output+0x84>)
 800d216:	f44f 7299 	mov.w	r2, #306	; 0x132
 800d21a:	490a      	ldr	r1, [pc, #40]	; (800d244 <ethernet_output+0x88>)
 800d21c:	480a      	ldr	r0, [pc, #40]	; (800d248 <ethernet_output+0x8c>)
 800d21e:	f000 f85f 	bl	800d2e0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	699b      	ldr	r3, [r3, #24]
 800d226:	68b9      	ldr	r1, [r7, #8]
 800d228:	68f8      	ldr	r0, [r7, #12]
 800d22a:	4798      	blx	r3
 800d22c:	4603      	mov	r3, r0
 800d22e:	e002      	b.n	800d236 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800d230:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800d232:	f06f 0301 	mvn.w	r3, #1
}
 800d236:	4618      	mov	r0, r3
 800d238:	3718      	adds	r7, #24
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bd80      	pop	{r7, pc}
 800d23e:	bf00      	nop
 800d240:	08010db0 	.word	0x08010db0
 800d244:	08010de8 	.word	0x08010de8
 800d248:	08010e1c 	.word	0x08010e1c

0800d24c <__libc_init_array>:
 800d24c:	b570      	push	{r4, r5, r6, lr}
 800d24e:	4d0d      	ldr	r5, [pc, #52]	; (800d284 <__libc_init_array+0x38>)
 800d250:	4c0d      	ldr	r4, [pc, #52]	; (800d288 <__libc_init_array+0x3c>)
 800d252:	1b64      	subs	r4, r4, r5
 800d254:	10a4      	asrs	r4, r4, #2
 800d256:	2600      	movs	r6, #0
 800d258:	42a6      	cmp	r6, r4
 800d25a:	d109      	bne.n	800d270 <__libc_init_array+0x24>
 800d25c:	4d0b      	ldr	r5, [pc, #44]	; (800d28c <__libc_init_array+0x40>)
 800d25e:	4c0c      	ldr	r4, [pc, #48]	; (800d290 <__libc_init_array+0x44>)
 800d260:	f001 f88e 	bl	800e380 <_init>
 800d264:	1b64      	subs	r4, r4, r5
 800d266:	10a4      	asrs	r4, r4, #2
 800d268:	2600      	movs	r6, #0
 800d26a:	42a6      	cmp	r6, r4
 800d26c:	d105      	bne.n	800d27a <__libc_init_array+0x2e>
 800d26e:	bd70      	pop	{r4, r5, r6, pc}
 800d270:	f855 3b04 	ldr.w	r3, [r5], #4
 800d274:	4798      	blx	r3
 800d276:	3601      	adds	r6, #1
 800d278:	e7ee      	b.n	800d258 <__libc_init_array+0xc>
 800d27a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d27e:	4798      	blx	r3
 800d280:	3601      	adds	r6, #1
 800d282:	e7f2      	b.n	800d26a <__libc_init_array+0x1e>
 800d284:	080110a4 	.word	0x080110a4
 800d288:	080110a4 	.word	0x080110a4
 800d28c:	080110a4 	.word	0x080110a4
 800d290:	080110a8 	.word	0x080110a8

0800d294 <memcmp>:
 800d294:	b510      	push	{r4, lr}
 800d296:	3901      	subs	r1, #1
 800d298:	4402      	add	r2, r0
 800d29a:	4290      	cmp	r0, r2
 800d29c:	d101      	bne.n	800d2a2 <memcmp+0xe>
 800d29e:	2000      	movs	r0, #0
 800d2a0:	e005      	b.n	800d2ae <memcmp+0x1a>
 800d2a2:	7803      	ldrb	r3, [r0, #0]
 800d2a4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d2a8:	42a3      	cmp	r3, r4
 800d2aa:	d001      	beq.n	800d2b0 <memcmp+0x1c>
 800d2ac:	1b18      	subs	r0, r3, r4
 800d2ae:	bd10      	pop	{r4, pc}
 800d2b0:	3001      	adds	r0, #1
 800d2b2:	e7f2      	b.n	800d29a <memcmp+0x6>

0800d2b4 <memcpy>:
 800d2b4:	440a      	add	r2, r1
 800d2b6:	4291      	cmp	r1, r2
 800d2b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800d2bc:	d100      	bne.n	800d2c0 <memcpy+0xc>
 800d2be:	4770      	bx	lr
 800d2c0:	b510      	push	{r4, lr}
 800d2c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d2ca:	4291      	cmp	r1, r2
 800d2cc:	d1f9      	bne.n	800d2c2 <memcpy+0xe>
 800d2ce:	bd10      	pop	{r4, pc}

0800d2d0 <memset>:
 800d2d0:	4402      	add	r2, r0
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	4293      	cmp	r3, r2
 800d2d6:	d100      	bne.n	800d2da <memset+0xa>
 800d2d8:	4770      	bx	lr
 800d2da:	f803 1b01 	strb.w	r1, [r3], #1
 800d2de:	e7f9      	b.n	800d2d4 <memset+0x4>

0800d2e0 <iprintf>:
 800d2e0:	b40f      	push	{r0, r1, r2, r3}
 800d2e2:	4b0a      	ldr	r3, [pc, #40]	; (800d30c <iprintf+0x2c>)
 800d2e4:	b513      	push	{r0, r1, r4, lr}
 800d2e6:	681c      	ldr	r4, [r3, #0]
 800d2e8:	b124      	cbz	r4, 800d2f4 <iprintf+0x14>
 800d2ea:	69a3      	ldr	r3, [r4, #24]
 800d2ec:	b913      	cbnz	r3, 800d2f4 <iprintf+0x14>
 800d2ee:	4620      	mov	r0, r4
 800d2f0:	f000 f8c2 	bl	800d478 <__sinit>
 800d2f4:	ab05      	add	r3, sp, #20
 800d2f6:	9a04      	ldr	r2, [sp, #16]
 800d2f8:	68a1      	ldr	r1, [r4, #8]
 800d2fa:	9301      	str	r3, [sp, #4]
 800d2fc:	4620      	mov	r0, r4
 800d2fe:	f000 fa7f 	bl	800d800 <_vfiprintf_r>
 800d302:	b002      	add	sp, #8
 800d304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d308:	b004      	add	sp, #16
 800d30a:	4770      	bx	lr
 800d30c:	2000002c 	.word	0x2000002c

0800d310 <rand>:
 800d310:	4b16      	ldr	r3, [pc, #88]	; (800d36c <rand+0x5c>)
 800d312:	b510      	push	{r4, lr}
 800d314:	681c      	ldr	r4, [r3, #0]
 800d316:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d318:	b9b3      	cbnz	r3, 800d348 <rand+0x38>
 800d31a:	2018      	movs	r0, #24
 800d31c:	f000 f95e 	bl	800d5dc <malloc>
 800d320:	63a0      	str	r0, [r4, #56]	; 0x38
 800d322:	b928      	cbnz	r0, 800d330 <rand+0x20>
 800d324:	4602      	mov	r2, r0
 800d326:	4b12      	ldr	r3, [pc, #72]	; (800d370 <rand+0x60>)
 800d328:	4812      	ldr	r0, [pc, #72]	; (800d374 <rand+0x64>)
 800d32a:	214e      	movs	r1, #78	; 0x4e
 800d32c:	f000 f82e 	bl	800d38c <__assert_func>
 800d330:	4a11      	ldr	r2, [pc, #68]	; (800d378 <rand+0x68>)
 800d332:	4b12      	ldr	r3, [pc, #72]	; (800d37c <rand+0x6c>)
 800d334:	e9c0 2300 	strd	r2, r3, [r0]
 800d338:	4b11      	ldr	r3, [pc, #68]	; (800d380 <rand+0x70>)
 800d33a:	6083      	str	r3, [r0, #8]
 800d33c:	230b      	movs	r3, #11
 800d33e:	8183      	strh	r3, [r0, #12]
 800d340:	2201      	movs	r2, #1
 800d342:	2300      	movs	r3, #0
 800d344:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800d348:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800d34a:	4a0e      	ldr	r2, [pc, #56]	; (800d384 <rand+0x74>)
 800d34c:	6920      	ldr	r0, [r4, #16]
 800d34e:	6963      	ldr	r3, [r4, #20]
 800d350:	490d      	ldr	r1, [pc, #52]	; (800d388 <rand+0x78>)
 800d352:	4342      	muls	r2, r0
 800d354:	fb01 2203 	mla	r2, r1, r3, r2
 800d358:	fba0 0101 	umull	r0, r1, r0, r1
 800d35c:	1c43      	adds	r3, r0, #1
 800d35e:	eb42 0001 	adc.w	r0, r2, r1
 800d362:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800d366:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800d36a:	bd10      	pop	{r4, pc}
 800d36c:	2000002c 	.word	0x2000002c
 800d370:	08010f58 	.word	0x08010f58
 800d374:	08010f6f 	.word	0x08010f6f
 800d378:	abcd330e 	.word	0xabcd330e
 800d37c:	e66d1234 	.word	0xe66d1234
 800d380:	0005deec 	.word	0x0005deec
 800d384:	5851f42d 	.word	0x5851f42d
 800d388:	4c957f2d 	.word	0x4c957f2d

0800d38c <__assert_func>:
 800d38c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d38e:	4614      	mov	r4, r2
 800d390:	461a      	mov	r2, r3
 800d392:	4b09      	ldr	r3, [pc, #36]	; (800d3b8 <__assert_func+0x2c>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	4605      	mov	r5, r0
 800d398:	68d8      	ldr	r0, [r3, #12]
 800d39a:	b14c      	cbz	r4, 800d3b0 <__assert_func+0x24>
 800d39c:	4b07      	ldr	r3, [pc, #28]	; (800d3bc <__assert_func+0x30>)
 800d39e:	9100      	str	r1, [sp, #0]
 800d3a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d3a4:	4906      	ldr	r1, [pc, #24]	; (800d3c0 <__assert_func+0x34>)
 800d3a6:	462b      	mov	r3, r5
 800d3a8:	f000 f8e4 	bl	800d574 <fiprintf>
 800d3ac:	f000 fe12 	bl	800dfd4 <abort>
 800d3b0:	4b04      	ldr	r3, [pc, #16]	; (800d3c4 <__assert_func+0x38>)
 800d3b2:	461c      	mov	r4, r3
 800d3b4:	e7f3      	b.n	800d39e <__assert_func+0x12>
 800d3b6:	bf00      	nop
 800d3b8:	2000002c 	.word	0x2000002c
 800d3bc:	08010fca 	.word	0x08010fca
 800d3c0:	08010fd7 	.word	0x08010fd7
 800d3c4:	08011005 	.word	0x08011005

0800d3c8 <std>:
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	b510      	push	{r4, lr}
 800d3cc:	4604      	mov	r4, r0
 800d3ce:	e9c0 3300 	strd	r3, r3, [r0]
 800d3d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d3d6:	6083      	str	r3, [r0, #8]
 800d3d8:	8181      	strh	r1, [r0, #12]
 800d3da:	6643      	str	r3, [r0, #100]	; 0x64
 800d3dc:	81c2      	strh	r2, [r0, #14]
 800d3de:	6183      	str	r3, [r0, #24]
 800d3e0:	4619      	mov	r1, r3
 800d3e2:	2208      	movs	r2, #8
 800d3e4:	305c      	adds	r0, #92	; 0x5c
 800d3e6:	f7ff ff73 	bl	800d2d0 <memset>
 800d3ea:	4b05      	ldr	r3, [pc, #20]	; (800d400 <std+0x38>)
 800d3ec:	6263      	str	r3, [r4, #36]	; 0x24
 800d3ee:	4b05      	ldr	r3, [pc, #20]	; (800d404 <std+0x3c>)
 800d3f0:	62a3      	str	r3, [r4, #40]	; 0x28
 800d3f2:	4b05      	ldr	r3, [pc, #20]	; (800d408 <std+0x40>)
 800d3f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d3f6:	4b05      	ldr	r3, [pc, #20]	; (800d40c <std+0x44>)
 800d3f8:	6224      	str	r4, [r4, #32]
 800d3fa:	6323      	str	r3, [r4, #48]	; 0x30
 800d3fc:	bd10      	pop	{r4, pc}
 800d3fe:	bf00      	nop
 800d400:	0800dda9 	.word	0x0800dda9
 800d404:	0800ddcb 	.word	0x0800ddcb
 800d408:	0800de03 	.word	0x0800de03
 800d40c:	0800de27 	.word	0x0800de27

0800d410 <_cleanup_r>:
 800d410:	4901      	ldr	r1, [pc, #4]	; (800d418 <_cleanup_r+0x8>)
 800d412:	f000 b8c1 	b.w	800d598 <_fwalk_reent>
 800d416:	bf00      	nop
 800d418:	0800e111 	.word	0x0800e111

0800d41c <__sfmoreglue>:
 800d41c:	b570      	push	{r4, r5, r6, lr}
 800d41e:	2268      	movs	r2, #104	; 0x68
 800d420:	1e4d      	subs	r5, r1, #1
 800d422:	4355      	muls	r5, r2
 800d424:	460e      	mov	r6, r1
 800d426:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d42a:	f000 f94b 	bl	800d6c4 <_malloc_r>
 800d42e:	4604      	mov	r4, r0
 800d430:	b140      	cbz	r0, 800d444 <__sfmoreglue+0x28>
 800d432:	2100      	movs	r1, #0
 800d434:	e9c0 1600 	strd	r1, r6, [r0]
 800d438:	300c      	adds	r0, #12
 800d43a:	60a0      	str	r0, [r4, #8]
 800d43c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d440:	f7ff ff46 	bl	800d2d0 <memset>
 800d444:	4620      	mov	r0, r4
 800d446:	bd70      	pop	{r4, r5, r6, pc}

0800d448 <__sfp_lock_acquire>:
 800d448:	4801      	ldr	r0, [pc, #4]	; (800d450 <__sfp_lock_acquire+0x8>)
 800d44a:	f000 b8c5 	b.w	800d5d8 <__retarget_lock_acquire_recursive>
 800d44e:	bf00      	nop
 800d450:	20008425 	.word	0x20008425

0800d454 <__sfp_lock_release>:
 800d454:	4801      	ldr	r0, [pc, #4]	; (800d45c <__sfp_lock_release+0x8>)
 800d456:	f000 b8c0 	b.w	800d5da <__retarget_lock_release_recursive>
 800d45a:	bf00      	nop
 800d45c:	20008425 	.word	0x20008425

0800d460 <__sinit_lock_acquire>:
 800d460:	4801      	ldr	r0, [pc, #4]	; (800d468 <__sinit_lock_acquire+0x8>)
 800d462:	f000 b8b9 	b.w	800d5d8 <__retarget_lock_acquire_recursive>
 800d466:	bf00      	nop
 800d468:	20008426 	.word	0x20008426

0800d46c <__sinit_lock_release>:
 800d46c:	4801      	ldr	r0, [pc, #4]	; (800d474 <__sinit_lock_release+0x8>)
 800d46e:	f000 b8b4 	b.w	800d5da <__retarget_lock_release_recursive>
 800d472:	bf00      	nop
 800d474:	20008426 	.word	0x20008426

0800d478 <__sinit>:
 800d478:	b510      	push	{r4, lr}
 800d47a:	4604      	mov	r4, r0
 800d47c:	f7ff fff0 	bl	800d460 <__sinit_lock_acquire>
 800d480:	69a3      	ldr	r3, [r4, #24]
 800d482:	b11b      	cbz	r3, 800d48c <__sinit+0x14>
 800d484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d488:	f7ff bff0 	b.w	800d46c <__sinit_lock_release>
 800d48c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d490:	6523      	str	r3, [r4, #80]	; 0x50
 800d492:	4b13      	ldr	r3, [pc, #76]	; (800d4e0 <__sinit+0x68>)
 800d494:	4a13      	ldr	r2, [pc, #76]	; (800d4e4 <__sinit+0x6c>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	62a2      	str	r2, [r4, #40]	; 0x28
 800d49a:	42a3      	cmp	r3, r4
 800d49c:	bf04      	itt	eq
 800d49e:	2301      	moveq	r3, #1
 800d4a0:	61a3      	streq	r3, [r4, #24]
 800d4a2:	4620      	mov	r0, r4
 800d4a4:	f000 f820 	bl	800d4e8 <__sfp>
 800d4a8:	6060      	str	r0, [r4, #4]
 800d4aa:	4620      	mov	r0, r4
 800d4ac:	f000 f81c 	bl	800d4e8 <__sfp>
 800d4b0:	60a0      	str	r0, [r4, #8]
 800d4b2:	4620      	mov	r0, r4
 800d4b4:	f000 f818 	bl	800d4e8 <__sfp>
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	60e0      	str	r0, [r4, #12]
 800d4bc:	2104      	movs	r1, #4
 800d4be:	6860      	ldr	r0, [r4, #4]
 800d4c0:	f7ff ff82 	bl	800d3c8 <std>
 800d4c4:	68a0      	ldr	r0, [r4, #8]
 800d4c6:	2201      	movs	r2, #1
 800d4c8:	2109      	movs	r1, #9
 800d4ca:	f7ff ff7d 	bl	800d3c8 <std>
 800d4ce:	68e0      	ldr	r0, [r4, #12]
 800d4d0:	2202      	movs	r2, #2
 800d4d2:	2112      	movs	r1, #18
 800d4d4:	f7ff ff78 	bl	800d3c8 <std>
 800d4d8:	2301      	movs	r3, #1
 800d4da:	61a3      	str	r3, [r4, #24]
 800d4dc:	e7d2      	b.n	800d484 <__sinit+0xc>
 800d4de:	bf00      	nop
 800d4e0:	08010f54 	.word	0x08010f54
 800d4e4:	0800d411 	.word	0x0800d411

0800d4e8 <__sfp>:
 800d4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4ea:	4607      	mov	r7, r0
 800d4ec:	f7ff ffac 	bl	800d448 <__sfp_lock_acquire>
 800d4f0:	4b1e      	ldr	r3, [pc, #120]	; (800d56c <__sfp+0x84>)
 800d4f2:	681e      	ldr	r6, [r3, #0]
 800d4f4:	69b3      	ldr	r3, [r6, #24]
 800d4f6:	b913      	cbnz	r3, 800d4fe <__sfp+0x16>
 800d4f8:	4630      	mov	r0, r6
 800d4fa:	f7ff ffbd 	bl	800d478 <__sinit>
 800d4fe:	3648      	adds	r6, #72	; 0x48
 800d500:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d504:	3b01      	subs	r3, #1
 800d506:	d503      	bpl.n	800d510 <__sfp+0x28>
 800d508:	6833      	ldr	r3, [r6, #0]
 800d50a:	b30b      	cbz	r3, 800d550 <__sfp+0x68>
 800d50c:	6836      	ldr	r6, [r6, #0]
 800d50e:	e7f7      	b.n	800d500 <__sfp+0x18>
 800d510:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d514:	b9d5      	cbnz	r5, 800d54c <__sfp+0x64>
 800d516:	4b16      	ldr	r3, [pc, #88]	; (800d570 <__sfp+0x88>)
 800d518:	60e3      	str	r3, [r4, #12]
 800d51a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d51e:	6665      	str	r5, [r4, #100]	; 0x64
 800d520:	f000 f859 	bl	800d5d6 <__retarget_lock_init_recursive>
 800d524:	f7ff ff96 	bl	800d454 <__sfp_lock_release>
 800d528:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d52c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d530:	6025      	str	r5, [r4, #0]
 800d532:	61a5      	str	r5, [r4, #24]
 800d534:	2208      	movs	r2, #8
 800d536:	4629      	mov	r1, r5
 800d538:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d53c:	f7ff fec8 	bl	800d2d0 <memset>
 800d540:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d544:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d548:	4620      	mov	r0, r4
 800d54a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d54c:	3468      	adds	r4, #104	; 0x68
 800d54e:	e7d9      	b.n	800d504 <__sfp+0x1c>
 800d550:	2104      	movs	r1, #4
 800d552:	4638      	mov	r0, r7
 800d554:	f7ff ff62 	bl	800d41c <__sfmoreglue>
 800d558:	4604      	mov	r4, r0
 800d55a:	6030      	str	r0, [r6, #0]
 800d55c:	2800      	cmp	r0, #0
 800d55e:	d1d5      	bne.n	800d50c <__sfp+0x24>
 800d560:	f7ff ff78 	bl	800d454 <__sfp_lock_release>
 800d564:	230c      	movs	r3, #12
 800d566:	603b      	str	r3, [r7, #0]
 800d568:	e7ee      	b.n	800d548 <__sfp+0x60>
 800d56a:	bf00      	nop
 800d56c:	08010f54 	.word	0x08010f54
 800d570:	ffff0001 	.word	0xffff0001

0800d574 <fiprintf>:
 800d574:	b40e      	push	{r1, r2, r3}
 800d576:	b503      	push	{r0, r1, lr}
 800d578:	4601      	mov	r1, r0
 800d57a:	ab03      	add	r3, sp, #12
 800d57c:	4805      	ldr	r0, [pc, #20]	; (800d594 <fiprintf+0x20>)
 800d57e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d582:	6800      	ldr	r0, [r0, #0]
 800d584:	9301      	str	r3, [sp, #4]
 800d586:	f000 f93b 	bl	800d800 <_vfiprintf_r>
 800d58a:	b002      	add	sp, #8
 800d58c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d590:	b003      	add	sp, #12
 800d592:	4770      	bx	lr
 800d594:	2000002c 	.word	0x2000002c

0800d598 <_fwalk_reent>:
 800d598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d59c:	4606      	mov	r6, r0
 800d59e:	4688      	mov	r8, r1
 800d5a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d5a4:	2700      	movs	r7, #0
 800d5a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d5aa:	f1b9 0901 	subs.w	r9, r9, #1
 800d5ae:	d505      	bpl.n	800d5bc <_fwalk_reent+0x24>
 800d5b0:	6824      	ldr	r4, [r4, #0]
 800d5b2:	2c00      	cmp	r4, #0
 800d5b4:	d1f7      	bne.n	800d5a6 <_fwalk_reent+0xe>
 800d5b6:	4638      	mov	r0, r7
 800d5b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5bc:	89ab      	ldrh	r3, [r5, #12]
 800d5be:	2b01      	cmp	r3, #1
 800d5c0:	d907      	bls.n	800d5d2 <_fwalk_reent+0x3a>
 800d5c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d5c6:	3301      	adds	r3, #1
 800d5c8:	d003      	beq.n	800d5d2 <_fwalk_reent+0x3a>
 800d5ca:	4629      	mov	r1, r5
 800d5cc:	4630      	mov	r0, r6
 800d5ce:	47c0      	blx	r8
 800d5d0:	4307      	orrs	r7, r0
 800d5d2:	3568      	adds	r5, #104	; 0x68
 800d5d4:	e7e9      	b.n	800d5aa <_fwalk_reent+0x12>

0800d5d6 <__retarget_lock_init_recursive>:
 800d5d6:	4770      	bx	lr

0800d5d8 <__retarget_lock_acquire_recursive>:
 800d5d8:	4770      	bx	lr

0800d5da <__retarget_lock_release_recursive>:
 800d5da:	4770      	bx	lr

0800d5dc <malloc>:
 800d5dc:	4b02      	ldr	r3, [pc, #8]	; (800d5e8 <malloc+0xc>)
 800d5de:	4601      	mov	r1, r0
 800d5e0:	6818      	ldr	r0, [r3, #0]
 800d5e2:	f000 b86f 	b.w	800d6c4 <_malloc_r>
 800d5e6:	bf00      	nop
 800d5e8:	2000002c 	.word	0x2000002c

0800d5ec <_free_r>:
 800d5ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d5ee:	2900      	cmp	r1, #0
 800d5f0:	d044      	beq.n	800d67c <_free_r+0x90>
 800d5f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d5f6:	9001      	str	r0, [sp, #4]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	f1a1 0404 	sub.w	r4, r1, #4
 800d5fe:	bfb8      	it	lt
 800d600:	18e4      	addlt	r4, r4, r3
 800d602:	f000 fe39 	bl	800e278 <__malloc_lock>
 800d606:	4a1e      	ldr	r2, [pc, #120]	; (800d680 <_free_r+0x94>)
 800d608:	9801      	ldr	r0, [sp, #4]
 800d60a:	6813      	ldr	r3, [r2, #0]
 800d60c:	b933      	cbnz	r3, 800d61c <_free_r+0x30>
 800d60e:	6063      	str	r3, [r4, #4]
 800d610:	6014      	str	r4, [r2, #0]
 800d612:	b003      	add	sp, #12
 800d614:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d618:	f000 be34 	b.w	800e284 <__malloc_unlock>
 800d61c:	42a3      	cmp	r3, r4
 800d61e:	d908      	bls.n	800d632 <_free_r+0x46>
 800d620:	6825      	ldr	r5, [r4, #0]
 800d622:	1961      	adds	r1, r4, r5
 800d624:	428b      	cmp	r3, r1
 800d626:	bf01      	itttt	eq
 800d628:	6819      	ldreq	r1, [r3, #0]
 800d62a:	685b      	ldreq	r3, [r3, #4]
 800d62c:	1949      	addeq	r1, r1, r5
 800d62e:	6021      	streq	r1, [r4, #0]
 800d630:	e7ed      	b.n	800d60e <_free_r+0x22>
 800d632:	461a      	mov	r2, r3
 800d634:	685b      	ldr	r3, [r3, #4]
 800d636:	b10b      	cbz	r3, 800d63c <_free_r+0x50>
 800d638:	42a3      	cmp	r3, r4
 800d63a:	d9fa      	bls.n	800d632 <_free_r+0x46>
 800d63c:	6811      	ldr	r1, [r2, #0]
 800d63e:	1855      	adds	r5, r2, r1
 800d640:	42a5      	cmp	r5, r4
 800d642:	d10b      	bne.n	800d65c <_free_r+0x70>
 800d644:	6824      	ldr	r4, [r4, #0]
 800d646:	4421      	add	r1, r4
 800d648:	1854      	adds	r4, r2, r1
 800d64a:	42a3      	cmp	r3, r4
 800d64c:	6011      	str	r1, [r2, #0]
 800d64e:	d1e0      	bne.n	800d612 <_free_r+0x26>
 800d650:	681c      	ldr	r4, [r3, #0]
 800d652:	685b      	ldr	r3, [r3, #4]
 800d654:	6053      	str	r3, [r2, #4]
 800d656:	4421      	add	r1, r4
 800d658:	6011      	str	r1, [r2, #0]
 800d65a:	e7da      	b.n	800d612 <_free_r+0x26>
 800d65c:	d902      	bls.n	800d664 <_free_r+0x78>
 800d65e:	230c      	movs	r3, #12
 800d660:	6003      	str	r3, [r0, #0]
 800d662:	e7d6      	b.n	800d612 <_free_r+0x26>
 800d664:	6825      	ldr	r5, [r4, #0]
 800d666:	1961      	adds	r1, r4, r5
 800d668:	428b      	cmp	r3, r1
 800d66a:	bf04      	itt	eq
 800d66c:	6819      	ldreq	r1, [r3, #0]
 800d66e:	685b      	ldreq	r3, [r3, #4]
 800d670:	6063      	str	r3, [r4, #4]
 800d672:	bf04      	itt	eq
 800d674:	1949      	addeq	r1, r1, r5
 800d676:	6021      	streq	r1, [r4, #0]
 800d678:	6054      	str	r4, [r2, #4]
 800d67a:	e7ca      	b.n	800d612 <_free_r+0x26>
 800d67c:	b003      	add	sp, #12
 800d67e:	bd30      	pop	{r4, r5, pc}
 800d680:	20008428 	.word	0x20008428

0800d684 <sbrk_aligned>:
 800d684:	b570      	push	{r4, r5, r6, lr}
 800d686:	4e0e      	ldr	r6, [pc, #56]	; (800d6c0 <sbrk_aligned+0x3c>)
 800d688:	460c      	mov	r4, r1
 800d68a:	6831      	ldr	r1, [r6, #0]
 800d68c:	4605      	mov	r5, r0
 800d68e:	b911      	cbnz	r1, 800d696 <sbrk_aligned+0x12>
 800d690:	f000 fb7a 	bl	800dd88 <_sbrk_r>
 800d694:	6030      	str	r0, [r6, #0]
 800d696:	4621      	mov	r1, r4
 800d698:	4628      	mov	r0, r5
 800d69a:	f000 fb75 	bl	800dd88 <_sbrk_r>
 800d69e:	1c43      	adds	r3, r0, #1
 800d6a0:	d00a      	beq.n	800d6b8 <sbrk_aligned+0x34>
 800d6a2:	1cc4      	adds	r4, r0, #3
 800d6a4:	f024 0403 	bic.w	r4, r4, #3
 800d6a8:	42a0      	cmp	r0, r4
 800d6aa:	d007      	beq.n	800d6bc <sbrk_aligned+0x38>
 800d6ac:	1a21      	subs	r1, r4, r0
 800d6ae:	4628      	mov	r0, r5
 800d6b0:	f000 fb6a 	bl	800dd88 <_sbrk_r>
 800d6b4:	3001      	adds	r0, #1
 800d6b6:	d101      	bne.n	800d6bc <sbrk_aligned+0x38>
 800d6b8:	f04f 34ff 	mov.w	r4, #4294967295
 800d6bc:	4620      	mov	r0, r4
 800d6be:	bd70      	pop	{r4, r5, r6, pc}
 800d6c0:	2000842c 	.word	0x2000842c

0800d6c4 <_malloc_r>:
 800d6c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6c8:	1ccd      	adds	r5, r1, #3
 800d6ca:	f025 0503 	bic.w	r5, r5, #3
 800d6ce:	3508      	adds	r5, #8
 800d6d0:	2d0c      	cmp	r5, #12
 800d6d2:	bf38      	it	cc
 800d6d4:	250c      	movcc	r5, #12
 800d6d6:	2d00      	cmp	r5, #0
 800d6d8:	4607      	mov	r7, r0
 800d6da:	db01      	blt.n	800d6e0 <_malloc_r+0x1c>
 800d6dc:	42a9      	cmp	r1, r5
 800d6de:	d905      	bls.n	800d6ec <_malloc_r+0x28>
 800d6e0:	230c      	movs	r3, #12
 800d6e2:	603b      	str	r3, [r7, #0]
 800d6e4:	2600      	movs	r6, #0
 800d6e6:	4630      	mov	r0, r6
 800d6e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6ec:	4e2e      	ldr	r6, [pc, #184]	; (800d7a8 <_malloc_r+0xe4>)
 800d6ee:	f000 fdc3 	bl	800e278 <__malloc_lock>
 800d6f2:	6833      	ldr	r3, [r6, #0]
 800d6f4:	461c      	mov	r4, r3
 800d6f6:	bb34      	cbnz	r4, 800d746 <_malloc_r+0x82>
 800d6f8:	4629      	mov	r1, r5
 800d6fa:	4638      	mov	r0, r7
 800d6fc:	f7ff ffc2 	bl	800d684 <sbrk_aligned>
 800d700:	1c43      	adds	r3, r0, #1
 800d702:	4604      	mov	r4, r0
 800d704:	d14d      	bne.n	800d7a2 <_malloc_r+0xde>
 800d706:	6834      	ldr	r4, [r6, #0]
 800d708:	4626      	mov	r6, r4
 800d70a:	2e00      	cmp	r6, #0
 800d70c:	d140      	bne.n	800d790 <_malloc_r+0xcc>
 800d70e:	6823      	ldr	r3, [r4, #0]
 800d710:	4631      	mov	r1, r6
 800d712:	4638      	mov	r0, r7
 800d714:	eb04 0803 	add.w	r8, r4, r3
 800d718:	f000 fb36 	bl	800dd88 <_sbrk_r>
 800d71c:	4580      	cmp	r8, r0
 800d71e:	d13a      	bne.n	800d796 <_malloc_r+0xd2>
 800d720:	6821      	ldr	r1, [r4, #0]
 800d722:	3503      	adds	r5, #3
 800d724:	1a6d      	subs	r5, r5, r1
 800d726:	f025 0503 	bic.w	r5, r5, #3
 800d72a:	3508      	adds	r5, #8
 800d72c:	2d0c      	cmp	r5, #12
 800d72e:	bf38      	it	cc
 800d730:	250c      	movcc	r5, #12
 800d732:	4629      	mov	r1, r5
 800d734:	4638      	mov	r0, r7
 800d736:	f7ff ffa5 	bl	800d684 <sbrk_aligned>
 800d73a:	3001      	adds	r0, #1
 800d73c:	d02b      	beq.n	800d796 <_malloc_r+0xd2>
 800d73e:	6823      	ldr	r3, [r4, #0]
 800d740:	442b      	add	r3, r5
 800d742:	6023      	str	r3, [r4, #0]
 800d744:	e00e      	b.n	800d764 <_malloc_r+0xa0>
 800d746:	6822      	ldr	r2, [r4, #0]
 800d748:	1b52      	subs	r2, r2, r5
 800d74a:	d41e      	bmi.n	800d78a <_malloc_r+0xc6>
 800d74c:	2a0b      	cmp	r2, #11
 800d74e:	d916      	bls.n	800d77e <_malloc_r+0xba>
 800d750:	1961      	adds	r1, r4, r5
 800d752:	42a3      	cmp	r3, r4
 800d754:	6025      	str	r5, [r4, #0]
 800d756:	bf18      	it	ne
 800d758:	6059      	strne	r1, [r3, #4]
 800d75a:	6863      	ldr	r3, [r4, #4]
 800d75c:	bf08      	it	eq
 800d75e:	6031      	streq	r1, [r6, #0]
 800d760:	5162      	str	r2, [r4, r5]
 800d762:	604b      	str	r3, [r1, #4]
 800d764:	4638      	mov	r0, r7
 800d766:	f104 060b 	add.w	r6, r4, #11
 800d76a:	f000 fd8b 	bl	800e284 <__malloc_unlock>
 800d76e:	f026 0607 	bic.w	r6, r6, #7
 800d772:	1d23      	adds	r3, r4, #4
 800d774:	1af2      	subs	r2, r6, r3
 800d776:	d0b6      	beq.n	800d6e6 <_malloc_r+0x22>
 800d778:	1b9b      	subs	r3, r3, r6
 800d77a:	50a3      	str	r3, [r4, r2]
 800d77c:	e7b3      	b.n	800d6e6 <_malloc_r+0x22>
 800d77e:	6862      	ldr	r2, [r4, #4]
 800d780:	42a3      	cmp	r3, r4
 800d782:	bf0c      	ite	eq
 800d784:	6032      	streq	r2, [r6, #0]
 800d786:	605a      	strne	r2, [r3, #4]
 800d788:	e7ec      	b.n	800d764 <_malloc_r+0xa0>
 800d78a:	4623      	mov	r3, r4
 800d78c:	6864      	ldr	r4, [r4, #4]
 800d78e:	e7b2      	b.n	800d6f6 <_malloc_r+0x32>
 800d790:	4634      	mov	r4, r6
 800d792:	6876      	ldr	r6, [r6, #4]
 800d794:	e7b9      	b.n	800d70a <_malloc_r+0x46>
 800d796:	230c      	movs	r3, #12
 800d798:	603b      	str	r3, [r7, #0]
 800d79a:	4638      	mov	r0, r7
 800d79c:	f000 fd72 	bl	800e284 <__malloc_unlock>
 800d7a0:	e7a1      	b.n	800d6e6 <_malloc_r+0x22>
 800d7a2:	6025      	str	r5, [r4, #0]
 800d7a4:	e7de      	b.n	800d764 <_malloc_r+0xa0>
 800d7a6:	bf00      	nop
 800d7a8:	20008428 	.word	0x20008428

0800d7ac <__sfputc_r>:
 800d7ac:	6893      	ldr	r3, [r2, #8]
 800d7ae:	3b01      	subs	r3, #1
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	b410      	push	{r4}
 800d7b4:	6093      	str	r3, [r2, #8]
 800d7b6:	da08      	bge.n	800d7ca <__sfputc_r+0x1e>
 800d7b8:	6994      	ldr	r4, [r2, #24]
 800d7ba:	42a3      	cmp	r3, r4
 800d7bc:	db01      	blt.n	800d7c2 <__sfputc_r+0x16>
 800d7be:	290a      	cmp	r1, #10
 800d7c0:	d103      	bne.n	800d7ca <__sfputc_r+0x1e>
 800d7c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d7c6:	f000 bb33 	b.w	800de30 <__swbuf_r>
 800d7ca:	6813      	ldr	r3, [r2, #0]
 800d7cc:	1c58      	adds	r0, r3, #1
 800d7ce:	6010      	str	r0, [r2, #0]
 800d7d0:	7019      	strb	r1, [r3, #0]
 800d7d2:	4608      	mov	r0, r1
 800d7d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d7d8:	4770      	bx	lr

0800d7da <__sfputs_r>:
 800d7da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7dc:	4606      	mov	r6, r0
 800d7de:	460f      	mov	r7, r1
 800d7e0:	4614      	mov	r4, r2
 800d7e2:	18d5      	adds	r5, r2, r3
 800d7e4:	42ac      	cmp	r4, r5
 800d7e6:	d101      	bne.n	800d7ec <__sfputs_r+0x12>
 800d7e8:	2000      	movs	r0, #0
 800d7ea:	e007      	b.n	800d7fc <__sfputs_r+0x22>
 800d7ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7f0:	463a      	mov	r2, r7
 800d7f2:	4630      	mov	r0, r6
 800d7f4:	f7ff ffda 	bl	800d7ac <__sfputc_r>
 800d7f8:	1c43      	adds	r3, r0, #1
 800d7fa:	d1f3      	bne.n	800d7e4 <__sfputs_r+0xa>
 800d7fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d800 <_vfiprintf_r>:
 800d800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d804:	460d      	mov	r5, r1
 800d806:	b09d      	sub	sp, #116	; 0x74
 800d808:	4614      	mov	r4, r2
 800d80a:	4698      	mov	r8, r3
 800d80c:	4606      	mov	r6, r0
 800d80e:	b118      	cbz	r0, 800d818 <_vfiprintf_r+0x18>
 800d810:	6983      	ldr	r3, [r0, #24]
 800d812:	b90b      	cbnz	r3, 800d818 <_vfiprintf_r+0x18>
 800d814:	f7ff fe30 	bl	800d478 <__sinit>
 800d818:	4b89      	ldr	r3, [pc, #548]	; (800da40 <_vfiprintf_r+0x240>)
 800d81a:	429d      	cmp	r5, r3
 800d81c:	d11b      	bne.n	800d856 <_vfiprintf_r+0x56>
 800d81e:	6875      	ldr	r5, [r6, #4]
 800d820:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d822:	07d9      	lsls	r1, r3, #31
 800d824:	d405      	bmi.n	800d832 <_vfiprintf_r+0x32>
 800d826:	89ab      	ldrh	r3, [r5, #12]
 800d828:	059a      	lsls	r2, r3, #22
 800d82a:	d402      	bmi.n	800d832 <_vfiprintf_r+0x32>
 800d82c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d82e:	f7ff fed3 	bl	800d5d8 <__retarget_lock_acquire_recursive>
 800d832:	89ab      	ldrh	r3, [r5, #12]
 800d834:	071b      	lsls	r3, r3, #28
 800d836:	d501      	bpl.n	800d83c <_vfiprintf_r+0x3c>
 800d838:	692b      	ldr	r3, [r5, #16]
 800d83a:	b9eb      	cbnz	r3, 800d878 <_vfiprintf_r+0x78>
 800d83c:	4629      	mov	r1, r5
 800d83e:	4630      	mov	r0, r6
 800d840:	f000 fb5a 	bl	800def8 <__swsetup_r>
 800d844:	b1c0      	cbz	r0, 800d878 <_vfiprintf_r+0x78>
 800d846:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d848:	07dc      	lsls	r4, r3, #31
 800d84a:	d50e      	bpl.n	800d86a <_vfiprintf_r+0x6a>
 800d84c:	f04f 30ff 	mov.w	r0, #4294967295
 800d850:	b01d      	add	sp, #116	; 0x74
 800d852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d856:	4b7b      	ldr	r3, [pc, #492]	; (800da44 <_vfiprintf_r+0x244>)
 800d858:	429d      	cmp	r5, r3
 800d85a:	d101      	bne.n	800d860 <_vfiprintf_r+0x60>
 800d85c:	68b5      	ldr	r5, [r6, #8]
 800d85e:	e7df      	b.n	800d820 <_vfiprintf_r+0x20>
 800d860:	4b79      	ldr	r3, [pc, #484]	; (800da48 <_vfiprintf_r+0x248>)
 800d862:	429d      	cmp	r5, r3
 800d864:	bf08      	it	eq
 800d866:	68f5      	ldreq	r5, [r6, #12]
 800d868:	e7da      	b.n	800d820 <_vfiprintf_r+0x20>
 800d86a:	89ab      	ldrh	r3, [r5, #12]
 800d86c:	0598      	lsls	r0, r3, #22
 800d86e:	d4ed      	bmi.n	800d84c <_vfiprintf_r+0x4c>
 800d870:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d872:	f7ff feb2 	bl	800d5da <__retarget_lock_release_recursive>
 800d876:	e7e9      	b.n	800d84c <_vfiprintf_r+0x4c>
 800d878:	2300      	movs	r3, #0
 800d87a:	9309      	str	r3, [sp, #36]	; 0x24
 800d87c:	2320      	movs	r3, #32
 800d87e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d882:	f8cd 800c 	str.w	r8, [sp, #12]
 800d886:	2330      	movs	r3, #48	; 0x30
 800d888:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800da4c <_vfiprintf_r+0x24c>
 800d88c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d890:	f04f 0901 	mov.w	r9, #1
 800d894:	4623      	mov	r3, r4
 800d896:	469a      	mov	sl, r3
 800d898:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d89c:	b10a      	cbz	r2, 800d8a2 <_vfiprintf_r+0xa2>
 800d89e:	2a25      	cmp	r2, #37	; 0x25
 800d8a0:	d1f9      	bne.n	800d896 <_vfiprintf_r+0x96>
 800d8a2:	ebba 0b04 	subs.w	fp, sl, r4
 800d8a6:	d00b      	beq.n	800d8c0 <_vfiprintf_r+0xc0>
 800d8a8:	465b      	mov	r3, fp
 800d8aa:	4622      	mov	r2, r4
 800d8ac:	4629      	mov	r1, r5
 800d8ae:	4630      	mov	r0, r6
 800d8b0:	f7ff ff93 	bl	800d7da <__sfputs_r>
 800d8b4:	3001      	adds	r0, #1
 800d8b6:	f000 80aa 	beq.w	800da0e <_vfiprintf_r+0x20e>
 800d8ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d8bc:	445a      	add	r2, fp
 800d8be:	9209      	str	r2, [sp, #36]	; 0x24
 800d8c0:	f89a 3000 	ldrb.w	r3, [sl]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	f000 80a2 	beq.w	800da0e <_vfiprintf_r+0x20e>
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	f04f 32ff 	mov.w	r2, #4294967295
 800d8d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d8d4:	f10a 0a01 	add.w	sl, sl, #1
 800d8d8:	9304      	str	r3, [sp, #16]
 800d8da:	9307      	str	r3, [sp, #28]
 800d8dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d8e0:	931a      	str	r3, [sp, #104]	; 0x68
 800d8e2:	4654      	mov	r4, sl
 800d8e4:	2205      	movs	r2, #5
 800d8e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8ea:	4858      	ldr	r0, [pc, #352]	; (800da4c <_vfiprintf_r+0x24c>)
 800d8ec:	f7f2 fc70 	bl	80001d0 <memchr>
 800d8f0:	9a04      	ldr	r2, [sp, #16]
 800d8f2:	b9d8      	cbnz	r0, 800d92c <_vfiprintf_r+0x12c>
 800d8f4:	06d1      	lsls	r1, r2, #27
 800d8f6:	bf44      	itt	mi
 800d8f8:	2320      	movmi	r3, #32
 800d8fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d8fe:	0713      	lsls	r3, r2, #28
 800d900:	bf44      	itt	mi
 800d902:	232b      	movmi	r3, #43	; 0x2b
 800d904:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d908:	f89a 3000 	ldrb.w	r3, [sl]
 800d90c:	2b2a      	cmp	r3, #42	; 0x2a
 800d90e:	d015      	beq.n	800d93c <_vfiprintf_r+0x13c>
 800d910:	9a07      	ldr	r2, [sp, #28]
 800d912:	4654      	mov	r4, sl
 800d914:	2000      	movs	r0, #0
 800d916:	f04f 0c0a 	mov.w	ip, #10
 800d91a:	4621      	mov	r1, r4
 800d91c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d920:	3b30      	subs	r3, #48	; 0x30
 800d922:	2b09      	cmp	r3, #9
 800d924:	d94e      	bls.n	800d9c4 <_vfiprintf_r+0x1c4>
 800d926:	b1b0      	cbz	r0, 800d956 <_vfiprintf_r+0x156>
 800d928:	9207      	str	r2, [sp, #28]
 800d92a:	e014      	b.n	800d956 <_vfiprintf_r+0x156>
 800d92c:	eba0 0308 	sub.w	r3, r0, r8
 800d930:	fa09 f303 	lsl.w	r3, r9, r3
 800d934:	4313      	orrs	r3, r2
 800d936:	9304      	str	r3, [sp, #16]
 800d938:	46a2      	mov	sl, r4
 800d93a:	e7d2      	b.n	800d8e2 <_vfiprintf_r+0xe2>
 800d93c:	9b03      	ldr	r3, [sp, #12]
 800d93e:	1d19      	adds	r1, r3, #4
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	9103      	str	r1, [sp, #12]
 800d944:	2b00      	cmp	r3, #0
 800d946:	bfbb      	ittet	lt
 800d948:	425b      	neglt	r3, r3
 800d94a:	f042 0202 	orrlt.w	r2, r2, #2
 800d94e:	9307      	strge	r3, [sp, #28]
 800d950:	9307      	strlt	r3, [sp, #28]
 800d952:	bfb8      	it	lt
 800d954:	9204      	strlt	r2, [sp, #16]
 800d956:	7823      	ldrb	r3, [r4, #0]
 800d958:	2b2e      	cmp	r3, #46	; 0x2e
 800d95a:	d10c      	bne.n	800d976 <_vfiprintf_r+0x176>
 800d95c:	7863      	ldrb	r3, [r4, #1]
 800d95e:	2b2a      	cmp	r3, #42	; 0x2a
 800d960:	d135      	bne.n	800d9ce <_vfiprintf_r+0x1ce>
 800d962:	9b03      	ldr	r3, [sp, #12]
 800d964:	1d1a      	adds	r2, r3, #4
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	9203      	str	r2, [sp, #12]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	bfb8      	it	lt
 800d96e:	f04f 33ff 	movlt.w	r3, #4294967295
 800d972:	3402      	adds	r4, #2
 800d974:	9305      	str	r3, [sp, #20]
 800d976:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800da5c <_vfiprintf_r+0x25c>
 800d97a:	7821      	ldrb	r1, [r4, #0]
 800d97c:	2203      	movs	r2, #3
 800d97e:	4650      	mov	r0, sl
 800d980:	f7f2 fc26 	bl	80001d0 <memchr>
 800d984:	b140      	cbz	r0, 800d998 <_vfiprintf_r+0x198>
 800d986:	2340      	movs	r3, #64	; 0x40
 800d988:	eba0 000a 	sub.w	r0, r0, sl
 800d98c:	fa03 f000 	lsl.w	r0, r3, r0
 800d990:	9b04      	ldr	r3, [sp, #16]
 800d992:	4303      	orrs	r3, r0
 800d994:	3401      	adds	r4, #1
 800d996:	9304      	str	r3, [sp, #16]
 800d998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d99c:	482c      	ldr	r0, [pc, #176]	; (800da50 <_vfiprintf_r+0x250>)
 800d99e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d9a2:	2206      	movs	r2, #6
 800d9a4:	f7f2 fc14 	bl	80001d0 <memchr>
 800d9a8:	2800      	cmp	r0, #0
 800d9aa:	d03f      	beq.n	800da2c <_vfiprintf_r+0x22c>
 800d9ac:	4b29      	ldr	r3, [pc, #164]	; (800da54 <_vfiprintf_r+0x254>)
 800d9ae:	bb1b      	cbnz	r3, 800d9f8 <_vfiprintf_r+0x1f8>
 800d9b0:	9b03      	ldr	r3, [sp, #12]
 800d9b2:	3307      	adds	r3, #7
 800d9b4:	f023 0307 	bic.w	r3, r3, #7
 800d9b8:	3308      	adds	r3, #8
 800d9ba:	9303      	str	r3, [sp, #12]
 800d9bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9be:	443b      	add	r3, r7
 800d9c0:	9309      	str	r3, [sp, #36]	; 0x24
 800d9c2:	e767      	b.n	800d894 <_vfiprintf_r+0x94>
 800d9c4:	fb0c 3202 	mla	r2, ip, r2, r3
 800d9c8:	460c      	mov	r4, r1
 800d9ca:	2001      	movs	r0, #1
 800d9cc:	e7a5      	b.n	800d91a <_vfiprintf_r+0x11a>
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	3401      	adds	r4, #1
 800d9d2:	9305      	str	r3, [sp, #20]
 800d9d4:	4619      	mov	r1, r3
 800d9d6:	f04f 0c0a 	mov.w	ip, #10
 800d9da:	4620      	mov	r0, r4
 800d9dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d9e0:	3a30      	subs	r2, #48	; 0x30
 800d9e2:	2a09      	cmp	r2, #9
 800d9e4:	d903      	bls.n	800d9ee <_vfiprintf_r+0x1ee>
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d0c5      	beq.n	800d976 <_vfiprintf_r+0x176>
 800d9ea:	9105      	str	r1, [sp, #20]
 800d9ec:	e7c3      	b.n	800d976 <_vfiprintf_r+0x176>
 800d9ee:	fb0c 2101 	mla	r1, ip, r1, r2
 800d9f2:	4604      	mov	r4, r0
 800d9f4:	2301      	movs	r3, #1
 800d9f6:	e7f0      	b.n	800d9da <_vfiprintf_r+0x1da>
 800d9f8:	ab03      	add	r3, sp, #12
 800d9fa:	9300      	str	r3, [sp, #0]
 800d9fc:	462a      	mov	r2, r5
 800d9fe:	4b16      	ldr	r3, [pc, #88]	; (800da58 <_vfiprintf_r+0x258>)
 800da00:	a904      	add	r1, sp, #16
 800da02:	4630      	mov	r0, r6
 800da04:	f3af 8000 	nop.w
 800da08:	4607      	mov	r7, r0
 800da0a:	1c78      	adds	r0, r7, #1
 800da0c:	d1d6      	bne.n	800d9bc <_vfiprintf_r+0x1bc>
 800da0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da10:	07d9      	lsls	r1, r3, #31
 800da12:	d405      	bmi.n	800da20 <_vfiprintf_r+0x220>
 800da14:	89ab      	ldrh	r3, [r5, #12]
 800da16:	059a      	lsls	r2, r3, #22
 800da18:	d402      	bmi.n	800da20 <_vfiprintf_r+0x220>
 800da1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da1c:	f7ff fddd 	bl	800d5da <__retarget_lock_release_recursive>
 800da20:	89ab      	ldrh	r3, [r5, #12]
 800da22:	065b      	lsls	r3, r3, #25
 800da24:	f53f af12 	bmi.w	800d84c <_vfiprintf_r+0x4c>
 800da28:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da2a:	e711      	b.n	800d850 <_vfiprintf_r+0x50>
 800da2c:	ab03      	add	r3, sp, #12
 800da2e:	9300      	str	r3, [sp, #0]
 800da30:	462a      	mov	r2, r5
 800da32:	4b09      	ldr	r3, [pc, #36]	; (800da58 <_vfiprintf_r+0x258>)
 800da34:	a904      	add	r1, sp, #16
 800da36:	4630      	mov	r0, r6
 800da38:	f000 f880 	bl	800db3c <_printf_i>
 800da3c:	e7e4      	b.n	800da08 <_vfiprintf_r+0x208>
 800da3e:	bf00      	nop
 800da40:	08011028 	.word	0x08011028
 800da44:	08011048 	.word	0x08011048
 800da48:	08011008 	.word	0x08011008
 800da4c:	08011068 	.word	0x08011068
 800da50:	08011072 	.word	0x08011072
 800da54:	00000000 	.word	0x00000000
 800da58:	0800d7db 	.word	0x0800d7db
 800da5c:	0801106e 	.word	0x0801106e

0800da60 <_printf_common>:
 800da60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da64:	4616      	mov	r6, r2
 800da66:	4699      	mov	r9, r3
 800da68:	688a      	ldr	r2, [r1, #8]
 800da6a:	690b      	ldr	r3, [r1, #16]
 800da6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800da70:	4293      	cmp	r3, r2
 800da72:	bfb8      	it	lt
 800da74:	4613      	movlt	r3, r2
 800da76:	6033      	str	r3, [r6, #0]
 800da78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800da7c:	4607      	mov	r7, r0
 800da7e:	460c      	mov	r4, r1
 800da80:	b10a      	cbz	r2, 800da86 <_printf_common+0x26>
 800da82:	3301      	adds	r3, #1
 800da84:	6033      	str	r3, [r6, #0]
 800da86:	6823      	ldr	r3, [r4, #0]
 800da88:	0699      	lsls	r1, r3, #26
 800da8a:	bf42      	ittt	mi
 800da8c:	6833      	ldrmi	r3, [r6, #0]
 800da8e:	3302      	addmi	r3, #2
 800da90:	6033      	strmi	r3, [r6, #0]
 800da92:	6825      	ldr	r5, [r4, #0]
 800da94:	f015 0506 	ands.w	r5, r5, #6
 800da98:	d106      	bne.n	800daa8 <_printf_common+0x48>
 800da9a:	f104 0a19 	add.w	sl, r4, #25
 800da9e:	68e3      	ldr	r3, [r4, #12]
 800daa0:	6832      	ldr	r2, [r6, #0]
 800daa2:	1a9b      	subs	r3, r3, r2
 800daa4:	42ab      	cmp	r3, r5
 800daa6:	dc26      	bgt.n	800daf6 <_printf_common+0x96>
 800daa8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800daac:	1e13      	subs	r3, r2, #0
 800daae:	6822      	ldr	r2, [r4, #0]
 800dab0:	bf18      	it	ne
 800dab2:	2301      	movne	r3, #1
 800dab4:	0692      	lsls	r2, r2, #26
 800dab6:	d42b      	bmi.n	800db10 <_printf_common+0xb0>
 800dab8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dabc:	4649      	mov	r1, r9
 800dabe:	4638      	mov	r0, r7
 800dac0:	47c0      	blx	r8
 800dac2:	3001      	adds	r0, #1
 800dac4:	d01e      	beq.n	800db04 <_printf_common+0xa4>
 800dac6:	6823      	ldr	r3, [r4, #0]
 800dac8:	68e5      	ldr	r5, [r4, #12]
 800daca:	6832      	ldr	r2, [r6, #0]
 800dacc:	f003 0306 	and.w	r3, r3, #6
 800dad0:	2b04      	cmp	r3, #4
 800dad2:	bf08      	it	eq
 800dad4:	1aad      	subeq	r5, r5, r2
 800dad6:	68a3      	ldr	r3, [r4, #8]
 800dad8:	6922      	ldr	r2, [r4, #16]
 800dada:	bf0c      	ite	eq
 800dadc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dae0:	2500      	movne	r5, #0
 800dae2:	4293      	cmp	r3, r2
 800dae4:	bfc4      	itt	gt
 800dae6:	1a9b      	subgt	r3, r3, r2
 800dae8:	18ed      	addgt	r5, r5, r3
 800daea:	2600      	movs	r6, #0
 800daec:	341a      	adds	r4, #26
 800daee:	42b5      	cmp	r5, r6
 800daf0:	d11a      	bne.n	800db28 <_printf_common+0xc8>
 800daf2:	2000      	movs	r0, #0
 800daf4:	e008      	b.n	800db08 <_printf_common+0xa8>
 800daf6:	2301      	movs	r3, #1
 800daf8:	4652      	mov	r2, sl
 800dafa:	4649      	mov	r1, r9
 800dafc:	4638      	mov	r0, r7
 800dafe:	47c0      	blx	r8
 800db00:	3001      	adds	r0, #1
 800db02:	d103      	bne.n	800db0c <_printf_common+0xac>
 800db04:	f04f 30ff 	mov.w	r0, #4294967295
 800db08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db0c:	3501      	adds	r5, #1
 800db0e:	e7c6      	b.n	800da9e <_printf_common+0x3e>
 800db10:	18e1      	adds	r1, r4, r3
 800db12:	1c5a      	adds	r2, r3, #1
 800db14:	2030      	movs	r0, #48	; 0x30
 800db16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800db1a:	4422      	add	r2, r4
 800db1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800db20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800db24:	3302      	adds	r3, #2
 800db26:	e7c7      	b.n	800dab8 <_printf_common+0x58>
 800db28:	2301      	movs	r3, #1
 800db2a:	4622      	mov	r2, r4
 800db2c:	4649      	mov	r1, r9
 800db2e:	4638      	mov	r0, r7
 800db30:	47c0      	blx	r8
 800db32:	3001      	adds	r0, #1
 800db34:	d0e6      	beq.n	800db04 <_printf_common+0xa4>
 800db36:	3601      	adds	r6, #1
 800db38:	e7d9      	b.n	800daee <_printf_common+0x8e>
	...

0800db3c <_printf_i>:
 800db3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800db40:	7e0f      	ldrb	r7, [r1, #24]
 800db42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800db44:	2f78      	cmp	r7, #120	; 0x78
 800db46:	4691      	mov	r9, r2
 800db48:	4680      	mov	r8, r0
 800db4a:	460c      	mov	r4, r1
 800db4c:	469a      	mov	sl, r3
 800db4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800db52:	d807      	bhi.n	800db64 <_printf_i+0x28>
 800db54:	2f62      	cmp	r7, #98	; 0x62
 800db56:	d80a      	bhi.n	800db6e <_printf_i+0x32>
 800db58:	2f00      	cmp	r7, #0
 800db5a:	f000 80d8 	beq.w	800dd0e <_printf_i+0x1d2>
 800db5e:	2f58      	cmp	r7, #88	; 0x58
 800db60:	f000 80a3 	beq.w	800dcaa <_printf_i+0x16e>
 800db64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800db68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800db6c:	e03a      	b.n	800dbe4 <_printf_i+0xa8>
 800db6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800db72:	2b15      	cmp	r3, #21
 800db74:	d8f6      	bhi.n	800db64 <_printf_i+0x28>
 800db76:	a101      	add	r1, pc, #4	; (adr r1, 800db7c <_printf_i+0x40>)
 800db78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800db7c:	0800dbd5 	.word	0x0800dbd5
 800db80:	0800dbe9 	.word	0x0800dbe9
 800db84:	0800db65 	.word	0x0800db65
 800db88:	0800db65 	.word	0x0800db65
 800db8c:	0800db65 	.word	0x0800db65
 800db90:	0800db65 	.word	0x0800db65
 800db94:	0800dbe9 	.word	0x0800dbe9
 800db98:	0800db65 	.word	0x0800db65
 800db9c:	0800db65 	.word	0x0800db65
 800dba0:	0800db65 	.word	0x0800db65
 800dba4:	0800db65 	.word	0x0800db65
 800dba8:	0800dcf5 	.word	0x0800dcf5
 800dbac:	0800dc19 	.word	0x0800dc19
 800dbb0:	0800dcd7 	.word	0x0800dcd7
 800dbb4:	0800db65 	.word	0x0800db65
 800dbb8:	0800db65 	.word	0x0800db65
 800dbbc:	0800dd17 	.word	0x0800dd17
 800dbc0:	0800db65 	.word	0x0800db65
 800dbc4:	0800dc19 	.word	0x0800dc19
 800dbc8:	0800db65 	.word	0x0800db65
 800dbcc:	0800db65 	.word	0x0800db65
 800dbd0:	0800dcdf 	.word	0x0800dcdf
 800dbd4:	682b      	ldr	r3, [r5, #0]
 800dbd6:	1d1a      	adds	r2, r3, #4
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	602a      	str	r2, [r5, #0]
 800dbdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dbe0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dbe4:	2301      	movs	r3, #1
 800dbe6:	e0a3      	b.n	800dd30 <_printf_i+0x1f4>
 800dbe8:	6820      	ldr	r0, [r4, #0]
 800dbea:	6829      	ldr	r1, [r5, #0]
 800dbec:	0606      	lsls	r6, r0, #24
 800dbee:	f101 0304 	add.w	r3, r1, #4
 800dbf2:	d50a      	bpl.n	800dc0a <_printf_i+0xce>
 800dbf4:	680e      	ldr	r6, [r1, #0]
 800dbf6:	602b      	str	r3, [r5, #0]
 800dbf8:	2e00      	cmp	r6, #0
 800dbfa:	da03      	bge.n	800dc04 <_printf_i+0xc8>
 800dbfc:	232d      	movs	r3, #45	; 0x2d
 800dbfe:	4276      	negs	r6, r6
 800dc00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dc04:	485e      	ldr	r0, [pc, #376]	; (800dd80 <_printf_i+0x244>)
 800dc06:	230a      	movs	r3, #10
 800dc08:	e019      	b.n	800dc3e <_printf_i+0x102>
 800dc0a:	680e      	ldr	r6, [r1, #0]
 800dc0c:	602b      	str	r3, [r5, #0]
 800dc0e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dc12:	bf18      	it	ne
 800dc14:	b236      	sxthne	r6, r6
 800dc16:	e7ef      	b.n	800dbf8 <_printf_i+0xbc>
 800dc18:	682b      	ldr	r3, [r5, #0]
 800dc1a:	6820      	ldr	r0, [r4, #0]
 800dc1c:	1d19      	adds	r1, r3, #4
 800dc1e:	6029      	str	r1, [r5, #0]
 800dc20:	0601      	lsls	r1, r0, #24
 800dc22:	d501      	bpl.n	800dc28 <_printf_i+0xec>
 800dc24:	681e      	ldr	r6, [r3, #0]
 800dc26:	e002      	b.n	800dc2e <_printf_i+0xf2>
 800dc28:	0646      	lsls	r6, r0, #25
 800dc2a:	d5fb      	bpl.n	800dc24 <_printf_i+0xe8>
 800dc2c:	881e      	ldrh	r6, [r3, #0]
 800dc2e:	4854      	ldr	r0, [pc, #336]	; (800dd80 <_printf_i+0x244>)
 800dc30:	2f6f      	cmp	r7, #111	; 0x6f
 800dc32:	bf0c      	ite	eq
 800dc34:	2308      	moveq	r3, #8
 800dc36:	230a      	movne	r3, #10
 800dc38:	2100      	movs	r1, #0
 800dc3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dc3e:	6865      	ldr	r5, [r4, #4]
 800dc40:	60a5      	str	r5, [r4, #8]
 800dc42:	2d00      	cmp	r5, #0
 800dc44:	bfa2      	ittt	ge
 800dc46:	6821      	ldrge	r1, [r4, #0]
 800dc48:	f021 0104 	bicge.w	r1, r1, #4
 800dc4c:	6021      	strge	r1, [r4, #0]
 800dc4e:	b90e      	cbnz	r6, 800dc54 <_printf_i+0x118>
 800dc50:	2d00      	cmp	r5, #0
 800dc52:	d04d      	beq.n	800dcf0 <_printf_i+0x1b4>
 800dc54:	4615      	mov	r5, r2
 800dc56:	fbb6 f1f3 	udiv	r1, r6, r3
 800dc5a:	fb03 6711 	mls	r7, r3, r1, r6
 800dc5e:	5dc7      	ldrb	r7, [r0, r7]
 800dc60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dc64:	4637      	mov	r7, r6
 800dc66:	42bb      	cmp	r3, r7
 800dc68:	460e      	mov	r6, r1
 800dc6a:	d9f4      	bls.n	800dc56 <_printf_i+0x11a>
 800dc6c:	2b08      	cmp	r3, #8
 800dc6e:	d10b      	bne.n	800dc88 <_printf_i+0x14c>
 800dc70:	6823      	ldr	r3, [r4, #0]
 800dc72:	07de      	lsls	r6, r3, #31
 800dc74:	d508      	bpl.n	800dc88 <_printf_i+0x14c>
 800dc76:	6923      	ldr	r3, [r4, #16]
 800dc78:	6861      	ldr	r1, [r4, #4]
 800dc7a:	4299      	cmp	r1, r3
 800dc7c:	bfde      	ittt	le
 800dc7e:	2330      	movle	r3, #48	; 0x30
 800dc80:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dc84:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dc88:	1b52      	subs	r2, r2, r5
 800dc8a:	6122      	str	r2, [r4, #16]
 800dc8c:	f8cd a000 	str.w	sl, [sp]
 800dc90:	464b      	mov	r3, r9
 800dc92:	aa03      	add	r2, sp, #12
 800dc94:	4621      	mov	r1, r4
 800dc96:	4640      	mov	r0, r8
 800dc98:	f7ff fee2 	bl	800da60 <_printf_common>
 800dc9c:	3001      	adds	r0, #1
 800dc9e:	d14c      	bne.n	800dd3a <_printf_i+0x1fe>
 800dca0:	f04f 30ff 	mov.w	r0, #4294967295
 800dca4:	b004      	add	sp, #16
 800dca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcaa:	4835      	ldr	r0, [pc, #212]	; (800dd80 <_printf_i+0x244>)
 800dcac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800dcb0:	6829      	ldr	r1, [r5, #0]
 800dcb2:	6823      	ldr	r3, [r4, #0]
 800dcb4:	f851 6b04 	ldr.w	r6, [r1], #4
 800dcb8:	6029      	str	r1, [r5, #0]
 800dcba:	061d      	lsls	r5, r3, #24
 800dcbc:	d514      	bpl.n	800dce8 <_printf_i+0x1ac>
 800dcbe:	07df      	lsls	r7, r3, #31
 800dcc0:	bf44      	itt	mi
 800dcc2:	f043 0320 	orrmi.w	r3, r3, #32
 800dcc6:	6023      	strmi	r3, [r4, #0]
 800dcc8:	b91e      	cbnz	r6, 800dcd2 <_printf_i+0x196>
 800dcca:	6823      	ldr	r3, [r4, #0]
 800dccc:	f023 0320 	bic.w	r3, r3, #32
 800dcd0:	6023      	str	r3, [r4, #0]
 800dcd2:	2310      	movs	r3, #16
 800dcd4:	e7b0      	b.n	800dc38 <_printf_i+0xfc>
 800dcd6:	6823      	ldr	r3, [r4, #0]
 800dcd8:	f043 0320 	orr.w	r3, r3, #32
 800dcdc:	6023      	str	r3, [r4, #0]
 800dcde:	2378      	movs	r3, #120	; 0x78
 800dce0:	4828      	ldr	r0, [pc, #160]	; (800dd84 <_printf_i+0x248>)
 800dce2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dce6:	e7e3      	b.n	800dcb0 <_printf_i+0x174>
 800dce8:	0659      	lsls	r1, r3, #25
 800dcea:	bf48      	it	mi
 800dcec:	b2b6      	uxthmi	r6, r6
 800dcee:	e7e6      	b.n	800dcbe <_printf_i+0x182>
 800dcf0:	4615      	mov	r5, r2
 800dcf2:	e7bb      	b.n	800dc6c <_printf_i+0x130>
 800dcf4:	682b      	ldr	r3, [r5, #0]
 800dcf6:	6826      	ldr	r6, [r4, #0]
 800dcf8:	6961      	ldr	r1, [r4, #20]
 800dcfa:	1d18      	adds	r0, r3, #4
 800dcfc:	6028      	str	r0, [r5, #0]
 800dcfe:	0635      	lsls	r5, r6, #24
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	d501      	bpl.n	800dd08 <_printf_i+0x1cc>
 800dd04:	6019      	str	r1, [r3, #0]
 800dd06:	e002      	b.n	800dd0e <_printf_i+0x1d2>
 800dd08:	0670      	lsls	r0, r6, #25
 800dd0a:	d5fb      	bpl.n	800dd04 <_printf_i+0x1c8>
 800dd0c:	8019      	strh	r1, [r3, #0]
 800dd0e:	2300      	movs	r3, #0
 800dd10:	6123      	str	r3, [r4, #16]
 800dd12:	4615      	mov	r5, r2
 800dd14:	e7ba      	b.n	800dc8c <_printf_i+0x150>
 800dd16:	682b      	ldr	r3, [r5, #0]
 800dd18:	1d1a      	adds	r2, r3, #4
 800dd1a:	602a      	str	r2, [r5, #0]
 800dd1c:	681d      	ldr	r5, [r3, #0]
 800dd1e:	6862      	ldr	r2, [r4, #4]
 800dd20:	2100      	movs	r1, #0
 800dd22:	4628      	mov	r0, r5
 800dd24:	f7f2 fa54 	bl	80001d0 <memchr>
 800dd28:	b108      	cbz	r0, 800dd2e <_printf_i+0x1f2>
 800dd2a:	1b40      	subs	r0, r0, r5
 800dd2c:	6060      	str	r0, [r4, #4]
 800dd2e:	6863      	ldr	r3, [r4, #4]
 800dd30:	6123      	str	r3, [r4, #16]
 800dd32:	2300      	movs	r3, #0
 800dd34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dd38:	e7a8      	b.n	800dc8c <_printf_i+0x150>
 800dd3a:	6923      	ldr	r3, [r4, #16]
 800dd3c:	462a      	mov	r2, r5
 800dd3e:	4649      	mov	r1, r9
 800dd40:	4640      	mov	r0, r8
 800dd42:	47d0      	blx	sl
 800dd44:	3001      	adds	r0, #1
 800dd46:	d0ab      	beq.n	800dca0 <_printf_i+0x164>
 800dd48:	6823      	ldr	r3, [r4, #0]
 800dd4a:	079b      	lsls	r3, r3, #30
 800dd4c:	d413      	bmi.n	800dd76 <_printf_i+0x23a>
 800dd4e:	68e0      	ldr	r0, [r4, #12]
 800dd50:	9b03      	ldr	r3, [sp, #12]
 800dd52:	4298      	cmp	r0, r3
 800dd54:	bfb8      	it	lt
 800dd56:	4618      	movlt	r0, r3
 800dd58:	e7a4      	b.n	800dca4 <_printf_i+0x168>
 800dd5a:	2301      	movs	r3, #1
 800dd5c:	4632      	mov	r2, r6
 800dd5e:	4649      	mov	r1, r9
 800dd60:	4640      	mov	r0, r8
 800dd62:	47d0      	blx	sl
 800dd64:	3001      	adds	r0, #1
 800dd66:	d09b      	beq.n	800dca0 <_printf_i+0x164>
 800dd68:	3501      	adds	r5, #1
 800dd6a:	68e3      	ldr	r3, [r4, #12]
 800dd6c:	9903      	ldr	r1, [sp, #12]
 800dd6e:	1a5b      	subs	r3, r3, r1
 800dd70:	42ab      	cmp	r3, r5
 800dd72:	dcf2      	bgt.n	800dd5a <_printf_i+0x21e>
 800dd74:	e7eb      	b.n	800dd4e <_printf_i+0x212>
 800dd76:	2500      	movs	r5, #0
 800dd78:	f104 0619 	add.w	r6, r4, #25
 800dd7c:	e7f5      	b.n	800dd6a <_printf_i+0x22e>
 800dd7e:	bf00      	nop
 800dd80:	08011079 	.word	0x08011079
 800dd84:	0801108a 	.word	0x0801108a

0800dd88 <_sbrk_r>:
 800dd88:	b538      	push	{r3, r4, r5, lr}
 800dd8a:	4d06      	ldr	r5, [pc, #24]	; (800dda4 <_sbrk_r+0x1c>)
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	4604      	mov	r4, r0
 800dd90:	4608      	mov	r0, r1
 800dd92:	602b      	str	r3, [r5, #0]
 800dd94:	f7f2 fda2 	bl	80008dc <_sbrk>
 800dd98:	1c43      	adds	r3, r0, #1
 800dd9a:	d102      	bne.n	800dda2 <_sbrk_r+0x1a>
 800dd9c:	682b      	ldr	r3, [r5, #0]
 800dd9e:	b103      	cbz	r3, 800dda2 <_sbrk_r+0x1a>
 800dda0:	6023      	str	r3, [r4, #0]
 800dda2:	bd38      	pop	{r3, r4, r5, pc}
 800dda4:	20008420 	.word	0x20008420

0800dda8 <__sread>:
 800dda8:	b510      	push	{r4, lr}
 800ddaa:	460c      	mov	r4, r1
 800ddac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddb0:	f000 fa6e 	bl	800e290 <_read_r>
 800ddb4:	2800      	cmp	r0, #0
 800ddb6:	bfab      	itete	ge
 800ddb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ddba:	89a3      	ldrhlt	r3, [r4, #12]
 800ddbc:	181b      	addge	r3, r3, r0
 800ddbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ddc2:	bfac      	ite	ge
 800ddc4:	6563      	strge	r3, [r4, #84]	; 0x54
 800ddc6:	81a3      	strhlt	r3, [r4, #12]
 800ddc8:	bd10      	pop	{r4, pc}

0800ddca <__swrite>:
 800ddca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddce:	461f      	mov	r7, r3
 800ddd0:	898b      	ldrh	r3, [r1, #12]
 800ddd2:	05db      	lsls	r3, r3, #23
 800ddd4:	4605      	mov	r5, r0
 800ddd6:	460c      	mov	r4, r1
 800ddd8:	4616      	mov	r6, r2
 800ddda:	d505      	bpl.n	800dde8 <__swrite+0x1e>
 800dddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dde0:	2302      	movs	r3, #2
 800dde2:	2200      	movs	r2, #0
 800dde4:	f000 f9d0 	bl	800e188 <_lseek_r>
 800dde8:	89a3      	ldrh	r3, [r4, #12]
 800ddea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ddee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ddf2:	81a3      	strh	r3, [r4, #12]
 800ddf4:	4632      	mov	r2, r6
 800ddf6:	463b      	mov	r3, r7
 800ddf8:	4628      	mov	r0, r5
 800ddfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ddfe:	f000 b869 	b.w	800ded4 <_write_r>

0800de02 <__sseek>:
 800de02:	b510      	push	{r4, lr}
 800de04:	460c      	mov	r4, r1
 800de06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de0a:	f000 f9bd 	bl	800e188 <_lseek_r>
 800de0e:	1c43      	adds	r3, r0, #1
 800de10:	89a3      	ldrh	r3, [r4, #12]
 800de12:	bf15      	itete	ne
 800de14:	6560      	strne	r0, [r4, #84]	; 0x54
 800de16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800de1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800de1e:	81a3      	strheq	r3, [r4, #12]
 800de20:	bf18      	it	ne
 800de22:	81a3      	strhne	r3, [r4, #12]
 800de24:	bd10      	pop	{r4, pc}

0800de26 <__sclose>:
 800de26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de2a:	f000 b8db 	b.w	800dfe4 <_close_r>
	...

0800de30 <__swbuf_r>:
 800de30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de32:	460e      	mov	r6, r1
 800de34:	4614      	mov	r4, r2
 800de36:	4605      	mov	r5, r0
 800de38:	b118      	cbz	r0, 800de42 <__swbuf_r+0x12>
 800de3a:	6983      	ldr	r3, [r0, #24]
 800de3c:	b90b      	cbnz	r3, 800de42 <__swbuf_r+0x12>
 800de3e:	f7ff fb1b 	bl	800d478 <__sinit>
 800de42:	4b21      	ldr	r3, [pc, #132]	; (800dec8 <__swbuf_r+0x98>)
 800de44:	429c      	cmp	r4, r3
 800de46:	d12b      	bne.n	800dea0 <__swbuf_r+0x70>
 800de48:	686c      	ldr	r4, [r5, #4]
 800de4a:	69a3      	ldr	r3, [r4, #24]
 800de4c:	60a3      	str	r3, [r4, #8]
 800de4e:	89a3      	ldrh	r3, [r4, #12]
 800de50:	071a      	lsls	r2, r3, #28
 800de52:	d52f      	bpl.n	800deb4 <__swbuf_r+0x84>
 800de54:	6923      	ldr	r3, [r4, #16]
 800de56:	b36b      	cbz	r3, 800deb4 <__swbuf_r+0x84>
 800de58:	6923      	ldr	r3, [r4, #16]
 800de5a:	6820      	ldr	r0, [r4, #0]
 800de5c:	1ac0      	subs	r0, r0, r3
 800de5e:	6963      	ldr	r3, [r4, #20]
 800de60:	b2f6      	uxtb	r6, r6
 800de62:	4283      	cmp	r3, r0
 800de64:	4637      	mov	r7, r6
 800de66:	dc04      	bgt.n	800de72 <__swbuf_r+0x42>
 800de68:	4621      	mov	r1, r4
 800de6a:	4628      	mov	r0, r5
 800de6c:	f000 f950 	bl	800e110 <_fflush_r>
 800de70:	bb30      	cbnz	r0, 800dec0 <__swbuf_r+0x90>
 800de72:	68a3      	ldr	r3, [r4, #8]
 800de74:	3b01      	subs	r3, #1
 800de76:	60a3      	str	r3, [r4, #8]
 800de78:	6823      	ldr	r3, [r4, #0]
 800de7a:	1c5a      	adds	r2, r3, #1
 800de7c:	6022      	str	r2, [r4, #0]
 800de7e:	701e      	strb	r6, [r3, #0]
 800de80:	6963      	ldr	r3, [r4, #20]
 800de82:	3001      	adds	r0, #1
 800de84:	4283      	cmp	r3, r0
 800de86:	d004      	beq.n	800de92 <__swbuf_r+0x62>
 800de88:	89a3      	ldrh	r3, [r4, #12]
 800de8a:	07db      	lsls	r3, r3, #31
 800de8c:	d506      	bpl.n	800de9c <__swbuf_r+0x6c>
 800de8e:	2e0a      	cmp	r6, #10
 800de90:	d104      	bne.n	800de9c <__swbuf_r+0x6c>
 800de92:	4621      	mov	r1, r4
 800de94:	4628      	mov	r0, r5
 800de96:	f000 f93b 	bl	800e110 <_fflush_r>
 800de9a:	b988      	cbnz	r0, 800dec0 <__swbuf_r+0x90>
 800de9c:	4638      	mov	r0, r7
 800de9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dea0:	4b0a      	ldr	r3, [pc, #40]	; (800decc <__swbuf_r+0x9c>)
 800dea2:	429c      	cmp	r4, r3
 800dea4:	d101      	bne.n	800deaa <__swbuf_r+0x7a>
 800dea6:	68ac      	ldr	r4, [r5, #8]
 800dea8:	e7cf      	b.n	800de4a <__swbuf_r+0x1a>
 800deaa:	4b09      	ldr	r3, [pc, #36]	; (800ded0 <__swbuf_r+0xa0>)
 800deac:	429c      	cmp	r4, r3
 800deae:	bf08      	it	eq
 800deb0:	68ec      	ldreq	r4, [r5, #12]
 800deb2:	e7ca      	b.n	800de4a <__swbuf_r+0x1a>
 800deb4:	4621      	mov	r1, r4
 800deb6:	4628      	mov	r0, r5
 800deb8:	f000 f81e 	bl	800def8 <__swsetup_r>
 800debc:	2800      	cmp	r0, #0
 800debe:	d0cb      	beq.n	800de58 <__swbuf_r+0x28>
 800dec0:	f04f 37ff 	mov.w	r7, #4294967295
 800dec4:	e7ea      	b.n	800de9c <__swbuf_r+0x6c>
 800dec6:	bf00      	nop
 800dec8:	08011028 	.word	0x08011028
 800decc:	08011048 	.word	0x08011048
 800ded0:	08011008 	.word	0x08011008

0800ded4 <_write_r>:
 800ded4:	b538      	push	{r3, r4, r5, lr}
 800ded6:	4d07      	ldr	r5, [pc, #28]	; (800def4 <_write_r+0x20>)
 800ded8:	4604      	mov	r4, r0
 800deda:	4608      	mov	r0, r1
 800dedc:	4611      	mov	r1, r2
 800dede:	2200      	movs	r2, #0
 800dee0:	602a      	str	r2, [r5, #0]
 800dee2:	461a      	mov	r2, r3
 800dee4:	f7f2 fca9 	bl	800083a <_write>
 800dee8:	1c43      	adds	r3, r0, #1
 800deea:	d102      	bne.n	800def2 <_write_r+0x1e>
 800deec:	682b      	ldr	r3, [r5, #0]
 800deee:	b103      	cbz	r3, 800def2 <_write_r+0x1e>
 800def0:	6023      	str	r3, [r4, #0]
 800def2:	bd38      	pop	{r3, r4, r5, pc}
 800def4:	20008420 	.word	0x20008420

0800def8 <__swsetup_r>:
 800def8:	4b32      	ldr	r3, [pc, #200]	; (800dfc4 <__swsetup_r+0xcc>)
 800defa:	b570      	push	{r4, r5, r6, lr}
 800defc:	681d      	ldr	r5, [r3, #0]
 800defe:	4606      	mov	r6, r0
 800df00:	460c      	mov	r4, r1
 800df02:	b125      	cbz	r5, 800df0e <__swsetup_r+0x16>
 800df04:	69ab      	ldr	r3, [r5, #24]
 800df06:	b913      	cbnz	r3, 800df0e <__swsetup_r+0x16>
 800df08:	4628      	mov	r0, r5
 800df0a:	f7ff fab5 	bl	800d478 <__sinit>
 800df0e:	4b2e      	ldr	r3, [pc, #184]	; (800dfc8 <__swsetup_r+0xd0>)
 800df10:	429c      	cmp	r4, r3
 800df12:	d10f      	bne.n	800df34 <__swsetup_r+0x3c>
 800df14:	686c      	ldr	r4, [r5, #4]
 800df16:	89a3      	ldrh	r3, [r4, #12]
 800df18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800df1c:	0719      	lsls	r1, r3, #28
 800df1e:	d42c      	bmi.n	800df7a <__swsetup_r+0x82>
 800df20:	06dd      	lsls	r5, r3, #27
 800df22:	d411      	bmi.n	800df48 <__swsetup_r+0x50>
 800df24:	2309      	movs	r3, #9
 800df26:	6033      	str	r3, [r6, #0]
 800df28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800df2c:	81a3      	strh	r3, [r4, #12]
 800df2e:	f04f 30ff 	mov.w	r0, #4294967295
 800df32:	e03e      	b.n	800dfb2 <__swsetup_r+0xba>
 800df34:	4b25      	ldr	r3, [pc, #148]	; (800dfcc <__swsetup_r+0xd4>)
 800df36:	429c      	cmp	r4, r3
 800df38:	d101      	bne.n	800df3e <__swsetup_r+0x46>
 800df3a:	68ac      	ldr	r4, [r5, #8]
 800df3c:	e7eb      	b.n	800df16 <__swsetup_r+0x1e>
 800df3e:	4b24      	ldr	r3, [pc, #144]	; (800dfd0 <__swsetup_r+0xd8>)
 800df40:	429c      	cmp	r4, r3
 800df42:	bf08      	it	eq
 800df44:	68ec      	ldreq	r4, [r5, #12]
 800df46:	e7e6      	b.n	800df16 <__swsetup_r+0x1e>
 800df48:	0758      	lsls	r0, r3, #29
 800df4a:	d512      	bpl.n	800df72 <__swsetup_r+0x7a>
 800df4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800df4e:	b141      	cbz	r1, 800df62 <__swsetup_r+0x6a>
 800df50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800df54:	4299      	cmp	r1, r3
 800df56:	d002      	beq.n	800df5e <__swsetup_r+0x66>
 800df58:	4630      	mov	r0, r6
 800df5a:	f7ff fb47 	bl	800d5ec <_free_r>
 800df5e:	2300      	movs	r3, #0
 800df60:	6363      	str	r3, [r4, #52]	; 0x34
 800df62:	89a3      	ldrh	r3, [r4, #12]
 800df64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800df68:	81a3      	strh	r3, [r4, #12]
 800df6a:	2300      	movs	r3, #0
 800df6c:	6063      	str	r3, [r4, #4]
 800df6e:	6923      	ldr	r3, [r4, #16]
 800df70:	6023      	str	r3, [r4, #0]
 800df72:	89a3      	ldrh	r3, [r4, #12]
 800df74:	f043 0308 	orr.w	r3, r3, #8
 800df78:	81a3      	strh	r3, [r4, #12]
 800df7a:	6923      	ldr	r3, [r4, #16]
 800df7c:	b94b      	cbnz	r3, 800df92 <__swsetup_r+0x9a>
 800df7e:	89a3      	ldrh	r3, [r4, #12]
 800df80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800df84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df88:	d003      	beq.n	800df92 <__swsetup_r+0x9a>
 800df8a:	4621      	mov	r1, r4
 800df8c:	4630      	mov	r0, r6
 800df8e:	f000 f933 	bl	800e1f8 <__smakebuf_r>
 800df92:	89a0      	ldrh	r0, [r4, #12]
 800df94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800df98:	f010 0301 	ands.w	r3, r0, #1
 800df9c:	d00a      	beq.n	800dfb4 <__swsetup_r+0xbc>
 800df9e:	2300      	movs	r3, #0
 800dfa0:	60a3      	str	r3, [r4, #8]
 800dfa2:	6963      	ldr	r3, [r4, #20]
 800dfa4:	425b      	negs	r3, r3
 800dfa6:	61a3      	str	r3, [r4, #24]
 800dfa8:	6923      	ldr	r3, [r4, #16]
 800dfaa:	b943      	cbnz	r3, 800dfbe <__swsetup_r+0xc6>
 800dfac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dfb0:	d1ba      	bne.n	800df28 <__swsetup_r+0x30>
 800dfb2:	bd70      	pop	{r4, r5, r6, pc}
 800dfb4:	0781      	lsls	r1, r0, #30
 800dfb6:	bf58      	it	pl
 800dfb8:	6963      	ldrpl	r3, [r4, #20]
 800dfba:	60a3      	str	r3, [r4, #8]
 800dfbc:	e7f4      	b.n	800dfa8 <__swsetup_r+0xb0>
 800dfbe:	2000      	movs	r0, #0
 800dfc0:	e7f7      	b.n	800dfb2 <__swsetup_r+0xba>
 800dfc2:	bf00      	nop
 800dfc4:	2000002c 	.word	0x2000002c
 800dfc8:	08011028 	.word	0x08011028
 800dfcc:	08011048 	.word	0x08011048
 800dfd0:	08011008 	.word	0x08011008

0800dfd4 <abort>:
 800dfd4:	b508      	push	{r3, lr}
 800dfd6:	2006      	movs	r0, #6
 800dfd8:	f000 f994 	bl	800e304 <raise>
 800dfdc:	2001      	movs	r0, #1
 800dfde:	f7f2 fc05 	bl	80007ec <_exit>
	...

0800dfe4 <_close_r>:
 800dfe4:	b538      	push	{r3, r4, r5, lr}
 800dfe6:	4d06      	ldr	r5, [pc, #24]	; (800e000 <_close_r+0x1c>)
 800dfe8:	2300      	movs	r3, #0
 800dfea:	4604      	mov	r4, r0
 800dfec:	4608      	mov	r0, r1
 800dfee:	602b      	str	r3, [r5, #0]
 800dff0:	f7f2 fc3f 	bl	8000872 <_close>
 800dff4:	1c43      	adds	r3, r0, #1
 800dff6:	d102      	bne.n	800dffe <_close_r+0x1a>
 800dff8:	682b      	ldr	r3, [r5, #0]
 800dffa:	b103      	cbz	r3, 800dffe <_close_r+0x1a>
 800dffc:	6023      	str	r3, [r4, #0]
 800dffe:	bd38      	pop	{r3, r4, r5, pc}
 800e000:	20008420 	.word	0x20008420

0800e004 <__sflush_r>:
 800e004:	898a      	ldrh	r2, [r1, #12]
 800e006:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e00a:	4605      	mov	r5, r0
 800e00c:	0710      	lsls	r0, r2, #28
 800e00e:	460c      	mov	r4, r1
 800e010:	d458      	bmi.n	800e0c4 <__sflush_r+0xc0>
 800e012:	684b      	ldr	r3, [r1, #4]
 800e014:	2b00      	cmp	r3, #0
 800e016:	dc05      	bgt.n	800e024 <__sflush_r+0x20>
 800e018:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	dc02      	bgt.n	800e024 <__sflush_r+0x20>
 800e01e:	2000      	movs	r0, #0
 800e020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e024:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e026:	2e00      	cmp	r6, #0
 800e028:	d0f9      	beq.n	800e01e <__sflush_r+0x1a>
 800e02a:	2300      	movs	r3, #0
 800e02c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e030:	682f      	ldr	r7, [r5, #0]
 800e032:	602b      	str	r3, [r5, #0]
 800e034:	d032      	beq.n	800e09c <__sflush_r+0x98>
 800e036:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e038:	89a3      	ldrh	r3, [r4, #12]
 800e03a:	075a      	lsls	r2, r3, #29
 800e03c:	d505      	bpl.n	800e04a <__sflush_r+0x46>
 800e03e:	6863      	ldr	r3, [r4, #4]
 800e040:	1ac0      	subs	r0, r0, r3
 800e042:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e044:	b10b      	cbz	r3, 800e04a <__sflush_r+0x46>
 800e046:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e048:	1ac0      	subs	r0, r0, r3
 800e04a:	2300      	movs	r3, #0
 800e04c:	4602      	mov	r2, r0
 800e04e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e050:	6a21      	ldr	r1, [r4, #32]
 800e052:	4628      	mov	r0, r5
 800e054:	47b0      	blx	r6
 800e056:	1c43      	adds	r3, r0, #1
 800e058:	89a3      	ldrh	r3, [r4, #12]
 800e05a:	d106      	bne.n	800e06a <__sflush_r+0x66>
 800e05c:	6829      	ldr	r1, [r5, #0]
 800e05e:	291d      	cmp	r1, #29
 800e060:	d82c      	bhi.n	800e0bc <__sflush_r+0xb8>
 800e062:	4a2a      	ldr	r2, [pc, #168]	; (800e10c <__sflush_r+0x108>)
 800e064:	40ca      	lsrs	r2, r1
 800e066:	07d6      	lsls	r6, r2, #31
 800e068:	d528      	bpl.n	800e0bc <__sflush_r+0xb8>
 800e06a:	2200      	movs	r2, #0
 800e06c:	6062      	str	r2, [r4, #4]
 800e06e:	04d9      	lsls	r1, r3, #19
 800e070:	6922      	ldr	r2, [r4, #16]
 800e072:	6022      	str	r2, [r4, #0]
 800e074:	d504      	bpl.n	800e080 <__sflush_r+0x7c>
 800e076:	1c42      	adds	r2, r0, #1
 800e078:	d101      	bne.n	800e07e <__sflush_r+0x7a>
 800e07a:	682b      	ldr	r3, [r5, #0]
 800e07c:	b903      	cbnz	r3, 800e080 <__sflush_r+0x7c>
 800e07e:	6560      	str	r0, [r4, #84]	; 0x54
 800e080:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e082:	602f      	str	r7, [r5, #0]
 800e084:	2900      	cmp	r1, #0
 800e086:	d0ca      	beq.n	800e01e <__sflush_r+0x1a>
 800e088:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e08c:	4299      	cmp	r1, r3
 800e08e:	d002      	beq.n	800e096 <__sflush_r+0x92>
 800e090:	4628      	mov	r0, r5
 800e092:	f7ff faab 	bl	800d5ec <_free_r>
 800e096:	2000      	movs	r0, #0
 800e098:	6360      	str	r0, [r4, #52]	; 0x34
 800e09a:	e7c1      	b.n	800e020 <__sflush_r+0x1c>
 800e09c:	6a21      	ldr	r1, [r4, #32]
 800e09e:	2301      	movs	r3, #1
 800e0a0:	4628      	mov	r0, r5
 800e0a2:	47b0      	blx	r6
 800e0a4:	1c41      	adds	r1, r0, #1
 800e0a6:	d1c7      	bne.n	800e038 <__sflush_r+0x34>
 800e0a8:	682b      	ldr	r3, [r5, #0]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d0c4      	beq.n	800e038 <__sflush_r+0x34>
 800e0ae:	2b1d      	cmp	r3, #29
 800e0b0:	d001      	beq.n	800e0b6 <__sflush_r+0xb2>
 800e0b2:	2b16      	cmp	r3, #22
 800e0b4:	d101      	bne.n	800e0ba <__sflush_r+0xb6>
 800e0b6:	602f      	str	r7, [r5, #0]
 800e0b8:	e7b1      	b.n	800e01e <__sflush_r+0x1a>
 800e0ba:	89a3      	ldrh	r3, [r4, #12]
 800e0bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0c0:	81a3      	strh	r3, [r4, #12]
 800e0c2:	e7ad      	b.n	800e020 <__sflush_r+0x1c>
 800e0c4:	690f      	ldr	r7, [r1, #16]
 800e0c6:	2f00      	cmp	r7, #0
 800e0c8:	d0a9      	beq.n	800e01e <__sflush_r+0x1a>
 800e0ca:	0793      	lsls	r3, r2, #30
 800e0cc:	680e      	ldr	r6, [r1, #0]
 800e0ce:	bf08      	it	eq
 800e0d0:	694b      	ldreq	r3, [r1, #20]
 800e0d2:	600f      	str	r7, [r1, #0]
 800e0d4:	bf18      	it	ne
 800e0d6:	2300      	movne	r3, #0
 800e0d8:	eba6 0807 	sub.w	r8, r6, r7
 800e0dc:	608b      	str	r3, [r1, #8]
 800e0de:	f1b8 0f00 	cmp.w	r8, #0
 800e0e2:	dd9c      	ble.n	800e01e <__sflush_r+0x1a>
 800e0e4:	6a21      	ldr	r1, [r4, #32]
 800e0e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e0e8:	4643      	mov	r3, r8
 800e0ea:	463a      	mov	r2, r7
 800e0ec:	4628      	mov	r0, r5
 800e0ee:	47b0      	blx	r6
 800e0f0:	2800      	cmp	r0, #0
 800e0f2:	dc06      	bgt.n	800e102 <__sflush_r+0xfe>
 800e0f4:	89a3      	ldrh	r3, [r4, #12]
 800e0f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0fa:	81a3      	strh	r3, [r4, #12]
 800e0fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e100:	e78e      	b.n	800e020 <__sflush_r+0x1c>
 800e102:	4407      	add	r7, r0
 800e104:	eba8 0800 	sub.w	r8, r8, r0
 800e108:	e7e9      	b.n	800e0de <__sflush_r+0xda>
 800e10a:	bf00      	nop
 800e10c:	20400001 	.word	0x20400001

0800e110 <_fflush_r>:
 800e110:	b538      	push	{r3, r4, r5, lr}
 800e112:	690b      	ldr	r3, [r1, #16]
 800e114:	4605      	mov	r5, r0
 800e116:	460c      	mov	r4, r1
 800e118:	b913      	cbnz	r3, 800e120 <_fflush_r+0x10>
 800e11a:	2500      	movs	r5, #0
 800e11c:	4628      	mov	r0, r5
 800e11e:	bd38      	pop	{r3, r4, r5, pc}
 800e120:	b118      	cbz	r0, 800e12a <_fflush_r+0x1a>
 800e122:	6983      	ldr	r3, [r0, #24]
 800e124:	b90b      	cbnz	r3, 800e12a <_fflush_r+0x1a>
 800e126:	f7ff f9a7 	bl	800d478 <__sinit>
 800e12a:	4b14      	ldr	r3, [pc, #80]	; (800e17c <_fflush_r+0x6c>)
 800e12c:	429c      	cmp	r4, r3
 800e12e:	d11b      	bne.n	800e168 <_fflush_r+0x58>
 800e130:	686c      	ldr	r4, [r5, #4]
 800e132:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d0ef      	beq.n	800e11a <_fflush_r+0xa>
 800e13a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e13c:	07d0      	lsls	r0, r2, #31
 800e13e:	d404      	bmi.n	800e14a <_fflush_r+0x3a>
 800e140:	0599      	lsls	r1, r3, #22
 800e142:	d402      	bmi.n	800e14a <_fflush_r+0x3a>
 800e144:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e146:	f7ff fa47 	bl	800d5d8 <__retarget_lock_acquire_recursive>
 800e14a:	4628      	mov	r0, r5
 800e14c:	4621      	mov	r1, r4
 800e14e:	f7ff ff59 	bl	800e004 <__sflush_r>
 800e152:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e154:	07da      	lsls	r2, r3, #31
 800e156:	4605      	mov	r5, r0
 800e158:	d4e0      	bmi.n	800e11c <_fflush_r+0xc>
 800e15a:	89a3      	ldrh	r3, [r4, #12]
 800e15c:	059b      	lsls	r3, r3, #22
 800e15e:	d4dd      	bmi.n	800e11c <_fflush_r+0xc>
 800e160:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e162:	f7ff fa3a 	bl	800d5da <__retarget_lock_release_recursive>
 800e166:	e7d9      	b.n	800e11c <_fflush_r+0xc>
 800e168:	4b05      	ldr	r3, [pc, #20]	; (800e180 <_fflush_r+0x70>)
 800e16a:	429c      	cmp	r4, r3
 800e16c:	d101      	bne.n	800e172 <_fflush_r+0x62>
 800e16e:	68ac      	ldr	r4, [r5, #8]
 800e170:	e7df      	b.n	800e132 <_fflush_r+0x22>
 800e172:	4b04      	ldr	r3, [pc, #16]	; (800e184 <_fflush_r+0x74>)
 800e174:	429c      	cmp	r4, r3
 800e176:	bf08      	it	eq
 800e178:	68ec      	ldreq	r4, [r5, #12]
 800e17a:	e7da      	b.n	800e132 <_fflush_r+0x22>
 800e17c:	08011028 	.word	0x08011028
 800e180:	08011048 	.word	0x08011048
 800e184:	08011008 	.word	0x08011008

0800e188 <_lseek_r>:
 800e188:	b538      	push	{r3, r4, r5, lr}
 800e18a:	4d07      	ldr	r5, [pc, #28]	; (800e1a8 <_lseek_r+0x20>)
 800e18c:	4604      	mov	r4, r0
 800e18e:	4608      	mov	r0, r1
 800e190:	4611      	mov	r1, r2
 800e192:	2200      	movs	r2, #0
 800e194:	602a      	str	r2, [r5, #0]
 800e196:	461a      	mov	r2, r3
 800e198:	f7f2 fb92 	bl	80008c0 <_lseek>
 800e19c:	1c43      	adds	r3, r0, #1
 800e19e:	d102      	bne.n	800e1a6 <_lseek_r+0x1e>
 800e1a0:	682b      	ldr	r3, [r5, #0]
 800e1a2:	b103      	cbz	r3, 800e1a6 <_lseek_r+0x1e>
 800e1a4:	6023      	str	r3, [r4, #0]
 800e1a6:	bd38      	pop	{r3, r4, r5, pc}
 800e1a8:	20008420 	.word	0x20008420

0800e1ac <__swhatbuf_r>:
 800e1ac:	b570      	push	{r4, r5, r6, lr}
 800e1ae:	460e      	mov	r6, r1
 800e1b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1b4:	2900      	cmp	r1, #0
 800e1b6:	b096      	sub	sp, #88	; 0x58
 800e1b8:	4614      	mov	r4, r2
 800e1ba:	461d      	mov	r5, r3
 800e1bc:	da08      	bge.n	800e1d0 <__swhatbuf_r+0x24>
 800e1be:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	602a      	str	r2, [r5, #0]
 800e1c6:	061a      	lsls	r2, r3, #24
 800e1c8:	d410      	bmi.n	800e1ec <__swhatbuf_r+0x40>
 800e1ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e1ce:	e00e      	b.n	800e1ee <__swhatbuf_r+0x42>
 800e1d0:	466a      	mov	r2, sp
 800e1d2:	f000 f8b3 	bl	800e33c <_fstat_r>
 800e1d6:	2800      	cmp	r0, #0
 800e1d8:	dbf1      	blt.n	800e1be <__swhatbuf_r+0x12>
 800e1da:	9a01      	ldr	r2, [sp, #4]
 800e1dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e1e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e1e4:	425a      	negs	r2, r3
 800e1e6:	415a      	adcs	r2, r3
 800e1e8:	602a      	str	r2, [r5, #0]
 800e1ea:	e7ee      	b.n	800e1ca <__swhatbuf_r+0x1e>
 800e1ec:	2340      	movs	r3, #64	; 0x40
 800e1ee:	2000      	movs	r0, #0
 800e1f0:	6023      	str	r3, [r4, #0]
 800e1f2:	b016      	add	sp, #88	; 0x58
 800e1f4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e1f8 <__smakebuf_r>:
 800e1f8:	898b      	ldrh	r3, [r1, #12]
 800e1fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e1fc:	079d      	lsls	r5, r3, #30
 800e1fe:	4606      	mov	r6, r0
 800e200:	460c      	mov	r4, r1
 800e202:	d507      	bpl.n	800e214 <__smakebuf_r+0x1c>
 800e204:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e208:	6023      	str	r3, [r4, #0]
 800e20a:	6123      	str	r3, [r4, #16]
 800e20c:	2301      	movs	r3, #1
 800e20e:	6163      	str	r3, [r4, #20]
 800e210:	b002      	add	sp, #8
 800e212:	bd70      	pop	{r4, r5, r6, pc}
 800e214:	ab01      	add	r3, sp, #4
 800e216:	466a      	mov	r2, sp
 800e218:	f7ff ffc8 	bl	800e1ac <__swhatbuf_r>
 800e21c:	9900      	ldr	r1, [sp, #0]
 800e21e:	4605      	mov	r5, r0
 800e220:	4630      	mov	r0, r6
 800e222:	f7ff fa4f 	bl	800d6c4 <_malloc_r>
 800e226:	b948      	cbnz	r0, 800e23c <__smakebuf_r+0x44>
 800e228:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e22c:	059a      	lsls	r2, r3, #22
 800e22e:	d4ef      	bmi.n	800e210 <__smakebuf_r+0x18>
 800e230:	f023 0303 	bic.w	r3, r3, #3
 800e234:	f043 0302 	orr.w	r3, r3, #2
 800e238:	81a3      	strh	r3, [r4, #12]
 800e23a:	e7e3      	b.n	800e204 <__smakebuf_r+0xc>
 800e23c:	4b0d      	ldr	r3, [pc, #52]	; (800e274 <__smakebuf_r+0x7c>)
 800e23e:	62b3      	str	r3, [r6, #40]	; 0x28
 800e240:	89a3      	ldrh	r3, [r4, #12]
 800e242:	6020      	str	r0, [r4, #0]
 800e244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e248:	81a3      	strh	r3, [r4, #12]
 800e24a:	9b00      	ldr	r3, [sp, #0]
 800e24c:	6163      	str	r3, [r4, #20]
 800e24e:	9b01      	ldr	r3, [sp, #4]
 800e250:	6120      	str	r0, [r4, #16]
 800e252:	b15b      	cbz	r3, 800e26c <__smakebuf_r+0x74>
 800e254:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e258:	4630      	mov	r0, r6
 800e25a:	f000 f881 	bl	800e360 <_isatty_r>
 800e25e:	b128      	cbz	r0, 800e26c <__smakebuf_r+0x74>
 800e260:	89a3      	ldrh	r3, [r4, #12]
 800e262:	f023 0303 	bic.w	r3, r3, #3
 800e266:	f043 0301 	orr.w	r3, r3, #1
 800e26a:	81a3      	strh	r3, [r4, #12]
 800e26c:	89a0      	ldrh	r0, [r4, #12]
 800e26e:	4305      	orrs	r5, r0
 800e270:	81a5      	strh	r5, [r4, #12]
 800e272:	e7cd      	b.n	800e210 <__smakebuf_r+0x18>
 800e274:	0800d411 	.word	0x0800d411

0800e278 <__malloc_lock>:
 800e278:	4801      	ldr	r0, [pc, #4]	; (800e280 <__malloc_lock+0x8>)
 800e27a:	f7ff b9ad 	b.w	800d5d8 <__retarget_lock_acquire_recursive>
 800e27e:	bf00      	nop
 800e280:	20008424 	.word	0x20008424

0800e284 <__malloc_unlock>:
 800e284:	4801      	ldr	r0, [pc, #4]	; (800e28c <__malloc_unlock+0x8>)
 800e286:	f7ff b9a8 	b.w	800d5da <__retarget_lock_release_recursive>
 800e28a:	bf00      	nop
 800e28c:	20008424 	.word	0x20008424

0800e290 <_read_r>:
 800e290:	b538      	push	{r3, r4, r5, lr}
 800e292:	4d07      	ldr	r5, [pc, #28]	; (800e2b0 <_read_r+0x20>)
 800e294:	4604      	mov	r4, r0
 800e296:	4608      	mov	r0, r1
 800e298:	4611      	mov	r1, r2
 800e29a:	2200      	movs	r2, #0
 800e29c:	602a      	str	r2, [r5, #0]
 800e29e:	461a      	mov	r2, r3
 800e2a0:	f7f2 faae 	bl	8000800 <_read>
 800e2a4:	1c43      	adds	r3, r0, #1
 800e2a6:	d102      	bne.n	800e2ae <_read_r+0x1e>
 800e2a8:	682b      	ldr	r3, [r5, #0]
 800e2aa:	b103      	cbz	r3, 800e2ae <_read_r+0x1e>
 800e2ac:	6023      	str	r3, [r4, #0]
 800e2ae:	bd38      	pop	{r3, r4, r5, pc}
 800e2b0:	20008420 	.word	0x20008420

0800e2b4 <_raise_r>:
 800e2b4:	291f      	cmp	r1, #31
 800e2b6:	b538      	push	{r3, r4, r5, lr}
 800e2b8:	4604      	mov	r4, r0
 800e2ba:	460d      	mov	r5, r1
 800e2bc:	d904      	bls.n	800e2c8 <_raise_r+0x14>
 800e2be:	2316      	movs	r3, #22
 800e2c0:	6003      	str	r3, [r0, #0]
 800e2c2:	f04f 30ff 	mov.w	r0, #4294967295
 800e2c6:	bd38      	pop	{r3, r4, r5, pc}
 800e2c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e2ca:	b112      	cbz	r2, 800e2d2 <_raise_r+0x1e>
 800e2cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e2d0:	b94b      	cbnz	r3, 800e2e6 <_raise_r+0x32>
 800e2d2:	4620      	mov	r0, r4
 800e2d4:	f000 f830 	bl	800e338 <_getpid_r>
 800e2d8:	462a      	mov	r2, r5
 800e2da:	4601      	mov	r1, r0
 800e2dc:	4620      	mov	r0, r4
 800e2de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2e2:	f000 b817 	b.w	800e314 <_kill_r>
 800e2e6:	2b01      	cmp	r3, #1
 800e2e8:	d00a      	beq.n	800e300 <_raise_r+0x4c>
 800e2ea:	1c59      	adds	r1, r3, #1
 800e2ec:	d103      	bne.n	800e2f6 <_raise_r+0x42>
 800e2ee:	2316      	movs	r3, #22
 800e2f0:	6003      	str	r3, [r0, #0]
 800e2f2:	2001      	movs	r0, #1
 800e2f4:	e7e7      	b.n	800e2c6 <_raise_r+0x12>
 800e2f6:	2400      	movs	r4, #0
 800e2f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e2fc:	4628      	mov	r0, r5
 800e2fe:	4798      	blx	r3
 800e300:	2000      	movs	r0, #0
 800e302:	e7e0      	b.n	800e2c6 <_raise_r+0x12>

0800e304 <raise>:
 800e304:	4b02      	ldr	r3, [pc, #8]	; (800e310 <raise+0xc>)
 800e306:	4601      	mov	r1, r0
 800e308:	6818      	ldr	r0, [r3, #0]
 800e30a:	f7ff bfd3 	b.w	800e2b4 <_raise_r>
 800e30e:	bf00      	nop
 800e310:	2000002c 	.word	0x2000002c

0800e314 <_kill_r>:
 800e314:	b538      	push	{r3, r4, r5, lr}
 800e316:	4d07      	ldr	r5, [pc, #28]	; (800e334 <_kill_r+0x20>)
 800e318:	2300      	movs	r3, #0
 800e31a:	4604      	mov	r4, r0
 800e31c:	4608      	mov	r0, r1
 800e31e:	4611      	mov	r1, r2
 800e320:	602b      	str	r3, [r5, #0]
 800e322:	f7f2 fa51 	bl	80007c8 <_kill>
 800e326:	1c43      	adds	r3, r0, #1
 800e328:	d102      	bne.n	800e330 <_kill_r+0x1c>
 800e32a:	682b      	ldr	r3, [r5, #0]
 800e32c:	b103      	cbz	r3, 800e330 <_kill_r+0x1c>
 800e32e:	6023      	str	r3, [r4, #0]
 800e330:	bd38      	pop	{r3, r4, r5, pc}
 800e332:	bf00      	nop
 800e334:	20008420 	.word	0x20008420

0800e338 <_getpid_r>:
 800e338:	f7f2 ba3e 	b.w	80007b8 <_getpid>

0800e33c <_fstat_r>:
 800e33c:	b538      	push	{r3, r4, r5, lr}
 800e33e:	4d07      	ldr	r5, [pc, #28]	; (800e35c <_fstat_r+0x20>)
 800e340:	2300      	movs	r3, #0
 800e342:	4604      	mov	r4, r0
 800e344:	4608      	mov	r0, r1
 800e346:	4611      	mov	r1, r2
 800e348:	602b      	str	r3, [r5, #0]
 800e34a:	f7f2 fa9e 	bl	800088a <_fstat>
 800e34e:	1c43      	adds	r3, r0, #1
 800e350:	d102      	bne.n	800e358 <_fstat_r+0x1c>
 800e352:	682b      	ldr	r3, [r5, #0]
 800e354:	b103      	cbz	r3, 800e358 <_fstat_r+0x1c>
 800e356:	6023      	str	r3, [r4, #0]
 800e358:	bd38      	pop	{r3, r4, r5, pc}
 800e35a:	bf00      	nop
 800e35c:	20008420 	.word	0x20008420

0800e360 <_isatty_r>:
 800e360:	b538      	push	{r3, r4, r5, lr}
 800e362:	4d06      	ldr	r5, [pc, #24]	; (800e37c <_isatty_r+0x1c>)
 800e364:	2300      	movs	r3, #0
 800e366:	4604      	mov	r4, r0
 800e368:	4608      	mov	r0, r1
 800e36a:	602b      	str	r3, [r5, #0]
 800e36c:	f7f2 fa9d 	bl	80008aa <_isatty>
 800e370:	1c43      	adds	r3, r0, #1
 800e372:	d102      	bne.n	800e37a <_isatty_r+0x1a>
 800e374:	682b      	ldr	r3, [r5, #0]
 800e376:	b103      	cbz	r3, 800e37a <_isatty_r+0x1a>
 800e378:	6023      	str	r3, [r4, #0]
 800e37a:	bd38      	pop	{r3, r4, r5, pc}
 800e37c:	20008420 	.word	0x20008420

0800e380 <_init>:
 800e380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e382:	bf00      	nop
 800e384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e386:	bc08      	pop	{r3}
 800e388:	469e      	mov	lr, r3
 800e38a:	4770      	bx	lr

0800e38c <_fini>:
 800e38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e38e:	bf00      	nop
 800e390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e392:	bc08      	pop	{r3}
 800e394:	469e      	mov	lr, r3
 800e396:	4770      	bx	lr
