
ethernet3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e188  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c28  0800e318  0800e318  0001e318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010f40  08010f40  00030090  2**0
                  CONTENTS
  4 .ARM          00000008  08010f40  08010f40  00020f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010f48  08010f48  00030090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010f48  08010f48  00020f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010f4c  08010f4c  00020f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08010f50  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030090  2**0
                  CONTENTS
 10 .bss          00008324  20000090  20000090  00030090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200083b4  200083b4  00030090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000176c1  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004805  00000000  00000000  00047781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001158  00000000  00000000  0004bf88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010b8  00000000  00000000  0004d0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c125  00000000  00000000  0004e198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f088  00000000  00000000  0007a2bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8c96  00000000  00000000  00099345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00171fdb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004d58  00000000  00000000  0017202c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e300 	.word	0x0800e300

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0800e300 	.word	0x0800e300

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08a      	sub	sp, #40	; 0x28
 8000578:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
 8000588:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800058a:	2300      	movs	r3, #0
 800058c:	613b      	str	r3, [r7, #16]
 800058e:	4b2e      	ldr	r3, [pc, #184]	; (8000648 <MX_GPIO_Init+0xd4>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a2d      	ldr	r2, [pc, #180]	; (8000648 <MX_GPIO_Init+0xd4>)
 8000594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
 800059a:	4b2b      	ldr	r3, [pc, #172]	; (8000648 <MX_GPIO_Init+0xd4>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005a2:	613b      	str	r3, [r7, #16]
 80005a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	4b27      	ldr	r3, [pc, #156]	; (8000648 <MX_GPIO_Init+0xd4>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	4a26      	ldr	r2, [pc, #152]	; (8000648 <MX_GPIO_Init+0xd4>)
 80005b0:	f043 0304 	orr.w	r3, r3, #4
 80005b4:	6313      	str	r3, [r2, #48]	; 0x30
 80005b6:	4b24      	ldr	r3, [pc, #144]	; (8000648 <MX_GPIO_Init+0xd4>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	f003 0304 	and.w	r3, r3, #4
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	4b20      	ldr	r3, [pc, #128]	; (8000648 <MX_GPIO_Init+0xd4>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	4a1f      	ldr	r2, [pc, #124]	; (8000648 <MX_GPIO_Init+0xd4>)
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	6313      	str	r3, [r2, #48]	; 0x30
 80005d2:	4b1d      	ldr	r3, [pc, #116]	; (8000648 <MX_GPIO_Init+0xd4>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	60bb      	str	r3, [r7, #8]
 80005dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	4b19      	ldr	r3, [pc, #100]	; (8000648 <MX_GPIO_Init+0xd4>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a18      	ldr	r2, [pc, #96]	; (8000648 <MX_GPIO_Init+0xd4>)
 80005e8:	f043 0302 	orr.w	r3, r3, #2
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
 80005ee:	4b16      	ldr	r3, [pc, #88]	; (8000648 <MX_GPIO_Init+0xd4>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	f003 0302 	and.w	r3, r3, #2
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	603b      	str	r3, [r7, #0]
 80005fe:	4b12      	ldr	r3, [pc, #72]	; (8000648 <MX_GPIO_Init+0xd4>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a11      	ldr	r2, [pc, #68]	; (8000648 <MX_GPIO_Init+0xd4>)
 8000604:	f043 0308 	orr.w	r3, r3, #8
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <MX_GPIO_Init+0xd4>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0308 	and.w	r3, r3, #8
 8000612:	603b      	str	r3, [r7, #0]
 8000614:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800061c:	480b      	ldr	r0, [pc, #44]	; (800064c <MX_GPIO_Init+0xd8>)
 800061e:	f001 ff67 	bl	80024f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000622:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000628:	2301      	movs	r3, #1
 800062a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062c:	2300      	movs	r3, #0
 800062e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000630:	2300      	movs	r3, #0
 8000632:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	4619      	mov	r1, r3
 800063a:	4804      	ldr	r0, [pc, #16]	; (800064c <MX_GPIO_Init+0xd8>)
 800063c:	f001 fdbc 	bl	80021b8 <HAL_GPIO_Init>

}
 8000640:	bf00      	nop
 8000642:	3728      	adds	r7, #40	; 0x28
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40023800 	.word	0x40023800
 800064c:	40020c00 	.word	0x40020c00

08000650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000654:	f000 fb3e 	bl	8000cd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000658:	f000 f814 	bl	8000684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065c:	f7ff ff8a 	bl	8000574 <MX_GPIO_Init>
  MX_LWIP_Init();
 8000660:	f002 fbaa 	bl	8002db8 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000664:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000668:	4805      	ldr	r0, [pc, #20]	; (8000680 <main+0x30>)
 800066a:	f001 ff5a 	bl	8002522 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800066e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000672:	4803      	ldr	r0, [pc, #12]	; (8000680 <main+0x30>)
 8000674:	f001 ff55 	bl	8002522 <HAL_GPIO_TogglePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  MX_LWIP_Process();
 8000678:	f002 fcea 	bl	8003050 <MX_LWIP_Process>
 800067c:	e7fc      	b.n	8000678 <main+0x28>
 800067e:	bf00      	nop
 8000680:	40020c00 	.word	0x40020c00

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b094      	sub	sp, #80	; 0x50
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	f107 0320 	add.w	r3, r7, #32
 800068e:	2230      	movs	r2, #48	; 0x30
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f00c fddc 	bl	800d250 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a8:	2300      	movs	r3, #0
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	4b28      	ldr	r3, [pc, #160]	; (8000750 <SystemClock_Config+0xcc>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b0:	4a27      	ldr	r2, [pc, #156]	; (8000750 <SystemClock_Config+0xcc>)
 80006b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b6:	6413      	str	r3, [r2, #64]	; 0x40
 80006b8:	4b25      	ldr	r3, [pc, #148]	; (8000750 <SystemClock_Config+0xcc>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c4:	2300      	movs	r3, #0
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	4b22      	ldr	r3, [pc, #136]	; (8000754 <SystemClock_Config+0xd0>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a21      	ldr	r2, [pc, #132]	; (8000754 <SystemClock_Config+0xd0>)
 80006ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d2:	6013      	str	r3, [r2, #0]
 80006d4:	4b1f      	ldr	r3, [pc, #124]	; (8000754 <SystemClock_Config+0xd0>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e0:	2301      	movs	r3, #1
 80006e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ea:	2302      	movs	r3, #2
 80006ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006f4:	2319      	movs	r3, #25
 80006f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006f8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006fe:	2302      	movs	r3, #2
 8000700:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000702:	2307      	movs	r3, #7
 8000704:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000706:	f107 0320 	add.w	r3, r7, #32
 800070a:	4618      	mov	r0, r3
 800070c:	f001 ff24 	bl	8002558 <HAL_RCC_OscConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000716:	f000 f81f 	bl	8000758 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071a:	230f      	movs	r3, #15
 800071c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071e:	2302      	movs	r3, #2
 8000720:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000726:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800072a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800072c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000730:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000732:	f107 030c 	add.w	r3, r7, #12
 8000736:	2105      	movs	r1, #5
 8000738:	4618      	mov	r0, r3
 800073a:	f002 f985 	bl	8002a48 <HAL_RCC_ClockConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000744:	f000 f808 	bl	8000758 <Error_Handler>
  }
}
 8000748:	bf00      	nop
 800074a:	3750      	adds	r7, #80	; 0x50
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40023800 	.word	0x40023800
 8000754:	40007000 	.word	0x40007000

08000758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800075c:	b672      	cpsid	i
}
 800075e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000760:	e7fe      	b.n	8000760 <Error_Handler+0x8>
	...

08000764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <HAL_MspInit+0x4c>)
 8000770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000772:	4a0f      	ldr	r2, [pc, #60]	; (80007b0 <HAL_MspInit+0x4c>)
 8000774:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000778:	6453      	str	r3, [r2, #68]	; 0x44
 800077a:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <HAL_MspInit+0x4c>)
 800077c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	603b      	str	r3, [r7, #0]
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <HAL_MspInit+0x4c>)
 800078c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078e:	4a08      	ldr	r2, [pc, #32]	; (80007b0 <HAL_MspInit+0x4c>)
 8000790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000794:	6413      	str	r3, [r2, #64]	; 0x40
 8000796:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <HAL_MspInit+0x4c>)
 8000798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007a2:	2007      	movs	r0, #7
 80007a4:	f000 fbde 	bl	8000f64 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40023800 	.word	0x40023800

080007b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <NMI_Handler+0x4>

080007ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007be:	e7fe      	b.n	80007be <HardFault_Handler+0x4>

080007c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <MemManage_Handler+0x4>

080007c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ca:	e7fe      	b.n	80007ca <BusFault_Handler+0x4>

080007cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <UsageFault_Handler+0x4>

080007d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr

080007ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007f2:	bf00      	nop
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000800:	f000 faba 	bl	8000d78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}

08000808 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
	return 1;
 800080c:	2301      	movs	r3, #1
}
 800080e:	4618      	mov	r0, r3
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <_kill>:

int _kill(int pid, int sig)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000822:	4b05      	ldr	r3, [pc, #20]	; (8000838 <_kill+0x20>)
 8000824:	2216      	movs	r2, #22
 8000826:	601a      	str	r2, [r3, #0]
	return -1;
 8000828:	f04f 33ff 	mov.w	r3, #4294967295
}
 800082c:	4618      	mov	r0, r3
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr
 8000838:	200083a4 	.word	0x200083a4

0800083c <_exit>:

void _exit (int status)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000844:	f04f 31ff 	mov.w	r1, #4294967295
 8000848:	6878      	ldr	r0, [r7, #4]
 800084a:	f7ff ffe5 	bl	8000818 <_kill>
	while (1) {}		/* Make sure we hang here */
 800084e:	e7fe      	b.n	800084e <_exit+0x12>

08000850 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
 8000860:	e00a      	b.n	8000878 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000862:	f3af 8000 	nop.w
 8000866:	4601      	mov	r1, r0
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	1c5a      	adds	r2, r3, #1
 800086c:	60ba      	str	r2, [r7, #8]
 800086e:	b2ca      	uxtb	r2, r1
 8000870:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	3301      	adds	r3, #1
 8000876:	617b      	str	r3, [r7, #20]
 8000878:	697a      	ldr	r2, [r7, #20]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	429a      	cmp	r2, r3
 800087e:	dbf0      	blt.n	8000862 <_read+0x12>
	}

return len;
 8000880:	687b      	ldr	r3, [r7, #4]
}
 8000882:	4618      	mov	r0, r3
 8000884:	3718      	adds	r7, #24
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	b086      	sub	sp, #24
 800088e:	af00      	add	r7, sp, #0
 8000890:	60f8      	str	r0, [r7, #12]
 8000892:	60b9      	str	r1, [r7, #8]
 8000894:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000896:	2300      	movs	r3, #0
 8000898:	617b      	str	r3, [r7, #20]
 800089a:	e009      	b.n	80008b0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	1c5a      	adds	r2, r3, #1
 80008a0:	60ba      	str	r2, [r7, #8]
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	3301      	adds	r3, #1
 80008ae:	617b      	str	r3, [r7, #20]
 80008b0:	697a      	ldr	r2, [r7, #20]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	dbf1      	blt.n	800089c <_write+0x12>
	}
	return len;
 80008b8:	687b      	ldr	r3, [r7, #4]
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3718      	adds	r7, #24
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <_close>:

int _close(int file)
{
 80008c2:	b480      	push	{r7}
 80008c4:	b083      	sub	sp, #12
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
	return -1;
 80008ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr

080008da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008da:	b480      	push	{r7}
 80008dc:	b083      	sub	sp, #12
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
 80008e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008ea:	605a      	str	r2, [r3, #4]
	return 0;
 80008ec:	2300      	movs	r3, #0
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr

080008fa <_isatty>:

int _isatty(int file)
{
 80008fa:	b480      	push	{r7}
 80008fc:	b083      	sub	sp, #12
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]
	return 1;
 8000902:	2301      	movs	r3, #1
}
 8000904:	4618      	mov	r0, r3
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]
 800091a:	607a      	str	r2, [r7, #4]
	return 0;
 800091c:	2300      	movs	r3, #0
}
 800091e:	4618      	mov	r0, r3
 8000920:	3714      	adds	r7, #20
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
	...

0800092c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800092c:	b480      	push	{r7}
 800092e:	b087      	sub	sp, #28
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000934:	4a14      	ldr	r2, [pc, #80]	; (8000988 <_sbrk+0x5c>)
 8000936:	4b15      	ldr	r3, [pc, #84]	; (800098c <_sbrk+0x60>)
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000940:	4b13      	ldr	r3, [pc, #76]	; (8000990 <_sbrk+0x64>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d102      	bne.n	800094e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <_sbrk+0x64>)
 800094a:	4a12      	ldr	r2, [pc, #72]	; (8000994 <_sbrk+0x68>)
 800094c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <_sbrk+0x64>)
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4413      	add	r3, r2
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	429a      	cmp	r2, r3
 800095a:	d205      	bcs.n	8000968 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800095c:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <_sbrk+0x6c>)
 800095e:	220c      	movs	r2, #12
 8000960:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000962:	f04f 33ff 	mov.w	r3, #4294967295
 8000966:	e009      	b.n	800097c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000968:	4b09      	ldr	r3, [pc, #36]	; (8000990 <_sbrk+0x64>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <_sbrk+0x64>)
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4413      	add	r3, r2
 8000976:	4a06      	ldr	r2, [pc, #24]	; (8000990 <_sbrk+0x64>)
 8000978:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800097a:	68fb      	ldr	r3, [r7, #12]
}
 800097c:	4618      	mov	r0, r3
 800097e:	371c      	adds	r7, #28
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	20020000 	.word	0x20020000
 800098c:	00000400 	.word	0x00000400
 8000990:	200000ac 	.word	0x200000ac
 8000994:	200083b8 	.word	0x200083b8
 8000998:	200083a4 	.word	0x200083a4

0800099c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <SystemInit+0x20>)
 80009a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009a6:	4a05      	ldr	r2, [pc, #20]	; (80009bc <SystemInit+0x20>)
 80009a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009c4:	480d      	ldr	r0, [pc, #52]	; (80009fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009c6:	490e      	ldr	r1, [pc, #56]	; (8000a00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009c8:	4a0e      	ldr	r2, [pc, #56]	; (8000a04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009cc:	e002      	b.n	80009d4 <LoopCopyDataInit>

080009ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009d2:	3304      	adds	r3, #4

080009d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d8:	d3f9      	bcc.n	80009ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009da:	4a0b      	ldr	r2, [pc, #44]	; (8000a08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009dc:	4c0b      	ldr	r4, [pc, #44]	; (8000a0c <LoopFillZerobss+0x26>)
  movs r3, #0
 80009de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e0:	e001      	b.n	80009e6 <LoopFillZerobss>

080009e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e4:	3204      	adds	r2, #4

080009e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e8:	d3fb      	bcc.n	80009e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009ea:	f7ff ffd7 	bl	800099c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ee:	f00c fbed 	bl	800d1cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009f2:	f7ff fe2d 	bl	8000650 <main>
  bx  lr    
 80009f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a00:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000a04:	08010f50 	.word	0x08010f50
  ldr r2, =_sbss
 8000a08:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000a0c:	200083b4 	.word	0x200083b4

08000a10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a10:	e7fe      	b.n	8000a10 <ADC_IRQHandler>

08000a12 <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 8000a12:	b480      	push	{r7}
 8000a14:	b083      	sub	sp, #12
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
 8000a1a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d00b      	beq.n	8000a3a <DP83848_RegisterBusIO+0x28>
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	68db      	ldr	r3, [r3, #12]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d007      	beq.n	8000a3a <DP83848_RegisterBusIO+0x28>
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	689b      	ldr	r3, [r3, #8]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d003      	beq.n	8000a3a <DP83848_RegisterBusIO+0x28>
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	691b      	ldr	r3, [r3, #16]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d102      	bne.n	8000a40 <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 8000a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3e:	e014      	b.n	8000a6a <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685a      	ldr	r2, [r3, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	68da      	ldr	r2, [r3, #12]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	689a      	ldr	r2, [r3, #8]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	691a      	ldr	r2, [r3, #16]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 8000a68:	2300      	movs	r3, #0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <DP83848_Init>:
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  *         DP83848_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b086      	sub	sp, #24
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	2300      	movs	r3, #0
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	2300      	movs	r3, #0
 8000a88:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d17c      	bne.n	8000b90 <DP83848_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	689b      	ldr	r3, [r3, #8]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d002      	beq.n	8000aa4 <DP83848_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2220      	movs	r2, #32
 8000aa8:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8000aaa:	2300      	movs	r3, #0
 8000aac:	617b      	str	r3, [r7, #20]
 8000aae:	e01c      	b.n	8000aea <DP83848_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	695b      	ldr	r3, [r3, #20]
 8000ab4:	f107 0208 	add.w	r2, r7, #8
 8000ab8:	2119      	movs	r1, #25
 8000aba:	6978      	ldr	r0, [r7, #20]
 8000abc:	4798      	blx	r3
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	da03      	bge.n	8000acc <DP83848_Init+0x56>
       {
         status = DP83848_STATUS_READ_ERROR;
 8000ac4:	f06f 0304 	mvn.w	r3, #4
 8000ac8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000aca:	e00b      	b.n	8000ae4 <DP83848_Init+0x6e>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	f003 031f 	and.w	r3, r3, #31
 8000ad2:	697a      	ldr	r2, [r7, #20]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d105      	bne.n	8000ae4 <DP83848_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	697a      	ldr	r2, [r7, #20]
 8000adc:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
         break;
 8000ae2:	e005      	b.n	8000af0 <DP83848_Init+0x7a>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	617b      	str	r3, [r7, #20]
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	2b1f      	cmp	r3, #31
 8000aee:	d9df      	bls.n	8000ab0 <DP83848_Init+0x3a>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b1f      	cmp	r3, #31
 8000af6:	d902      	bls.n	8000afe <DP83848_Init+0x88>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 8000af8:	f06f 0302 	mvn.w	r3, #2
 8000afc:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d145      	bne.n	8000b90 <DP83848_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, DP83848_BCR, DP83848_BCR_SOFT_RESET) >= 0)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	691b      	ldr	r3, [r3, #16]
 8000b08:	687a      	ldr	r2, [r7, #4]
 8000b0a:	6810      	ldr	r0, [r2, #0]
 8000b0c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b10:	2100      	movs	r1, #0
 8000b12:	4798      	blx	r3
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	db37      	blt.n	8000b8a <DP83848_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) >= 0)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	695b      	ldr	r3, [r3, #20]
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	6810      	ldr	r0, [r2, #0]
 8000b22:	f107 0208 	add.w	r2, r7, #8
 8000b26:	2100      	movs	r1, #0
 8000b28:	4798      	blx	r3
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	db28      	blt.n	8000b82 <DP83848_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	4798      	blx	r3
 8000b36:	4603      	mov	r3, r0
 8000b38:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occured  */
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8000b3a:	e01c      	b.n	8000b76 <DP83848_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= DP83848_SW_RESET_TO)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	4798      	blx	r3
 8000b42:	4603      	mov	r3, r0
 8000b44:	461a      	mov	r2, r3
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000b4e:	d80e      	bhi.n	8000b6e <DP83848_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) < 0)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	695b      	ldr	r3, [r3, #20]
 8000b54:	687a      	ldr	r2, [r7, #4]
 8000b56:	6810      	ldr	r0, [r2, #0]
 8000b58:	f107 0208 	add.w	r2, r7, #8
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4798      	blx	r3
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	da07      	bge.n	8000b76 <DP83848_Init+0x100>
               {
                 status = DP83848_STATUS_READ_ERROR;
 8000b66:	f06f 0304 	mvn.w	r3, #4
 8000b6a:	613b      	str	r3, [r7, #16]
                 break;
 8000b6c:	e010      	b.n	8000b90 <DP83848_Init+0x11a>
               }
             }
             else
             {
               status = DP83848_STATUS_RESET_TIMEOUT;
 8000b6e:	f06f 0301 	mvn.w	r3, #1
 8000b72:	613b      	str	r3, [r7, #16]
               break;
 8000b74:	e00c      	b.n	8000b90 <DP83848_Init+0x11a>
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d1dd      	bne.n	8000b3c <DP83848_Init+0xc6>
 8000b80:	e006      	b.n	8000b90 <DP83848_Init+0x11a>
             }
           }
         }
         else
         {
           status = DP83848_STATUS_READ_ERROR;
 8000b82:	f06f 0304 	mvn.w	r3, #4
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	e002      	b.n	8000b90 <DP83848_Init+0x11a>
         }
       }
       else
       {
         status = DP83848_STATUS_WRITE_ERROR;
 8000b8a:	f06f 0303 	mvn.w	r3, #3
 8000b8e:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == DP83848_STATUS_OK)
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d112      	bne.n	8000bbc <DP83848_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	699b      	ldr	r3, [r3, #24]
 8000b9a:	4798      	blx	r3
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= DP83848_INIT_TO)
 8000ba0:	bf00      	nop
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	699b      	ldr	r3, [r3, #24]
 8000ba6:	4798      	blx	r3
 8000ba8:	4603      	mov	r3, r0
 8000baa:	461a      	mov	r2, r3
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	1ad3      	subs	r3, r2, r3
 8000bb0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000bb4:	d9f5      	bls.n	8000ba2 <DP83848_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2201      	movs	r2, #1
 8000bba:	605a      	str	r2, [r3, #4]
   }

   return status;
 8000bbc:	693b      	ldr	r3, [r7, #16]
 }
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3718      	adds	r7, #24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b084      	sub	sp, #16
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	695b      	ldr	r3, [r3, #20]
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	6810      	ldr	r0, [r2, #0]
 8000bda:	f107 020c 	add.w	r2, r7, #12
 8000bde:	2101      	movs	r1, #1
 8000be0:	4798      	blx	r3
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	da02      	bge.n	8000bee <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 8000be8:	f06f 0304 	mvn.w	r3, #4
 8000bec:	e06e      	b.n	8000ccc <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	695b      	ldr	r3, [r3, #20]
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	6810      	ldr	r0, [r2, #0]
 8000bf6:	f107 020c 	add.w	r2, r7, #12
 8000bfa:	2101      	movs	r1, #1
 8000bfc:	4798      	blx	r3
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	da02      	bge.n	8000c0a <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 8000c04:	f06f 0304 	mvn.w	r3, #4
 8000c08:	e060      	b.n	8000ccc <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	f003 0304 	and.w	r3, r3, #4
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d101      	bne.n	8000c18 <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 8000c14:	2301      	movs	r3, #1
 8000c16:	e059      	b.n	8000ccc <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	695b      	ldr	r3, [r3, #20]
 8000c1c:	687a      	ldr	r2, [r7, #4]
 8000c1e:	6810      	ldr	r0, [r2, #0]
 8000c20:	f107 020c 	add.w	r2, r7, #12
 8000c24:	2100      	movs	r1, #0
 8000c26:	4798      	blx	r3
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	da02      	bge.n	8000c34 <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 8000c2e:	f06f 0304 	mvn.w	r3, #4
 8000c32:	e04b      	b.n	8000ccc <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d11b      	bne.n	8000c76 <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d006      	beq.n	8000c56 <DP83848_GetLinkState+0x90>
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8000c52:	2302      	movs	r3, #2
 8000c54:	e03a      	b.n	8000ccc <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8000c60:	2303      	movs	r3, #3
 8000c62:	e033      	b.n	8000ccc <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8000c6e:	2304      	movs	r3, #4
 8000c70:	e02c      	b.n	8000ccc <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8000c72:	2305      	movs	r3, #5
 8000c74:	e02a      	b.n	8000ccc <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	695b      	ldr	r3, [r3, #20]
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	6810      	ldr	r0, [r2, #0]
 8000c7e:	f107 020c 	add.w	r2, r7, #12
 8000c82:	2110      	movs	r1, #16
 8000c84:	4798      	blx	r3
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	da02      	bge.n	8000c92 <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 8000c8c:	f06f 0304 	mvn.w	r3, #4
 8000c90:	e01c      	b.n	8000ccc <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d101      	bne.n	8000ca0 <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 8000c9c:	2306      	movs	r3, #6
 8000c9e:	e015      	b.n	8000ccc <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f003 0306 	and.w	r3, r3, #6
 8000ca6:	2b04      	cmp	r3, #4
 8000ca8:	d101      	bne.n	8000cae <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8000caa:	2302      	movs	r3, #2
 8000cac:	e00e      	b.n	8000ccc <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	f003 0306 	and.w	r3, r3, #6
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d101      	bne.n	8000cbc <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	e007      	b.n	8000ccc <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	f003 0306 	and.w	r3, r3, #6
 8000cc2:	2b06      	cmp	r3, #6
 8000cc4:	d101      	bne.n	8000cca <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8000cc6:	2304      	movs	r3, #4
 8000cc8:	e000      	b.n	8000ccc <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8000cca:	2305      	movs	r3, #5
    }
  }
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3710      	adds	r7, #16
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <HAL_Init+0x40>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	; (8000d14 <HAL_Init+0x40>)
 8000cde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ce4:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <HAL_Init+0x40>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <HAL_Init+0x40>)
 8000cea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf0:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <HAL_Init+0x40>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a07      	ldr	r2, [pc, #28]	; (8000d14 <HAL_Init+0x40>)
 8000cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cfc:	2003      	movs	r0, #3
 8000cfe:	f000 f931 	bl	8000f64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d02:	2000      	movs	r0, #0
 8000d04:	f000 f808 	bl	8000d18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d08:	f7ff fd2c 	bl	8000764 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40023c00 	.word	0x40023c00

08000d18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <HAL_InitTick+0x54>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <HAL_InitTick+0x58>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 f93b 	bl	8000fb2 <HAL_SYSTICK_Config>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e00e      	b.n	8000d64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2b0f      	cmp	r3, #15
 8000d4a:	d80a      	bhi.n	8000d62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	f04f 30ff 	mov.w	r0, #4294967295
 8000d54:	f000 f911 	bl	8000f7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d58:	4a06      	ldr	r2, [pc, #24]	; (8000d74 <HAL_InitTick+0x5c>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	e000      	b.n	8000d64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000000 	.word	0x20000000
 8000d70:	20000008 	.word	0x20000008
 8000d74:	20000004 	.word	0x20000004

08000d78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_IncTick+0x20>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	461a      	mov	r2, r3
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_IncTick+0x24>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4413      	add	r3, r2
 8000d88:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <HAL_IncTick+0x24>)
 8000d8a:	6013      	str	r3, [r2, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	20000008 	.word	0x20000008
 8000d9c:	200000b0 	.word	0x200000b0

08000da0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return uwTick;
 8000da4:	4b03      	ldr	r3, [pc, #12]	; (8000db4 <HAL_GetTick+0x14>)
 8000da6:	681b      	ldr	r3, [r3, #0]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	200000b0 	.word	0x200000b0

08000db8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc0:	f7ff ffee 	bl	8000da0 <HAL_GetTick>
 8000dc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd0:	d005      	beq.n	8000dde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <HAL_Delay+0x44>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	4413      	add	r3, r2
 8000ddc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dde:	bf00      	nop
 8000de0:	f7ff ffde 	bl	8000da0 <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d8f7      	bhi.n	8000de0 <HAL_Delay+0x28>
  {
  }
}
 8000df0:	bf00      	nop
 8000df2:	bf00      	nop
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000008 	.word	0x20000008

08000e00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <__NVIC_SetPriorityGrouping+0x44>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e16:	68ba      	ldr	r2, [r7, #8]
 8000e18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e32:	4a04      	ldr	r2, [pc, #16]	; (8000e44 <__NVIC_SetPriorityGrouping+0x44>)
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	60d3      	str	r3, [r2, #12]
}
 8000e38:	bf00      	nop
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e4c:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <__NVIC_GetPriorityGrouping+0x18>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	0a1b      	lsrs	r3, r3, #8
 8000e52:	f003 0307 	and.w	r3, r3, #7
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	6039      	str	r1, [r7, #0]
 8000e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	db0a      	blt.n	8000e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	490c      	ldr	r1, [pc, #48]	; (8000eb0 <__NVIC_SetPriority+0x4c>)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	0112      	lsls	r2, r2, #4
 8000e84:	b2d2      	uxtb	r2, r2
 8000e86:	440b      	add	r3, r1
 8000e88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e8c:	e00a      	b.n	8000ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	4908      	ldr	r1, [pc, #32]	; (8000eb4 <__NVIC_SetPriority+0x50>)
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	f003 030f 	and.w	r3, r3, #15
 8000e9a:	3b04      	subs	r3, #4
 8000e9c:	0112      	lsls	r2, r2, #4
 8000e9e:	b2d2      	uxtb	r2, r2
 8000ea0:	440b      	add	r3, r1
 8000ea2:	761a      	strb	r2, [r3, #24]
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000e100 	.word	0xe000e100
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b089      	sub	sp, #36	; 0x24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f1c3 0307 	rsb	r3, r3, #7
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	bf28      	it	cs
 8000ed6:	2304      	movcs	r3, #4
 8000ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3304      	adds	r3, #4
 8000ede:	2b06      	cmp	r3, #6
 8000ee0:	d902      	bls.n	8000ee8 <NVIC_EncodePriority+0x30>
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3b03      	subs	r3, #3
 8000ee6:	e000      	b.n	8000eea <NVIC_EncodePriority+0x32>
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43da      	mvns	r2, r3
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	401a      	ands	r2, r3
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f00:	f04f 31ff 	mov.w	r1, #4294967295
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0a:	43d9      	mvns	r1, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f10:	4313      	orrs	r3, r2
         );
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3724      	adds	r7, #36	; 0x24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
	...

08000f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f30:	d301      	bcc.n	8000f36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f32:	2301      	movs	r3, #1
 8000f34:	e00f      	b.n	8000f56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f36:	4a0a      	ldr	r2, [pc, #40]	; (8000f60 <SysTick_Config+0x40>)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f3e:	210f      	movs	r1, #15
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295
 8000f44:	f7ff ff8e 	bl	8000e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f48:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <SysTick_Config+0x40>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f4e:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <SysTick_Config+0x40>)
 8000f50:	2207      	movs	r2, #7
 8000f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	e000e010 	.word	0xe000e010

08000f64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f7ff ff47 	bl	8000e00 <__NVIC_SetPriorityGrouping>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b086      	sub	sp, #24
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	4603      	mov	r3, r0
 8000f82:	60b9      	str	r1, [r7, #8]
 8000f84:	607a      	str	r2, [r7, #4]
 8000f86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f8c:	f7ff ff5c 	bl	8000e48 <__NVIC_GetPriorityGrouping>
 8000f90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	68b9      	ldr	r1, [r7, #8]
 8000f96:	6978      	ldr	r0, [r7, #20]
 8000f98:	f7ff ff8e 	bl	8000eb8 <NVIC_EncodePriority>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff ff5d 	bl	8000e64 <__NVIC_SetPriority>
}
 8000faa:	bf00      	nop
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff ffb0 	bl	8000f20 <SysTick_Config>
 8000fc0:	4603      	mov	r3, r0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d101      	bne.n	8000fde <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e06c      	b.n	80010b8 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d106      	bne.n	8000ff6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2223      	movs	r2, #35	; 0x23
 8000fec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f002 f9e9 	bl	80033c8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	4b31      	ldr	r3, [pc, #196]	; (80010c0 <HAL_ETH_Init+0xf4>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffe:	4a30      	ldr	r2, [pc, #192]	; (80010c0 <HAL_ETH_Init+0xf4>)
 8001000:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001004:	6453      	str	r3, [r2, #68]	; 0x44
 8001006:	4b2e      	ldr	r3, [pc, #184]	; (80010c0 <HAL_ETH_Init+0xf4>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001012:	4b2c      	ldr	r3, [pc, #176]	; (80010c4 <HAL_ETH_Init+0xf8>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	4a2b      	ldr	r2, [pc, #172]	; (80010c4 <HAL_ETH_Init+0xf8>)
 8001018:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800101c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800101e:	4b29      	ldr	r3, [pc, #164]	; (80010c4 <HAL_ETH_Init+0xf8>)
 8001020:	685a      	ldr	r2, [r3, #4]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	4927      	ldr	r1, [pc, #156]	; (80010c4 <HAL_ETH_Init+0xf8>)
 8001028:	4313      	orrs	r3, r2
 800102a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800102c:	4b25      	ldr	r3, [pc, #148]	; (80010c4 <HAL_ETH_Init+0xf8>)
 800102e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	6812      	ldr	r2, [r2, #0]
 800103e:	f043 0301 	orr.w	r3, r3, #1
 8001042:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001046:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001048:	f7ff feaa 	bl	8000da0 <HAL_GetTick>
 800104c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800104e:	e011      	b.n	8001074 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001050:	f7ff fea6 	bl	8000da0 <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800105e:	d909      	bls.n	8001074 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2204      	movs	r2, #4
 8001064:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	22e0      	movs	r2, #224	; 0xe0
 800106c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e021      	b.n	80010b8 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	2b00      	cmp	r3, #0
 8001084:	d1e4      	bne.n	8001050 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f000 fdf0 	bl	8001c6c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f000 fe97 	bl	8001dc0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f000 feed 	bl	8001e72 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	461a      	mov	r2, r3
 800109e:	2100      	movs	r1, #0
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f000 fe55 	bl	8001d50 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2210      	movs	r2, #16
 80010b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80010b6:	2300      	movs	r3, #0
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40013800 	.word	0x40013800

080010c8 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80010d6:	2b10      	cmp	r3, #16
 80010d8:	d150      	bne.n	800117c <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2223      	movs	r2, #35	; 0x23
 80010de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2204      	movs	r2, #4
 80010e6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f000 f9fd 	bl	80014e8 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f042 0208 	orr.w	r2, r2, #8
 80010fc:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001106:	2001      	movs	r0, #1
 8001108:	f7ff fe56 	bl	8000db8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	68fa      	ldr	r2, [r7, #12]
 8001112:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f042 0204 	orr.w	r2, r2, #4
 8001122:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800112c:	2001      	movs	r0, #1
 800112e:	f7ff fe43 	bl	8000db8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f000 fc36 	bl	80019ac <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001148:	699b      	ldr	r3, [r3, #24]
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	6812      	ldr	r2, [r2, #0]
 800114e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001152:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001156:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001160:	699b      	ldr	r3, [r3, #24]
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	6812      	ldr	r2, [r2, #0]
 8001166:	f043 0302 	orr.w	r3, r3, #2
 800116a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800116e:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2223      	movs	r2, #35	; 0x23
 8001174:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001178:	2300      	movs	r3, #0
 800117a:	e000      	b.n	800117e <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
  }
}
 800117e:	4618      	mov	r0, r3
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b084      	sub	sp, #16
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001194:	2b23      	cmp	r3, #35	; 0x23
 8001196:	d14a      	bne.n	800122e <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2223      	movs	r2, #35	; 0x23
 800119c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	6812      	ldr	r2, [r2, #0]
 80011ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80011b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80011b6:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011c0:	699b      	ldr	r3, [r3, #24]
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	6812      	ldr	r2, [r2, #0]
 80011c6:	f023 0302 	bic.w	r3, r3, #2
 80011ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80011ce:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f022 0204 	bic.w	r2, r2, #4
 80011de:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80011e8:	2001      	movs	r0, #1
 80011ea:	f7ff fde5 	bl	8000db8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	68fa      	ldr	r2, [r7, #12]
 80011f4:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f000 fbd8 	bl	80019ac <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f022 0208 	bic.w	r2, r2, #8
 800120a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001214:	2001      	movs	r0, #1
 8001216:	f7ff fdcf 	bl	8000db8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	68fa      	ldr	r2, [r7, #12]
 8001220:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2210      	movs	r2, #16
 8001226:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800122a:	2300      	movs	r3, #0
 800122c:	e000      	b.n	8001230 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
  }
}
 8001230:	4618      	mov	r0, r3
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d109      	bne.n	800125e <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001250:	f043 0201 	orr.w	r2, r3, #1
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e07c      	b.n	8001358 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001264:	2b23      	cmp	r3, #35	; 0x23
 8001266:	d176      	bne.n	8001356 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001268:	2200      	movs	r2, #0
 800126a:	68b9      	ldr	r1, [r7, #8]
 800126c:	68f8      	ldr	r0, [r7, #12]
 800126e:	f000 fe6d 	bl	8001f4c <ETH_Prepare_Tx_Descriptors>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d009      	beq.n	800128c <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800127e:	f043 0202 	orr.w	r2, r3, #2
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e065      	b.n	8001358 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800128c:	f3bf 8f4f 	dsb	sy
}
 8001290:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	3206      	adds	r2, #6
 800129a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800129e:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a4:	1c5a      	adds	r2, r3, #1
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	629a      	str	r2, [r3, #40]	; 0x28
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ae:	2b03      	cmp	r3, #3
 80012b0:	d904      	bls.n	80012bc <HAL_ETH_Transmit+0x84>
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b6:	1f1a      	subs	r2, r3, #4
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	3106      	adds	r1, #6
 80012c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80012cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80012d0:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 80012d2:	f7ff fd65 	bl	8000da0 <HAL_GetTick>
 80012d6:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80012d8:	e037      	b.n	800134a <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d011      	beq.n	8001310 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012f2:	f043 0208 	orr.w	r2, r3, #8
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001304:	695a      	ldr	r2, [r3, #20]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e023      	b.n	8001358 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001316:	d018      	beq.n	800134a <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001318:	f7ff fd42 	bl	8000da0 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	429a      	cmp	r2, r3
 8001326:	d302      	bcc.n	800132e <HAL_ETH_Transmit+0xf6>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d10d      	bne.n	800134a <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001334:	f043 0204 	orr.w	r2, r3, #4
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001344:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e006      	b.n	8001358 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	dbc3      	blt.n	80012da <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001352:	2300      	movs	r3, #0
 8001354:	e000      	b.n	8001358 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
  }
}
 8001358:	4618      	mov	r0, r3
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800136e:	2300      	movs	r3, #0
 8001370:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d109      	bne.n	800138c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800137e:	f043 0201 	orr.w	r2, r3, #1
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e0a8      	b.n	80014de <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001392:	2b23      	cmp	r3, #35	; 0x23
 8001394:	d001      	beq.n	800139a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e0a1      	b.n	80014de <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800139e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	69fa      	ldr	r2, [r7, #28]
 80013a4:	3212      	adds	r2, #18
 80013a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013aa:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80013b0:	f1c3 0304 	rsb	r3, r3, #4
 80013b4:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80013b6:	e06a      	b.n	800148e <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d007      	beq.n	80013d4 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	699a      	ldr	r2, [r3, #24]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	69da      	ldr	r2, [r3, #28]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d103      	bne.n	80013e8 <HAL_ETH_ReadData+0x88>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d040      	beq.n	800146a <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d005      	beq.n	8001400 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	695b      	ldr	r3, [r3, #20]
 8001404:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800140e:	2b00      	cmp	r3, #0
 8001410:	d00c      	beq.n	800142c <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	0c1b      	lsrs	r3, r3, #16
 8001418:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800141c:	3b04      	subs	r3, #4
 800141e:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001428:	2301      	movs	r3, #1
 800142a:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	689a      	ldr	r2, [r3, #8]
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001444:	461a      	mov	r2, r3
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	b29b      	uxth	r3, r3
 800144a:	f002 f96d 	bl	8003728 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001452:	1c5a      	adds	r2, r3, #1
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	441a      	add	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	2200      	movs	r2, #0
 8001468:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	3301      	adds	r3, #1
 800146e:	61fb      	str	r3, [r7, #28]
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	2b03      	cmp	r3, #3
 8001474:	d902      	bls.n	800147c <HAL_ETH_ReadData+0x11c>
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	3b04      	subs	r3, #4
 800147a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	69fa      	ldr	r2, [r7, #28]
 8001480:	3212      	adds	r2, #18
 8001482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001486:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	3301      	adds	r3, #1
 800148c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	db06      	blt.n	80014a4 <HAL_ETH_ReadData+0x144>
 8001496:	697a      	ldr	r2, [r7, #20]
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	429a      	cmp	r2, r3
 800149c:	d202      	bcs.n	80014a4 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800149e:	7bfb      	ldrb	r3, [r7, #15]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d089      	beq.n	80013b8 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	441a      	add	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d002      	beq.n	80014be <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f000 f815 	bl	80014e8 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	69fa      	ldr	r2, [r7, #28]
 80014c2:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d108      	bne.n	80014dc <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80014d8:	2300      	movs	r3, #0
 80014da:	e000      	b.n	80014de <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3720      	adds	r7, #32
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
	...

080014e8 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b088      	sub	sp, #32
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80014f4:	2301      	movs	r3, #1
 80014f6:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80014fc:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	69fa      	ldr	r2, [r7, #28]
 8001502:	3212      	adds	r2, #18
 8001504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001508:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800150e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001510:	e040      	b.n	8001594 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	6a1b      	ldr	r3, [r3, #32]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d112      	bne.n	8001540 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800151a:	f107 030c 	add.w	r3, r7, #12
 800151e:	4618      	mov	r0, r3
 8001520:	f002 f8d2 	bl	80036c8 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d102      	bne.n	8001530 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800152a:	2300      	movs	r3, #0
 800152c:	74fb      	strb	r3, [r7, #19]
 800152e:	e007      	b.n	8001540 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	461a      	mov	r2, r3
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	461a      	mov	r2, r3
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001540:	7cfb      	ldrb	r3, [r7, #19]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d026      	beq.n	8001594 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800154a:	2b00      	cmp	r3, #0
 800154c:	d103      	bne.n	8001556 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	4a1e      	ldr	r2, [pc, #120]	; (80015cc <ETH_UpdateDescriptor+0xe4>)
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	e003      	b.n	800155e <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	f244 52f8 	movw	r2, #17912	; 0x45f8
 800155c:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800155e:	f3bf 8f5f 	dmb	sy
}
 8001562:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	3301      	adds	r3, #1
 8001574:	61fb      	str	r3, [r7, #28]
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	2b03      	cmp	r3, #3
 800157a:	d902      	bls.n	8001582 <ETH_UpdateDescriptor+0x9a>
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	3b04      	subs	r3, #4
 8001580:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	69fa      	ldr	r2, [r7, #28]
 8001586:	3212      	adds	r2, #18
 8001588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800158c:	617b      	str	r3, [r7, #20]
      desccount--;
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	3b01      	subs	r3, #1
 8001592:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d002      	beq.n	80015a0 <ETH_UpdateDescriptor+0xb8>
 800159a:	7cfb      	ldrb	r3, [r7, #19]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1b8      	bne.n	8001512 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d00c      	beq.n	80015c4 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015b2:	461a      	mov	r2, r3
 80015b4:	2300      	movs	r3, #0
 80015b6:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	69fa      	ldr	r2, [r7, #28]
 80015bc:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80015c4:	bf00      	nop
 80015c6:	3720      	adds	r7, #32
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	800045f8 	.word	0x800045f8

080015d0 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
 80015dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	691b      	ldr	r3, [r3, #16]
 80015e4:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	f003 031c 	and.w	r3, r3, #28
 80015ec:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	02db      	lsls	r3, r3, #11
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	697a      	ldr	r2, [r7, #20]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	019b      	lsls	r3, r3, #6
 80015fe:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	4313      	orrs	r3, r2
 8001606:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	f023 0302 	bic.w	r3, r3, #2
 800160e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	f043 0301 	orr.w	r3, r3, #1
 8001616:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	697a      	ldr	r2, [r7, #20]
 800161e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001620:	f7ff fbbe 	bl	8000da0 <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001626:	e00d      	b.n	8001644 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001628:	f7ff fbba 	bl	8000da0 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001636:	d301      	bcc.n	800163c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e010      	b.n	800165e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	691b      	ldr	r3, [r3, #16]
 8001642:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1ec      	bne.n	8001628 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	695b      	ldr	r3, [r3, #20]
 8001654:	b29b      	uxth	r3, r3
 8001656:	461a      	mov	r2, r3
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b086      	sub	sp, #24
 800166a:	af00      	add	r7, sp, #0
 800166c:	60f8      	str	r0, [r7, #12]
 800166e:	60b9      	str	r1, [r7, #8]
 8001670:	607a      	str	r2, [r7, #4]
 8001672:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	f003 031c 	and.w	r3, r3, #28
 8001682:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	02db      	lsls	r3, r3, #11
 8001688:	b29b      	uxth	r3, r3
 800168a:	697a      	ldr	r2, [r7, #20]
 800168c:	4313      	orrs	r3, r2
 800168e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	019b      	lsls	r3, r3, #6
 8001694:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001698:	697a      	ldr	r2, [r7, #20]
 800169a:	4313      	orrs	r3, r2
 800169c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	f043 0302 	orr.w	r3, r3, #2
 80016a4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	697a      	ldr	r2, [r7, #20]
 80016be:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016c0:	f7ff fb6e 	bl	8000da0 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80016c6:	e00d      	b.n	80016e4 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80016c8:	f7ff fb6a 	bl	8000da0 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016d6:	d301      	bcc.n	80016dc <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e009      	b.n	80016f0 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1ec      	bne.n	80016c8 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d101      	bne.n	800170c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e0d9      	b.n	80018c0 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0310 	and.w	r3, r3, #16
 8001716:	2b00      	cmp	r3, #0
 8001718:	bf14      	ite	ne
 800171a:	2301      	movne	r3, #1
 800171c:	2300      	moveq	r3, #0
 800171e:	b2db      	uxtb	r3, r3
 8001720:	461a      	mov	r2, r3
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001740:	2b00      	cmp	r3, #0
 8001742:	bf0c      	ite	eq
 8001744:	2301      	moveq	r3, #1
 8001746:	2300      	movne	r3, #0
 8001748:	b2db      	uxtb	r3, r3
 800174a:	461a      	mov	r2, r3
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 800175c:	2b00      	cmp	r3, #0
 800175e:	bf14      	ite	ne
 8001760:	2301      	movne	r3, #1
 8001762:	2300      	moveq	r3, #0
 8001764:	b2db      	uxtb	r3, r3
 8001766:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001776:	2b00      	cmp	r3, #0
 8001778:	bf0c      	ite	eq
 800177a:	2301      	moveq	r3, #1
 800177c:	2300      	movne	r3, #0
 800177e:	b2db      	uxtb	r3, r3
 8001780:	461a      	mov	r2, r3
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001790:	2b00      	cmp	r3, #0
 8001792:	bf14      	ite	ne
 8001794:	2301      	movne	r3, #1
 8001796:	2300      	moveq	r3, #0
 8001798:	b2db      	uxtb	r3, r3
 800179a:	461a      	mov	r2, r3
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	bf0c      	ite	eq
 80017ca:	2301      	moveq	r3, #1
 80017cc:	2300      	movne	r3, #0
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	461a      	mov	r2, r3
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	bf0c      	ite	eq
 80017e4:	2301      	moveq	r3, #1
 80017e6:	2300      	movne	r3, #0
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	461a      	mov	r2, r3
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	bf14      	ite	ne
 80017fe:	2301      	movne	r3, #1
 8001800:	2300      	moveq	r3, #0
 8001802:	b2db      	uxtb	r3, r3
 8001804:	461a      	mov	r2, r3
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001822:	2b00      	cmp	r3, #0
 8001824:	bf14      	ite	ne
 8001826:	2301      	movne	r3, #1
 8001828:	2300      	moveq	r3, #0
 800182a:	b2db      	uxtb	r3, r3
 800182c:	461a      	mov	r2, r3
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	bf14      	ite	ne
 8001840:	2301      	movne	r3, #1
 8001842:	2300      	moveq	r3, #0
 8001844:	b2db      	uxtb	r3, r3
 8001846:	461a      	mov	r2, r3
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001858:	2b00      	cmp	r3, #0
 800185a:	bf0c      	ite	eq
 800185c:	2301      	moveq	r3, #1
 800185e:	2300      	movne	r3, #0
 8001860:	b2db      	uxtb	r3, r3
 8001862:	461a      	mov	r2, r3
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	0c1b      	lsrs	r3, r3, #16
 8001880:	b29a      	uxth	r2, r3
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	2b00      	cmp	r3, #0
 8001892:	bf14      	ite	ne
 8001894:	2301      	movne	r3, #1
 8001896:	2300      	moveq	r3, #0
 8001898:	b2db      	uxtb	r3, r3
 800189a:	461a      	mov	r2, r3
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	bf14      	ite	ne
 80018b0:	2301      	movne	r3, #1
 80018b2:	2300      	moveq	r3, #0
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d101      	bne.n	80018e0 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e00b      	b.n	80018f8 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018e6:	2b10      	cmp	r3, #16
 80018e8:	d105      	bne.n	80018f6 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80018ea:	6839      	ldr	r1, [r7, #0]
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f000 f883 	bl	80019f8 <ETH_SetMACConfig>

    return HAL_OK;
 80018f2:	2300      	movs	r3, #0
 80018f4:	e000      	b.n	80018f8 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
  }
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f023 031c 	bic.w	r3, r3, #28
 8001916:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001918:	f001 fa42 	bl	8002da0 <HAL_RCC_GetHCLKFreq>
 800191c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	4a1d      	ldr	r2, [pc, #116]	; (8001998 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d908      	bls.n	8001938 <HAL_ETH_SetMDIOClockRange+0x38>
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	4a1c      	ldr	r2, [pc, #112]	; (800199c <HAL_ETH_SetMDIOClockRange+0x9c>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d804      	bhi.n	8001938 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f043 0308 	orr.w	r3, r3, #8
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	e027      	b.n	8001988 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	4a18      	ldr	r2, [pc, #96]	; (800199c <HAL_ETH_SetMDIOClockRange+0x9c>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d908      	bls.n	8001952 <HAL_ETH_SetMDIOClockRange+0x52>
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	4a17      	ldr	r2, [pc, #92]	; (80019a0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d204      	bcs.n	8001952 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f043 030c 	orr.w	r3, r3, #12
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	e01a      	b.n	8001988 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	4a12      	ldr	r2, [pc, #72]	; (80019a0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d303      	bcc.n	8001962 <HAL_ETH_SetMDIOClockRange+0x62>
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	4a11      	ldr	r2, [pc, #68]	; (80019a4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d911      	bls.n	8001986 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	4a0f      	ldr	r2, [pc, #60]	; (80019a4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d908      	bls.n	800197c <HAL_ETH_SetMDIOClockRange+0x7c>
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	4a0e      	ldr	r2, [pc, #56]	; (80019a8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d804      	bhi.n	800197c <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f043 0304 	orr.w	r3, r3, #4
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	e005      	b.n	8001988 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f043 0310 	orr.w	r3, r3, #16
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	e000      	b.n	8001988 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001986:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	611a      	str	r2, [r3, #16]
}
 8001990:	bf00      	nop
 8001992:	3710      	adds	r7, #16
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	01312cff 	.word	0x01312cff
 800199c:	02160ebf 	.word	0x02160ebf
 80019a0:	03938700 	.word	0x03938700
 80019a4:	05f5e0ff 	.word	0x05f5e0ff
 80019a8:	08f0d17f 	.word	0x08f0d17f

080019ac <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	6812      	ldr	r2, [r2, #0]
 80019c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80019ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019ce:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80019dc:	2001      	movs	r0, #1
 80019de:	f7ff f9eb 	bl	8000db8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019ec:	6193      	str	r3, [r2, #24]
}
 80019ee:	bf00      	nop
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	4b51      	ldr	r3, [pc, #324]	; (8001b54 <ETH_SetMACConfig+0x15c>)
 8001a0e:	4013      	ands	r3, r2
 8001a10:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	7c1b      	ldrb	r3, [r3, #16]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d102      	bne.n	8001a20 <ETH_SetMACConfig+0x28>
 8001a1a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001a1e:	e000      	b.n	8001a22 <ETH_SetMACConfig+0x2a>
 8001a20:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	7c5b      	ldrb	r3, [r3, #17]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d102      	bne.n	8001a30 <ETH_SetMACConfig+0x38>
 8001a2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a2e:	e000      	b.n	8001a32 <ETH_SetMACConfig+0x3a>
 8001a30:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001a32:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001a38:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	7fdb      	ldrb	r3, [r3, #31]
 8001a3e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001a40:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001a46:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	7f92      	ldrb	r2, [r2, #30]
 8001a4c:	2a00      	cmp	r2, #0
 8001a4e:	d102      	bne.n	8001a56 <ETH_SetMACConfig+0x5e>
 8001a50:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a54:	e000      	b.n	8001a58 <ETH_SetMACConfig+0x60>
 8001a56:	2200      	movs	r2, #0
                        macconf->Speed |
 8001a58:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	7f1b      	ldrb	r3, [r3, #28]
 8001a5e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001a60:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001a66:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	791b      	ldrb	r3, [r3, #4]
 8001a6c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001a6e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001a76:	2a00      	cmp	r2, #0
 8001a78:	d102      	bne.n	8001a80 <ETH_SetMACConfig+0x88>
 8001a7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a7e:	e000      	b.n	8001a82 <ETH_SetMACConfig+0x8a>
 8001a80:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001a82:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	7bdb      	ldrb	r3, [r3, #15]
 8001a88:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001a8a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001a90:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001a98:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ab2:	2001      	movs	r0, #1
 8001ab4:	f7ff f980 	bl	8000db8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68fa      	ldr	r2, [r7, #12]
 8001abe:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001ace:	4013      	ands	r3, r2
 8001ad0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ad6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001ade:	2a00      	cmp	r2, #0
 8001ae0:	d101      	bne.n	8001ae6 <ETH_SetMACConfig+0xee>
 8001ae2:	2280      	movs	r2, #128	; 0x80
 8001ae4:	e000      	b.n	8001ae8 <ETH_SetMACConfig+0xf0>
 8001ae6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001ae8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001aee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001af0:	683a      	ldr	r2, [r7, #0]
 8001af2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001af6:	2a01      	cmp	r2, #1
 8001af8:	d101      	bne.n	8001afe <ETH_SetMACConfig+0x106>
 8001afa:	2208      	movs	r2, #8
 8001afc:	e000      	b.n	8001b00 <ETH_SetMACConfig+0x108>
 8001afe:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001b00:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001b08:	2a01      	cmp	r2, #1
 8001b0a:	d101      	bne.n	8001b10 <ETH_SetMACConfig+0x118>
 8001b0c:	2204      	movs	r2, #4
 8001b0e:	e000      	b.n	8001b12 <ETH_SetMACConfig+0x11a>
 8001b10:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001b12:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001b1a:	2a01      	cmp	r2, #1
 8001b1c:	d101      	bne.n	8001b22 <ETH_SetMACConfig+0x12a>
 8001b1e:	2202      	movs	r2, #2
 8001b20:	e000      	b.n	8001b24 <ETH_SetMACConfig+0x12c>
 8001b22:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001b24:	4313      	orrs	r3, r2
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	68fa      	ldr	r2, [r7, #12]
 8001b32:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	f7ff f93b 	bl	8000db8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	619a      	str	r2, [r3, #24]
}
 8001b4a:	bf00      	nop
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	ff20810f 	.word	0xff20810f

08001b58 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	4b3d      	ldr	r3, [pc, #244]	; (8001c68 <ETH_SetDMAConfig+0x110>)
 8001b72:	4013      	ands	r3, r2
 8001b74:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	7b1b      	ldrb	r3, [r3, #12]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d102      	bne.n	8001b84 <ETH_SetDMAConfig+0x2c>
 8001b7e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b82:	e000      	b.n	8001b86 <ETH_SetDMAConfig+0x2e>
 8001b84:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	7b5b      	ldrb	r3, [r3, #13]
 8001b8a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001b8c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001b8e:	683a      	ldr	r2, [r7, #0]
 8001b90:	7f52      	ldrb	r2, [r2, #29]
 8001b92:	2a00      	cmp	r2, #0
 8001b94:	d102      	bne.n	8001b9c <ETH_SetDMAConfig+0x44>
 8001b96:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b9a:	e000      	b.n	8001b9e <ETH_SetDMAConfig+0x46>
 8001b9c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001b9e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	7b9b      	ldrb	r3, [r3, #14]
 8001ba4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001ba6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001bac:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	7f1b      	ldrb	r3, [r3, #28]
 8001bb2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001bb4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	7f9b      	ldrb	r3, [r3, #30]
 8001bba:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001bbc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001bc2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bca:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bdc:	461a      	mov	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bee:	2001      	movs	r0, #1
 8001bf0:	f7ff f8e2 	bl	8000db8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	791b      	ldrb	r3, [r3, #4]
 8001c06:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001c0c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001c12:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001c18:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c20:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001c22:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c28:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001c2a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001c30:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	6812      	ldr	r2, [r2, #0]
 8001c36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c3a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c3e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	f7ff f8b3 	bl	8000db8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6013      	str	r3, [r2, #0]
}
 8001c60:	bf00      	nop
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	f8de3f23 	.word	0xf8de3f23

08001c6c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b0a6      	sub	sp, #152	; 0x98
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001c74:	2301      	movs	r3, #1
 8001c76:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001c80:	2300      	movs	r3, #0
 8001c82:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001c84:	2300      	movs	r3, #0
 8001c86:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001c90:	2300      	movs	r3, #0
 8001c92:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001c96:	2301      	movs	r3, #1
 8001c98:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001cac:	2300      	movs	r3, #0
 8001cae:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001cce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cd2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001cd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001cd8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001ce0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7ff fe86 	bl	80019f8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001cec:	2301      	movs	r3, #1
 8001cee:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001d02:	2300      	movs	r3, #0
 8001d04:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001d12:	2301      	movs	r3, #1
 8001d14:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001d1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d20:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001d22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d26:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001d28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d2c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001d34:	2300      	movs	r3, #0
 8001d36:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001d3c:	f107 0308 	add.w	r3, r7, #8
 8001d40:	4619      	mov	r1, r3
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7ff ff08 	bl	8001b58 <ETH_SetDMAConfig>
}
 8001d48:	bf00      	nop
 8001d4a:	3798      	adds	r7, #152	; 0x98
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b087      	sub	sp, #28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3305      	adds	r3, #5
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	021b      	lsls	r3, r3, #8
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	3204      	adds	r2, #4
 8001d68:	7812      	ldrb	r2, [r2, #0]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <ETH_MACAddressConfig+0x68>)
 8001d72:	4413      	add	r3, r2
 8001d74:	461a      	mov	r2, r3
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	3303      	adds	r3, #3
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	061a      	lsls	r2, r3, #24
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	3302      	adds	r3, #2
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	041b      	lsls	r3, r3, #16
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	021b      	lsls	r3, r3, #8
 8001d94:	4313      	orrs	r3, r2
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	7812      	ldrb	r2, [r2, #0]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001d9e:	68ba      	ldr	r2, [r7, #8]
 8001da0:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <ETH_MACAddressConfig+0x6c>)
 8001da2:	4413      	add	r3, r2
 8001da4:	461a      	mov	r2, r3
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	6013      	str	r3, [r2, #0]
}
 8001daa:	bf00      	nop
 8001dac:	371c      	adds	r7, #28
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	40028040 	.word	0x40028040
 8001dbc:	40028044 	.word	0x40028044

08001dc0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	e03e      	b.n	8001e4c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68d9      	ldr	r1, [r3, #12]
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	4413      	add	r3, r2
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	440b      	add	r3, r1
 8001dde:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	2200      	movs	r2, #0
 8001dea:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	2200      	movs	r2, #0
 8001df0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	2200      	movs	r2, #0
 8001df6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001df8:	68b9      	ldr	r1, [r7, #8]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	68fa      	ldr	r2, [r7, #12]
 8001dfe:	3206      	adds	r2, #6
 8001e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d80c      	bhi.n	8001e30 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68d9      	ldr	r1, [r3, #12]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	1c5a      	adds	r2, r3, #1
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	440b      	add	r3, r1
 8001e28:	461a      	mov	r2, r3
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	60da      	str	r2, [r3, #12]
 8001e2e:	e004      	b.n	8001e3a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	461a      	mov	r2, r3
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2b03      	cmp	r3, #3
 8001e50:	d9bd      	bls.n	8001dce <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68da      	ldr	r2, [r3, #12]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e64:	611a      	str	r2, [r3, #16]
}
 8001e66:	bf00      	nop
 8001e68:	3714      	adds	r7, #20
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b085      	sub	sp, #20
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	e046      	b.n	8001f0e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6919      	ldr	r1, [r3, #16]
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	4613      	mov	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4413      	add	r3, r2
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	440b      	add	r3, r1
 8001e90:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	2200      	movs	r2, #0
 8001eae:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001ebc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001ec4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001ed2:	68b9      	ldr	r1, [r7, #8]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	3212      	adds	r2, #18
 8001eda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d80c      	bhi.n	8001efe <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6919      	ldr	r1, [r3, #16]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	1c5a      	adds	r2, r3, #1
 8001eec:	4613      	mov	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	4413      	add	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	440b      	add	r3, r1
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	60da      	str	r2, [r3, #12]
 8001efc:	e004      	b.n	8001f08 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	461a      	mov	r2, r3
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2b03      	cmp	r3, #3
 8001f12:	d9b5      	bls.n	8001e80 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	691a      	ldr	r2, [r3, #16]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f3e:	60da      	str	r2, [r3, #12]
}
 8001f40:	bf00      	nop
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b08d      	sub	sp, #52	; 0x34
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	3318      	adds	r3, #24
 8001f5c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f76:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8001f82:	6a3b      	ldr	r3, [r7, #32]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001f8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f8e:	d007      	beq.n	8001fa0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8001f90:	697a      	ldr	r2, [r7, #20]
 8001f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f94:	3304      	adds	r3, #4
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	e103      	b.n	80021ac <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	6a3b      	ldr	r3, [r7, #32]
 8001fb2:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001fb4:	6a3b      	ldr	r3, [r7, #32]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8001fbc:	f023 031f 	bic.w	r3, r3, #31
 8001fc0:	69fa      	ldr	r2, [r7, #28]
 8001fc2:	6852      	ldr	r2, [r2, #4]
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	6a3b      	ldr	r3, [r7, #32]
 8001fc8:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d008      	beq.n	8001fe8 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8001fd6:	6a3b      	ldr	r3, [r7, #32]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	6a3b      	ldr	r3, [r7, #32]
 8001fe6:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0320 	and.w	r3, r3, #32
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d008      	beq.n	8002006 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8001ff4:	6a3b      	ldr	r3, [r7, #32]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	431a      	orrs	r2, r3
 8002002:	6a3b      	ldr	r3, [r7, #32]
 8002004:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0304 	and.w	r3, r3, #4
 800200e:	2b00      	cmp	r3, #0
 8002010:	d005      	beq.n	800201e <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002012:	6a3b      	ldr	r3, [r7, #32]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800201a:	6a3b      	ldr	r3, [r7, #32]
 800201c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800201e:	6a3b      	ldr	r3, [r7, #32]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002026:	6a3b      	ldr	r3, [r7, #32]
 8002028:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800202a:	f3bf 8f5f 	dmb	sy
}
 800202e:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002030:	6a3b      	ldr	r3, [r7, #32]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002038:	6a3b      	ldr	r3, [r7, #32]
 800203a:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800203c:	e084      	b.n	8002148 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800203e:	6a3b      	ldr	r3, [r7, #32]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002046:	6a3b      	ldr	r3, [r7, #32]
 8002048:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d006      	beq.n	800205e <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002050:	6a3b      	ldr	r3, [r7, #32]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002058:	6a3b      	ldr	r3, [r7, #32]
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	e005      	b.n	800206a <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800205e:	6a3b      	ldr	r3, [r7, #32]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002066:	6a3b      	ldr	r3, [r7, #32]
 8002068:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800206a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800206c:	3301      	adds	r3, #1
 800206e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002072:	2b03      	cmp	r3, #3
 8002074:	d902      	bls.n	800207c <ETH_Prepare_Tx_Descriptors+0x130>
 8002076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002078:	3b04      	subs	r3, #4
 800207a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002084:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002086:	6a3b      	ldr	r3, [r7, #32]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800208e:	6a3b      	ldr	r3, [r7, #32]
 8002090:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002092:	6a3b      	ldr	r3, [r7, #32]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800209a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800209e:	d007      	beq.n	80020b0 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a4:	3304      	adds	r3, #4
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d029      	beq.n	8002104 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020bc:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80020be:	2300      	movs	r3, #0
 80020c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80020c2:	e019      	b.n	80020f8 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 80020c4:	f3bf 8f5f 	dmb	sy
}
 80020c8:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80020ca:	6a3b      	ldr	r3, [r7, #32]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80020d2:	6a3b      	ldr	r3, [r7, #32]
 80020d4:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80020d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d8:	3301      	adds	r3, #1
 80020da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020de:	2b03      	cmp	r3, #3
 80020e0:	d902      	bls.n	80020e8 <ETH_Prepare_Tx_Descriptors+0x19c>
 80020e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e4:	3b04      	subs	r3, #4
 80020e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020f0:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80020f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f4:	3301      	adds	r3, #1
 80020f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80020f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d3e1      	bcc.n	80020c4 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8002100:	2302      	movs	r3, #2
 8002102:	e053      	b.n	80021ac <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	3301      	adds	r3, #1
 8002108:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	461a      	mov	r2, r3
 8002116:	6a3b      	ldr	r3, [r7, #32]
 8002118:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800211a:	6a3b      	ldr	r3, [r7, #32]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002122:	f023 031f 	bic.w	r3, r3, #31
 8002126:	69fa      	ldr	r2, [r7, #28]
 8002128:	6852      	ldr	r2, [r2, #4]
 800212a:	431a      	orrs	r2, r3
 800212c:	6a3b      	ldr	r3, [r7, #32]
 800212e:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	3301      	adds	r3, #1
 8002134:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002136:	f3bf 8f5f 	dmb	sy
}
 800213a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800213c:	6a3b      	ldr	r3, [r7, #32]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002144:	6a3b      	ldr	r3, [r7, #32]
 8002146:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	2b00      	cmp	r3, #0
 800214e:	f47f af76 	bne.w	800203e <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d006      	beq.n	8002166 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002158:	6a3b      	ldr	r3, [r7, #32]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002160:	6a3b      	ldr	r3, [r7, #32]
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	e005      	b.n	8002172 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002166:	6a3b      	ldr	r3, [r7, #32]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800216e:	6a3b      	ldr	r3, [r7, #32]
 8002170:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002172:	6a3b      	ldr	r3, [r7, #32]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800217a:	6a3b      	ldr	r3, [r7, #32]
 800217c:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002182:	6979      	ldr	r1, [r7, #20]
 8002184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002186:	3304      	adds	r3, #4
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	440b      	add	r3, r1
 800218c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002192:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002194:	b672      	cpsid	i
}
 8002196:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	4413      	add	r3, r2
 80021a0:	1c5a      	adds	r2, r3, #1
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80021a6:	b662      	cpsie	i
}
 80021a8:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3734      	adds	r7, #52	; 0x34
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b089      	sub	sp, #36	; 0x24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ce:	2300      	movs	r3, #0
 80021d0:	61fb      	str	r3, [r7, #28]
 80021d2:	e16b      	b.n	80024ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021d4:	2201      	movs	r2, #1
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	4013      	ands	r3, r2
 80021e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	f040 815a 	bne.w	80024a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f003 0303 	and.w	r3, r3, #3
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d005      	beq.n	800220a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002206:	2b02      	cmp	r3, #2
 8002208:	d130      	bne.n	800226c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	2203      	movs	r2, #3
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43db      	mvns	r3, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4013      	ands	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	68da      	ldr	r2, [r3, #12]
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002240:	2201      	movs	r2, #1
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	43db      	mvns	r3, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4013      	ands	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	091b      	lsrs	r3, r3, #4
 8002256:	f003 0201 	and.w	r2, r3, #1
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4313      	orrs	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f003 0303 	and.w	r3, r3, #3
 8002274:	2b03      	cmp	r3, #3
 8002276:	d017      	beq.n	80022a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	2203      	movs	r2, #3
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4013      	ands	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 0303 	and.w	r3, r3, #3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d123      	bne.n	80022fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	08da      	lsrs	r2, r3, #3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3208      	adds	r2, #8
 80022bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	220f      	movs	r2, #15
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	43db      	mvns	r3, r3
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4013      	ands	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	691a      	ldr	r2, [r3, #16]
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	08da      	lsrs	r2, r3, #3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	3208      	adds	r2, #8
 80022f6:	69b9      	ldr	r1, [r7, #24]
 80022f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	2203      	movs	r2, #3
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	4013      	ands	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f003 0203 	and.w	r2, r3, #3
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4313      	orrs	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002338:	2b00      	cmp	r3, #0
 800233a:	f000 80b4 	beq.w	80024a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	4b60      	ldr	r3, [pc, #384]	; (80024c4 <HAL_GPIO_Init+0x30c>)
 8002344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002346:	4a5f      	ldr	r2, [pc, #380]	; (80024c4 <HAL_GPIO_Init+0x30c>)
 8002348:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800234c:	6453      	str	r3, [r2, #68]	; 0x44
 800234e:	4b5d      	ldr	r3, [pc, #372]	; (80024c4 <HAL_GPIO_Init+0x30c>)
 8002350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002352:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800235a:	4a5b      	ldr	r2, [pc, #364]	; (80024c8 <HAL_GPIO_Init+0x310>)
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	089b      	lsrs	r3, r3, #2
 8002360:	3302      	adds	r3, #2
 8002362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002366:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	f003 0303 	and.w	r3, r3, #3
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	220f      	movs	r2, #15
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43db      	mvns	r3, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4013      	ands	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a52      	ldr	r2, [pc, #328]	; (80024cc <HAL_GPIO_Init+0x314>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d02b      	beq.n	80023de <HAL_GPIO_Init+0x226>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a51      	ldr	r2, [pc, #324]	; (80024d0 <HAL_GPIO_Init+0x318>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d025      	beq.n	80023da <HAL_GPIO_Init+0x222>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a50      	ldr	r2, [pc, #320]	; (80024d4 <HAL_GPIO_Init+0x31c>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d01f      	beq.n	80023d6 <HAL_GPIO_Init+0x21e>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a4f      	ldr	r2, [pc, #316]	; (80024d8 <HAL_GPIO_Init+0x320>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d019      	beq.n	80023d2 <HAL_GPIO_Init+0x21a>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a4e      	ldr	r2, [pc, #312]	; (80024dc <HAL_GPIO_Init+0x324>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d013      	beq.n	80023ce <HAL_GPIO_Init+0x216>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a4d      	ldr	r2, [pc, #308]	; (80024e0 <HAL_GPIO_Init+0x328>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d00d      	beq.n	80023ca <HAL_GPIO_Init+0x212>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a4c      	ldr	r2, [pc, #304]	; (80024e4 <HAL_GPIO_Init+0x32c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d007      	beq.n	80023c6 <HAL_GPIO_Init+0x20e>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a4b      	ldr	r2, [pc, #300]	; (80024e8 <HAL_GPIO_Init+0x330>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d101      	bne.n	80023c2 <HAL_GPIO_Init+0x20a>
 80023be:	2307      	movs	r3, #7
 80023c0:	e00e      	b.n	80023e0 <HAL_GPIO_Init+0x228>
 80023c2:	2308      	movs	r3, #8
 80023c4:	e00c      	b.n	80023e0 <HAL_GPIO_Init+0x228>
 80023c6:	2306      	movs	r3, #6
 80023c8:	e00a      	b.n	80023e0 <HAL_GPIO_Init+0x228>
 80023ca:	2305      	movs	r3, #5
 80023cc:	e008      	b.n	80023e0 <HAL_GPIO_Init+0x228>
 80023ce:	2304      	movs	r3, #4
 80023d0:	e006      	b.n	80023e0 <HAL_GPIO_Init+0x228>
 80023d2:	2303      	movs	r3, #3
 80023d4:	e004      	b.n	80023e0 <HAL_GPIO_Init+0x228>
 80023d6:	2302      	movs	r3, #2
 80023d8:	e002      	b.n	80023e0 <HAL_GPIO_Init+0x228>
 80023da:	2301      	movs	r3, #1
 80023dc:	e000      	b.n	80023e0 <HAL_GPIO_Init+0x228>
 80023de:	2300      	movs	r3, #0
 80023e0:	69fa      	ldr	r2, [r7, #28]
 80023e2:	f002 0203 	and.w	r2, r2, #3
 80023e6:	0092      	lsls	r2, r2, #2
 80023e8:	4093      	lsls	r3, r2
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023f0:	4935      	ldr	r1, [pc, #212]	; (80024c8 <HAL_GPIO_Init+0x310>)
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	089b      	lsrs	r3, r3, #2
 80023f6:	3302      	adds	r3, #2
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023fe:	4b3b      	ldr	r3, [pc, #236]	; (80024ec <HAL_GPIO_Init+0x334>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	43db      	mvns	r3, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4013      	ands	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	4313      	orrs	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002422:	4a32      	ldr	r2, [pc, #200]	; (80024ec <HAL_GPIO_Init+0x334>)
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002428:	4b30      	ldr	r3, [pc, #192]	; (80024ec <HAL_GPIO_Init+0x334>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	43db      	mvns	r3, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4013      	ands	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d003      	beq.n	800244c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	4313      	orrs	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800244c:	4a27      	ldr	r2, [pc, #156]	; (80024ec <HAL_GPIO_Init+0x334>)
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002452:	4b26      	ldr	r3, [pc, #152]	; (80024ec <HAL_GPIO_Init+0x334>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	43db      	mvns	r3, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4013      	ands	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	4313      	orrs	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002476:	4a1d      	ldr	r2, [pc, #116]	; (80024ec <HAL_GPIO_Init+0x334>)
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800247c:	4b1b      	ldr	r3, [pc, #108]	; (80024ec <HAL_GPIO_Init+0x334>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	43db      	mvns	r3, r3
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	4013      	ands	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	4313      	orrs	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024a0:	4a12      	ldr	r2, [pc, #72]	; (80024ec <HAL_GPIO_Init+0x334>)
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	3301      	adds	r3, #1
 80024aa:	61fb      	str	r3, [r7, #28]
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	2b0f      	cmp	r3, #15
 80024b0:	f67f ae90 	bls.w	80021d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024b4:	bf00      	nop
 80024b6:	bf00      	nop
 80024b8:	3724      	adds	r7, #36	; 0x24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	40023800 	.word	0x40023800
 80024c8:	40013800 	.word	0x40013800
 80024cc:	40020000 	.word	0x40020000
 80024d0:	40020400 	.word	0x40020400
 80024d4:	40020800 	.word	0x40020800
 80024d8:	40020c00 	.word	0x40020c00
 80024dc:	40021000 	.word	0x40021000
 80024e0:	40021400 	.word	0x40021400
 80024e4:	40021800 	.word	0x40021800
 80024e8:	40021c00 	.word	0x40021c00
 80024ec:	40013c00 	.word	0x40013c00

080024f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	460b      	mov	r3, r1
 80024fa:	807b      	strh	r3, [r7, #2]
 80024fc:	4613      	mov	r3, r2
 80024fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002500:	787b      	ldrb	r3, [r7, #1]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002506:	887a      	ldrh	r2, [r7, #2]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800250c:	e003      	b.n	8002516 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800250e:	887b      	ldrh	r3, [r7, #2]
 8002510:	041a      	lsls	r2, r3, #16
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	619a      	str	r2, [r3, #24]
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002522:	b480      	push	{r7}
 8002524:	b085      	sub	sp, #20
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
 800252a:	460b      	mov	r3, r1
 800252c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002534:	887a      	ldrh	r2, [r7, #2]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	4013      	ands	r3, r2
 800253a:	041a      	lsls	r2, r3, #16
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	43d9      	mvns	r1, r3
 8002540:	887b      	ldrh	r3, [r7, #2]
 8002542:	400b      	ands	r3, r1
 8002544:	431a      	orrs	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	619a      	str	r2, [r3, #24]
}
 800254a:	bf00      	nop
 800254c:	3714      	adds	r7, #20
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
	...

08002558 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e267      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	d075      	beq.n	8002662 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002576:	4b88      	ldr	r3, [pc, #544]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 030c 	and.w	r3, r3, #12
 800257e:	2b04      	cmp	r3, #4
 8002580:	d00c      	beq.n	800259c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002582:	4b85      	ldr	r3, [pc, #532]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800258a:	2b08      	cmp	r3, #8
 800258c:	d112      	bne.n	80025b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800258e:	4b82      	ldr	r3, [pc, #520]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002596:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800259a:	d10b      	bne.n	80025b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800259c:	4b7e      	ldr	r3, [pc, #504]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d05b      	beq.n	8002660 <HAL_RCC_OscConfig+0x108>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d157      	bne.n	8002660 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e242      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025bc:	d106      	bne.n	80025cc <HAL_RCC_OscConfig+0x74>
 80025be:	4b76      	ldr	r3, [pc, #472]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a75      	ldr	r2, [pc, #468]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 80025c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c8:	6013      	str	r3, [r2, #0]
 80025ca:	e01d      	b.n	8002608 <HAL_RCC_OscConfig+0xb0>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025d4:	d10c      	bne.n	80025f0 <HAL_RCC_OscConfig+0x98>
 80025d6:	4b70      	ldr	r3, [pc, #448]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a6f      	ldr	r2, [pc, #444]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 80025dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	4b6d      	ldr	r3, [pc, #436]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a6c      	ldr	r2, [pc, #432]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 80025e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ec:	6013      	str	r3, [r2, #0]
 80025ee:	e00b      	b.n	8002608 <HAL_RCC_OscConfig+0xb0>
 80025f0:	4b69      	ldr	r3, [pc, #420]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a68      	ldr	r2, [pc, #416]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 80025f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025fa:	6013      	str	r3, [r2, #0]
 80025fc:	4b66      	ldr	r3, [pc, #408]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a65      	ldr	r2, [pc, #404]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 8002602:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002606:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d013      	beq.n	8002638 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002610:	f7fe fbc6 	bl	8000da0 <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002618:	f7fe fbc2 	bl	8000da0 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b64      	cmp	r3, #100	; 0x64
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e207      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800262a:	4b5b      	ldr	r3, [pc, #364]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d0f0      	beq.n	8002618 <HAL_RCC_OscConfig+0xc0>
 8002636:	e014      	b.n	8002662 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002638:	f7fe fbb2 	bl	8000da0 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002640:	f7fe fbae 	bl	8000da0 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b64      	cmp	r3, #100	; 0x64
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e1f3      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002652:	4b51      	ldr	r3, [pc, #324]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1f0      	bne.n	8002640 <HAL_RCC_OscConfig+0xe8>
 800265e:	e000      	b.n	8002662 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002660:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d063      	beq.n	8002736 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800266e:	4b4a      	ldr	r3, [pc, #296]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 030c 	and.w	r3, r3, #12
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00b      	beq.n	8002692 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800267a:	4b47      	ldr	r3, [pc, #284]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002682:	2b08      	cmp	r3, #8
 8002684:	d11c      	bne.n	80026c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002686:	4b44      	ldr	r3, [pc, #272]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d116      	bne.n	80026c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002692:	4b41      	ldr	r3, [pc, #260]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d005      	beq.n	80026aa <HAL_RCC_OscConfig+0x152>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d001      	beq.n	80026aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e1c7      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026aa:	4b3b      	ldr	r3, [pc, #236]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	4937      	ldr	r1, [pc, #220]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026be:	e03a      	b.n	8002736 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d020      	beq.n	800270a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026c8:	4b34      	ldr	r3, [pc, #208]	; (800279c <HAL_RCC_OscConfig+0x244>)
 80026ca:	2201      	movs	r2, #1
 80026cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ce:	f7fe fb67 	bl	8000da0 <HAL_GetTick>
 80026d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026d6:	f7fe fb63 	bl	8000da0 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e1a8      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e8:	4b2b      	ldr	r3, [pc, #172]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0f0      	beq.n	80026d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f4:	4b28      	ldr	r3, [pc, #160]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	4925      	ldr	r1, [pc, #148]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 8002704:	4313      	orrs	r3, r2
 8002706:	600b      	str	r3, [r1, #0]
 8002708:	e015      	b.n	8002736 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800270a:	4b24      	ldr	r3, [pc, #144]	; (800279c <HAL_RCC_OscConfig+0x244>)
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002710:	f7fe fb46 	bl	8000da0 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002718:	f7fe fb42 	bl	8000da0 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e187      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800272a:	4b1b      	ldr	r3, [pc, #108]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1f0      	bne.n	8002718 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0308 	and.w	r3, r3, #8
 800273e:	2b00      	cmp	r3, #0
 8002740:	d036      	beq.n	80027b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d016      	beq.n	8002778 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800274a:	4b15      	ldr	r3, [pc, #84]	; (80027a0 <HAL_RCC_OscConfig+0x248>)
 800274c:	2201      	movs	r2, #1
 800274e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002750:	f7fe fb26 	bl	8000da0 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002758:	f7fe fb22 	bl	8000da0 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e167      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800276a:	4b0b      	ldr	r3, [pc, #44]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 800276c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d0f0      	beq.n	8002758 <HAL_RCC_OscConfig+0x200>
 8002776:	e01b      	b.n	80027b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002778:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <HAL_RCC_OscConfig+0x248>)
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800277e:	f7fe fb0f 	bl	8000da0 <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002784:	e00e      	b.n	80027a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002786:	f7fe fb0b 	bl	8000da0 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d907      	bls.n	80027a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e150      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
 8002798:	40023800 	.word	0x40023800
 800279c:	42470000 	.word	0x42470000
 80027a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027a4:	4b88      	ldr	r3, [pc, #544]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 80027a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1ea      	bne.n	8002786 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 8097 	beq.w	80028ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027be:	2300      	movs	r3, #0
 80027c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027c2:	4b81      	ldr	r3, [pc, #516]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10f      	bne.n	80027ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	60bb      	str	r3, [r7, #8]
 80027d2:	4b7d      	ldr	r3, [pc, #500]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	4a7c      	ldr	r2, [pc, #496]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 80027d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027dc:	6413      	str	r3, [r2, #64]	; 0x40
 80027de:	4b7a      	ldr	r3, [pc, #488]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e6:	60bb      	str	r3, [r7, #8]
 80027e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ea:	2301      	movs	r3, #1
 80027ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ee:	4b77      	ldr	r3, [pc, #476]	; (80029cc <HAL_RCC_OscConfig+0x474>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d118      	bne.n	800282c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027fa:	4b74      	ldr	r3, [pc, #464]	; (80029cc <HAL_RCC_OscConfig+0x474>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a73      	ldr	r2, [pc, #460]	; (80029cc <HAL_RCC_OscConfig+0x474>)
 8002800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002804:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002806:	f7fe facb 	bl	8000da0 <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800280c:	e008      	b.n	8002820 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800280e:	f7fe fac7 	bl	8000da0 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e10c      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002820:	4b6a      	ldr	r3, [pc, #424]	; (80029cc <HAL_RCC_OscConfig+0x474>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0f0      	beq.n	800280e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d106      	bne.n	8002842 <HAL_RCC_OscConfig+0x2ea>
 8002834:	4b64      	ldr	r3, [pc, #400]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 8002836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002838:	4a63      	ldr	r2, [pc, #396]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 800283a:	f043 0301 	orr.w	r3, r3, #1
 800283e:	6713      	str	r3, [r2, #112]	; 0x70
 8002840:	e01c      	b.n	800287c <HAL_RCC_OscConfig+0x324>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	2b05      	cmp	r3, #5
 8002848:	d10c      	bne.n	8002864 <HAL_RCC_OscConfig+0x30c>
 800284a:	4b5f      	ldr	r3, [pc, #380]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 800284c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284e:	4a5e      	ldr	r2, [pc, #376]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 8002850:	f043 0304 	orr.w	r3, r3, #4
 8002854:	6713      	str	r3, [r2, #112]	; 0x70
 8002856:	4b5c      	ldr	r3, [pc, #368]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 8002858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285a:	4a5b      	ldr	r2, [pc, #364]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 800285c:	f043 0301 	orr.w	r3, r3, #1
 8002860:	6713      	str	r3, [r2, #112]	; 0x70
 8002862:	e00b      	b.n	800287c <HAL_RCC_OscConfig+0x324>
 8002864:	4b58      	ldr	r3, [pc, #352]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 8002866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002868:	4a57      	ldr	r2, [pc, #348]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 800286a:	f023 0301 	bic.w	r3, r3, #1
 800286e:	6713      	str	r3, [r2, #112]	; 0x70
 8002870:	4b55      	ldr	r3, [pc, #340]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 8002872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002874:	4a54      	ldr	r2, [pc, #336]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 8002876:	f023 0304 	bic.w	r3, r3, #4
 800287a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d015      	beq.n	80028b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002884:	f7fe fa8c 	bl	8000da0 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800288a:	e00a      	b.n	80028a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800288c:	f7fe fa88 	bl	8000da0 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	f241 3288 	movw	r2, #5000	; 0x1388
 800289a:	4293      	cmp	r3, r2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e0cb      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028a2:	4b49      	ldr	r3, [pc, #292]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 80028a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d0ee      	beq.n	800288c <HAL_RCC_OscConfig+0x334>
 80028ae:	e014      	b.n	80028da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b0:	f7fe fa76 	bl	8000da0 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028b6:	e00a      	b.n	80028ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028b8:	f7fe fa72 	bl	8000da0 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e0b5      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ce:	4b3e      	ldr	r3, [pc, #248]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 80028d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1ee      	bne.n	80028b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028da:	7dfb      	ldrb	r3, [r7, #23]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d105      	bne.n	80028ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e0:	4b39      	ldr	r3, [pc, #228]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 80028e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e4:	4a38      	ldr	r2, [pc, #224]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 80028e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 80a1 	beq.w	8002a38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028f6:	4b34      	ldr	r3, [pc, #208]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 030c 	and.w	r3, r3, #12
 80028fe:	2b08      	cmp	r3, #8
 8002900:	d05c      	beq.n	80029bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	2b02      	cmp	r3, #2
 8002908:	d141      	bne.n	800298e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800290a:	4b31      	ldr	r3, [pc, #196]	; (80029d0 <HAL_RCC_OscConfig+0x478>)
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002910:	f7fe fa46 	bl	8000da0 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002918:	f7fe fa42 	bl	8000da0 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e087      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800292a:	4b27      	ldr	r3, [pc, #156]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1f0      	bne.n	8002918 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69da      	ldr	r2, [r3, #28]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002944:	019b      	lsls	r3, r3, #6
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294c:	085b      	lsrs	r3, r3, #1
 800294e:	3b01      	subs	r3, #1
 8002950:	041b      	lsls	r3, r3, #16
 8002952:	431a      	orrs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002958:	061b      	lsls	r3, r3, #24
 800295a:	491b      	ldr	r1, [pc, #108]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 800295c:	4313      	orrs	r3, r2
 800295e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002960:	4b1b      	ldr	r3, [pc, #108]	; (80029d0 <HAL_RCC_OscConfig+0x478>)
 8002962:	2201      	movs	r2, #1
 8002964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002966:	f7fe fa1b 	bl	8000da0 <HAL_GetTick>
 800296a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800296c:	e008      	b.n	8002980 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800296e:	f7fe fa17 	bl	8000da0 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e05c      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002980:	4b11      	ldr	r3, [pc, #68]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0f0      	beq.n	800296e <HAL_RCC_OscConfig+0x416>
 800298c:	e054      	b.n	8002a38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800298e:	4b10      	ldr	r3, [pc, #64]	; (80029d0 <HAL_RCC_OscConfig+0x478>)
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002994:	f7fe fa04 	bl	8000da0 <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800299c:	f7fe fa00 	bl	8000da0 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e045      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ae:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1f0      	bne.n	800299c <HAL_RCC_OscConfig+0x444>
 80029ba:	e03d      	b.n	8002a38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d107      	bne.n	80029d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e038      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
 80029c8:	40023800 	.word	0x40023800
 80029cc:	40007000 	.word	0x40007000
 80029d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029d4:	4b1b      	ldr	r3, [pc, #108]	; (8002a44 <HAL_RCC_OscConfig+0x4ec>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d028      	beq.n	8002a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d121      	bne.n	8002a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d11a      	bne.n	8002a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a04:	4013      	ands	r3, r2
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d111      	bne.n	8002a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1a:	085b      	lsrs	r3, r3, #1
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d107      	bne.n	8002a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d001      	beq.n	8002a38 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e000      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3718      	adds	r7, #24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	40023800 	.word	0x40023800

08002a48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e0cc      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a5c:	4b68      	ldr	r3, [pc, #416]	; (8002c00 <HAL_RCC_ClockConfig+0x1b8>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0307 	and.w	r3, r3, #7
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d90c      	bls.n	8002a84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6a:	4b65      	ldr	r3, [pc, #404]	; (8002c00 <HAL_RCC_ClockConfig+0x1b8>)
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a72:	4b63      	ldr	r3, [pc, #396]	; (8002c00 <HAL_RCC_ClockConfig+0x1b8>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0307 	and.w	r3, r3, #7
 8002a7a:	683a      	ldr	r2, [r7, #0]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d001      	beq.n	8002a84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e0b8      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d020      	beq.n	8002ad2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d005      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a9c:	4b59      	ldr	r3, [pc, #356]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	4a58      	ldr	r2, [pc, #352]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002aa6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0308 	and.w	r3, r3, #8
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d005      	beq.n	8002ac0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ab4:	4b53      	ldr	r3, [pc, #332]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	4a52      	ldr	r2, [pc, #328]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002aba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002abe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ac0:	4b50      	ldr	r3, [pc, #320]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	494d      	ldr	r1, [pc, #308]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d044      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d107      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae6:	4b47      	ldr	r3, [pc, #284]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d119      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e07f      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d003      	beq.n	8002b06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b02:	2b03      	cmp	r3, #3
 8002b04:	d107      	bne.n	8002b16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b06:	4b3f      	ldr	r3, [pc, #252]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d109      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e06f      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b16:	4b3b      	ldr	r3, [pc, #236]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e067      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b26:	4b37      	ldr	r3, [pc, #220]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f023 0203 	bic.w	r2, r3, #3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	4934      	ldr	r1, [pc, #208]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b38:	f7fe f932 	bl	8000da0 <HAL_GetTick>
 8002b3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3e:	e00a      	b.n	8002b56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b40:	f7fe f92e 	bl	8000da0 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e04f      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b56:	4b2b      	ldr	r3, [pc, #172]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 020c 	and.w	r2, r3, #12
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d1eb      	bne.n	8002b40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b68:	4b25      	ldr	r3, [pc, #148]	; (8002c00 <HAL_RCC_ClockConfig+0x1b8>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d20c      	bcs.n	8002b90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b76:	4b22      	ldr	r3, [pc, #136]	; (8002c00 <HAL_RCC_ClockConfig+0x1b8>)
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7e:	4b20      	ldr	r3, [pc, #128]	; (8002c00 <HAL_RCC_ClockConfig+0x1b8>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d001      	beq.n	8002b90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e032      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0304 	and.w	r3, r3, #4
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d008      	beq.n	8002bae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b9c:	4b19      	ldr	r3, [pc, #100]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	4916      	ldr	r1, [pc, #88]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0308 	and.w	r3, r3, #8
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d009      	beq.n	8002bce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bba:	4b12      	ldr	r3, [pc, #72]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	490e      	ldr	r1, [pc, #56]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bce:	f000 f821 	bl	8002c14 <HAL_RCC_GetSysClockFreq>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	091b      	lsrs	r3, r3, #4
 8002bda:	f003 030f 	and.w	r3, r3, #15
 8002bde:	490a      	ldr	r1, [pc, #40]	; (8002c08 <HAL_RCC_ClockConfig+0x1c0>)
 8002be0:	5ccb      	ldrb	r3, [r1, r3]
 8002be2:	fa22 f303 	lsr.w	r3, r2, r3
 8002be6:	4a09      	ldr	r2, [pc, #36]	; (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002be8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bea:	4b09      	ldr	r3, [pc, #36]	; (8002c10 <HAL_RCC_ClockConfig+0x1c8>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7fe f892 	bl	8000d18 <HAL_InitTick>

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40023c00 	.word	0x40023c00
 8002c04:	40023800 	.word	0x40023800
 8002c08:	08010cf8 	.word	0x08010cf8
 8002c0c:	20000000 	.word	0x20000000
 8002c10:	20000004 	.word	0x20000004

08002c14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c18:	b090      	sub	sp, #64	; 0x40
 8002c1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	637b      	str	r3, [r7, #52]	; 0x34
 8002c20:	2300      	movs	r3, #0
 8002c22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c24:	2300      	movs	r3, #0
 8002c26:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c2c:	4b59      	ldr	r3, [pc, #356]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f003 030c 	and.w	r3, r3, #12
 8002c34:	2b08      	cmp	r3, #8
 8002c36:	d00d      	beq.n	8002c54 <HAL_RCC_GetSysClockFreq+0x40>
 8002c38:	2b08      	cmp	r3, #8
 8002c3a:	f200 80a1 	bhi.w	8002d80 <HAL_RCC_GetSysClockFreq+0x16c>
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d002      	beq.n	8002c48 <HAL_RCC_GetSysClockFreq+0x34>
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	d003      	beq.n	8002c4e <HAL_RCC_GetSysClockFreq+0x3a>
 8002c46:	e09b      	b.n	8002d80 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c48:	4b53      	ldr	r3, [pc, #332]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c4a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002c4c:	e09b      	b.n	8002d86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c4e:	4b53      	ldr	r3, [pc, #332]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x188>)
 8002c50:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c52:	e098      	b.n	8002d86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c54:	4b4f      	ldr	r3, [pc, #316]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c5c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c5e:	4b4d      	ldr	r3, [pc, #308]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d028      	beq.n	8002cbc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c6a:	4b4a      	ldr	r3, [pc, #296]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	099b      	lsrs	r3, r3, #6
 8002c70:	2200      	movs	r2, #0
 8002c72:	623b      	str	r3, [r7, #32]
 8002c74:	627a      	str	r2, [r7, #36]	; 0x24
 8002c76:	6a3b      	ldr	r3, [r7, #32]
 8002c78:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	4b47      	ldr	r3, [pc, #284]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x188>)
 8002c80:	fb03 f201 	mul.w	r2, r3, r1
 8002c84:	2300      	movs	r3, #0
 8002c86:	fb00 f303 	mul.w	r3, r0, r3
 8002c8a:	4413      	add	r3, r2
 8002c8c:	4a43      	ldr	r2, [pc, #268]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x188>)
 8002c8e:	fba0 1202 	umull	r1, r2, r0, r2
 8002c92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c94:	460a      	mov	r2, r1
 8002c96:	62ba      	str	r2, [r7, #40]	; 0x28
 8002c98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c9a:	4413      	add	r3, r2
 8002c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	61bb      	str	r3, [r7, #24]
 8002ca4:	61fa      	str	r2, [r7, #28]
 8002ca6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002caa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002cae:	f7fd fadf 	bl	8000270 <__aeabi_uldivmod>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cba:	e053      	b.n	8002d64 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cbc:	4b35      	ldr	r3, [pc, #212]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	099b      	lsrs	r3, r3, #6
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	613b      	str	r3, [r7, #16]
 8002cc6:	617a      	str	r2, [r7, #20]
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002cce:	f04f 0b00 	mov.w	fp, #0
 8002cd2:	4652      	mov	r2, sl
 8002cd4:	465b      	mov	r3, fp
 8002cd6:	f04f 0000 	mov.w	r0, #0
 8002cda:	f04f 0100 	mov.w	r1, #0
 8002cde:	0159      	lsls	r1, r3, #5
 8002ce0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ce4:	0150      	lsls	r0, r2, #5
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	ebb2 080a 	subs.w	r8, r2, sl
 8002cee:	eb63 090b 	sbc.w	r9, r3, fp
 8002cf2:	f04f 0200 	mov.w	r2, #0
 8002cf6:	f04f 0300 	mov.w	r3, #0
 8002cfa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002cfe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d02:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d06:	ebb2 0408 	subs.w	r4, r2, r8
 8002d0a:	eb63 0509 	sbc.w	r5, r3, r9
 8002d0e:	f04f 0200 	mov.w	r2, #0
 8002d12:	f04f 0300 	mov.w	r3, #0
 8002d16:	00eb      	lsls	r3, r5, #3
 8002d18:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d1c:	00e2      	lsls	r2, r4, #3
 8002d1e:	4614      	mov	r4, r2
 8002d20:	461d      	mov	r5, r3
 8002d22:	eb14 030a 	adds.w	r3, r4, sl
 8002d26:	603b      	str	r3, [r7, #0]
 8002d28:	eb45 030b 	adc.w	r3, r5, fp
 8002d2c:	607b      	str	r3, [r7, #4]
 8002d2e:	f04f 0200 	mov.w	r2, #0
 8002d32:	f04f 0300 	mov.w	r3, #0
 8002d36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d3a:	4629      	mov	r1, r5
 8002d3c:	028b      	lsls	r3, r1, #10
 8002d3e:	4621      	mov	r1, r4
 8002d40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d44:	4621      	mov	r1, r4
 8002d46:	028a      	lsls	r2, r1, #10
 8002d48:	4610      	mov	r0, r2
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d4e:	2200      	movs	r2, #0
 8002d50:	60bb      	str	r3, [r7, #8]
 8002d52:	60fa      	str	r2, [r7, #12]
 8002d54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d58:	f7fd fa8a 	bl	8000270 <__aeabi_uldivmod>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	460b      	mov	r3, r1
 8002d60:	4613      	mov	r3, r2
 8002d62:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d64:	4b0b      	ldr	r3, [pc, #44]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	0c1b      	lsrs	r3, r3, #16
 8002d6a:	f003 0303 	and.w	r3, r3, #3
 8002d6e:	3301      	adds	r3, #1
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002d74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d7c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d7e:	e002      	b.n	8002d86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d80:	4b05      	ldr	r3, [pc, #20]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d82:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3740      	adds	r7, #64	; 0x40
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d92:	bf00      	nop
 8002d94:	40023800 	.word	0x40023800
 8002d98:	00f42400 	.word	0x00f42400
 8002d9c:	017d7840 	.word	0x017d7840

08002da0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002da4:	4b03      	ldr	r3, [pc, #12]	; (8002db4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002da6:	681b      	ldr	r3, [r3, #0]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	20000000 	.word	0x20000000

08002db8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8002dbe:	4b8d      	ldr	r3, [pc, #564]	; (8002ff4 <MX_LWIP_Init+0x23c>)
 8002dc0:	22c0      	movs	r2, #192	; 0xc0
 8002dc2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8002dc4:	4b8b      	ldr	r3, [pc, #556]	; (8002ff4 <MX_LWIP_Init+0x23c>)
 8002dc6:	22a8      	movs	r2, #168	; 0xa8
 8002dc8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8002dca:	4b8a      	ldr	r3, [pc, #552]	; (8002ff4 <MX_LWIP_Init+0x23c>)
 8002dcc:	2201      	movs	r2, #1
 8002dce:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 8002dd0:	4b88      	ldr	r3, [pc, #544]	; (8002ff4 <MX_LWIP_Init+0x23c>)
 8002dd2:	226f      	movs	r2, #111	; 0x6f
 8002dd4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8002dd6:	4b88      	ldr	r3, [pc, #544]	; (8002ff8 <MX_LWIP_Init+0x240>)
 8002dd8:	22ff      	movs	r2, #255	; 0xff
 8002dda:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8002ddc:	4b86      	ldr	r3, [pc, #536]	; (8002ff8 <MX_LWIP_Init+0x240>)
 8002dde:	22ff      	movs	r2, #255	; 0xff
 8002de0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8002de2:	4b85      	ldr	r3, [pc, #532]	; (8002ff8 <MX_LWIP_Init+0x240>)
 8002de4:	22ff      	movs	r2, #255	; 0xff
 8002de6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8002de8:	4b83      	ldr	r3, [pc, #524]	; (8002ff8 <MX_LWIP_Init+0x240>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8002dee:	4b83      	ldr	r3, [pc, #524]	; (8002ffc <MX_LWIP_Init+0x244>)
 8002df0:	22c0      	movs	r2, #192	; 0xc0
 8002df2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8002df4:	4b81      	ldr	r3, [pc, #516]	; (8002ffc <MX_LWIP_Init+0x244>)
 8002df6:	22a8      	movs	r2, #168	; 0xa8
 8002df8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8002dfa:	4b80      	ldr	r3, [pc, #512]	; (8002ffc <MX_LWIP_Init+0x244>)
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8002e00:	4b7e      	ldr	r3, [pc, #504]	; (8002ffc <MX_LWIP_Init+0x244>)
 8002e02:	2201      	movs	r2, #1
 8002e04:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8002e06:	f000 fcfd 	bl	8003804 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8002e0a:	4b7a      	ldr	r3, [pc, #488]	; (8002ff4 <MX_LWIP_Init+0x23c>)
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	061a      	lsls	r2, r3, #24
 8002e10:	4b78      	ldr	r3, [pc, #480]	; (8002ff4 <MX_LWIP_Init+0x23c>)
 8002e12:	785b      	ldrb	r3, [r3, #1]
 8002e14:	041b      	lsls	r3, r3, #16
 8002e16:	431a      	orrs	r2, r3
 8002e18:	4b76      	ldr	r3, [pc, #472]	; (8002ff4 <MX_LWIP_Init+0x23c>)
 8002e1a:	789b      	ldrb	r3, [r3, #2]
 8002e1c:	021b      	lsls	r3, r3, #8
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	4a74      	ldr	r2, [pc, #464]	; (8002ff4 <MX_LWIP_Init+0x23c>)
 8002e22:	78d2      	ldrb	r2, [r2, #3]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	061a      	lsls	r2, r3, #24
 8002e28:	4b72      	ldr	r3, [pc, #456]	; (8002ff4 <MX_LWIP_Init+0x23c>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	0619      	lsls	r1, r3, #24
 8002e2e:	4b71      	ldr	r3, [pc, #452]	; (8002ff4 <MX_LWIP_Init+0x23c>)
 8002e30:	785b      	ldrb	r3, [r3, #1]
 8002e32:	041b      	lsls	r3, r3, #16
 8002e34:	4319      	orrs	r1, r3
 8002e36:	4b6f      	ldr	r3, [pc, #444]	; (8002ff4 <MX_LWIP_Init+0x23c>)
 8002e38:	789b      	ldrb	r3, [r3, #2]
 8002e3a:	021b      	lsls	r3, r3, #8
 8002e3c:	430b      	orrs	r3, r1
 8002e3e:	496d      	ldr	r1, [pc, #436]	; (8002ff4 <MX_LWIP_Init+0x23c>)
 8002e40:	78c9      	ldrb	r1, [r1, #3]
 8002e42:	430b      	orrs	r3, r1
 8002e44:	021b      	lsls	r3, r3, #8
 8002e46:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	4b69      	ldr	r3, [pc, #420]	; (8002ff4 <MX_LWIP_Init+0x23c>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	0619      	lsls	r1, r3, #24
 8002e52:	4b68      	ldr	r3, [pc, #416]	; (8002ff4 <MX_LWIP_Init+0x23c>)
 8002e54:	785b      	ldrb	r3, [r3, #1]
 8002e56:	041b      	lsls	r3, r3, #16
 8002e58:	4319      	orrs	r1, r3
 8002e5a:	4b66      	ldr	r3, [pc, #408]	; (8002ff4 <MX_LWIP_Init+0x23c>)
 8002e5c:	789b      	ldrb	r3, [r3, #2]
 8002e5e:	021b      	lsls	r3, r3, #8
 8002e60:	430b      	orrs	r3, r1
 8002e62:	4964      	ldr	r1, [pc, #400]	; (8002ff4 <MX_LWIP_Init+0x23c>)
 8002e64:	78c9      	ldrb	r1, [r1, #3]
 8002e66:	430b      	orrs	r3, r1
 8002e68:	0a1b      	lsrs	r3, r3, #8
 8002e6a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	4b60      	ldr	r3, [pc, #384]	; (8002ff4 <MX_LWIP_Init+0x23c>)
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	0619      	lsls	r1, r3, #24
 8002e76:	4b5f      	ldr	r3, [pc, #380]	; (8002ff4 <MX_LWIP_Init+0x23c>)
 8002e78:	785b      	ldrb	r3, [r3, #1]
 8002e7a:	041b      	lsls	r3, r3, #16
 8002e7c:	4319      	orrs	r1, r3
 8002e7e:	4b5d      	ldr	r3, [pc, #372]	; (8002ff4 <MX_LWIP_Init+0x23c>)
 8002e80:	789b      	ldrb	r3, [r3, #2]
 8002e82:	021b      	lsls	r3, r3, #8
 8002e84:	430b      	orrs	r3, r1
 8002e86:	495b      	ldr	r1, [pc, #364]	; (8002ff4 <MX_LWIP_Init+0x23c>)
 8002e88:	78c9      	ldrb	r1, [r1, #3]
 8002e8a:	430b      	orrs	r3, r1
 8002e8c:	0e1b      	lsrs	r3, r3, #24
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	4a5b      	ldr	r2, [pc, #364]	; (8003000 <MX_LWIP_Init+0x248>)
 8002e92:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8002e94:	4b58      	ldr	r3, [pc, #352]	; (8002ff8 <MX_LWIP_Init+0x240>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	061a      	lsls	r2, r3, #24
 8002e9a:	4b57      	ldr	r3, [pc, #348]	; (8002ff8 <MX_LWIP_Init+0x240>)
 8002e9c:	785b      	ldrb	r3, [r3, #1]
 8002e9e:	041b      	lsls	r3, r3, #16
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	4b55      	ldr	r3, [pc, #340]	; (8002ff8 <MX_LWIP_Init+0x240>)
 8002ea4:	789b      	ldrb	r3, [r3, #2]
 8002ea6:	021b      	lsls	r3, r3, #8
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	4a53      	ldr	r2, [pc, #332]	; (8002ff8 <MX_LWIP_Init+0x240>)
 8002eac:	78d2      	ldrb	r2, [r2, #3]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	061a      	lsls	r2, r3, #24
 8002eb2:	4b51      	ldr	r3, [pc, #324]	; (8002ff8 <MX_LWIP_Init+0x240>)
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	0619      	lsls	r1, r3, #24
 8002eb8:	4b4f      	ldr	r3, [pc, #316]	; (8002ff8 <MX_LWIP_Init+0x240>)
 8002eba:	785b      	ldrb	r3, [r3, #1]
 8002ebc:	041b      	lsls	r3, r3, #16
 8002ebe:	4319      	orrs	r1, r3
 8002ec0:	4b4d      	ldr	r3, [pc, #308]	; (8002ff8 <MX_LWIP_Init+0x240>)
 8002ec2:	789b      	ldrb	r3, [r3, #2]
 8002ec4:	021b      	lsls	r3, r3, #8
 8002ec6:	430b      	orrs	r3, r1
 8002ec8:	494b      	ldr	r1, [pc, #300]	; (8002ff8 <MX_LWIP_Init+0x240>)
 8002eca:	78c9      	ldrb	r1, [r1, #3]
 8002ecc:	430b      	orrs	r3, r1
 8002ece:	021b      	lsls	r3, r3, #8
 8002ed0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	4b48      	ldr	r3, [pc, #288]	; (8002ff8 <MX_LWIP_Init+0x240>)
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	0619      	lsls	r1, r3, #24
 8002edc:	4b46      	ldr	r3, [pc, #280]	; (8002ff8 <MX_LWIP_Init+0x240>)
 8002ede:	785b      	ldrb	r3, [r3, #1]
 8002ee0:	041b      	lsls	r3, r3, #16
 8002ee2:	4319      	orrs	r1, r3
 8002ee4:	4b44      	ldr	r3, [pc, #272]	; (8002ff8 <MX_LWIP_Init+0x240>)
 8002ee6:	789b      	ldrb	r3, [r3, #2]
 8002ee8:	021b      	lsls	r3, r3, #8
 8002eea:	430b      	orrs	r3, r1
 8002eec:	4942      	ldr	r1, [pc, #264]	; (8002ff8 <MX_LWIP_Init+0x240>)
 8002eee:	78c9      	ldrb	r1, [r1, #3]
 8002ef0:	430b      	orrs	r3, r1
 8002ef2:	0a1b      	lsrs	r3, r3, #8
 8002ef4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	4b3f      	ldr	r3, [pc, #252]	; (8002ff8 <MX_LWIP_Init+0x240>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	0619      	lsls	r1, r3, #24
 8002f00:	4b3d      	ldr	r3, [pc, #244]	; (8002ff8 <MX_LWIP_Init+0x240>)
 8002f02:	785b      	ldrb	r3, [r3, #1]
 8002f04:	041b      	lsls	r3, r3, #16
 8002f06:	4319      	orrs	r1, r3
 8002f08:	4b3b      	ldr	r3, [pc, #236]	; (8002ff8 <MX_LWIP_Init+0x240>)
 8002f0a:	789b      	ldrb	r3, [r3, #2]
 8002f0c:	021b      	lsls	r3, r3, #8
 8002f0e:	430b      	orrs	r3, r1
 8002f10:	4939      	ldr	r1, [pc, #228]	; (8002ff8 <MX_LWIP_Init+0x240>)
 8002f12:	78c9      	ldrb	r1, [r1, #3]
 8002f14:	430b      	orrs	r3, r1
 8002f16:	0e1b      	lsrs	r3, r3, #24
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	4a3a      	ldr	r2, [pc, #232]	; (8003004 <MX_LWIP_Init+0x24c>)
 8002f1c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8002f1e:	4b37      	ldr	r3, [pc, #220]	; (8002ffc <MX_LWIP_Init+0x244>)
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	061a      	lsls	r2, r3, #24
 8002f24:	4b35      	ldr	r3, [pc, #212]	; (8002ffc <MX_LWIP_Init+0x244>)
 8002f26:	785b      	ldrb	r3, [r3, #1]
 8002f28:	041b      	lsls	r3, r3, #16
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	4b33      	ldr	r3, [pc, #204]	; (8002ffc <MX_LWIP_Init+0x244>)
 8002f2e:	789b      	ldrb	r3, [r3, #2]
 8002f30:	021b      	lsls	r3, r3, #8
 8002f32:	4313      	orrs	r3, r2
 8002f34:	4a31      	ldr	r2, [pc, #196]	; (8002ffc <MX_LWIP_Init+0x244>)
 8002f36:	78d2      	ldrb	r2, [r2, #3]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	061a      	lsls	r2, r3, #24
 8002f3c:	4b2f      	ldr	r3, [pc, #188]	; (8002ffc <MX_LWIP_Init+0x244>)
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	0619      	lsls	r1, r3, #24
 8002f42:	4b2e      	ldr	r3, [pc, #184]	; (8002ffc <MX_LWIP_Init+0x244>)
 8002f44:	785b      	ldrb	r3, [r3, #1]
 8002f46:	041b      	lsls	r3, r3, #16
 8002f48:	4319      	orrs	r1, r3
 8002f4a:	4b2c      	ldr	r3, [pc, #176]	; (8002ffc <MX_LWIP_Init+0x244>)
 8002f4c:	789b      	ldrb	r3, [r3, #2]
 8002f4e:	021b      	lsls	r3, r3, #8
 8002f50:	430b      	orrs	r3, r1
 8002f52:	492a      	ldr	r1, [pc, #168]	; (8002ffc <MX_LWIP_Init+0x244>)
 8002f54:	78c9      	ldrb	r1, [r1, #3]
 8002f56:	430b      	orrs	r3, r1
 8002f58:	021b      	lsls	r3, r3, #8
 8002f5a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	4b26      	ldr	r3, [pc, #152]	; (8002ffc <MX_LWIP_Init+0x244>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	0619      	lsls	r1, r3, #24
 8002f66:	4b25      	ldr	r3, [pc, #148]	; (8002ffc <MX_LWIP_Init+0x244>)
 8002f68:	785b      	ldrb	r3, [r3, #1]
 8002f6a:	041b      	lsls	r3, r3, #16
 8002f6c:	4319      	orrs	r1, r3
 8002f6e:	4b23      	ldr	r3, [pc, #140]	; (8002ffc <MX_LWIP_Init+0x244>)
 8002f70:	789b      	ldrb	r3, [r3, #2]
 8002f72:	021b      	lsls	r3, r3, #8
 8002f74:	430b      	orrs	r3, r1
 8002f76:	4921      	ldr	r1, [pc, #132]	; (8002ffc <MX_LWIP_Init+0x244>)
 8002f78:	78c9      	ldrb	r1, [r1, #3]
 8002f7a:	430b      	orrs	r3, r1
 8002f7c:	0a1b      	lsrs	r3, r3, #8
 8002f7e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002f82:	431a      	orrs	r2, r3
 8002f84:	4b1d      	ldr	r3, [pc, #116]	; (8002ffc <MX_LWIP_Init+0x244>)
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	0619      	lsls	r1, r3, #24
 8002f8a:	4b1c      	ldr	r3, [pc, #112]	; (8002ffc <MX_LWIP_Init+0x244>)
 8002f8c:	785b      	ldrb	r3, [r3, #1]
 8002f8e:	041b      	lsls	r3, r3, #16
 8002f90:	4319      	orrs	r1, r3
 8002f92:	4b1a      	ldr	r3, [pc, #104]	; (8002ffc <MX_LWIP_Init+0x244>)
 8002f94:	789b      	ldrb	r3, [r3, #2]
 8002f96:	021b      	lsls	r3, r3, #8
 8002f98:	430b      	orrs	r3, r1
 8002f9a:	4918      	ldr	r1, [pc, #96]	; (8002ffc <MX_LWIP_Init+0x244>)
 8002f9c:	78c9      	ldrb	r1, [r1, #3]
 8002f9e:	430b      	orrs	r3, r1
 8002fa0:	0e1b      	lsrs	r3, r3, #24
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	4a18      	ldr	r2, [pc, #96]	; (8003008 <MX_LWIP_Init+0x250>)
 8002fa6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8002fa8:	4b18      	ldr	r3, [pc, #96]	; (800300c <MX_LWIP_Init+0x254>)
 8002faa:	9302      	str	r3, [sp, #8]
 8002fac:	4b18      	ldr	r3, [pc, #96]	; (8003010 <MX_LWIP_Init+0x258>)
 8002fae:	9301      	str	r3, [sp, #4]
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	4b14      	ldr	r3, [pc, #80]	; (8003008 <MX_LWIP_Init+0x250>)
 8002fb6:	4a13      	ldr	r2, [pc, #76]	; (8003004 <MX_LWIP_Init+0x24c>)
 8002fb8:	4911      	ldr	r1, [pc, #68]	; (8003000 <MX_LWIP_Init+0x248>)
 8002fba:	4816      	ldr	r0, [pc, #88]	; (8003014 <MX_LWIP_Init+0x25c>)
 8002fbc:	f001 f90e 	bl	80041dc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8002fc0:	4814      	ldr	r0, [pc, #80]	; (8003014 <MX_LWIP_Init+0x25c>)
 8002fc2:	f001 fabd 	bl	8004540 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8002fc6:	4b13      	ldr	r3, [pc, #76]	; (8003014 <MX_LWIP_Init+0x25c>)
 8002fc8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002fcc:	089b      	lsrs	r3, r3, #2
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d003      	beq.n	8002fe0 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8002fd8:	480e      	ldr	r0, [pc, #56]	; (8003014 <MX_LWIP_Init+0x25c>)
 8002fda:	f001 fac1 	bl	8004560 <netif_set_up>
 8002fde:	e002      	b.n	8002fe6 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8002fe0:	480c      	ldr	r0, [pc, #48]	; (8003014 <MX_LWIP_Init+0x25c>)
 8002fe2:	f001 fb29 	bl	8004638 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8002fe6:	490c      	ldr	r1, [pc, #48]	; (8003018 <MX_LWIP_Init+0x260>)
 8002fe8:	480a      	ldr	r0, [pc, #40]	; (8003014 <MX_LWIP_Init+0x25c>)
 8002fea:	f001 fbbb 	bl	8004764 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8002fee:	bf00      	nop
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	200000f8 	.word	0x200000f8
 8002ff8:	200000fc 	.word	0x200000fc
 8002ffc:	20000100 	.word	0x20000100
 8003000:	200000ec 	.word	0x200000ec
 8003004:	200000f0 	.word	0x200000f0
 8003008:	200000f4 	.word	0x200000f4
 800300c:	0800d021 	.word	0x0800d021
 8003010:	08003329 	.word	0x08003329
 8003014:	200000b8 	.word	0x200000b8
 8003018:	0800306d 	.word	0x0800306d

0800301c <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8003024:	f7fd febc 	bl	8000da0 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	4b08      	ldr	r3, [pc, #32]	; (800304c <Ethernet_Link_Periodic_Handle+0x30>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b63      	cmp	r3, #99	; 0x63
 8003032:	d907      	bls.n	8003044 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8003034:	f7fd feb4 	bl	8000da0 <HAL_GetTick>
 8003038:	4603      	mov	r3, r0
 800303a:	4a04      	ldr	r2, [pc, #16]	; (800304c <Ethernet_Link_Periodic_Handle+0x30>)
 800303c:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 fab6 	bl	80035b0 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8003044:	bf00      	nop
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	200000b4 	.word	0x200000b4

08003050 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8003054:	4804      	ldr	r0, [pc, #16]	; (8003068 <MX_LWIP_Process+0x18>)
 8003056:	f000 f947 	bl	80032e8 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800305a:	f007 fbf5 	bl	800a848 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 800305e:	4802      	ldr	r0, [pc, #8]	; (8003068 <MX_LWIP_Process+0x18>)
 8003060:	f7ff ffdc 	bl	800301c <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8003064:	bf00      	nop
 8003066:	bd80      	pop	{r7, pc}
 8003068:	200000b8 	.word	0x200000b8

0800306c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8003088:	2300      	movs	r3, #0
 800308a:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800308c:	4b40      	ldr	r3, [pc, #256]	; (8003190 <low_level_init+0x110>)
 800308e:	4a41      	ldr	r2, [pc, #260]	; (8003194 <low_level_init+0x114>)
 8003090:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8003092:	2300      	movs	r3, #0
 8003094:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8003096:	2380      	movs	r3, #128	; 0x80
 8003098:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800309a:	23e1      	movs	r3, #225	; 0xe1
 800309c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0xFB;
 800309e:	23fb      	movs	r3, #251	; 0xfb
 80030a0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x2A;
 80030a2:	232a      	movs	r3, #42	; 0x2a
 80030a4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x49;
 80030a6:	2349      	movs	r3, #73	; 0x49
 80030a8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80030aa:	4a39      	ldr	r2, [pc, #228]	; (8003190 <low_level_init+0x110>)
 80030ac:	f107 0308 	add.w	r3, r7, #8
 80030b0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80030b2:	4b37      	ldr	r3, [pc, #220]	; (8003190 <low_level_init+0x110>)
 80030b4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80030b8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80030ba:	4b35      	ldr	r3, [pc, #212]	; (8003190 <low_level_init+0x110>)
 80030bc:	4a36      	ldr	r2, [pc, #216]	; (8003198 <low_level_init+0x118>)
 80030be:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80030c0:	4b33      	ldr	r3, [pc, #204]	; (8003190 <low_level_init+0x110>)
 80030c2:	4a36      	ldr	r2, [pc, #216]	; (800319c <low_level_init+0x11c>)
 80030c4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80030c6:	4b32      	ldr	r3, [pc, #200]	; (8003190 <low_level_init+0x110>)
 80030c8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80030cc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80030ce:	4830      	ldr	r0, [pc, #192]	; (8003190 <low_level_init+0x110>)
 80030d0:	f7fd ff7c 	bl	8000fcc <HAL_ETH_Init>
 80030d4:	4603      	mov	r3, r0
 80030d6:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80030d8:	2238      	movs	r2, #56	; 0x38
 80030da:	2100      	movs	r1, #0
 80030dc:	4830      	ldr	r0, [pc, #192]	; (80031a0 <low_level_init+0x120>)
 80030de:	f00a f8b7 	bl	800d250 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80030e2:	4b2f      	ldr	r3, [pc, #188]	; (80031a0 <low_level_init+0x120>)
 80030e4:	2221      	movs	r2, #33	; 0x21
 80030e6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80030e8:	4b2d      	ldr	r3, [pc, #180]	; (80031a0 <low_level_init+0x120>)
 80030ea:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80030ee:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80030f0:	4b2b      	ldr	r3, [pc, #172]	; (80031a0 <low_level_init+0x120>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80030f6:	482b      	ldr	r0, [pc, #172]	; (80031a4 <low_level_init+0x124>)
 80030f8:	f000 ff38 	bl	8003f6c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2206      	movs	r2, #6
 8003100:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003104:	4b22      	ldr	r3, [pc, #136]	; (8003190 <low_level_init+0x110>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	781a      	ldrb	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003110:	4b1f      	ldr	r3, [pc, #124]	; (8003190 <low_level_init+0x110>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	785a      	ldrb	r2, [r3, #1]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800311c:	4b1c      	ldr	r3, [pc, #112]	; (8003190 <low_level_init+0x110>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	789a      	ldrb	r2, [r3, #2]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003128:	4b19      	ldr	r3, [pc, #100]	; (8003190 <low_level_init+0x110>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	78da      	ldrb	r2, [r3, #3]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003134:	4b16      	ldr	r3, [pc, #88]	; (8003190 <low_level_init+0x110>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	791a      	ldrb	r2, [r3, #4]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003140:	4b13      	ldr	r3, [pc, #76]	; (8003190 <low_level_init+0x110>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	795a      	ldrb	r2, [r3, #5]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003152:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800315a:	f043 030a 	orr.w	r3, r3, #10
 800315e:	b2da      	uxtb	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 8003166:	4910      	ldr	r1, [pc, #64]	; (80031a8 <low_level_init+0x128>)
 8003168:	4810      	ldr	r0, [pc, #64]	; (80031ac <low_level_init+0x12c>)
 800316a:	f7fd fc52 	bl	8000a12 <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 800316e:	480f      	ldr	r0, [pc, #60]	; (80031ac <low_level_init+0x12c>)
 8003170:	f7fd fc81 	bl	8000a76 <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 8003174:	7bfb      	ldrb	r3, [r7, #15]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d103      	bne.n	8003182 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 fa18 	bl	80035b0 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003180:	e001      	b.n	8003186 <low_level_init+0x106>
    Error_Handler();
 8003182:	f7fd fae9 	bl	8000758 <Error_Handler>
}
 8003186:	bf00      	nop
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	20004bd0 	.word	0x20004bd0
 8003194:	40028000 	.word	0x40028000
 8003198:	20004b30 	.word	0x20004b30
 800319c:	20004a90 	.word	0x20004a90
 80031a0:	20004c80 	.word	0x20004c80
 80031a4:	08010d08 	.word	0x08010d08
 80031a8:	2000000c 	.word	0x2000000c
 80031ac:	20004cb8 	.word	0x20004cb8

080031b0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b092      	sub	sp, #72	; 0x48
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80031ba:	2300      	movs	r3, #0
 80031bc:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80031be:	2300      	movs	r3, #0
 80031c0:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80031c2:	2300      	movs	r3, #0
 80031c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80031c8:	f107 030c 	add.w	r3, r7, #12
 80031cc:	2230      	movs	r2, #48	; 0x30
 80031ce:	2100      	movs	r1, #0
 80031d0:	4618      	mov	r0, r3
 80031d2:	f00a f83d 	bl	800d250 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80031d6:	f107 030c 	add.w	r3, r7, #12
 80031da:	2230      	movs	r2, #48	; 0x30
 80031dc:	2100      	movs	r1, #0
 80031de:	4618      	mov	r0, r3
 80031e0:	f00a f836 	bl	800d250 <memset>

  for(q = p; q != NULL; q = q->next)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	643b      	str	r3, [r7, #64]	; 0x40
 80031e8:	e045      	b.n	8003276 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80031ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031ec:	2b03      	cmp	r3, #3
 80031ee:	d902      	bls.n	80031f6 <low_level_output+0x46>
      return ERR_IF;
 80031f0:	f06f 030b 	mvn.w	r3, #11
 80031f4:	e055      	b.n	80032a2 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 80031f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031f8:	6859      	ldr	r1, [r3, #4]
 80031fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031fc:	4613      	mov	r3, r2
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	4413      	add	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	3348      	adds	r3, #72	; 0x48
 8003206:	443b      	add	r3, r7
 8003208:	3b3c      	subs	r3, #60	; 0x3c
 800320a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800320c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800320e:	895b      	ldrh	r3, [r3, #10]
 8003210:	4619      	mov	r1, r3
 8003212:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003214:	4613      	mov	r3, r2
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	4413      	add	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	3348      	adds	r3, #72	; 0x48
 800321e:	443b      	add	r3, r7
 8003220:	3b38      	subs	r3, #56	; 0x38
 8003222:	6019      	str	r1, [r3, #0]

    if(i>0)
 8003224:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003226:	2b00      	cmp	r3, #0
 8003228:	d011      	beq.n	800324e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800322a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800322c:	1e5a      	subs	r2, r3, #1
 800322e:	f107 000c 	add.w	r0, r7, #12
 8003232:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003234:	460b      	mov	r3, r1
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	440b      	add	r3, r1
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	18c1      	adds	r1, r0, r3
 800323e:	4613      	mov	r3, r2
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	4413      	add	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	3348      	adds	r3, #72	; 0x48
 8003248:	443b      	add	r3, r7
 800324a:	3b34      	subs	r3, #52	; 0x34
 800324c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800324e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d109      	bne.n	800326a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8003256:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003258:	4613      	mov	r3, r2
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	4413      	add	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	3348      	adds	r3, #72	; 0x48
 8003262:	443b      	add	r3, r7
 8003264:	3b34      	subs	r3, #52	; 0x34
 8003266:	2200      	movs	r2, #0
 8003268:	601a      	str	r2, [r3, #0]
    }

    i++;
 800326a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800326c:	3301      	adds	r3, #1
 800326e:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8003270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	643b      	str	r3, [r7, #64]	; 0x40
 8003276:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1b6      	bne.n	80031ea <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	891b      	ldrh	r3, [r3, #8]
 8003280:	461a      	mov	r2, r3
 8003282:	4b0a      	ldr	r3, [pc, #40]	; (80032ac <low_level_output+0xfc>)
 8003284:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8003286:	4a09      	ldr	r2, [pc, #36]	; (80032ac <low_level_output+0xfc>)
 8003288:	f107 030c 	add.w	r3, r7, #12
 800328c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800328e:	4a07      	ldr	r2, [pc, #28]	; (80032ac <low_level_output+0xfc>)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8003294:	2214      	movs	r2, #20
 8003296:	4905      	ldr	r1, [pc, #20]	; (80032ac <low_level_output+0xfc>)
 8003298:	4805      	ldr	r0, [pc, #20]	; (80032b0 <low_level_output+0x100>)
 800329a:	f7fd ffcd 	bl	8001238 <HAL_ETH_Transmit>

  return errval;
 800329e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3748      	adds	r7, #72	; 0x48
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	20004c80 	.word	0x20004c80
 80032b0:	20004bd0 	.word	0x20004bd0

080032b4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80032bc:	2300      	movs	r3, #0
 80032be:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80032c0:	4b07      	ldr	r3, [pc, #28]	; (80032e0 <low_level_input+0x2c>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d105      	bne.n	80032d4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80032c8:	f107 030c 	add.w	r3, r7, #12
 80032cc:	4619      	mov	r1, r3
 80032ce:	4805      	ldr	r0, [pc, #20]	; (80032e4 <low_level_input+0x30>)
 80032d0:	f7fe f846 	bl	8001360 <HAL_ETH_ReadData>
  }

  return p;
 80032d4:	68fb      	ldr	r3, [r7, #12]
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	20004a8c 	.word	0x20004a8c
 80032e4:	20004bd0 	.word	0x20004bd0

080032e8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80032f0:	2300      	movs	r3, #0
 80032f2:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f7ff ffdd 	bl	80032b4 <low_level_input>
 80032fa:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00a      	beq.n	8003318 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	6879      	ldr	r1, [r7, #4]
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	4798      	blx	r3
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d002      	beq.n	8003318 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f001 fda6 	bl	8004e64 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1ea      	bne.n	80032f4 <ethernetif_input+0xc>
}
 800331e:	bf00      	nop
 8003320:	bf00      	nop
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d106      	bne.n	8003344 <ethernetif_init+0x1c>
 8003336:	4b0e      	ldr	r3, [pc, #56]	; (8003370 <ethernetif_init+0x48>)
 8003338:	f240 126b 	movw	r2, #363	; 0x16b
 800333c:	490d      	ldr	r1, [pc, #52]	; (8003374 <ethernetif_init+0x4c>)
 800333e:	480e      	ldr	r0, [pc, #56]	; (8003378 <ethernetif_init+0x50>)
 8003340:	f009 ff8e 	bl	800d260 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2273      	movs	r2, #115	; 0x73
 8003348:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2274      	movs	r2, #116	; 0x74
 8003350:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a09      	ldr	r2, [pc, #36]	; (800337c <ethernetif_init+0x54>)
 8003358:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a08      	ldr	r2, [pc, #32]	; (8003380 <ethernetif_init+0x58>)
 800335e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f7ff fe8d 	bl	8003080 <low_level_init>

  return ERR_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3708      	adds	r7, #8
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	0800e318 	.word	0x0800e318
 8003374:	0800e334 	.word	0x0800e334
 8003378:	0800e344 	.word	0x0800e344
 800337c:	0800b4d9 	.word	0x0800b4d9
 8003380:	080031b1 	.word	0x080031b1

08003384 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8003390:	68f9      	ldr	r1, [r7, #12]
 8003392:	4807      	ldr	r0, [pc, #28]	; (80033b0 <pbuf_free_custom+0x2c>)
 8003394:	f000 fecc 	bl	8004130 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8003398:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <pbuf_free_custom+0x30>)
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d102      	bne.n	80033a6 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80033a0:	4b04      	ldr	r3, [pc, #16]	; (80033b4 <pbuf_free_custom+0x30>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	701a      	strb	r2, [r3, #0]
  }
}
 80033a6:	bf00      	nop
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	08010d08 	.word	0x08010d08
 80033b4:	20004a8c 	.word	0x20004a8c

080033b8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80033bc:	f7fd fcf0 	bl	8000da0 <HAL_GetTick>
 80033c0:	4603      	mov	r3, r0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	bd80      	pop	{r7, pc}
	...

080033c8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b08e      	sub	sp, #56	; 0x38
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033d4:	2200      	movs	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	605a      	str	r2, [r3, #4]
 80033da:	609a      	str	r2, [r3, #8]
 80033dc:	60da      	str	r2, [r3, #12]
 80033de:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a46      	ldr	r2, [pc, #280]	; (8003500 <HAL_ETH_MspInit+0x138>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	f040 8085 	bne.w	80034f6 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80033ec:	2300      	movs	r3, #0
 80033ee:	623b      	str	r3, [r7, #32]
 80033f0:	4b44      	ldr	r3, [pc, #272]	; (8003504 <HAL_ETH_MspInit+0x13c>)
 80033f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f4:	4a43      	ldr	r2, [pc, #268]	; (8003504 <HAL_ETH_MspInit+0x13c>)
 80033f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033fa:	6313      	str	r3, [r2, #48]	; 0x30
 80033fc:	4b41      	ldr	r3, [pc, #260]	; (8003504 <HAL_ETH_MspInit+0x13c>)
 80033fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003404:	623b      	str	r3, [r7, #32]
 8003406:	6a3b      	ldr	r3, [r7, #32]
 8003408:	2300      	movs	r3, #0
 800340a:	61fb      	str	r3, [r7, #28]
 800340c:	4b3d      	ldr	r3, [pc, #244]	; (8003504 <HAL_ETH_MspInit+0x13c>)
 800340e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003410:	4a3c      	ldr	r2, [pc, #240]	; (8003504 <HAL_ETH_MspInit+0x13c>)
 8003412:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003416:	6313      	str	r3, [r2, #48]	; 0x30
 8003418:	4b3a      	ldr	r3, [pc, #232]	; (8003504 <HAL_ETH_MspInit+0x13c>)
 800341a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003420:	61fb      	str	r3, [r7, #28]
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	2300      	movs	r3, #0
 8003426:	61bb      	str	r3, [r7, #24]
 8003428:	4b36      	ldr	r3, [pc, #216]	; (8003504 <HAL_ETH_MspInit+0x13c>)
 800342a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342c:	4a35      	ldr	r2, [pc, #212]	; (8003504 <HAL_ETH_MspInit+0x13c>)
 800342e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003432:	6313      	str	r3, [r2, #48]	; 0x30
 8003434:	4b33      	ldr	r3, [pc, #204]	; (8003504 <HAL_ETH_MspInit+0x13c>)
 8003436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003438:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800343c:	61bb      	str	r3, [r7, #24]
 800343e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003440:	2300      	movs	r3, #0
 8003442:	617b      	str	r3, [r7, #20]
 8003444:	4b2f      	ldr	r3, [pc, #188]	; (8003504 <HAL_ETH_MspInit+0x13c>)
 8003446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003448:	4a2e      	ldr	r2, [pc, #184]	; (8003504 <HAL_ETH_MspInit+0x13c>)
 800344a:	f043 0304 	orr.w	r3, r3, #4
 800344e:	6313      	str	r3, [r2, #48]	; 0x30
 8003450:	4b2c      	ldr	r3, [pc, #176]	; (8003504 <HAL_ETH_MspInit+0x13c>)
 8003452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003454:	f003 0304 	and.w	r3, r3, #4
 8003458:	617b      	str	r3, [r7, #20]
 800345a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800345c:	2300      	movs	r3, #0
 800345e:	613b      	str	r3, [r7, #16]
 8003460:	4b28      	ldr	r3, [pc, #160]	; (8003504 <HAL_ETH_MspInit+0x13c>)
 8003462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003464:	4a27      	ldr	r2, [pc, #156]	; (8003504 <HAL_ETH_MspInit+0x13c>)
 8003466:	f043 0301 	orr.w	r3, r3, #1
 800346a:	6313      	str	r3, [r2, #48]	; 0x30
 800346c:	4b25      	ldr	r3, [pc, #148]	; (8003504 <HAL_ETH_MspInit+0x13c>)
 800346e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	613b      	str	r3, [r7, #16]
 8003476:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003478:	2300      	movs	r3, #0
 800347a:	60fb      	str	r3, [r7, #12]
 800347c:	4b21      	ldr	r3, [pc, #132]	; (8003504 <HAL_ETH_MspInit+0x13c>)
 800347e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003480:	4a20      	ldr	r2, [pc, #128]	; (8003504 <HAL_ETH_MspInit+0x13c>)
 8003482:	f043 0302 	orr.w	r3, r3, #2
 8003486:	6313      	str	r3, [r2, #48]	; 0x30
 8003488:	4b1e      	ldr	r3, [pc, #120]	; (8003504 <HAL_ETH_MspInit+0x13c>)
 800348a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003494:	2332      	movs	r3, #50	; 0x32
 8003496:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003498:	2302      	movs	r3, #2
 800349a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349c:	2300      	movs	r3, #0
 800349e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034a0:	2303      	movs	r3, #3
 80034a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80034a4:	230b      	movs	r3, #11
 80034a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034ac:	4619      	mov	r1, r3
 80034ae:	4816      	ldr	r0, [pc, #88]	; (8003508 <HAL_ETH_MspInit+0x140>)
 80034b0:	f7fe fe82 	bl	80021b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80034b4:	2386      	movs	r3, #134	; 0x86
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b8:	2302      	movs	r3, #2
 80034ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034bc:	2300      	movs	r3, #0
 80034be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034c0:	2303      	movs	r3, #3
 80034c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80034c4:	230b      	movs	r3, #11
 80034c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034cc:	4619      	mov	r1, r3
 80034ce:	480f      	ldr	r0, [pc, #60]	; (800350c <HAL_ETH_MspInit+0x144>)
 80034d0:	f7fe fe72 	bl	80021b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80034d4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80034d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034da:	2302      	movs	r3, #2
 80034dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034de:	2300      	movs	r3, #0
 80034e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034e2:	2303      	movs	r3, #3
 80034e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80034e6:	230b      	movs	r3, #11
 80034e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034ee:	4619      	mov	r1, r3
 80034f0:	4807      	ldr	r0, [pc, #28]	; (8003510 <HAL_ETH_MspInit+0x148>)
 80034f2:	f7fe fe61 	bl	80021b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80034f6:	bf00      	nop
 80034f8:	3738      	adds	r7, #56	; 0x38
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	40028000 	.word	0x40028000
 8003504:	40023800 	.word	0x40023800
 8003508:	40020800 	.word	0x40020800
 800350c:	40020000 	.word	0x40020000
 8003510:	40020400 	.word	0x40020400

08003514 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8003518:	4802      	ldr	r0, [pc, #8]	; (8003524 <ETH_PHY_IO_Init+0x10>)
 800351a:	f7fe f9f1 	bl	8001900 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	bd80      	pop	{r7, pc}
 8003524:	20004bd0 	.word	0x20004bd0

08003528 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  return 0;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	68f9      	ldr	r1, [r7, #12]
 800354a:	4807      	ldr	r0, [pc, #28]	; (8003568 <ETH_PHY_IO_ReadReg+0x30>)
 800354c:	f7fe f840 	bl	80015d0 <HAL_ETH_ReadPHYRegister>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d002      	beq.n	800355c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8003556:	f04f 33ff 	mov.w	r3, #4294967295
 800355a:	e000      	b.n	800355e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	20004bd0 	.word	0x20004bd0

0800356c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	68f9      	ldr	r1, [r7, #12]
 800357e:	4807      	ldr	r0, [pc, #28]	; (800359c <ETH_PHY_IO_WriteReg+0x30>)
 8003580:	f7fe f871 	bl	8001666 <HAL_ETH_WritePHYRegister>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d002      	beq.n	8003590 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800358a:	f04f 33ff 	mov.w	r3, #4294967295
 800358e:	e000      	b.n	8003592 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	20004bd0 	.word	0x20004bd0

080035a0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80035a4:	f7fd fbfc 	bl	8000da0 <HAL_GetTick>
 80035a8:	4603      	mov	r3, r0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	bd80      	pop	{r7, pc}
	...

080035b0 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b0a0      	sub	sp, #128	; 0x80
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80035b8:	f107 030c 	add.w	r3, r7, #12
 80035bc:	2264      	movs	r2, #100	; 0x64
 80035be:	2100      	movs	r1, #0
 80035c0:	4618      	mov	r0, r3
 80035c2:	f009 fe45 	bl	800d250 <memset>
  int32_t PHYLinkState = 0;
 80035c6:	2300      	movs	r3, #0
 80035c8:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80035ca:	2300      	movs	r3, #0
 80035cc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80035ce:	2300      	movs	r3, #0
 80035d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80035d2:	2300      	movs	r3, #0
 80035d4:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = DP83848_GetLinkState(&DP83848);
 80035d6:	483a      	ldr	r0, [pc, #232]	; (80036c0 <ethernet_link_check_state+0x110>)
 80035d8:	f7fd faf5 	bl	8000bc6 <DP83848_GetLinkState>
 80035dc:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80035e4:	089b      	lsrs	r3, r3, #2
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00c      	beq.n	800360a <ethernet_link_check_state+0x5a>
 80035f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	dc09      	bgt.n	800360a <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 80035f6:	4833      	ldr	r0, [pc, #204]	; (80036c4 <ethernet_link_check_state+0x114>)
 80035f8:	f7fd fdc5 	bl	8001186 <HAL_ETH_Stop>
    netif_set_down(netif);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f001 f81b 	bl	8004638 <netif_set_down>
    netif_set_link_down(netif);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f001 f87e 	bl	8004704 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8003608:	e055      	b.n	80036b6 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	d14e      	bne.n	80036b6 <ethernet_link_check_state+0x106>
 8003618:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800361a:	2b01      	cmp	r3, #1
 800361c:	dd4b      	ble.n	80036b6 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800361e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003620:	3b02      	subs	r3, #2
 8003622:	2b03      	cmp	r3, #3
 8003624:	d82a      	bhi.n	800367c <ethernet_link_check_state+0xcc>
 8003626:	a201      	add	r2, pc, #4	; (adr r2, 800362c <ethernet_link_check_state+0x7c>)
 8003628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800362c:	0800363d 	.word	0x0800363d
 8003630:	0800364f 	.word	0x0800364f
 8003634:	0800365f 	.word	0x0800365f
 8003638:	0800366f 	.word	0x0800366f
      duplex = ETH_FULLDUPLEX_MODE;
 800363c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003640:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8003642:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003646:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8003648:	2301      	movs	r3, #1
 800364a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800364c:	e017      	b.n	800367e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800364e:	2300      	movs	r3, #0
 8003650:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8003652:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003656:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8003658:	2301      	movs	r3, #1
 800365a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800365c:	e00f      	b.n	800367e <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800365e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003662:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8003664:	2300      	movs	r3, #0
 8003666:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8003668:	2301      	movs	r3, #1
 800366a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800366c:	e007      	b.n	800367e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800366e:	2300      	movs	r3, #0
 8003670:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8003672:	2300      	movs	r3, #0
 8003674:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8003676:	2301      	movs	r3, #1
 8003678:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800367a:	e000      	b.n	800367e <ethernet_link_check_state+0xce>
      break;
 800367c:	bf00      	nop
    if(linkchanged)
 800367e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003680:	2b00      	cmp	r3, #0
 8003682:	d018      	beq.n	80036b6 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8003684:	f107 030c 	add.w	r3, r7, #12
 8003688:	4619      	mov	r1, r3
 800368a:	480e      	ldr	r0, [pc, #56]	; (80036c4 <ethernet_link_check_state+0x114>)
 800368c:	f7fe f834 	bl	80016f8 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8003690:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003692:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8003694:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003696:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8003698:	f107 030c 	add.w	r3, r7, #12
 800369c:	4619      	mov	r1, r3
 800369e:	4809      	ldr	r0, [pc, #36]	; (80036c4 <ethernet_link_check_state+0x114>)
 80036a0:	f7fe f914 	bl	80018cc <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80036a4:	4807      	ldr	r0, [pc, #28]	; (80036c4 <ethernet_link_check_state+0x114>)
 80036a6:	f7fd fd0f 	bl	80010c8 <HAL_ETH_Start>
      netif_set_up(netif);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 ff58 	bl	8004560 <netif_set_up>
      netif_set_link_up(netif);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 fff3 	bl	800469c <netif_set_link_up>
}
 80036b6:	bf00      	nop
 80036b8:	3780      	adds	r7, #128	; 0x80
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	20004cb8 	.word	0x20004cb8
 80036c4:	20004bd0 	.word	0x20004bd0

080036c8 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af02      	add	r7, sp, #8
 80036ce:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80036d0:	4812      	ldr	r0, [pc, #72]	; (800371c <HAL_ETH_RxAllocateCallback+0x54>)
 80036d2:	f000 fcbf 	bl	8004054 <memp_malloc_pool>
 80036d6:	60f8      	str	r0, [r7, #12]
  if (p)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d014      	beq.n	8003708 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f103 0220 	add.w	r2, r3, #32
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4a0d      	ldr	r2, [pc, #52]	; (8003720 <HAL_ETH_RxAllocateCallback+0x58>)
 80036ec:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80036f6:	9201      	str	r2, [sp, #4]
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2241      	movs	r2, #65	; 0x41
 80036fe:	2100      	movs	r1, #0
 8003700:	2000      	movs	r0, #0
 8003702:	f001 f9f5 	bl	8004af0 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8003706:	e005      	b.n	8003714 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8003708:	4b06      	ldr	r3, [pc, #24]	; (8003724 <HAL_ETH_RxAllocateCallback+0x5c>)
 800370a:	2201      	movs	r2, #1
 800370c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]
}
 8003714:	bf00      	nop
 8003716:	3710      	adds	r7, #16
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	08010d08 	.word	0x08010d08
 8003720:	08003385 	.word	0x08003385
 8003724:	20004a8c 	.word	0x20004a8c

08003728 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8003728:	b480      	push	{r7}
 800372a:	b089      	sub	sp, #36	; 0x24
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
 8003734:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800373e:	2300      	movs	r3, #0
 8003740:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	3b20      	subs	r3, #32
 8003746:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	2200      	movs	r2, #0
 800374c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	2200      	movs	r2, #0
 8003752:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	887a      	ldrh	r2, [r7, #2]
 8003758:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d103      	bne.n	800376a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	69fa      	ldr	r2, [r7, #28]
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	e003      	b.n	8003772 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	69fa      	ldr	r2, [r7, #28]
 8003770:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	69fa      	ldr	r2, [r7, #28]
 8003776:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	61fb      	str	r3, [r7, #28]
 800377e:	e009      	b.n	8003794 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	891a      	ldrh	r2, [r3, #8]
 8003784:	887b      	ldrh	r3, [r7, #2]
 8003786:	4413      	add	r3, r2
 8003788:	b29a      	uxth	r2, r3
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	61fb      	str	r3, [r7, #28]
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1f2      	bne.n	8003780 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800379a:	bf00      	nop
 800379c:	bf00      	nop
 800379e:	3724      	adds	r7, #36	; 0x24
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	4603      	mov	r3, r0
 80037b0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80037b2:	88fb      	ldrh	r3, [r7, #6]
 80037b4:	021b      	lsls	r3, r3, #8
 80037b6:	b21a      	sxth	r2, r3
 80037b8:	88fb      	ldrh	r3, [r7, #6]
 80037ba:	0a1b      	lsrs	r3, r3, #8
 80037bc:	b29b      	uxth	r3, r3
 80037be:	b21b      	sxth	r3, r3
 80037c0:	4313      	orrs	r3, r2
 80037c2:	b21b      	sxth	r3, r3
 80037c4:	b29b      	uxth	r3, r3
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr

080037d2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80037d2:	b480      	push	{r7}
 80037d4:	b083      	sub	sp, #12
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	061a      	lsls	r2, r3, #24
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	021b      	lsls	r3, r3, #8
 80037e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80037e6:	431a      	orrs	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	0a1b      	lsrs	r3, r3, #8
 80037ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80037f0:	431a      	orrs	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	0e1b      	lsrs	r3, r3, #24
 80037f6:	4313      	orrs	r3, r2
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800380a:	2300      	movs	r3, #0
 800380c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800380e:	f000 f8d5 	bl	80039bc <mem_init>
  memp_init();
 8003812:	f000 fbdb 	bl	8003fcc <memp_init>
  pbuf_init();
  netif_init();
 8003816:	f000 fcd9 	bl	80041cc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800381a:	f007 f857 	bl	800a8cc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800381e:	f001 fdaf 	bl	8005380 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8003822:	f006 ffc9 	bl	800a7b8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8003826:	bf00      	nop
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
	...

08003830 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	4603      	mov	r3, r0
 8003838:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800383a:	4b05      	ldr	r3, [pc, #20]	; (8003850 <ptr_to_mem+0x20>)
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	88fb      	ldrh	r3, [r7, #6]
 8003840:	4413      	add	r3, r2
}
 8003842:	4618      	mov	r0, r3
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	20005344 	.word	0x20005344

08003854 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800385c:	4b05      	ldr	r3, [pc, #20]	; (8003874 <mem_to_ptr+0x20>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	b29b      	uxth	r3, r3
}
 8003866:	4618      	mov	r0, r3
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	20005344 	.word	0x20005344

08003878 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8003878:	b590      	push	{r4, r7, lr}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8003880:	4b45      	ldr	r3, [pc, #276]	; (8003998 <plug_holes+0x120>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	429a      	cmp	r2, r3
 8003888:	d206      	bcs.n	8003898 <plug_holes+0x20>
 800388a:	4b44      	ldr	r3, [pc, #272]	; (800399c <plug_holes+0x124>)
 800388c:	f240 12df 	movw	r2, #479	; 0x1df
 8003890:	4943      	ldr	r1, [pc, #268]	; (80039a0 <plug_holes+0x128>)
 8003892:	4844      	ldr	r0, [pc, #272]	; (80039a4 <plug_holes+0x12c>)
 8003894:	f009 fce4 	bl	800d260 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8003898:	4b43      	ldr	r3, [pc, #268]	; (80039a8 <plug_holes+0x130>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d306      	bcc.n	80038b0 <plug_holes+0x38>
 80038a2:	4b3e      	ldr	r3, [pc, #248]	; (800399c <plug_holes+0x124>)
 80038a4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80038a8:	4940      	ldr	r1, [pc, #256]	; (80039ac <plug_holes+0x134>)
 80038aa:	483e      	ldr	r0, [pc, #248]	; (80039a4 <plug_holes+0x12c>)
 80038ac:	f009 fcd8 	bl	800d260 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	791b      	ldrb	r3, [r3, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d006      	beq.n	80038c6 <plug_holes+0x4e>
 80038b8:	4b38      	ldr	r3, [pc, #224]	; (800399c <plug_holes+0x124>)
 80038ba:	f240 12e1 	movw	r2, #481	; 0x1e1
 80038be:	493c      	ldr	r1, [pc, #240]	; (80039b0 <plug_holes+0x138>)
 80038c0:	4838      	ldr	r0, [pc, #224]	; (80039a4 <plug_holes+0x12c>)
 80038c2:	f009 fccd 	bl	800d260 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	881b      	ldrh	r3, [r3, #0]
 80038ca:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80038ce:	d906      	bls.n	80038de <plug_holes+0x66>
 80038d0:	4b32      	ldr	r3, [pc, #200]	; (800399c <plug_holes+0x124>)
 80038d2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80038d6:	4937      	ldr	r1, [pc, #220]	; (80039b4 <plug_holes+0x13c>)
 80038d8:	4832      	ldr	r0, [pc, #200]	; (80039a4 <plug_holes+0x12c>)
 80038da:	f009 fcc1 	bl	800d260 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	881b      	ldrh	r3, [r3, #0]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7ff ffa4 	bl	8003830 <ptr_to_mem>
 80038e8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d024      	beq.n	800393c <plug_holes+0xc4>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	791b      	ldrb	r3, [r3, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d120      	bne.n	800393c <plug_holes+0xc4>
 80038fa:	4b2b      	ldr	r3, [pc, #172]	; (80039a8 <plug_holes+0x130>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	429a      	cmp	r2, r3
 8003902:	d01b      	beq.n	800393c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8003904:	4b2c      	ldr	r3, [pc, #176]	; (80039b8 <plug_holes+0x140>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	429a      	cmp	r2, r3
 800390c:	d102      	bne.n	8003914 <plug_holes+0x9c>
      lfree = mem;
 800390e:	4a2a      	ldr	r2, [pc, #168]	; (80039b8 <plug_holes+0x140>)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	881a      	ldrh	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	881b      	ldrh	r3, [r3, #0]
 8003920:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003924:	d00a      	beq.n	800393c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	881b      	ldrh	r3, [r3, #0]
 800392a:	4618      	mov	r0, r3
 800392c:	f7ff ff80 	bl	8003830 <ptr_to_mem>
 8003930:	4604      	mov	r4, r0
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7ff ff8e 	bl	8003854 <mem_to_ptr>
 8003938:	4603      	mov	r3, r0
 800393a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	885b      	ldrh	r3, [r3, #2]
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff ff75 	bl	8003830 <ptr_to_mem>
 8003946:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	429a      	cmp	r2, r3
 800394e:	d01f      	beq.n	8003990 <plug_holes+0x118>
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	791b      	ldrb	r3, [r3, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d11b      	bne.n	8003990 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8003958:	4b17      	ldr	r3, [pc, #92]	; (80039b8 <plug_holes+0x140>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	429a      	cmp	r2, r3
 8003960:	d102      	bne.n	8003968 <plug_holes+0xf0>
      lfree = pmem;
 8003962:	4a15      	ldr	r2, [pc, #84]	; (80039b8 <plug_holes+0x140>)
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	881a      	ldrh	r2, [r3, #0]
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	881b      	ldrh	r3, [r3, #0]
 8003974:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003978:	d00a      	beq.n	8003990 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	881b      	ldrh	r3, [r3, #0]
 800397e:	4618      	mov	r0, r3
 8003980:	f7ff ff56 	bl	8003830 <ptr_to_mem>
 8003984:	4604      	mov	r4, r0
 8003986:	68b8      	ldr	r0, [r7, #8]
 8003988:	f7ff ff64 	bl	8003854 <mem_to_ptr>
 800398c:	4603      	mov	r3, r0
 800398e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8003990:	bf00      	nop
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	bd90      	pop	{r4, r7, pc}
 8003998:	20005344 	.word	0x20005344
 800399c:	0800e36c 	.word	0x0800e36c
 80039a0:	0800e39c 	.word	0x0800e39c
 80039a4:	0800e3b4 	.word	0x0800e3b4
 80039a8:	20005348 	.word	0x20005348
 80039ac:	0800e3dc 	.word	0x0800e3dc
 80039b0:	0800e3f8 	.word	0x0800e3f8
 80039b4:	0800e414 	.word	0x0800e414
 80039b8:	2000534c 	.word	0x2000534c

080039bc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80039c2:	4b18      	ldr	r3, [pc, #96]	; (8003a24 <mem_init+0x68>)
 80039c4:	3303      	adds	r3, #3
 80039c6:	f023 0303 	bic.w	r3, r3, #3
 80039ca:	461a      	mov	r2, r3
 80039cc:	4b16      	ldr	r3, [pc, #88]	; (8003a28 <mem_init+0x6c>)
 80039ce:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80039d0:	4b15      	ldr	r3, [pc, #84]	; (8003a28 <mem_init+0x6c>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80039dc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80039ea:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80039ee:	f7ff ff1f 	bl	8003830 <ptr_to_mem>
 80039f2:	4603      	mov	r3, r0
 80039f4:	4a0d      	ldr	r2, [pc, #52]	; (8003a2c <mem_init+0x70>)
 80039f6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80039f8:	4b0c      	ldr	r3, [pc, #48]	; (8003a2c <mem_init+0x70>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2201      	movs	r2, #1
 80039fe:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8003a00:	4b0a      	ldr	r3, [pc, #40]	; (8003a2c <mem_init+0x70>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003a08:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8003a0a:	4b08      	ldr	r3, [pc, #32]	; (8003a2c <mem_init+0x70>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003a12:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8003a14:	4b04      	ldr	r3, [pc, #16]	; (8003a28 <mem_init+0x6c>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a05      	ldr	r2, [pc, #20]	; (8003a30 <mem_init+0x74>)
 8003a1a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8003a1c:	bf00      	nop
 8003a1e:	3708      	adds	r7, #8
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	20004cf0 	.word	0x20004cf0
 8003a28:	20005344 	.word	0x20005344
 8003a2c:	20005348 	.word	0x20005348
 8003a30:	2000534c 	.word	0x2000534c

08003a34 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f7ff ff09 	bl	8003854 <mem_to_ptr>
 8003a42:	4603      	mov	r3, r0
 8003a44:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	881b      	ldrh	r3, [r3, #0]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7ff fef0 	bl	8003830 <ptr_to_mem>
 8003a50:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	885b      	ldrh	r3, [r3, #2]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7ff feea 	bl	8003830 <ptr_to_mem>
 8003a5c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	881b      	ldrh	r3, [r3, #0]
 8003a62:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003a66:	d818      	bhi.n	8003a9a <mem_link_valid+0x66>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	885b      	ldrh	r3, [r3, #2]
 8003a6c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003a70:	d813      	bhi.n	8003a9a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003a76:	8afa      	ldrh	r2, [r7, #22]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d004      	beq.n	8003a86 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	881b      	ldrh	r3, [r3, #0]
 8003a80:	8afa      	ldrh	r2, [r7, #22]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d109      	bne.n	8003a9a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8003a86:	4b08      	ldr	r3, [pc, #32]	; (8003aa8 <mem_link_valid+0x74>)
 8003a88:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d006      	beq.n	8003a9e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	885b      	ldrh	r3, [r3, #2]
 8003a94:	8afa      	ldrh	r2, [r7, #22]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d001      	beq.n	8003a9e <mem_link_valid+0x6a>
    return 0;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	e000      	b.n	8003aa0 <mem_link_valid+0x6c>
  }
  return 1;
 8003a9e:	2301      	movs	r3, #1
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3718      	adds	r7, #24
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	20005348 	.word	0x20005348

08003aac <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d04c      	beq.n	8003b54 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f003 0303 	and.w	r3, r3, #3
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d007      	beq.n	8003ad4 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8003ac4:	4b25      	ldr	r3, [pc, #148]	; (8003b5c <mem_free+0xb0>)
 8003ac6:	f240 2273 	movw	r2, #627	; 0x273
 8003aca:	4925      	ldr	r1, [pc, #148]	; (8003b60 <mem_free+0xb4>)
 8003acc:	4825      	ldr	r0, [pc, #148]	; (8003b64 <mem_free+0xb8>)
 8003ace:	f009 fbc7 	bl	800d260 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003ad2:	e040      	b.n	8003b56 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	3b08      	subs	r3, #8
 8003ad8:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8003ada:	4b23      	ldr	r3, [pc, #140]	; (8003b68 <mem_free+0xbc>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d306      	bcc.n	8003af2 <mem_free+0x46>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f103 020c 	add.w	r2, r3, #12
 8003aea:	4b20      	ldr	r3, [pc, #128]	; (8003b6c <mem_free+0xc0>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d907      	bls.n	8003b02 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8003af2:	4b1a      	ldr	r3, [pc, #104]	; (8003b5c <mem_free+0xb0>)
 8003af4:	f240 227f 	movw	r2, #639	; 0x27f
 8003af8:	491d      	ldr	r1, [pc, #116]	; (8003b70 <mem_free+0xc4>)
 8003afa:	481a      	ldr	r0, [pc, #104]	; (8003b64 <mem_free+0xb8>)
 8003afc:	f009 fbb0 	bl	800d260 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003b00:	e029      	b.n	8003b56 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	791b      	ldrb	r3, [r3, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d107      	bne.n	8003b1a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8003b0a:	4b14      	ldr	r3, [pc, #80]	; (8003b5c <mem_free+0xb0>)
 8003b0c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8003b10:	4918      	ldr	r1, [pc, #96]	; (8003b74 <mem_free+0xc8>)
 8003b12:	4814      	ldr	r0, [pc, #80]	; (8003b64 <mem_free+0xb8>)
 8003b14:	f009 fba4 	bl	800d260 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003b18:	e01d      	b.n	8003b56 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f7ff ff8a 	bl	8003a34 <mem_link_valid>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d107      	bne.n	8003b36 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8003b26:	4b0d      	ldr	r3, [pc, #52]	; (8003b5c <mem_free+0xb0>)
 8003b28:	f240 2295 	movw	r2, #661	; 0x295
 8003b2c:	4912      	ldr	r1, [pc, #72]	; (8003b78 <mem_free+0xcc>)
 8003b2e:	480d      	ldr	r0, [pc, #52]	; (8003b64 <mem_free+0xb8>)
 8003b30:	f009 fb96 	bl	800d260 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003b34:	e00f      	b.n	8003b56 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8003b3c:	4b0f      	ldr	r3, [pc, #60]	; (8003b7c <mem_free+0xd0>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d202      	bcs.n	8003b4c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8003b46:	4a0d      	ldr	r2, [pc, #52]	; (8003b7c <mem_free+0xd0>)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	f7ff fe93 	bl	8003878 <plug_holes>
 8003b52:	e000      	b.n	8003b56 <mem_free+0xaa>
    return;
 8003b54:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	0800e36c 	.word	0x0800e36c
 8003b60:	0800e440 	.word	0x0800e440
 8003b64:	0800e3b4 	.word	0x0800e3b4
 8003b68:	20005344 	.word	0x20005344
 8003b6c:	20005348 	.word	0x20005348
 8003b70:	0800e464 	.word	0x0800e464
 8003b74:	0800e480 	.word	0x0800e480
 8003b78:	0800e4a8 	.word	0x0800e4a8
 8003b7c:	2000534c 	.word	0x2000534c

08003b80 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b088      	sub	sp, #32
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	460b      	mov	r3, r1
 8003b8a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8003b8c:	887b      	ldrh	r3, [r7, #2]
 8003b8e:	3303      	adds	r3, #3
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	f023 0303 	bic.w	r3, r3, #3
 8003b96:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8003b98:	8bfb      	ldrh	r3, [r7, #30]
 8003b9a:	2b0b      	cmp	r3, #11
 8003b9c:	d801      	bhi.n	8003ba2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8003b9e:	230c      	movs	r3, #12
 8003ba0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8003ba2:	8bfb      	ldrh	r3, [r7, #30]
 8003ba4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003ba8:	d803      	bhi.n	8003bb2 <mem_trim+0x32>
 8003baa:	8bfa      	ldrh	r2, [r7, #30]
 8003bac:	887b      	ldrh	r3, [r7, #2]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d201      	bcs.n	8003bb6 <mem_trim+0x36>
    return NULL;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	e0cc      	b.n	8003d50 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8003bb6:	4b68      	ldr	r3, [pc, #416]	; (8003d58 <mem_trim+0x1d8>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d304      	bcc.n	8003bca <mem_trim+0x4a>
 8003bc0:	4b66      	ldr	r3, [pc, #408]	; (8003d5c <mem_trim+0x1dc>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d306      	bcc.n	8003bd8 <mem_trim+0x58>
 8003bca:	4b65      	ldr	r3, [pc, #404]	; (8003d60 <mem_trim+0x1e0>)
 8003bcc:	f240 22d1 	movw	r2, #721	; 0x2d1
 8003bd0:	4964      	ldr	r1, [pc, #400]	; (8003d64 <mem_trim+0x1e4>)
 8003bd2:	4865      	ldr	r0, [pc, #404]	; (8003d68 <mem_trim+0x1e8>)
 8003bd4:	f009 fb44 	bl	800d260 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8003bd8:	4b5f      	ldr	r3, [pc, #380]	; (8003d58 <mem_trim+0x1d8>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d304      	bcc.n	8003bec <mem_trim+0x6c>
 8003be2:	4b5e      	ldr	r3, [pc, #376]	; (8003d5c <mem_trim+0x1dc>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d301      	bcc.n	8003bf0 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	e0af      	b.n	8003d50 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	3b08      	subs	r3, #8
 8003bf4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8003bf6:	69b8      	ldr	r0, [r7, #24]
 8003bf8:	f7ff fe2c 	bl	8003854 <mem_to_ptr>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	881a      	ldrh	r2, [r3, #0]
 8003c04:	8afb      	ldrh	r3, [r7, #22]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	3b08      	subs	r3, #8
 8003c0c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8003c0e:	8bfa      	ldrh	r2, [r7, #30]
 8003c10:	8abb      	ldrh	r3, [r7, #20]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d906      	bls.n	8003c24 <mem_trim+0xa4>
 8003c16:	4b52      	ldr	r3, [pc, #328]	; (8003d60 <mem_trim+0x1e0>)
 8003c18:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8003c1c:	4953      	ldr	r1, [pc, #332]	; (8003d6c <mem_trim+0x1ec>)
 8003c1e:	4852      	ldr	r0, [pc, #328]	; (8003d68 <mem_trim+0x1e8>)
 8003c20:	f009 fb1e 	bl	800d260 <iprintf>
  if (newsize > size) {
 8003c24:	8bfa      	ldrh	r2, [r7, #30]
 8003c26:	8abb      	ldrh	r3, [r7, #20]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d901      	bls.n	8003c30 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	e08f      	b.n	8003d50 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8003c30:	8bfa      	ldrh	r2, [r7, #30]
 8003c32:	8abb      	ldrh	r3, [r7, #20]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d101      	bne.n	8003c3c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	e089      	b.n	8003d50 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	881b      	ldrh	r3, [r3, #0]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7ff fdf5 	bl	8003830 <ptr_to_mem>
 8003c46:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	791b      	ldrb	r3, [r3, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d13f      	bne.n	8003cd0 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	881b      	ldrh	r3, [r3, #0]
 8003c54:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003c58:	d106      	bne.n	8003c68 <mem_trim+0xe8>
 8003c5a:	4b41      	ldr	r3, [pc, #260]	; (8003d60 <mem_trim+0x1e0>)
 8003c5c:	f240 22f5 	movw	r2, #757	; 0x2f5
 8003c60:	4943      	ldr	r1, [pc, #268]	; (8003d70 <mem_trim+0x1f0>)
 8003c62:	4841      	ldr	r0, [pc, #260]	; (8003d68 <mem_trim+0x1e8>)
 8003c64:	f009 fafc 	bl	800d260 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	881b      	ldrh	r3, [r3, #0]
 8003c6c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8003c6e:	8afa      	ldrh	r2, [r7, #22]
 8003c70:	8bfb      	ldrh	r3, [r7, #30]
 8003c72:	4413      	add	r3, r2
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	3308      	adds	r3, #8
 8003c78:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8003c7a:	4b3e      	ldr	r3, [pc, #248]	; (8003d74 <mem_trim+0x1f4>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d106      	bne.n	8003c92 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8003c84:	89fb      	ldrh	r3, [r7, #14]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7ff fdd2 	bl	8003830 <ptr_to_mem>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	4a39      	ldr	r2, [pc, #228]	; (8003d74 <mem_trim+0x1f4>)
 8003c90:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8003c92:	89fb      	ldrh	r3, [r7, #14]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7ff fdcb 	bl	8003830 <ptr_to_mem>
 8003c9a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	89ba      	ldrh	r2, [r7, #12]
 8003ca6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	8afa      	ldrh	r2, [r7, #22]
 8003cac:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	89fa      	ldrh	r2, [r7, #14]
 8003cb2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	881b      	ldrh	r3, [r3, #0]
 8003cb8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003cbc:	d047      	beq.n	8003d4e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	881b      	ldrh	r3, [r3, #0]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7ff fdb4 	bl	8003830 <ptr_to_mem>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	89fb      	ldrh	r3, [r7, #14]
 8003ccc:	8053      	strh	r3, [r2, #2]
 8003cce:	e03e      	b.n	8003d4e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8003cd0:	8bfb      	ldrh	r3, [r7, #30]
 8003cd2:	f103 0214 	add.w	r2, r3, #20
 8003cd6:	8abb      	ldrh	r3, [r7, #20]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d838      	bhi.n	8003d4e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8003cdc:	8afa      	ldrh	r2, [r7, #22]
 8003cde:	8bfb      	ldrh	r3, [r7, #30]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	3308      	adds	r3, #8
 8003ce6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	881b      	ldrh	r3, [r3, #0]
 8003cec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003cf0:	d106      	bne.n	8003d00 <mem_trim+0x180>
 8003cf2:	4b1b      	ldr	r3, [pc, #108]	; (8003d60 <mem_trim+0x1e0>)
 8003cf4:	f240 3216 	movw	r2, #790	; 0x316
 8003cf8:	491d      	ldr	r1, [pc, #116]	; (8003d70 <mem_trim+0x1f0>)
 8003cfa:	481b      	ldr	r0, [pc, #108]	; (8003d68 <mem_trim+0x1e8>)
 8003cfc:	f009 fab0 	bl	800d260 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8003d00:	89fb      	ldrh	r3, [r7, #14]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7ff fd94 	bl	8003830 <ptr_to_mem>
 8003d08:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8003d0a:	4b1a      	ldr	r3, [pc, #104]	; (8003d74 <mem_trim+0x1f4>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d202      	bcs.n	8003d1a <mem_trim+0x19a>
      lfree = mem2;
 8003d14:	4a17      	ldr	r2, [pc, #92]	; (8003d74 <mem_trim+0x1f4>)
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	881a      	ldrh	r2, [r3, #0]
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	8afa      	ldrh	r2, [r7, #22]
 8003d2c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	89fa      	ldrh	r2, [r7, #14]
 8003d32:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	881b      	ldrh	r3, [r3, #0]
 8003d38:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003d3c:	d007      	beq.n	8003d4e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	881b      	ldrh	r3, [r3, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7ff fd74 	bl	8003830 <ptr_to_mem>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	89fb      	ldrh	r3, [r7, #14]
 8003d4c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8003d4e:	687b      	ldr	r3, [r7, #4]
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3720      	adds	r7, #32
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	20005344 	.word	0x20005344
 8003d5c:	20005348 	.word	0x20005348
 8003d60:	0800e36c 	.word	0x0800e36c
 8003d64:	0800e4dc 	.word	0x0800e4dc
 8003d68:	0800e3b4 	.word	0x0800e3b4
 8003d6c:	0800e4f4 	.word	0x0800e4f4
 8003d70:	0800e514 	.word	0x0800e514
 8003d74:	2000534c 	.word	0x2000534c

08003d78 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b088      	sub	sp, #32
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	4603      	mov	r3, r0
 8003d80:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8003d82:	88fb      	ldrh	r3, [r7, #6]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <mem_malloc+0x14>
    return NULL;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	e0d9      	b.n	8003f40 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8003d8c:	88fb      	ldrh	r3, [r7, #6]
 8003d8e:	3303      	adds	r3, #3
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	f023 0303 	bic.w	r3, r3, #3
 8003d96:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8003d98:	8bbb      	ldrh	r3, [r7, #28]
 8003d9a:	2b0b      	cmp	r3, #11
 8003d9c:	d801      	bhi.n	8003da2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8003d9e:	230c      	movs	r3, #12
 8003da0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8003da2:	8bbb      	ldrh	r3, [r7, #28]
 8003da4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003da8:	d803      	bhi.n	8003db2 <mem_malloc+0x3a>
 8003daa:	8bba      	ldrh	r2, [r7, #28]
 8003dac:	88fb      	ldrh	r3, [r7, #6]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d201      	bcs.n	8003db6 <mem_malloc+0x3e>
    return NULL;
 8003db2:	2300      	movs	r3, #0
 8003db4:	e0c4      	b.n	8003f40 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8003db6:	4b64      	ldr	r3, [pc, #400]	; (8003f48 <mem_malloc+0x1d0>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff fd4a 	bl	8003854 <mem_to_ptr>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	83fb      	strh	r3, [r7, #30]
 8003dc4:	e0b4      	b.n	8003f30 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8003dc6:	8bfb      	ldrh	r3, [r7, #30]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7ff fd31 	bl	8003830 <ptr_to_mem>
 8003dce:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	791b      	ldrb	r3, [r3, #4]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f040 80a4 	bne.w	8003f22 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	881b      	ldrh	r3, [r3, #0]
 8003dde:	461a      	mov	r2, r3
 8003de0:	8bfb      	ldrh	r3, [r7, #30]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	f1a3 0208 	sub.w	r2, r3, #8
 8003de8:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8003dea:	429a      	cmp	r2, r3
 8003dec:	f0c0 8099 	bcc.w	8003f22 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	881b      	ldrh	r3, [r3, #0]
 8003df4:	461a      	mov	r2, r3
 8003df6:	8bfb      	ldrh	r3, [r7, #30]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	f1a3 0208 	sub.w	r2, r3, #8
 8003dfe:	8bbb      	ldrh	r3, [r7, #28]
 8003e00:	3314      	adds	r3, #20
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d333      	bcc.n	8003e6e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8003e06:	8bfa      	ldrh	r2, [r7, #30]
 8003e08:	8bbb      	ldrh	r3, [r7, #28]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	3308      	adds	r3, #8
 8003e10:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8003e12:	8a7b      	ldrh	r3, [r7, #18]
 8003e14:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003e18:	d106      	bne.n	8003e28 <mem_malloc+0xb0>
 8003e1a:	4b4c      	ldr	r3, [pc, #304]	; (8003f4c <mem_malloc+0x1d4>)
 8003e1c:	f240 3287 	movw	r2, #903	; 0x387
 8003e20:	494b      	ldr	r1, [pc, #300]	; (8003f50 <mem_malloc+0x1d8>)
 8003e22:	484c      	ldr	r0, [pc, #304]	; (8003f54 <mem_malloc+0x1dc>)
 8003e24:	f009 fa1c 	bl	800d260 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8003e28:	8a7b      	ldrh	r3, [r7, #18]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff fd00 	bl	8003830 <ptr_to_mem>
 8003e30:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	881a      	ldrh	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8bfa      	ldrh	r2, [r7, #30]
 8003e44:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	8a7a      	ldrh	r2, [r7, #18]
 8003e4a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	881b      	ldrh	r3, [r3, #0]
 8003e56:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003e5a:	d00b      	beq.n	8003e74 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	881b      	ldrh	r3, [r3, #0]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7ff fce5 	bl	8003830 <ptr_to_mem>
 8003e66:	4602      	mov	r2, r0
 8003e68:	8a7b      	ldrh	r3, [r7, #18]
 8003e6a:	8053      	strh	r3, [r2, #2]
 8003e6c:	e002      	b.n	8003e74 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	2201      	movs	r2, #1
 8003e72:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8003e74:	4b34      	ldr	r3, [pc, #208]	; (8003f48 <mem_malloc+0x1d0>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d127      	bne.n	8003ece <mem_malloc+0x156>
          struct mem *cur = lfree;
 8003e7e:	4b32      	ldr	r3, [pc, #200]	; (8003f48 <mem_malloc+0x1d0>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8003e84:	e005      	b.n	8003e92 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	881b      	ldrh	r3, [r3, #0]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7ff fcd0 	bl	8003830 <ptr_to_mem>
 8003e90:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	791b      	ldrb	r3, [r3, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d004      	beq.n	8003ea4 <mem_malloc+0x12c>
 8003e9a:	4b2f      	ldr	r3, [pc, #188]	; (8003f58 <mem_malloc+0x1e0>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	69ba      	ldr	r2, [r7, #24]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d1f0      	bne.n	8003e86 <mem_malloc+0x10e>
          }
          lfree = cur;
 8003ea4:	4a28      	ldr	r2, [pc, #160]	; (8003f48 <mem_malloc+0x1d0>)
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8003eaa:	4b27      	ldr	r3, [pc, #156]	; (8003f48 <mem_malloc+0x1d0>)
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	4b2a      	ldr	r3, [pc, #168]	; (8003f58 <mem_malloc+0x1e0>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d00b      	beq.n	8003ece <mem_malloc+0x156>
 8003eb6:	4b24      	ldr	r3, [pc, #144]	; (8003f48 <mem_malloc+0x1d0>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	791b      	ldrb	r3, [r3, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d006      	beq.n	8003ece <mem_malloc+0x156>
 8003ec0:	4b22      	ldr	r3, [pc, #136]	; (8003f4c <mem_malloc+0x1d4>)
 8003ec2:	f240 32b5 	movw	r2, #949	; 0x3b5
 8003ec6:	4925      	ldr	r1, [pc, #148]	; (8003f5c <mem_malloc+0x1e4>)
 8003ec8:	4822      	ldr	r0, [pc, #136]	; (8003f54 <mem_malloc+0x1dc>)
 8003eca:	f009 f9c9 	bl	800d260 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8003ece:	8bba      	ldrh	r2, [r7, #28]
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	3308      	adds	r3, #8
 8003ed6:	4a20      	ldr	r2, [pc, #128]	; (8003f58 <mem_malloc+0x1e0>)
 8003ed8:	6812      	ldr	r2, [r2, #0]
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d906      	bls.n	8003eec <mem_malloc+0x174>
 8003ede:	4b1b      	ldr	r3, [pc, #108]	; (8003f4c <mem_malloc+0x1d4>)
 8003ee0:	f240 32b9 	movw	r2, #953	; 0x3b9
 8003ee4:	491e      	ldr	r1, [pc, #120]	; (8003f60 <mem_malloc+0x1e8>)
 8003ee6:	481b      	ldr	r0, [pc, #108]	; (8003f54 <mem_malloc+0x1dc>)
 8003ee8:	f009 f9ba 	bl	800d260 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	f003 0303 	and.w	r3, r3, #3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d006      	beq.n	8003f04 <mem_malloc+0x18c>
 8003ef6:	4b15      	ldr	r3, [pc, #84]	; (8003f4c <mem_malloc+0x1d4>)
 8003ef8:	f240 32bb 	movw	r2, #955	; 0x3bb
 8003efc:	4919      	ldr	r1, [pc, #100]	; (8003f64 <mem_malloc+0x1ec>)
 8003efe:	4815      	ldr	r0, [pc, #84]	; (8003f54 <mem_malloc+0x1dc>)
 8003f00:	f009 f9ae 	bl	800d260 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	f003 0303 	and.w	r3, r3, #3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d006      	beq.n	8003f1c <mem_malloc+0x1a4>
 8003f0e:	4b0f      	ldr	r3, [pc, #60]	; (8003f4c <mem_malloc+0x1d4>)
 8003f10:	f240 32bd 	movw	r2, #957	; 0x3bd
 8003f14:	4914      	ldr	r1, [pc, #80]	; (8003f68 <mem_malloc+0x1f0>)
 8003f16:	480f      	ldr	r0, [pc, #60]	; (8003f54 <mem_malloc+0x1dc>)
 8003f18:	f009 f9a2 	bl	800d260 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	3308      	adds	r3, #8
 8003f20:	e00e      	b.n	8003f40 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8003f22:	8bfb      	ldrh	r3, [r7, #30]
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7ff fc83 	bl	8003830 <ptr_to_mem>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	881b      	ldrh	r3, [r3, #0]
 8003f2e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8003f30:	8bfa      	ldrh	r2, [r7, #30]
 8003f32:	8bbb      	ldrh	r3, [r7, #28]
 8003f34:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	f4ff af44 	bcc.w	8003dc6 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3720      	adds	r7, #32
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	2000534c 	.word	0x2000534c
 8003f4c:	0800e36c 	.word	0x0800e36c
 8003f50:	0800e514 	.word	0x0800e514
 8003f54:	0800e3b4 	.word	0x0800e3b4
 8003f58:	20005348 	.word	0x20005348
 8003f5c:	0800e528 	.word	0x0800e528
 8003f60:	0800e544 	.word	0x0800e544
 8003f64:	0800e574 	.word	0x0800e574
 8003f68:	0800e5a4 	.word	0x0800e5a4

08003f6c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	3303      	adds	r3, #3
 8003f82:	f023 0303 	bic.w	r3, r3, #3
 8003f86:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8003f88:	2300      	movs	r3, #0
 8003f8a:	60fb      	str	r3, [r7, #12]
 8003f8c:	e011      	b.n	8003fb2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	881b      	ldrh	r3, [r3, #0]
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	4413      	add	r3, r2
 8003faa:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	3301      	adds	r3, #1
 8003fb0:	60fb      	str	r3, [r7, #12]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	885b      	ldrh	r3, [r3, #2]
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	dbe7      	blt.n	8003f8e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8003fbe:	bf00      	nop
 8003fc0:	bf00      	nop
 8003fc2:	3714      	adds	r7, #20
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	80fb      	strh	r3, [r7, #6]
 8003fd6:	e009      	b.n	8003fec <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8003fd8:	88fb      	ldrh	r3, [r7, #6]
 8003fda:	4a08      	ldr	r2, [pc, #32]	; (8003ffc <memp_init+0x30>)
 8003fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7ff ffc3 	bl	8003f6c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8003fe6:	88fb      	ldrh	r3, [r7, #6]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	80fb      	strh	r3, [r7, #6]
 8003fec:	88fb      	ldrh	r3, [r7, #6]
 8003fee:	2b08      	cmp	r3, #8
 8003ff0:	d9f2      	bls.n	8003fd8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8003ff2:	bf00      	nop
 8003ff4:	bf00      	nop
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	08010d80 	.word	0x08010d80

08004000 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d012      	beq.n	800403c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	6812      	ldr	r2, [r2, #0]
 800401e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f003 0303 	and.w	r3, r3, #3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d006      	beq.n	8004038 <do_memp_malloc_pool+0x38>
 800402a:	4b07      	ldr	r3, [pc, #28]	; (8004048 <do_memp_malloc_pool+0x48>)
 800402c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8004030:	4906      	ldr	r1, [pc, #24]	; (800404c <do_memp_malloc_pool+0x4c>)
 8004032:	4807      	ldr	r0, [pc, #28]	; (8004050 <do_memp_malloc_pool+0x50>)
 8004034:	f009 f914 	bl	800d260 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	e000      	b.n	800403e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	0800e5c8 	.word	0x0800e5c8
 800404c:	0800e5f8 	.word	0x0800e5f8
 8004050:	0800e61c 	.word	0x0800e61c

08004054 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d106      	bne.n	8004070 <memp_malloc_pool+0x1c>
 8004062:	4b0a      	ldr	r3, [pc, #40]	; (800408c <memp_malloc_pool+0x38>)
 8004064:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8004068:	4909      	ldr	r1, [pc, #36]	; (8004090 <memp_malloc_pool+0x3c>)
 800406a:	480a      	ldr	r0, [pc, #40]	; (8004094 <memp_malloc_pool+0x40>)
 800406c:	f009 f8f8 	bl	800d260 <iprintf>
  if (desc == NULL) {
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <memp_malloc_pool+0x26>
    return NULL;
 8004076:	2300      	movs	r3, #0
 8004078:	e003      	b.n	8004082 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7ff ffc0 	bl	8004000 <do_memp_malloc_pool>
 8004080:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8004082:	4618      	mov	r0, r3
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	0800e5c8 	.word	0x0800e5c8
 8004090:	0800e644 	.word	0x0800e644
 8004094:	0800e61c 	.word	0x0800e61c

08004098 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	4603      	mov	r3, r0
 80040a0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80040a2:	79fb      	ldrb	r3, [r7, #7]
 80040a4:	2b08      	cmp	r3, #8
 80040a6:	d908      	bls.n	80040ba <memp_malloc+0x22>
 80040a8:	4b0a      	ldr	r3, [pc, #40]	; (80040d4 <memp_malloc+0x3c>)
 80040aa:	f240 1257 	movw	r2, #343	; 0x157
 80040ae:	490a      	ldr	r1, [pc, #40]	; (80040d8 <memp_malloc+0x40>)
 80040b0:	480a      	ldr	r0, [pc, #40]	; (80040dc <memp_malloc+0x44>)
 80040b2:	f009 f8d5 	bl	800d260 <iprintf>
 80040b6:	2300      	movs	r3, #0
 80040b8:	e008      	b.n	80040cc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80040ba:	79fb      	ldrb	r3, [r7, #7]
 80040bc:	4a08      	ldr	r2, [pc, #32]	; (80040e0 <memp_malloc+0x48>)
 80040be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7ff ff9c 	bl	8004000 <do_memp_malloc_pool>
 80040c8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80040ca:	68fb      	ldr	r3, [r7, #12]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	0800e5c8 	.word	0x0800e5c8
 80040d8:	0800e658 	.word	0x0800e658
 80040dc:	0800e61c 	.word	0x0800e61c
 80040e0:	08010d80 	.word	0x08010d80

080040e4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	f003 0303 	and.w	r3, r3, #3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d006      	beq.n	8004106 <do_memp_free_pool+0x22>
 80040f8:	4b0a      	ldr	r3, [pc, #40]	; (8004124 <do_memp_free_pool+0x40>)
 80040fa:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80040fe:	490a      	ldr	r1, [pc, #40]	; (8004128 <do_memp_free_pool+0x44>)
 8004100:	480a      	ldr	r0, [pc, #40]	; (800412c <do_memp_free_pool+0x48>)
 8004102:	f009 f8ad 	bl	800d260 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800411c:	bf00      	nop
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	0800e5c8 	.word	0x0800e5c8
 8004128:	0800e678 	.word	0x0800e678
 800412c:	0800e61c 	.word	0x0800e61c

08004130 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d106      	bne.n	800414e <memp_free_pool+0x1e>
 8004140:	4b0a      	ldr	r3, [pc, #40]	; (800416c <memp_free_pool+0x3c>)
 8004142:	f240 1295 	movw	r2, #405	; 0x195
 8004146:	490a      	ldr	r1, [pc, #40]	; (8004170 <memp_free_pool+0x40>)
 8004148:	480a      	ldr	r0, [pc, #40]	; (8004174 <memp_free_pool+0x44>)
 800414a:	f009 f889 	bl	800d260 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d007      	beq.n	8004164 <memp_free_pool+0x34>
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d004      	beq.n	8004164 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800415a:	6839      	ldr	r1, [r7, #0]
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f7ff ffc1 	bl	80040e4 <do_memp_free_pool>
 8004162:	e000      	b.n	8004166 <memp_free_pool+0x36>
    return;
 8004164:	bf00      	nop
}
 8004166:	3708      	adds	r7, #8
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	0800e5c8 	.word	0x0800e5c8
 8004170:	0800e644 	.word	0x0800e644
 8004174:	0800e61c 	.word	0x0800e61c

08004178 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	4603      	mov	r3, r0
 8004180:	6039      	str	r1, [r7, #0]
 8004182:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8004184:	79fb      	ldrb	r3, [r7, #7]
 8004186:	2b08      	cmp	r3, #8
 8004188:	d907      	bls.n	800419a <memp_free+0x22>
 800418a:	4b0c      	ldr	r3, [pc, #48]	; (80041bc <memp_free+0x44>)
 800418c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8004190:	490b      	ldr	r1, [pc, #44]	; (80041c0 <memp_free+0x48>)
 8004192:	480c      	ldr	r0, [pc, #48]	; (80041c4 <memp_free+0x4c>)
 8004194:	f009 f864 	bl	800d260 <iprintf>
 8004198:	e00c      	b.n	80041b4 <memp_free+0x3c>

  if (mem == NULL) {
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d008      	beq.n	80041b2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80041a0:	79fb      	ldrb	r3, [r7, #7]
 80041a2:	4a09      	ldr	r2, [pc, #36]	; (80041c8 <memp_free+0x50>)
 80041a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041a8:	6839      	ldr	r1, [r7, #0]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7ff ff9a 	bl	80040e4 <do_memp_free_pool>
 80041b0:	e000      	b.n	80041b4 <memp_free+0x3c>
    return;
 80041b2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	0800e5c8 	.word	0x0800e5c8
 80041c0:	0800e698 	.word	0x0800e698
 80041c4:	0800e61c 	.word	0x0800e61c
 80041c8:	08010d80 	.word	0x08010d80

080041cc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80041d0:	bf00      	nop
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
	...

080041dc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
 80041e8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d108      	bne.n	8004202 <netif_add+0x26>
 80041f0:	4b57      	ldr	r3, [pc, #348]	; (8004350 <netif_add+0x174>)
 80041f2:	f240 1227 	movw	r2, #295	; 0x127
 80041f6:	4957      	ldr	r1, [pc, #348]	; (8004354 <netif_add+0x178>)
 80041f8:	4857      	ldr	r0, [pc, #348]	; (8004358 <netif_add+0x17c>)
 80041fa:	f009 f831 	bl	800d260 <iprintf>
 80041fe:	2300      	movs	r3, #0
 8004200:	e0a2      	b.n	8004348 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8004202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004204:	2b00      	cmp	r3, #0
 8004206:	d108      	bne.n	800421a <netif_add+0x3e>
 8004208:	4b51      	ldr	r3, [pc, #324]	; (8004350 <netif_add+0x174>)
 800420a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800420e:	4953      	ldr	r1, [pc, #332]	; (800435c <netif_add+0x180>)
 8004210:	4851      	ldr	r0, [pc, #324]	; (8004358 <netif_add+0x17c>)
 8004212:	f009 f825 	bl	800d260 <iprintf>
 8004216:	2300      	movs	r3, #0
 8004218:	e096      	b.n	8004348 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d101      	bne.n	8004224 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8004220:	4b4f      	ldr	r3, [pc, #316]	; (8004360 <netif_add+0x184>)
 8004222:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800422a:	4b4d      	ldr	r3, [pc, #308]	; (8004360 <netif_add+0x184>)
 800422c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d101      	bne.n	8004238 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8004234:	4b4a      	ldr	r3, [pc, #296]	; (8004360 <netif_add+0x184>)
 8004236:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	4a45      	ldr	r2, [pc, #276]	; (8004364 <netif_add+0x188>)
 800424e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6a3a      	ldr	r2, [r7, #32]
 8004268:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800426a:	4b3f      	ldr	r3, [pc, #252]	; (8004368 <netif_add+0x18c>)
 800426c:	781a      	ldrb	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004278:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	68b9      	ldr	r1, [r7, #8]
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f000 f913 	bl	80044ac <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8004286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	4798      	blx	r3
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <netif_add+0xba>
    return NULL;
 8004292:	2300      	movs	r3, #0
 8004294:	e058      	b.n	8004348 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800429c:	2bff      	cmp	r3, #255	; 0xff
 800429e:	d103      	bne.n	80042a8 <netif_add+0xcc>
        netif->num = 0;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80042a8:	2300      	movs	r3, #0
 80042aa:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80042ac:	4b2f      	ldr	r3, [pc, #188]	; (800436c <netif_add+0x190>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	617b      	str	r3, [r7, #20]
 80042b2:	e02b      	b.n	800430c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d106      	bne.n	80042ca <netif_add+0xee>
 80042bc:	4b24      	ldr	r3, [pc, #144]	; (8004350 <netif_add+0x174>)
 80042be:	f240 128b 	movw	r2, #395	; 0x18b
 80042c2:	492b      	ldr	r1, [pc, #172]	; (8004370 <netif_add+0x194>)
 80042c4:	4824      	ldr	r0, [pc, #144]	; (8004358 <netif_add+0x17c>)
 80042c6:	f008 ffcb 	bl	800d260 <iprintf>
        num_netifs++;
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	3301      	adds	r3, #1
 80042ce:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	2bff      	cmp	r3, #255	; 0xff
 80042d4:	dd06      	ble.n	80042e4 <netif_add+0x108>
 80042d6:	4b1e      	ldr	r3, [pc, #120]	; (8004350 <netif_add+0x174>)
 80042d8:	f240 128d 	movw	r2, #397	; 0x18d
 80042dc:	4925      	ldr	r1, [pc, #148]	; (8004374 <netif_add+0x198>)
 80042de:	481e      	ldr	r0, [pc, #120]	; (8004358 <netif_add+0x17c>)
 80042e0:	f008 ffbe 	bl	800d260 <iprintf>
        if (netif2->num == netif->num) {
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d108      	bne.n	8004306 <netif_add+0x12a>
          netif->num++;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80042fa:	3301      	adds	r3, #1
 80042fc:	b2da      	uxtb	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8004304:	e005      	b.n	8004312 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	617b      	str	r3, [r7, #20]
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1d0      	bne.n	80042b4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1be      	bne.n	8004296 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800431e:	2bfe      	cmp	r3, #254	; 0xfe
 8004320:	d103      	bne.n	800432a <netif_add+0x14e>
    netif_num = 0;
 8004322:	4b11      	ldr	r3, [pc, #68]	; (8004368 <netif_add+0x18c>)
 8004324:	2200      	movs	r2, #0
 8004326:	701a      	strb	r2, [r3, #0]
 8004328:	e006      	b.n	8004338 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004330:	3301      	adds	r3, #1
 8004332:	b2da      	uxtb	r2, r3
 8004334:	4b0c      	ldr	r3, [pc, #48]	; (8004368 <netif_add+0x18c>)
 8004336:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8004338:	4b0c      	ldr	r3, [pc, #48]	; (800436c <netif_add+0x190>)
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8004340:	4a0a      	ldr	r2, [pc, #40]	; (800436c <netif_add+0x190>)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8004346:	68fb      	ldr	r3, [r7, #12]
}
 8004348:	4618      	mov	r0, r3
 800434a:	3718      	adds	r7, #24
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	0800e6b4 	.word	0x0800e6b4
 8004354:	0800e748 	.word	0x0800e748
 8004358:	0800e704 	.word	0x0800e704
 800435c:	0800e764 	.word	0x0800e764
 8004360:	08010de4 	.word	0x08010de4
 8004364:	08004787 	.word	0x08004787
 8004368:	20008244 	.word	0x20008244
 800436c:	2000823c 	.word	0x2000823c
 8004370:	0800e788 	.word	0x0800e788
 8004374:	0800e79c 	.word	0x0800e79c

08004378 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8004382:	6839      	ldr	r1, [r7, #0]
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f002 fb43 	bl	8006a10 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800438a:	6839      	ldr	r1, [r7, #0]
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f006 fc27 	bl	800abe0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8004392:	bf00      	nop
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
	...

0800439c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d106      	bne.n	80043bc <netif_do_set_ipaddr+0x20>
 80043ae:	4b1d      	ldr	r3, [pc, #116]	; (8004424 <netif_do_set_ipaddr+0x88>)
 80043b0:	f240 12cb 	movw	r2, #459	; 0x1cb
 80043b4:	491c      	ldr	r1, [pc, #112]	; (8004428 <netif_do_set_ipaddr+0x8c>)
 80043b6:	481d      	ldr	r0, [pc, #116]	; (800442c <netif_do_set_ipaddr+0x90>)
 80043b8:	f008 ff52 	bl	800d260 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d106      	bne.n	80043d0 <netif_do_set_ipaddr+0x34>
 80043c2:	4b18      	ldr	r3, [pc, #96]	; (8004424 <netif_do_set_ipaddr+0x88>)
 80043c4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80043c8:	4917      	ldr	r1, [pc, #92]	; (8004428 <netif_do_set_ipaddr+0x8c>)
 80043ca:	4818      	ldr	r0, [pc, #96]	; (800442c <netif_do_set_ipaddr+0x90>)
 80043cc:	f008 ff48 	bl	800d260 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	3304      	adds	r3, #4
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d01c      	beq.n	8004418 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	3304      	adds	r3, #4
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80043ee:	f107 0314 	add.w	r3, r7, #20
 80043f2:	4619      	mov	r1, r3
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f7ff ffbf 	bl	8004378 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d002      	beq.n	8004406 <netif_do_set_ipaddr+0x6a>
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	e000      	b.n	8004408 <netif_do_set_ipaddr+0x6c>
 8004406:	2300      	movs	r3, #0
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800440c:	2101      	movs	r1, #1
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f000 f8d2 	bl	80045b8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8004414:	2301      	movs	r3, #1
 8004416:	e000      	b.n	800441a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3718      	adds	r7, #24
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	0800e6b4 	.word	0x0800e6b4
 8004428:	0800e7cc 	.word	0x0800e7cc
 800442c:	0800e704 	.word	0x0800e704

08004430 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8004430:	b480      	push	{r7}
 8004432:	b085      	sub	sp, #20
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	3308      	adds	r3, #8
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	429a      	cmp	r2, r3
 8004448:	d00a      	beq.n	8004460 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d002      	beq.n	8004456 <netif_do_set_netmask+0x26>
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	e000      	b.n	8004458 <netif_do_set_netmask+0x28>
 8004456:	2300      	movs	r3, #0
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800445c:	2301      	movs	r3, #1
 800445e:	e000      	b.n	8004462 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3714      	adds	r7, #20
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr

0800446e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800446e:	b480      	push	{r7}
 8004470:	b085      	sub	sp, #20
 8004472:	af00      	add	r7, sp, #0
 8004474:	60f8      	str	r0, [r7, #12]
 8004476:	60b9      	str	r1, [r7, #8]
 8004478:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	330c      	adds	r3, #12
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	429a      	cmp	r2, r3
 8004486:	d00a      	beq.n	800449e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d002      	beq.n	8004494 <netif_do_set_gw+0x26>
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	e000      	b.n	8004496 <netif_do_set_gw+0x28>
 8004494:	2300      	movs	r3, #0
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800449a:	2301      	movs	r3, #1
 800449c:	e000      	b.n	80044a0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b088      	sub	sp, #32
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
 80044b8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80044ba:	2300      	movs	r3, #0
 80044bc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80044be:	2300      	movs	r3, #0
 80044c0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80044c8:	4b1c      	ldr	r3, [pc, #112]	; (800453c <netif_set_addr+0x90>)
 80044ca:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80044d2:	4b1a      	ldr	r3, [pc, #104]	; (800453c <netif_set_addr+0x90>)
 80044d4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80044dc:	4b17      	ldr	r3, [pc, #92]	; (800453c <netif_set_addr+0x90>)
 80044de:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d003      	beq.n	80044ee <netif_set_addr+0x42>
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <netif_set_addr+0x46>
 80044ee:	2301      	movs	r3, #1
 80044f0:	e000      	b.n	80044f4 <netif_set_addr+0x48>
 80044f2:	2300      	movs	r3, #0
 80044f4:	617b      	str	r3, [r7, #20]
  if (remove) {
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d006      	beq.n	800450a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80044fc:	f107 0310 	add.w	r3, r7, #16
 8004500:	461a      	mov	r2, r3
 8004502:	68b9      	ldr	r1, [r7, #8]
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f7ff ff49 	bl	800439c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800450a:	69fa      	ldr	r2, [r7, #28]
 800450c:	6879      	ldr	r1, [r7, #4]
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f7ff ff8e 	bl	8004430 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	6839      	ldr	r1, [r7, #0]
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f7ff ffa8 	bl	800446e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d106      	bne.n	8004532 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004524:	f107 0310 	add.w	r3, r7, #16
 8004528:	461a      	mov	r2, r3
 800452a:	68b9      	ldr	r1, [r7, #8]
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	f7ff ff35 	bl	800439c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8004532:	bf00      	nop
 8004534:	3720      	adds	r7, #32
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	08010de4 	.word	0x08010de4

08004540 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8004548:	4a04      	ldr	r2, [pc, #16]	; (800455c <netif_set_default+0x1c>)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800454e:	bf00      	nop
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	20008240 	.word	0x20008240

08004560 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d107      	bne.n	800457e <netif_set_up+0x1e>
 800456e:	4b0f      	ldr	r3, [pc, #60]	; (80045ac <netif_set_up+0x4c>)
 8004570:	f44f 7254 	mov.w	r2, #848	; 0x350
 8004574:	490e      	ldr	r1, [pc, #56]	; (80045b0 <netif_set_up+0x50>)
 8004576:	480f      	ldr	r0, [pc, #60]	; (80045b4 <netif_set_up+0x54>)
 8004578:	f008 fe72 	bl	800d260 <iprintf>
 800457c:	e013      	b.n	80045a6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b00      	cmp	r3, #0
 800458a:	d10c      	bne.n	80045a6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004592:	f043 0301 	orr.w	r3, r3, #1
 8004596:	b2da      	uxtb	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800459e:	2103      	movs	r1, #3
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 f809 	bl	80045b8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80045a6:	3708      	adds	r7, #8
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	0800e6b4 	.word	0x0800e6b4
 80045b0:	0800e83c 	.word	0x0800e83c
 80045b4:	0800e704 	.word	0x0800e704

080045b8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	460b      	mov	r3, r1
 80045c2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d106      	bne.n	80045d8 <netif_issue_reports+0x20>
 80045ca:	4b18      	ldr	r3, [pc, #96]	; (800462c <netif_issue_reports+0x74>)
 80045cc:	f240 326d 	movw	r2, #877	; 0x36d
 80045d0:	4917      	ldr	r1, [pc, #92]	; (8004630 <netif_issue_reports+0x78>)
 80045d2:	4818      	ldr	r0, [pc, #96]	; (8004634 <netif_issue_reports+0x7c>)
 80045d4:	f008 fe44 	bl	800d260 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80045de:	f003 0304 	and.w	r3, r3, #4
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d01e      	beq.n	8004624 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80045ec:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d017      	beq.n	8004624 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80045f4:	78fb      	ldrb	r3, [r7, #3]
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d013      	beq.n	8004626 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	3304      	adds	r3, #4
 8004602:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00e      	beq.n	8004626 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800460e:	f003 0308 	and.w	r3, r3, #8
 8004612:	2b00      	cmp	r3, #0
 8004614:	d007      	beq.n	8004626 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	3304      	adds	r3, #4
 800461a:	4619      	mov	r1, r3
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f007 fa49 	bl	800bab4 <etharp_request>
 8004622:	e000      	b.n	8004626 <netif_issue_reports+0x6e>
    return;
 8004624:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8004626:	3708      	adds	r7, #8
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	0800e6b4 	.word	0x0800e6b4
 8004630:	0800e858 	.word	0x0800e858
 8004634:	0800e704 	.word	0x0800e704

08004638 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d107      	bne.n	8004656 <netif_set_down+0x1e>
 8004646:	4b12      	ldr	r3, [pc, #72]	; (8004690 <netif_set_down+0x58>)
 8004648:	f240 329b 	movw	r2, #923	; 0x39b
 800464c:	4911      	ldr	r1, [pc, #68]	; (8004694 <netif_set_down+0x5c>)
 800464e:	4812      	ldr	r0, [pc, #72]	; (8004698 <netif_set_down+0x60>)
 8004650:	f008 fe06 	bl	800d260 <iprintf>
 8004654:	e019      	b.n	800468a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	2b00      	cmp	r3, #0
 8004662:	d012      	beq.n	800468a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800466a:	f023 0301 	bic.w	r3, r3, #1
 800466e:	b2da      	uxtb	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800467c:	f003 0308 	and.w	r3, r3, #8
 8004680:	2b00      	cmp	r3, #0
 8004682:	d002      	beq.n	800468a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f006 fdd3 	bl	800b230 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800468a:	3708      	adds	r7, #8
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	0800e6b4 	.word	0x0800e6b4
 8004694:	0800e87c 	.word	0x0800e87c
 8004698:	0800e704 	.word	0x0800e704

0800469c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d107      	bne.n	80046ba <netif_set_link_up+0x1e>
 80046aa:	4b13      	ldr	r3, [pc, #76]	; (80046f8 <netif_set_link_up+0x5c>)
 80046ac:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80046b0:	4912      	ldr	r1, [pc, #72]	; (80046fc <netif_set_link_up+0x60>)
 80046b2:	4813      	ldr	r0, [pc, #76]	; (8004700 <netif_set_link_up+0x64>)
 80046b4:	f008 fdd4 	bl	800d260 <iprintf>
 80046b8:	e01b      	b.n	80046f2 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80046c0:	f003 0304 	and.w	r3, r3, #4
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d114      	bne.n	80046f2 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80046ce:	f043 0304 	orr.w	r3, r3, #4
 80046d2:	b2da      	uxtb	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80046da:	2103      	movs	r1, #3
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f7ff ff6b 	bl	80045b8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	69db      	ldr	r3, [r3, #28]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <netif_set_link_up+0x56>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	69db      	ldr	r3, [r3, #28]
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80046f2:	3708      	adds	r7, #8
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	0800e6b4 	.word	0x0800e6b4
 80046fc:	0800e89c 	.word	0x0800e89c
 8004700:	0800e704 	.word	0x0800e704

08004704 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d107      	bne.n	8004722 <netif_set_link_down+0x1e>
 8004712:	4b11      	ldr	r3, [pc, #68]	; (8004758 <netif_set_link_down+0x54>)
 8004714:	f240 4206 	movw	r2, #1030	; 0x406
 8004718:	4910      	ldr	r1, [pc, #64]	; (800475c <netif_set_link_down+0x58>)
 800471a:	4811      	ldr	r0, [pc, #68]	; (8004760 <netif_set_link_down+0x5c>)
 800471c:	f008 fda0 	bl	800d260 <iprintf>
 8004720:	e017      	b.n	8004752 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004728:	f003 0304 	and.w	r3, r3, #4
 800472c:	2b00      	cmp	r3, #0
 800472e:	d010      	beq.n	8004752 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004736:	f023 0304 	bic.w	r3, r3, #4
 800473a:	b2da      	uxtb	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	69db      	ldr	r3, [r3, #28]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d003      	beq.n	8004752 <netif_set_link_down+0x4e>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	69db      	ldr	r3, [r3, #28]
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8004752:	3708      	adds	r7, #8
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	0800e6b4 	.word	0x0800e6b4
 800475c:	0800e8c0 	.word	0x0800e8c0
 8004760:	0800e704 	.word	0x0800e704

08004764 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d002      	beq.n	800477a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	61da      	str	r2, [r3, #28]
  }
}
 800477a:	bf00      	nop
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr

08004786 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8004786:	b480      	push	{r7}
 8004788:	b085      	sub	sp, #20
 800478a:	af00      	add	r7, sp, #0
 800478c:	60f8      	str	r0, [r7, #12]
 800478e:	60b9      	str	r1, [r7, #8]
 8004790:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8004792:	f06f 030b 	mvn.w	r3, #11
}
 8004796:	4618      	mov	r0, r3
 8004798:	3714      	adds	r7, #20
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
	...

080047a4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	4603      	mov	r3, r0
 80047ac:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80047ae:	79fb      	ldrb	r3, [r7, #7]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d013      	beq.n	80047dc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80047b4:	4b0d      	ldr	r3, [pc, #52]	; (80047ec <netif_get_by_index+0x48>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	60fb      	str	r3, [r7, #12]
 80047ba:	e00c      	b.n	80047d6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80047c2:	3301      	adds	r3, #1
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	79fa      	ldrb	r2, [r7, #7]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d101      	bne.n	80047d0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	e006      	b.n	80047de <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	60fb      	str	r3, [r7, #12]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1ef      	bne.n	80047bc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3714      	adds	r7, #20
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	2000823c 	.word	0x2000823c

080047f0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80047f6:	4b0c      	ldr	r3, [pc, #48]	; (8004828 <pbuf_free_ooseq+0x38>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80047fc:	4b0b      	ldr	r3, [pc, #44]	; (800482c <pbuf_free_ooseq+0x3c>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	607b      	str	r3, [r7, #4]
 8004802:	e00a      	b.n	800481a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004808:	2b00      	cmp	r3, #0
 800480a:	d003      	beq.n	8004814 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f002 f93d 	bl	8006a8c <tcp_free_ooseq>
      return;
 8004812:	e005      	b.n	8004820 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	607b      	str	r3, [r7, #4]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1f1      	bne.n	8004804 <pbuf_free_ooseq+0x14>
    }
  }
}
 8004820:	3708      	adds	r7, #8
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	20008245 	.word	0x20008245
 800482c:	20008254 	.word	0x20008254

08004830 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8004830:	b480      	push	{r7}
 8004832:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8004834:	4b03      	ldr	r3, [pc, #12]	; (8004844 <pbuf_pool_is_empty+0x14>)
 8004836:	2201      	movs	r2, #1
 8004838:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800483a:	bf00      	nop
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr
 8004844:	20008245 	.word	0x20008245

08004848 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	4611      	mov	r1, r2
 8004854:	461a      	mov	r2, r3
 8004856:	460b      	mov	r3, r1
 8004858:	80fb      	strh	r3, [r7, #6]
 800485a:	4613      	mov	r3, r2
 800485c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	88fa      	ldrh	r2, [r7, #6]
 800486e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	88ba      	ldrh	r2, [r7, #4]
 8004874:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8004876:	8b3b      	ldrh	r3, [r7, #24]
 8004878:	b2da      	uxtb	r2, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	7f3a      	ldrb	r2, [r7, #28]
 8004882:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2201      	movs	r2, #1
 8004888:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	73da      	strb	r2, [r3, #15]
}
 8004890:	bf00      	nop
 8004892:	3714      	adds	r7, #20
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b08c      	sub	sp, #48	; 0x30
 80048a0:	af02      	add	r7, sp, #8
 80048a2:	4603      	mov	r3, r0
 80048a4:	71fb      	strb	r3, [r7, #7]
 80048a6:	460b      	mov	r3, r1
 80048a8:	80bb      	strh	r3, [r7, #4]
 80048aa:	4613      	mov	r3, r2
 80048ac:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80048ae:	79fb      	ldrb	r3, [r7, #7]
 80048b0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80048b2:	887b      	ldrh	r3, [r7, #2]
 80048b4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80048b8:	d07f      	beq.n	80049ba <pbuf_alloc+0x11e>
 80048ba:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80048be:	f300 80c8 	bgt.w	8004a52 <pbuf_alloc+0x1b6>
 80048c2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80048c6:	d010      	beq.n	80048ea <pbuf_alloc+0x4e>
 80048c8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80048cc:	f300 80c1 	bgt.w	8004a52 <pbuf_alloc+0x1b6>
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d002      	beq.n	80048da <pbuf_alloc+0x3e>
 80048d4:	2b41      	cmp	r3, #65	; 0x41
 80048d6:	f040 80bc 	bne.w	8004a52 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80048da:	887a      	ldrh	r2, [r7, #2]
 80048dc:	88bb      	ldrh	r3, [r7, #4]
 80048de:	4619      	mov	r1, r3
 80048e0:	2000      	movs	r0, #0
 80048e2:	f000 f8d1 	bl	8004a88 <pbuf_alloc_reference>
 80048e6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80048e8:	e0bd      	b.n	8004a66 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80048ea:	2300      	movs	r3, #0
 80048ec:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80048ee:	2300      	movs	r3, #0
 80048f0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80048f2:	88bb      	ldrh	r3, [r7, #4]
 80048f4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80048f6:	2008      	movs	r0, #8
 80048f8:	f7ff fbce 	bl	8004098 <memp_malloc>
 80048fc:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d109      	bne.n	8004918 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8004904:	f7ff ff94 	bl	8004830 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8004908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490a:	2b00      	cmp	r3, #0
 800490c:	d002      	beq.n	8004914 <pbuf_alloc+0x78>
            pbuf_free(p);
 800490e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004910:	f000 faa8 	bl	8004e64 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8004914:	2300      	movs	r3, #0
 8004916:	e0a7      	b.n	8004a68 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8004918:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800491a:	3303      	adds	r3, #3
 800491c:	b29b      	uxth	r3, r3
 800491e:	f023 0303 	bic.w	r3, r3, #3
 8004922:	b29b      	uxth	r3, r3
 8004924:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8004928:	b29b      	uxth	r3, r3
 800492a:	8b7a      	ldrh	r2, [r7, #26]
 800492c:	4293      	cmp	r3, r2
 800492e:	bf28      	it	cs
 8004930:	4613      	movcs	r3, r2
 8004932:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8004934:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004936:	3310      	adds	r3, #16
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	4413      	add	r3, r2
 800493c:	3303      	adds	r3, #3
 800493e:	f023 0303 	bic.w	r3, r3, #3
 8004942:	4618      	mov	r0, r3
 8004944:	89f9      	ldrh	r1, [r7, #14]
 8004946:	8b7a      	ldrh	r2, [r7, #26]
 8004948:	2300      	movs	r3, #0
 800494a:	9301      	str	r3, [sp, #4]
 800494c:	887b      	ldrh	r3, [r7, #2]
 800494e:	9300      	str	r3, [sp, #0]
 8004950:	460b      	mov	r3, r1
 8004952:	4601      	mov	r1, r0
 8004954:	6938      	ldr	r0, [r7, #16]
 8004956:	f7ff ff77 	bl	8004848 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f003 0303 	and.w	r3, r3, #3
 8004962:	2b00      	cmp	r3, #0
 8004964:	d006      	beq.n	8004974 <pbuf_alloc+0xd8>
 8004966:	4b42      	ldr	r3, [pc, #264]	; (8004a70 <pbuf_alloc+0x1d4>)
 8004968:	f44f 7280 	mov.w	r2, #256	; 0x100
 800496c:	4941      	ldr	r1, [pc, #260]	; (8004a74 <pbuf_alloc+0x1d8>)
 800496e:	4842      	ldr	r0, [pc, #264]	; (8004a78 <pbuf_alloc+0x1dc>)
 8004970:	f008 fc76 	bl	800d260 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8004974:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004976:	3303      	adds	r3, #3
 8004978:	f023 0303 	bic.w	r3, r3, #3
 800497c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8004980:	d106      	bne.n	8004990 <pbuf_alloc+0xf4>
 8004982:	4b3b      	ldr	r3, [pc, #236]	; (8004a70 <pbuf_alloc+0x1d4>)
 8004984:	f44f 7281 	mov.w	r2, #258	; 0x102
 8004988:	493c      	ldr	r1, [pc, #240]	; (8004a7c <pbuf_alloc+0x1e0>)
 800498a:	483b      	ldr	r0, [pc, #236]	; (8004a78 <pbuf_alloc+0x1dc>)
 800498c:	f008 fc68 	bl	800d260 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8004990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004992:	2b00      	cmp	r3, #0
 8004994:	d102      	bne.n	800499c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	627b      	str	r3, [r7, #36]	; 0x24
 800499a:	e002      	b.n	80049a2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80049a6:	8b7a      	ldrh	r2, [r7, #26]
 80049a8:	89fb      	ldrh	r3, [r7, #14]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80049ae:	2300      	movs	r3, #0
 80049b0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80049b2:	8b7b      	ldrh	r3, [r7, #26]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d19e      	bne.n	80048f6 <pbuf_alloc+0x5a>
      break;
 80049b8:	e055      	b.n	8004a66 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80049ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80049bc:	3303      	adds	r3, #3
 80049be:	b29b      	uxth	r3, r3
 80049c0:	f023 0303 	bic.w	r3, r3, #3
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	88bb      	ldrh	r3, [r7, #4]
 80049c8:	3303      	adds	r3, #3
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	f023 0303 	bic.w	r3, r3, #3
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	4413      	add	r3, r2
 80049d4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80049d6:	8b3b      	ldrh	r3, [r7, #24]
 80049d8:	3310      	adds	r3, #16
 80049da:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80049dc:	8b3a      	ldrh	r2, [r7, #24]
 80049de:	88bb      	ldrh	r3, [r7, #4]
 80049e0:	3303      	adds	r3, #3
 80049e2:	f023 0303 	bic.w	r3, r3, #3
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d306      	bcc.n	80049f8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80049ea:	8afa      	ldrh	r2, [r7, #22]
 80049ec:	88bb      	ldrh	r3, [r7, #4]
 80049ee:	3303      	adds	r3, #3
 80049f0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d201      	bcs.n	80049fc <pbuf_alloc+0x160>
        return NULL;
 80049f8:	2300      	movs	r3, #0
 80049fa:	e035      	b.n	8004a68 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80049fc:	8afb      	ldrh	r3, [r7, #22]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7ff f9ba 	bl	8003d78 <mem_malloc>
 8004a04:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8004a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d101      	bne.n	8004a10 <pbuf_alloc+0x174>
        return NULL;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	e02b      	b.n	8004a68 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8004a10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a12:	3310      	adds	r3, #16
 8004a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a16:	4413      	add	r3, r2
 8004a18:	3303      	adds	r3, #3
 8004a1a:	f023 0303 	bic.w	r3, r3, #3
 8004a1e:	4618      	mov	r0, r3
 8004a20:	88b9      	ldrh	r1, [r7, #4]
 8004a22:	88ba      	ldrh	r2, [r7, #4]
 8004a24:	2300      	movs	r3, #0
 8004a26:	9301      	str	r3, [sp, #4]
 8004a28:	887b      	ldrh	r3, [r7, #2]
 8004a2a:	9300      	str	r3, [sp, #0]
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	4601      	mov	r1, r0
 8004a30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a32:	f7ff ff09 	bl	8004848 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8004a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f003 0303 	and.w	r3, r3, #3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d010      	beq.n	8004a64 <pbuf_alloc+0x1c8>
 8004a42:	4b0b      	ldr	r3, [pc, #44]	; (8004a70 <pbuf_alloc+0x1d4>)
 8004a44:	f44f 7291 	mov.w	r2, #290	; 0x122
 8004a48:	490d      	ldr	r1, [pc, #52]	; (8004a80 <pbuf_alloc+0x1e4>)
 8004a4a:	480b      	ldr	r0, [pc, #44]	; (8004a78 <pbuf_alloc+0x1dc>)
 8004a4c:	f008 fc08 	bl	800d260 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8004a50:	e008      	b.n	8004a64 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8004a52:	4b07      	ldr	r3, [pc, #28]	; (8004a70 <pbuf_alloc+0x1d4>)
 8004a54:	f240 1227 	movw	r2, #295	; 0x127
 8004a58:	490a      	ldr	r1, [pc, #40]	; (8004a84 <pbuf_alloc+0x1e8>)
 8004a5a:	4807      	ldr	r0, [pc, #28]	; (8004a78 <pbuf_alloc+0x1dc>)
 8004a5c:	f008 fc00 	bl	800d260 <iprintf>
      return NULL;
 8004a60:	2300      	movs	r3, #0
 8004a62:	e001      	b.n	8004a68 <pbuf_alloc+0x1cc>
      break;
 8004a64:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8004a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3728      	adds	r7, #40	; 0x28
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	0800e8e4 	.word	0x0800e8e4
 8004a74:	0800e914 	.word	0x0800e914
 8004a78:	0800e944 	.word	0x0800e944
 8004a7c:	0800e96c 	.word	0x0800e96c
 8004a80:	0800e9a0 	.word	0x0800e9a0
 8004a84:	0800e9cc 	.word	0x0800e9cc

08004a88 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af02      	add	r7, sp, #8
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	460b      	mov	r3, r1
 8004a92:	807b      	strh	r3, [r7, #2]
 8004a94:	4613      	mov	r3, r2
 8004a96:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8004a98:	883b      	ldrh	r3, [r7, #0]
 8004a9a:	2b41      	cmp	r3, #65	; 0x41
 8004a9c:	d009      	beq.n	8004ab2 <pbuf_alloc_reference+0x2a>
 8004a9e:	883b      	ldrh	r3, [r7, #0]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d006      	beq.n	8004ab2 <pbuf_alloc_reference+0x2a>
 8004aa4:	4b0f      	ldr	r3, [pc, #60]	; (8004ae4 <pbuf_alloc_reference+0x5c>)
 8004aa6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8004aaa:	490f      	ldr	r1, [pc, #60]	; (8004ae8 <pbuf_alloc_reference+0x60>)
 8004aac:	480f      	ldr	r0, [pc, #60]	; (8004aec <pbuf_alloc_reference+0x64>)
 8004aae:	f008 fbd7 	bl	800d260 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8004ab2:	2007      	movs	r0, #7
 8004ab4:	f7ff faf0 	bl	8004098 <memp_malloc>
 8004ab8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d101      	bne.n	8004ac4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	e00b      	b.n	8004adc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8004ac4:	8879      	ldrh	r1, [r7, #2]
 8004ac6:	887a      	ldrh	r2, [r7, #2]
 8004ac8:	2300      	movs	r3, #0
 8004aca:	9301      	str	r3, [sp, #4]
 8004acc:	883b      	ldrh	r3, [r7, #0]
 8004ace:	9300      	str	r3, [sp, #0]
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	6879      	ldr	r1, [r7, #4]
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f7ff feb7 	bl	8004848 <pbuf_init_alloced_pbuf>
  return p;
 8004ada:	68fb      	ldr	r3, [r7, #12]
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	0800e8e4 	.word	0x0800e8e4
 8004ae8:	0800e9e8 	.word	0x0800e9e8
 8004aec:	0800e944 	.word	0x0800e944

08004af0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b088      	sub	sp, #32
 8004af4:	af02      	add	r7, sp, #8
 8004af6:	607b      	str	r3, [r7, #4]
 8004af8:	4603      	mov	r3, r0
 8004afa:	73fb      	strb	r3, [r7, #15]
 8004afc:	460b      	mov	r3, r1
 8004afe:	81bb      	strh	r3, [r7, #12]
 8004b00:	4613      	mov	r3, r2
 8004b02:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8004b04:	7bfb      	ldrb	r3, [r7, #15]
 8004b06:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8004b08:	8a7b      	ldrh	r3, [r7, #18]
 8004b0a:	3303      	adds	r3, #3
 8004b0c:	f023 0203 	bic.w	r2, r3, #3
 8004b10:	89bb      	ldrh	r3, [r7, #12]
 8004b12:	441a      	add	r2, r3
 8004b14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d901      	bls.n	8004b1e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	e018      	b.n	8004b50 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8004b1e:	6a3b      	ldr	r3, [r7, #32]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d007      	beq.n	8004b34 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8004b24:	8a7b      	ldrh	r3, [r7, #18]
 8004b26:	3303      	adds	r3, #3
 8004b28:	f023 0303 	bic.w	r3, r3, #3
 8004b2c:	6a3a      	ldr	r2, [r7, #32]
 8004b2e:	4413      	add	r3, r2
 8004b30:	617b      	str	r3, [r7, #20]
 8004b32:	e001      	b.n	8004b38 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8004b34:	2300      	movs	r3, #0
 8004b36:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	89b9      	ldrh	r1, [r7, #12]
 8004b3c:	89ba      	ldrh	r2, [r7, #12]
 8004b3e:	2302      	movs	r3, #2
 8004b40:	9301      	str	r3, [sp, #4]
 8004b42:	897b      	ldrh	r3, [r7, #10]
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	460b      	mov	r3, r1
 8004b48:	6979      	ldr	r1, [r7, #20]
 8004b4a:	f7ff fe7d 	bl	8004848 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8004b4e:	687b      	ldr	r3, [r7, #4]
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3718      	adds	r7, #24
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	460b      	mov	r3, r1
 8004b62:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d106      	bne.n	8004b78 <pbuf_realloc+0x20>
 8004b6a:	4b3a      	ldr	r3, [pc, #232]	; (8004c54 <pbuf_realloc+0xfc>)
 8004b6c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8004b70:	4939      	ldr	r1, [pc, #228]	; (8004c58 <pbuf_realloc+0x100>)
 8004b72:	483a      	ldr	r0, [pc, #232]	; (8004c5c <pbuf_realloc+0x104>)
 8004b74:	f008 fb74 	bl	800d260 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	891b      	ldrh	r3, [r3, #8]
 8004b7c:	887a      	ldrh	r2, [r7, #2]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d263      	bcs.n	8004c4a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	891a      	ldrh	r2, [r3, #8]
 8004b86:	887b      	ldrh	r3, [r7, #2]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8004b8c:	887b      	ldrh	r3, [r7, #2]
 8004b8e:	817b      	strh	r3, [r7, #10]
  q = p;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8004b94:	e018      	b.n	8004bc8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	895b      	ldrh	r3, [r3, #10]
 8004b9a:	897a      	ldrh	r2, [r7, #10]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	891a      	ldrh	r2, [r3, #8]
 8004ba4:	893b      	ldrh	r3, [r7, #8]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d106      	bne.n	8004bc8 <pbuf_realloc+0x70>
 8004bba:	4b26      	ldr	r3, [pc, #152]	; (8004c54 <pbuf_realloc+0xfc>)
 8004bbc:	f240 12af 	movw	r2, #431	; 0x1af
 8004bc0:	4927      	ldr	r1, [pc, #156]	; (8004c60 <pbuf_realloc+0x108>)
 8004bc2:	4826      	ldr	r0, [pc, #152]	; (8004c5c <pbuf_realloc+0x104>)
 8004bc4:	f008 fb4c 	bl	800d260 <iprintf>
  while (rem_len > q->len) {
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	895b      	ldrh	r3, [r3, #10]
 8004bcc:	897a      	ldrh	r2, [r7, #10]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d8e1      	bhi.n	8004b96 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	7b1b      	ldrb	r3, [r3, #12]
 8004bd6:	f003 030f 	and.w	r3, r3, #15
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d121      	bne.n	8004c22 <pbuf_realloc+0xca>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	895b      	ldrh	r3, [r3, #10]
 8004be2:	897a      	ldrh	r2, [r7, #10]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d01c      	beq.n	8004c22 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	7b5b      	ldrb	r3, [r3, #13]
 8004bec:	f003 0302 	and.w	r3, r3, #2
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d116      	bne.n	8004c22 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	685a      	ldr	r2, [r3, #4]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	897b      	ldrh	r3, [r7, #10]
 8004c00:	4413      	add	r3, r2
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	4619      	mov	r1, r3
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f7fe ffba 	bl	8003b80 <mem_trim>
 8004c0c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d106      	bne.n	8004c22 <pbuf_realloc+0xca>
 8004c14:	4b0f      	ldr	r3, [pc, #60]	; (8004c54 <pbuf_realloc+0xfc>)
 8004c16:	f240 12bd 	movw	r2, #445	; 0x1bd
 8004c1a:	4912      	ldr	r1, [pc, #72]	; (8004c64 <pbuf_realloc+0x10c>)
 8004c1c:	480f      	ldr	r0, [pc, #60]	; (8004c5c <pbuf_realloc+0x104>)
 8004c1e:	f008 fb1f 	bl	800d260 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	897a      	ldrh	r2, [r7, #10]
 8004c26:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	895a      	ldrh	r2, [r3, #10]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d004      	beq.n	8004c42 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f000 f911 	bl	8004e64 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	601a      	str	r2, [r3, #0]
 8004c48:	e000      	b.n	8004c4c <pbuf_realloc+0xf4>
    return;
 8004c4a:	bf00      	nop

}
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	0800e8e4 	.word	0x0800e8e4
 8004c58:	0800e9fc 	.word	0x0800e9fc
 8004c5c:	0800e944 	.word	0x0800e944
 8004c60:	0800ea14 	.word	0x0800ea14
 8004c64:	0800ea2c 	.word	0x0800ea2c

08004c68 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	4613      	mov	r3, r2
 8004c74:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d106      	bne.n	8004c8a <pbuf_add_header_impl+0x22>
 8004c7c:	4b2b      	ldr	r3, [pc, #172]	; (8004d2c <pbuf_add_header_impl+0xc4>)
 8004c7e:	f240 12df 	movw	r2, #479	; 0x1df
 8004c82:	492b      	ldr	r1, [pc, #172]	; (8004d30 <pbuf_add_header_impl+0xc8>)
 8004c84:	482b      	ldr	r0, [pc, #172]	; (8004d34 <pbuf_add_header_impl+0xcc>)
 8004c86:	f008 faeb 	bl	800d260 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d003      	beq.n	8004c98 <pbuf_add_header_impl+0x30>
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c96:	d301      	bcc.n	8004c9c <pbuf_add_header_impl+0x34>
    return 1;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e043      	b.n	8004d24 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <pbuf_add_header_impl+0x3e>
    return 0;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	e03e      	b.n	8004d24 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	891a      	ldrh	r2, [r3, #8]
 8004cae:	8a7b      	ldrh	r3, [r7, #18]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	8a7a      	ldrh	r2, [r7, #18]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d901      	bls.n	8004cbe <pbuf_add_header_impl+0x56>
    return 1;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e032      	b.n	8004d24 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	7b1b      	ldrb	r3, [r3, #12]
 8004cc2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8004cc4:	8a3b      	ldrh	r3, [r7, #16]
 8004cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00c      	beq.n	8004ce8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	425b      	negs	r3, r3
 8004cd6:	4413      	add	r3, r2
 8004cd8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	3310      	adds	r3, #16
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d20d      	bcs.n	8004d00 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e01d      	b.n	8004d24 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8004ce8:	79fb      	ldrb	r3, [r7, #7]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d006      	beq.n	8004cfc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	425b      	negs	r3, r3
 8004cf6:	4413      	add	r3, r2
 8004cf8:	617b      	str	r3, [r7, #20]
 8004cfa:	e001      	b.n	8004d00 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e011      	b.n	8004d24 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	895a      	ldrh	r2, [r3, #10]
 8004d0a:	8a7b      	ldrh	r3, [r7, #18]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	891a      	ldrh	r2, [r3, #8]
 8004d18:	8a7b      	ldrh	r3, [r7, #18]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	811a      	strh	r2, [r3, #8]


  return 0;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3718      	adds	r7, #24
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	0800e8e4 	.word	0x0800e8e4
 8004d30:	0800ea48 	.word	0x0800ea48
 8004d34:	0800e944 	.word	0x0800e944

08004d38 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8004d42:	2200      	movs	r2, #0
 8004d44:	6839      	ldr	r1, [r7, #0]
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f7ff ff8e 	bl	8004c68 <pbuf_add_header_impl>
 8004d4c:	4603      	mov	r3, r0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3708      	adds	r7, #8
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
	...

08004d58 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d106      	bne.n	8004d76 <pbuf_remove_header+0x1e>
 8004d68:	4b20      	ldr	r3, [pc, #128]	; (8004dec <pbuf_remove_header+0x94>)
 8004d6a:	f240 224b 	movw	r2, #587	; 0x24b
 8004d6e:	4920      	ldr	r1, [pc, #128]	; (8004df0 <pbuf_remove_header+0x98>)
 8004d70:	4820      	ldr	r0, [pc, #128]	; (8004df4 <pbuf_remove_header+0x9c>)
 8004d72:	f008 fa75 	bl	800d260 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d003      	beq.n	8004d84 <pbuf_remove_header+0x2c>
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d82:	d301      	bcc.n	8004d88 <pbuf_remove_header+0x30>
    return 1;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e02c      	b.n	8004de2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <pbuf_remove_header+0x3a>
    return 0;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	e027      	b.n	8004de2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	895b      	ldrh	r3, [r3, #10]
 8004d9a:	89fa      	ldrh	r2, [r7, #14]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d908      	bls.n	8004db2 <pbuf_remove_header+0x5a>
 8004da0:	4b12      	ldr	r3, [pc, #72]	; (8004dec <pbuf_remove_header+0x94>)
 8004da2:	f240 2255 	movw	r2, #597	; 0x255
 8004da6:	4914      	ldr	r1, [pc, #80]	; (8004df8 <pbuf_remove_header+0xa0>)
 8004da8:	4812      	ldr	r0, [pc, #72]	; (8004df4 <pbuf_remove_header+0x9c>)
 8004daa:	f008 fa59 	bl	800d260 <iprintf>
 8004dae:	2301      	movs	r3, #1
 8004db0:	e017      	b.n	8004de2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685a      	ldr	r2, [r3, #4]
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	441a      	add	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	895a      	ldrh	r2, [r3, #10]
 8004dc8:	89fb      	ldrh	r3, [r7, #14]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	891a      	ldrh	r2, [r3, #8]
 8004dd6:	89fb      	ldrh	r3, [r7, #14]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	0800e8e4 	.word	0x0800e8e4
 8004df0:	0800ea48 	.word	0x0800ea48
 8004df4:	0800e944 	.word	0x0800e944
 8004df8:	0800ea54 	.word	0x0800ea54

08004dfc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	460b      	mov	r3, r1
 8004e06:	807b      	strh	r3, [r7, #2]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8004e0c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	da08      	bge.n	8004e26 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8004e14:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004e18:	425b      	negs	r3, r3
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f7ff ff9b 	bl	8004d58 <pbuf_remove_header>
 8004e22:	4603      	mov	r3, r0
 8004e24:	e007      	b.n	8004e36 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8004e26:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004e2a:	787a      	ldrb	r2, [r7, #1]
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f7ff ff1a 	bl	8004c68 <pbuf_add_header_impl>
 8004e34:	4603      	mov	r3, r0
  }
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b082      	sub	sp, #8
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
 8004e46:	460b      	mov	r3, r1
 8004e48:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8004e4a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	4619      	mov	r1, r3
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f7ff ffd2 	bl	8004dfc <pbuf_header_impl>
 8004e58:	4603      	mov	r3, r0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3708      	adds	r7, #8
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
	...

08004e64 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b086      	sub	sp, #24
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10b      	bne.n	8004e8a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d106      	bne.n	8004e86 <pbuf_free+0x22>
 8004e78:	4b38      	ldr	r3, [pc, #224]	; (8004f5c <pbuf_free+0xf8>)
 8004e7a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8004e7e:	4938      	ldr	r1, [pc, #224]	; (8004f60 <pbuf_free+0xfc>)
 8004e80:	4838      	ldr	r0, [pc, #224]	; (8004f64 <pbuf_free+0x100>)
 8004e82:	f008 f9ed 	bl	800d260 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8004e86:	2300      	movs	r3, #0
 8004e88:	e063      	b.n	8004f52 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8004e8e:	e05c      	b.n	8004f4a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	7b9b      	ldrb	r3, [r3, #14]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d106      	bne.n	8004ea6 <pbuf_free+0x42>
 8004e98:	4b30      	ldr	r3, [pc, #192]	; (8004f5c <pbuf_free+0xf8>)
 8004e9a:	f240 22f1 	movw	r2, #753	; 0x2f1
 8004e9e:	4932      	ldr	r1, [pc, #200]	; (8004f68 <pbuf_free+0x104>)
 8004ea0:	4830      	ldr	r0, [pc, #192]	; (8004f64 <pbuf_free+0x100>)
 8004ea2:	f008 f9dd 	bl	800d260 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	7b9b      	ldrb	r3, [r3, #14]
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	b2da      	uxtb	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	739a      	strb	r2, [r3, #14]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	7b9b      	ldrb	r3, [r3, #14]
 8004eb6:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8004eb8:	7dbb      	ldrb	r3, [r7, #22]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d143      	bne.n	8004f46 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	7b1b      	ldrb	r3, [r3, #12]
 8004ec8:	f003 030f 	and.w	r3, r3, #15
 8004ecc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	7b5b      	ldrb	r3, [r3, #13]
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d011      	beq.n	8004efe <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d106      	bne.n	8004ef4 <pbuf_free+0x90>
 8004ee6:	4b1d      	ldr	r3, [pc, #116]	; (8004f5c <pbuf_free+0xf8>)
 8004ee8:	f240 22ff 	movw	r2, #767	; 0x2ff
 8004eec:	491f      	ldr	r1, [pc, #124]	; (8004f6c <pbuf_free+0x108>)
 8004eee:	481d      	ldr	r0, [pc, #116]	; (8004f64 <pbuf_free+0x100>)
 8004ef0:	f008 f9b6 	bl	800d260 <iprintf>
        pc->custom_free_function(p);
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	4798      	blx	r3
 8004efc:	e01d      	b.n	8004f3a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8004efe:	7bfb      	ldrb	r3, [r7, #15]
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d104      	bne.n	8004f0e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8004f04:	6879      	ldr	r1, [r7, #4]
 8004f06:	2008      	movs	r0, #8
 8004f08:	f7ff f936 	bl	8004178 <memp_free>
 8004f0c:	e015      	b.n	8004f3a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8004f0e:	7bfb      	ldrb	r3, [r7, #15]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d104      	bne.n	8004f1e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8004f14:	6879      	ldr	r1, [r7, #4]
 8004f16:	2007      	movs	r0, #7
 8004f18:	f7ff f92e 	bl	8004178 <memp_free>
 8004f1c:	e00d      	b.n	8004f3a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8004f1e:	7bfb      	ldrb	r3, [r7, #15]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d103      	bne.n	8004f2c <pbuf_free+0xc8>
          mem_free(p);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f7fe fdc1 	bl	8003aac <mem_free>
 8004f2a:	e006      	b.n	8004f3a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8004f2c:	4b0b      	ldr	r3, [pc, #44]	; (8004f5c <pbuf_free+0xf8>)
 8004f2e:	f240 320f 	movw	r2, #783	; 0x30f
 8004f32:	490f      	ldr	r1, [pc, #60]	; (8004f70 <pbuf_free+0x10c>)
 8004f34:	480b      	ldr	r0, [pc, #44]	; (8004f64 <pbuf_free+0x100>)
 8004f36:	f008 f993 	bl	800d260 <iprintf>
        }
      }
      count++;
 8004f3a:	7dfb      	ldrb	r3, [r7, #23]
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	607b      	str	r3, [r7, #4]
 8004f44:	e001      	b.n	8004f4a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8004f46:	2300      	movs	r3, #0
 8004f48:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d19f      	bne.n	8004e90 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8004f50:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3718      	adds	r7, #24
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	0800e8e4 	.word	0x0800e8e4
 8004f60:	0800ea48 	.word	0x0800ea48
 8004f64:	0800e944 	.word	0x0800e944
 8004f68:	0800ea74 	.word	0x0800ea74
 8004f6c:	0800ea8c 	.word	0x0800ea8c
 8004f70:	0800eab0 	.word	0x0800eab0

08004f74 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8004f80:	e005      	b.n	8004f8e <pbuf_clen+0x1a>
    ++len;
 8004f82:	89fb      	ldrh	r3, [r7, #14]
 8004f84:	3301      	adds	r3, #1
 8004f86:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1f6      	bne.n	8004f82 <pbuf_clen+0xe>
  }
  return len;
 8004f94:	89fb      	ldrh	r3, [r7, #14]
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3714      	adds	r7, #20
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
	...

08004fa4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d010      	beq.n	8004fd4 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	7b9b      	ldrb	r3, [r3, #14]
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	b2da      	uxtb	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	7b9b      	ldrb	r3, [r3, #14]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d106      	bne.n	8004fd4 <pbuf_ref+0x30>
 8004fc6:	4b05      	ldr	r3, [pc, #20]	; (8004fdc <pbuf_ref+0x38>)
 8004fc8:	f240 3242 	movw	r2, #834	; 0x342
 8004fcc:	4904      	ldr	r1, [pc, #16]	; (8004fe0 <pbuf_ref+0x3c>)
 8004fce:	4805      	ldr	r0, [pc, #20]	; (8004fe4 <pbuf_ref+0x40>)
 8004fd0:	f008 f946 	bl	800d260 <iprintf>
  }
}
 8004fd4:	bf00      	nop
 8004fd6:	3708      	adds	r7, #8
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	0800e8e4 	.word	0x0800e8e4
 8004fe0:	0800eac4 	.word	0x0800eac4
 8004fe4:	0800e944 	.word	0x0800e944

08004fe8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d002      	beq.n	8004ffe <pbuf_cat+0x16>
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d107      	bne.n	800500e <pbuf_cat+0x26>
 8004ffe:	4b20      	ldr	r3, [pc, #128]	; (8005080 <pbuf_cat+0x98>)
 8005000:	f240 3259 	movw	r2, #857	; 0x359
 8005004:	491f      	ldr	r1, [pc, #124]	; (8005084 <pbuf_cat+0x9c>)
 8005006:	4820      	ldr	r0, [pc, #128]	; (8005088 <pbuf_cat+0xa0>)
 8005008:	f008 f92a 	bl	800d260 <iprintf>
 800500c:	e034      	b.n	8005078 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	60fb      	str	r3, [r7, #12]
 8005012:	e00a      	b.n	800502a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	891a      	ldrh	r2, [r3, #8]
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	891b      	ldrh	r3, [r3, #8]
 800501c:	4413      	add	r3, r2
 800501e:	b29a      	uxth	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	60fb      	str	r3, [r7, #12]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1f0      	bne.n	8005014 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	891a      	ldrh	r2, [r3, #8]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	895b      	ldrh	r3, [r3, #10]
 800503a:	429a      	cmp	r2, r3
 800503c:	d006      	beq.n	800504c <pbuf_cat+0x64>
 800503e:	4b10      	ldr	r3, [pc, #64]	; (8005080 <pbuf_cat+0x98>)
 8005040:	f240 3262 	movw	r2, #866	; 0x362
 8005044:	4911      	ldr	r1, [pc, #68]	; (800508c <pbuf_cat+0xa4>)
 8005046:	4810      	ldr	r0, [pc, #64]	; (8005088 <pbuf_cat+0xa0>)
 8005048:	f008 f90a 	bl	800d260 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d006      	beq.n	8005062 <pbuf_cat+0x7a>
 8005054:	4b0a      	ldr	r3, [pc, #40]	; (8005080 <pbuf_cat+0x98>)
 8005056:	f240 3263 	movw	r2, #867	; 0x363
 800505a:	490d      	ldr	r1, [pc, #52]	; (8005090 <pbuf_cat+0xa8>)
 800505c:	480a      	ldr	r0, [pc, #40]	; (8005088 <pbuf_cat+0xa0>)
 800505e:	f008 f8ff 	bl	800d260 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	891a      	ldrh	r2, [r3, #8]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	891b      	ldrh	r3, [r3, #8]
 800506a:	4413      	add	r3, r2
 800506c:	b29a      	uxth	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	683a      	ldr	r2, [r7, #0]
 8005076:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	0800e8e4 	.word	0x0800e8e4
 8005084:	0800ead8 	.word	0x0800ead8
 8005088:	0800e944 	.word	0x0800e944
 800508c:	0800eb10 	.word	0x0800eb10
 8005090:	0800eb40 	.word	0x0800eb40

08005094 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800509e:	2300      	movs	r3, #0
 80050a0:	617b      	str	r3, [r7, #20]
 80050a2:	2300      	movs	r3, #0
 80050a4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d008      	beq.n	80050be <pbuf_copy+0x2a>
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d005      	beq.n	80050be <pbuf_copy+0x2a>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	891a      	ldrh	r2, [r3, #8]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	891b      	ldrh	r3, [r3, #8]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d209      	bcs.n	80050d2 <pbuf_copy+0x3e>
 80050be:	4b57      	ldr	r3, [pc, #348]	; (800521c <pbuf_copy+0x188>)
 80050c0:	f240 32c9 	movw	r2, #969	; 0x3c9
 80050c4:	4956      	ldr	r1, [pc, #344]	; (8005220 <pbuf_copy+0x18c>)
 80050c6:	4857      	ldr	r0, [pc, #348]	; (8005224 <pbuf_copy+0x190>)
 80050c8:	f008 f8ca 	bl	800d260 <iprintf>
 80050cc:	f06f 030f 	mvn.w	r3, #15
 80050d0:	e09f      	b.n	8005212 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	895b      	ldrh	r3, [r3, #10]
 80050d6:	461a      	mov	r2, r3
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	1ad2      	subs	r2, r2, r3
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	895b      	ldrh	r3, [r3, #10]
 80050e0:	4619      	mov	r1, r3
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	1acb      	subs	r3, r1, r3
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d306      	bcc.n	80050f8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	895b      	ldrh	r3, [r3, #10]
 80050ee:	461a      	mov	r2, r3
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	60fb      	str	r3, [r7, #12]
 80050f6:	e005      	b.n	8005104 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	895b      	ldrh	r3, [r3, #10]
 80050fc:	461a      	mov	r2, r3
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685a      	ldr	r2, [r3, #4]
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	18d0      	adds	r0, r2, r3
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685a      	ldr	r2, [r3, #4]
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	4413      	add	r3, r2
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	4619      	mov	r1, r3
 8005118:	f008 f88c 	bl	800d234 <memcpy>
    offset_to += len;
 800511c:	697a      	ldr	r2, [r7, #20]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	4413      	add	r3, r2
 8005122:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	4413      	add	r3, r2
 800512a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	895b      	ldrh	r3, [r3, #10]
 8005130:	461a      	mov	r2, r3
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	4293      	cmp	r3, r2
 8005136:	d906      	bls.n	8005146 <pbuf_copy+0xb2>
 8005138:	4b38      	ldr	r3, [pc, #224]	; (800521c <pbuf_copy+0x188>)
 800513a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800513e:	493a      	ldr	r1, [pc, #232]	; (8005228 <pbuf_copy+0x194>)
 8005140:	4838      	ldr	r0, [pc, #224]	; (8005224 <pbuf_copy+0x190>)
 8005142:	f008 f88d 	bl	800d260 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	895b      	ldrh	r3, [r3, #10]
 800514a:	461a      	mov	r2, r3
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	4293      	cmp	r3, r2
 8005150:	d906      	bls.n	8005160 <pbuf_copy+0xcc>
 8005152:	4b32      	ldr	r3, [pc, #200]	; (800521c <pbuf_copy+0x188>)
 8005154:	f240 32da 	movw	r2, #986	; 0x3da
 8005158:	4934      	ldr	r1, [pc, #208]	; (800522c <pbuf_copy+0x198>)
 800515a:	4832      	ldr	r0, [pc, #200]	; (8005224 <pbuf_copy+0x190>)
 800515c:	f008 f880 	bl	800d260 <iprintf>
    if (offset_from >= p_from->len) {
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	895b      	ldrh	r3, [r3, #10]
 8005164:	461a      	mov	r2, r3
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	4293      	cmp	r3, r2
 800516a:	d304      	bcc.n	8005176 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800516c:	2300      	movs	r3, #0
 800516e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	895b      	ldrh	r3, [r3, #10]
 800517a:	461a      	mov	r2, r3
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	4293      	cmp	r3, r2
 8005180:	d114      	bne.n	80051ac <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8005182:	2300      	movs	r3, #0
 8005184:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10c      	bne.n	80051ac <pbuf_copy+0x118>
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d009      	beq.n	80051ac <pbuf_copy+0x118>
 8005198:	4b20      	ldr	r3, [pc, #128]	; (800521c <pbuf_copy+0x188>)
 800519a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800519e:	4924      	ldr	r1, [pc, #144]	; (8005230 <pbuf_copy+0x19c>)
 80051a0:	4820      	ldr	r0, [pc, #128]	; (8005224 <pbuf_copy+0x190>)
 80051a2:	f008 f85d 	bl	800d260 <iprintf>
 80051a6:	f06f 030f 	mvn.w	r3, #15
 80051aa:	e032      	b.n	8005212 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d013      	beq.n	80051da <pbuf_copy+0x146>
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	895a      	ldrh	r2, [r3, #10]
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	891b      	ldrh	r3, [r3, #8]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d10d      	bne.n	80051da <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d009      	beq.n	80051da <pbuf_copy+0x146>
 80051c6:	4b15      	ldr	r3, [pc, #84]	; (800521c <pbuf_copy+0x188>)
 80051c8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80051cc:	4919      	ldr	r1, [pc, #100]	; (8005234 <pbuf_copy+0x1a0>)
 80051ce:	4815      	ldr	r0, [pc, #84]	; (8005224 <pbuf_copy+0x190>)
 80051d0:	f008 f846 	bl	800d260 <iprintf>
 80051d4:	f06f 0305 	mvn.w	r3, #5
 80051d8:	e01b      	b.n	8005212 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d013      	beq.n	8005208 <pbuf_copy+0x174>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	895a      	ldrh	r2, [r3, #10]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	891b      	ldrh	r3, [r3, #8]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d10d      	bne.n	8005208 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d009      	beq.n	8005208 <pbuf_copy+0x174>
 80051f4:	4b09      	ldr	r3, [pc, #36]	; (800521c <pbuf_copy+0x188>)
 80051f6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80051fa:	490e      	ldr	r1, [pc, #56]	; (8005234 <pbuf_copy+0x1a0>)
 80051fc:	4809      	ldr	r0, [pc, #36]	; (8005224 <pbuf_copy+0x190>)
 80051fe:	f008 f82f 	bl	800d260 <iprintf>
 8005202:	f06f 0305 	mvn.w	r3, #5
 8005206:	e004      	b.n	8005212 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	f47f af61 	bne.w	80050d2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3718      	adds	r7, #24
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	0800e8e4 	.word	0x0800e8e4
 8005220:	0800eb8c 	.word	0x0800eb8c
 8005224:	0800e944 	.word	0x0800e944
 8005228:	0800ebbc 	.word	0x0800ebbc
 800522c:	0800ebd4 	.word	0x0800ebd4
 8005230:	0800ebf0 	.word	0x0800ebf0
 8005234:	0800ec00 	.word	0x0800ec00

08005238 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b088      	sub	sp, #32
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	4611      	mov	r1, r2
 8005244:	461a      	mov	r2, r3
 8005246:	460b      	mov	r3, r1
 8005248:	80fb      	strh	r3, [r7, #6]
 800524a:	4613      	mov	r3, r2
 800524c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800524e:	2300      	movs	r3, #0
 8005250:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8005252:	2300      	movs	r3, #0
 8005254:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d108      	bne.n	800526e <pbuf_copy_partial+0x36>
 800525c:	4b2b      	ldr	r3, [pc, #172]	; (800530c <pbuf_copy_partial+0xd4>)
 800525e:	f240 420a 	movw	r2, #1034	; 0x40a
 8005262:	492b      	ldr	r1, [pc, #172]	; (8005310 <pbuf_copy_partial+0xd8>)
 8005264:	482b      	ldr	r0, [pc, #172]	; (8005314 <pbuf_copy_partial+0xdc>)
 8005266:	f007 fffb 	bl	800d260 <iprintf>
 800526a:	2300      	movs	r3, #0
 800526c:	e04a      	b.n	8005304 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d108      	bne.n	8005286 <pbuf_copy_partial+0x4e>
 8005274:	4b25      	ldr	r3, [pc, #148]	; (800530c <pbuf_copy_partial+0xd4>)
 8005276:	f240 420b 	movw	r2, #1035	; 0x40b
 800527a:	4927      	ldr	r1, [pc, #156]	; (8005318 <pbuf_copy_partial+0xe0>)
 800527c:	4825      	ldr	r0, [pc, #148]	; (8005314 <pbuf_copy_partial+0xdc>)
 800527e:	f007 ffef 	bl	800d260 <iprintf>
 8005282:	2300      	movs	r3, #0
 8005284:	e03e      	b.n	8005304 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	61fb      	str	r3, [r7, #28]
 800528a:	e034      	b.n	80052f6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800528c:	88bb      	ldrh	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00a      	beq.n	80052a8 <pbuf_copy_partial+0x70>
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	895b      	ldrh	r3, [r3, #10]
 8005296:	88ba      	ldrh	r2, [r7, #4]
 8005298:	429a      	cmp	r2, r3
 800529a:	d305      	bcc.n	80052a8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	895b      	ldrh	r3, [r3, #10]
 80052a0:	88ba      	ldrh	r2, [r7, #4]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	80bb      	strh	r3, [r7, #4]
 80052a6:	e023      	b.n	80052f0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	895a      	ldrh	r2, [r3, #10]
 80052ac:	88bb      	ldrh	r3, [r7, #4]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80052b2:	8b3a      	ldrh	r2, [r7, #24]
 80052b4:	88fb      	ldrh	r3, [r7, #6]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d901      	bls.n	80052be <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80052ba:	88fb      	ldrh	r3, [r7, #6]
 80052bc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80052be:	8b7b      	ldrh	r3, [r7, #26]
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	18d0      	adds	r0, r2, r3
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	88bb      	ldrh	r3, [r7, #4]
 80052ca:	4413      	add	r3, r2
 80052cc:	8b3a      	ldrh	r2, [r7, #24]
 80052ce:	4619      	mov	r1, r3
 80052d0:	f007 ffb0 	bl	800d234 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80052d4:	8afa      	ldrh	r2, [r7, #22]
 80052d6:	8b3b      	ldrh	r3, [r7, #24]
 80052d8:	4413      	add	r3, r2
 80052da:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80052dc:	8b7a      	ldrh	r2, [r7, #26]
 80052de:	8b3b      	ldrh	r3, [r7, #24]
 80052e0:	4413      	add	r3, r2
 80052e2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80052e4:	88fa      	ldrh	r2, [r7, #6]
 80052e6:	8b3b      	ldrh	r3, [r7, #24]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80052ec:	2300      	movs	r3, #0
 80052ee:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	61fb      	str	r3, [r7, #28]
 80052f6:	88fb      	ldrh	r3, [r7, #6]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d002      	beq.n	8005302 <pbuf_copy_partial+0xca>
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1c4      	bne.n	800528c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8005302:	8afb      	ldrh	r3, [r7, #22]
}
 8005304:	4618      	mov	r0, r3
 8005306:	3720      	adds	r7, #32
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	0800e8e4 	.word	0x0800e8e4
 8005310:	0800ec2c 	.word	0x0800ec2c
 8005314:	0800e944 	.word	0x0800e944
 8005318:	0800ec4c 	.word	0x0800ec4c

0800531c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	4603      	mov	r3, r0
 8005324:	603a      	str	r2, [r7, #0]
 8005326:	71fb      	strb	r3, [r7, #7]
 8005328:	460b      	mov	r3, r1
 800532a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	8919      	ldrh	r1, [r3, #8]
 8005330:	88ba      	ldrh	r2, [r7, #4]
 8005332:	79fb      	ldrb	r3, [r7, #7]
 8005334:	4618      	mov	r0, r3
 8005336:	f7ff fab1 	bl	800489c <pbuf_alloc>
 800533a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <pbuf_clone+0x2a>
    return NULL;
 8005342:	2300      	movs	r3, #0
 8005344:	e011      	b.n	800536a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8005346:	6839      	ldr	r1, [r7, #0]
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f7ff fea3 	bl	8005094 <pbuf_copy>
 800534e:	4603      	mov	r3, r0
 8005350:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8005352:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d006      	beq.n	8005368 <pbuf_clone+0x4c>
 800535a:	4b06      	ldr	r3, [pc, #24]	; (8005374 <pbuf_clone+0x58>)
 800535c:	f240 5224 	movw	r2, #1316	; 0x524
 8005360:	4905      	ldr	r1, [pc, #20]	; (8005378 <pbuf_clone+0x5c>)
 8005362:	4806      	ldr	r0, [pc, #24]	; (800537c <pbuf_clone+0x60>)
 8005364:	f007 ff7c 	bl	800d260 <iprintf>
  return q;
 8005368:	68fb      	ldr	r3, [r7, #12]
}
 800536a:	4618      	mov	r0, r3
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	0800e8e4 	.word	0x0800e8e4
 8005378:	0800ed58 	.word	0x0800ed58
 800537c:	0800e944 	.word	0x0800e944

08005380 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8005384:	f007 ff84 	bl	800d290 <rand>
 8005388:	4603      	mov	r3, r0
 800538a:	b29b      	uxth	r3, r3
 800538c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005390:	b29b      	uxth	r3, r3
 8005392:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8005396:	b29a      	uxth	r2, r3
 8005398:	4b01      	ldr	r3, [pc, #4]	; (80053a0 <tcp_init+0x20>)
 800539a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800539c:	bf00      	nop
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	20000020 	.word	0x20000020

080053a4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	7d1b      	ldrb	r3, [r3, #20]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d105      	bne.n	80053c0 <tcp_free+0x1c>
 80053b4:	4b06      	ldr	r3, [pc, #24]	; (80053d0 <tcp_free+0x2c>)
 80053b6:	22d4      	movs	r2, #212	; 0xd4
 80053b8:	4906      	ldr	r1, [pc, #24]	; (80053d4 <tcp_free+0x30>)
 80053ba:	4807      	ldr	r0, [pc, #28]	; (80053d8 <tcp_free+0x34>)
 80053bc:	f007 ff50 	bl	800d260 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80053c0:	6879      	ldr	r1, [r7, #4]
 80053c2:	2001      	movs	r0, #1
 80053c4:	f7fe fed8 	bl	8004178 <memp_free>
}
 80053c8:	bf00      	nop
 80053ca:	3708      	adds	r7, #8
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	0800ede4 	.word	0x0800ede4
 80053d4:	0800ee14 	.word	0x0800ee14
 80053d8:	0800ee28 	.word	0x0800ee28

080053dc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	7d1b      	ldrb	r3, [r3, #20]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d105      	bne.n	80053f8 <tcp_free_listen+0x1c>
 80053ec:	4b06      	ldr	r3, [pc, #24]	; (8005408 <tcp_free_listen+0x2c>)
 80053ee:	22df      	movs	r2, #223	; 0xdf
 80053f0:	4906      	ldr	r1, [pc, #24]	; (800540c <tcp_free_listen+0x30>)
 80053f2:	4807      	ldr	r0, [pc, #28]	; (8005410 <tcp_free_listen+0x34>)
 80053f4:	f007 ff34 	bl	800d260 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80053f8:	6879      	ldr	r1, [r7, #4]
 80053fa:	2002      	movs	r0, #2
 80053fc:	f7fe febc 	bl	8004178 <memp_free>
}
 8005400:	bf00      	nop
 8005402:	3708      	adds	r7, #8
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	0800ede4 	.word	0x0800ede4
 800540c:	0800ee50 	.word	0x0800ee50
 8005410:	0800ee28 	.word	0x0800ee28

08005414 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8005418:	f000 fea2 	bl	8006160 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800541c:	4b07      	ldr	r3, [pc, #28]	; (800543c <tcp_tmr+0x28>)
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	3301      	adds	r3, #1
 8005422:	b2da      	uxtb	r2, r3
 8005424:	4b05      	ldr	r3, [pc, #20]	; (800543c <tcp_tmr+0x28>)
 8005426:	701a      	strb	r2, [r3, #0]
 8005428:	4b04      	ldr	r3, [pc, #16]	; (800543c <tcp_tmr+0x28>)
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	2b00      	cmp	r3, #0
 8005432:	d001      	beq.n	8005438 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8005434:	f000 fb54 	bl	8005ae0 <tcp_slowtmr>
  }
}
 8005438:	bf00      	nop
 800543a:	bd80      	pop	{r7, pc}
 800543c:	2000825d 	.word	0x2000825d

08005440 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d105      	bne.n	800545c <tcp_remove_listener+0x1c>
 8005450:	4b0d      	ldr	r3, [pc, #52]	; (8005488 <tcp_remove_listener+0x48>)
 8005452:	22ff      	movs	r2, #255	; 0xff
 8005454:	490d      	ldr	r1, [pc, #52]	; (800548c <tcp_remove_listener+0x4c>)
 8005456:	480e      	ldr	r0, [pc, #56]	; (8005490 <tcp_remove_listener+0x50>)
 8005458:	f007 ff02 	bl	800d260 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	60fb      	str	r3, [r7, #12]
 8005460:	e00a      	b.n	8005478 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005466:	683a      	ldr	r2, [r7, #0]
 8005468:	429a      	cmp	r2, r3
 800546a:	d102      	bne.n	8005472 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	60fb      	str	r3, [r7, #12]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1f1      	bne.n	8005462 <tcp_remove_listener+0x22>
    }
  }
}
 800547e:	bf00      	nop
 8005480:	bf00      	nop
 8005482:	3710      	adds	r7, #16
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	0800ede4 	.word	0x0800ede4
 800548c:	0800ee6c 	.word	0x0800ee6c
 8005490:	0800ee28 	.word	0x0800ee28

08005494 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d106      	bne.n	80054b0 <tcp_listen_closed+0x1c>
 80054a2:	4b14      	ldr	r3, [pc, #80]	; (80054f4 <tcp_listen_closed+0x60>)
 80054a4:	f240 1211 	movw	r2, #273	; 0x111
 80054a8:	4913      	ldr	r1, [pc, #76]	; (80054f8 <tcp_listen_closed+0x64>)
 80054aa:	4814      	ldr	r0, [pc, #80]	; (80054fc <tcp_listen_closed+0x68>)
 80054ac:	f007 fed8 	bl	800d260 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	7d1b      	ldrb	r3, [r3, #20]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d006      	beq.n	80054c6 <tcp_listen_closed+0x32>
 80054b8:	4b0e      	ldr	r3, [pc, #56]	; (80054f4 <tcp_listen_closed+0x60>)
 80054ba:	f44f 7289 	mov.w	r2, #274	; 0x112
 80054be:	4910      	ldr	r1, [pc, #64]	; (8005500 <tcp_listen_closed+0x6c>)
 80054c0:	480e      	ldr	r0, [pc, #56]	; (80054fc <tcp_listen_closed+0x68>)
 80054c2:	f007 fecd 	bl	800d260 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80054c6:	2301      	movs	r3, #1
 80054c8:	60fb      	str	r3, [r7, #12]
 80054ca:	e00b      	b.n	80054e4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80054cc:	4a0d      	ldr	r2, [pc, #52]	; (8005504 <tcp_listen_closed+0x70>)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	6879      	ldr	r1, [r7, #4]
 80054d8:	4618      	mov	r0, r3
 80054da:	f7ff ffb1 	bl	8005440 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	3301      	adds	r3, #1
 80054e2:	60fb      	str	r3, [r7, #12]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2b03      	cmp	r3, #3
 80054e8:	d9f0      	bls.n	80054cc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80054ea:	bf00      	nop
 80054ec:	bf00      	nop
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	0800ede4 	.word	0x0800ede4
 80054f8:	0800ee94 	.word	0x0800ee94
 80054fc:	0800ee28 	.word	0x0800ee28
 8005500:	0800eea0 	.word	0x0800eea0
 8005504:	08010dbc 	.word	0x08010dbc

08005508 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8005508:	b5b0      	push	{r4, r5, r7, lr}
 800550a:	b088      	sub	sp, #32
 800550c:	af04      	add	r7, sp, #16
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	460b      	mov	r3, r1
 8005512:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d106      	bne.n	8005528 <tcp_close_shutdown+0x20>
 800551a:	4b63      	ldr	r3, [pc, #396]	; (80056a8 <tcp_close_shutdown+0x1a0>)
 800551c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8005520:	4962      	ldr	r1, [pc, #392]	; (80056ac <tcp_close_shutdown+0x1a4>)
 8005522:	4863      	ldr	r0, [pc, #396]	; (80056b0 <tcp_close_shutdown+0x1a8>)
 8005524:	f007 fe9c 	bl	800d260 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8005528:	78fb      	ldrb	r3, [r7, #3]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d066      	beq.n	80055fc <tcp_close_shutdown+0xf4>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	7d1b      	ldrb	r3, [r3, #20]
 8005532:	2b04      	cmp	r3, #4
 8005534:	d003      	beq.n	800553e <tcp_close_shutdown+0x36>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	7d1b      	ldrb	r3, [r3, #20]
 800553a:	2b07      	cmp	r3, #7
 800553c:	d15e      	bne.n	80055fc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005542:	2b00      	cmp	r3, #0
 8005544:	d104      	bne.n	8005550 <tcp_close_shutdown+0x48>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800554a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800554e:	d055      	beq.n	80055fc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	8b5b      	ldrh	r3, [r3, #26]
 8005554:	f003 0310 	and.w	r3, r3, #16
 8005558:	2b00      	cmp	r3, #0
 800555a:	d106      	bne.n	800556a <tcp_close_shutdown+0x62>
 800555c:	4b52      	ldr	r3, [pc, #328]	; (80056a8 <tcp_close_shutdown+0x1a0>)
 800555e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8005562:	4954      	ldr	r1, [pc, #336]	; (80056b4 <tcp_close_shutdown+0x1ac>)
 8005564:	4852      	ldr	r0, [pc, #328]	; (80056b0 <tcp_close_shutdown+0x1a8>)
 8005566:	f007 fe7b 	bl	800d260 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005572:	687d      	ldr	r5, [r7, #4]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	3304      	adds	r3, #4
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	8ad2      	ldrh	r2, [r2, #22]
 800557c:	6879      	ldr	r1, [r7, #4]
 800557e:	8b09      	ldrh	r1, [r1, #24]
 8005580:	9102      	str	r1, [sp, #8]
 8005582:	9201      	str	r2, [sp, #4]
 8005584:	9300      	str	r3, [sp, #0]
 8005586:	462b      	mov	r3, r5
 8005588:	4622      	mov	r2, r4
 800558a:	4601      	mov	r1, r0
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f004 fe91 	bl	800a2b4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f001 f8c6 	bl	8006724 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8005598:	4b47      	ldr	r3, [pc, #284]	; (80056b8 <tcp_close_shutdown+0x1b0>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d105      	bne.n	80055ae <tcp_close_shutdown+0xa6>
 80055a2:	4b45      	ldr	r3, [pc, #276]	; (80056b8 <tcp_close_shutdown+0x1b0>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	4a43      	ldr	r2, [pc, #268]	; (80056b8 <tcp_close_shutdown+0x1b0>)
 80055aa:	6013      	str	r3, [r2, #0]
 80055ac:	e013      	b.n	80055d6 <tcp_close_shutdown+0xce>
 80055ae:	4b42      	ldr	r3, [pc, #264]	; (80056b8 <tcp_close_shutdown+0x1b0>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	60fb      	str	r3, [r7, #12]
 80055b4:	e00c      	b.n	80055d0 <tcp_close_shutdown+0xc8>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d104      	bne.n	80055ca <tcp_close_shutdown+0xc2>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	68da      	ldr	r2, [r3, #12]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	60da      	str	r2, [r3, #12]
 80055c8:	e005      	b.n	80055d6 <tcp_close_shutdown+0xce>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	60fb      	str	r3, [r7, #12]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d1ef      	bne.n	80055b6 <tcp_close_shutdown+0xae>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	60da      	str	r2, [r3, #12]
 80055dc:	4b37      	ldr	r3, [pc, #220]	; (80056bc <tcp_close_shutdown+0x1b4>)
 80055de:	2201      	movs	r2, #1
 80055e0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80055e2:	4b37      	ldr	r3, [pc, #220]	; (80056c0 <tcp_close_shutdown+0x1b8>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d102      	bne.n	80055f2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80055ec:	f003 fd5e 	bl	80090ac <tcp_trigger_input_pcb_close>
 80055f0:	e002      	b.n	80055f8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f7ff fed6 	bl	80053a4 <tcp_free>
      }
      return ERR_OK;
 80055f8:	2300      	movs	r3, #0
 80055fa:	e050      	b.n	800569e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	7d1b      	ldrb	r3, [r3, #20]
 8005600:	2b02      	cmp	r3, #2
 8005602:	d03b      	beq.n	800567c <tcp_close_shutdown+0x174>
 8005604:	2b02      	cmp	r3, #2
 8005606:	dc44      	bgt.n	8005692 <tcp_close_shutdown+0x18a>
 8005608:	2b00      	cmp	r3, #0
 800560a:	d002      	beq.n	8005612 <tcp_close_shutdown+0x10a>
 800560c:	2b01      	cmp	r3, #1
 800560e:	d02a      	beq.n	8005666 <tcp_close_shutdown+0x15e>
 8005610:	e03f      	b.n	8005692 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	8adb      	ldrh	r3, [r3, #22]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d021      	beq.n	800565e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800561a:	4b2a      	ldr	r3, [pc, #168]	; (80056c4 <tcp_close_shutdown+0x1bc>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	429a      	cmp	r2, r3
 8005622:	d105      	bne.n	8005630 <tcp_close_shutdown+0x128>
 8005624:	4b27      	ldr	r3, [pc, #156]	; (80056c4 <tcp_close_shutdown+0x1bc>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	4a26      	ldr	r2, [pc, #152]	; (80056c4 <tcp_close_shutdown+0x1bc>)
 800562c:	6013      	str	r3, [r2, #0]
 800562e:	e013      	b.n	8005658 <tcp_close_shutdown+0x150>
 8005630:	4b24      	ldr	r3, [pc, #144]	; (80056c4 <tcp_close_shutdown+0x1bc>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	60bb      	str	r3, [r7, #8]
 8005636:	e00c      	b.n	8005652 <tcp_close_shutdown+0x14a>
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	429a      	cmp	r2, r3
 8005640:	d104      	bne.n	800564c <tcp_close_shutdown+0x144>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	68da      	ldr	r2, [r3, #12]
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	60da      	str	r2, [r3, #12]
 800564a:	e005      	b.n	8005658 <tcp_close_shutdown+0x150>
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	60bb      	str	r3, [r7, #8]
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1ef      	bne.n	8005638 <tcp_close_shutdown+0x130>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f7ff fea0 	bl	80053a4 <tcp_free>
      break;
 8005664:	e01a      	b.n	800569c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f7ff ff14 	bl	8005494 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800566c:	6879      	ldr	r1, [r7, #4]
 800566e:	4816      	ldr	r0, [pc, #88]	; (80056c8 <tcp_close_shutdown+0x1c0>)
 8005670:	f001 f8a8 	bl	80067c4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f7ff feb1 	bl	80053dc <tcp_free_listen>
      break;
 800567a:	e00f      	b.n	800569c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800567c:	6879      	ldr	r1, [r7, #4]
 800567e:	480e      	ldr	r0, [pc, #56]	; (80056b8 <tcp_close_shutdown+0x1b0>)
 8005680:	f001 f8a0 	bl	80067c4 <tcp_pcb_remove>
 8005684:	4b0d      	ldr	r3, [pc, #52]	; (80056bc <tcp_close_shutdown+0x1b4>)
 8005686:	2201      	movs	r2, #1
 8005688:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f7ff fe8a 	bl	80053a4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8005690:	e004      	b.n	800569c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 f81a 	bl	80056cc <tcp_close_shutdown_fin>
 8005698:	4603      	mov	r3, r0
 800569a:	e000      	b.n	800569e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bdb0      	pop	{r4, r5, r7, pc}
 80056a6:	bf00      	nop
 80056a8:	0800ede4 	.word	0x0800ede4
 80056ac:	0800eeb8 	.word	0x0800eeb8
 80056b0:	0800ee28 	.word	0x0800ee28
 80056b4:	0800eed8 	.word	0x0800eed8
 80056b8:	20008254 	.word	0x20008254
 80056bc:	2000825c 	.word	0x2000825c
 80056c0:	20008294 	.word	0x20008294
 80056c4:	2000824c 	.word	0x2000824c
 80056c8:	20008250 	.word	0x20008250

080056cc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d106      	bne.n	80056e8 <tcp_close_shutdown_fin+0x1c>
 80056da:	4b2e      	ldr	r3, [pc, #184]	; (8005794 <tcp_close_shutdown_fin+0xc8>)
 80056dc:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80056e0:	492d      	ldr	r1, [pc, #180]	; (8005798 <tcp_close_shutdown_fin+0xcc>)
 80056e2:	482e      	ldr	r0, [pc, #184]	; (800579c <tcp_close_shutdown_fin+0xd0>)
 80056e4:	f007 fdbc 	bl	800d260 <iprintf>

  switch (pcb->state) {
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	7d1b      	ldrb	r3, [r3, #20]
 80056ec:	2b07      	cmp	r3, #7
 80056ee:	d020      	beq.n	8005732 <tcp_close_shutdown_fin+0x66>
 80056f0:	2b07      	cmp	r3, #7
 80056f2:	dc2b      	bgt.n	800574c <tcp_close_shutdown_fin+0x80>
 80056f4:	2b03      	cmp	r3, #3
 80056f6:	d002      	beq.n	80056fe <tcp_close_shutdown_fin+0x32>
 80056f8:	2b04      	cmp	r3, #4
 80056fa:	d00d      	beq.n	8005718 <tcp_close_shutdown_fin+0x4c>
 80056fc:	e026      	b.n	800574c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f003 fee6 	bl	80094d0 <tcp_send_fin>
 8005704:	4603      	mov	r3, r0
 8005706:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005708:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d11f      	bne.n	8005750 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2205      	movs	r2, #5
 8005714:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005716:	e01b      	b.n	8005750 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f003 fed9 	bl	80094d0 <tcp_send_fin>
 800571e:	4603      	mov	r3, r0
 8005720:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d114      	bne.n	8005754 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2205      	movs	r2, #5
 800572e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005730:	e010      	b.n	8005754 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f003 fecc 	bl	80094d0 <tcp_send_fin>
 8005738:	4603      	mov	r3, r0
 800573a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800573c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d109      	bne.n	8005758 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2209      	movs	r2, #9
 8005748:	751a      	strb	r2, [r3, #20]
      }
      break;
 800574a:	e005      	b.n	8005758 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800574c:	2300      	movs	r3, #0
 800574e:	e01c      	b.n	800578a <tcp_close_shutdown_fin+0xbe>
      break;
 8005750:	bf00      	nop
 8005752:	e002      	b.n	800575a <tcp_close_shutdown_fin+0x8e>
      break;
 8005754:	bf00      	nop
 8005756:	e000      	b.n	800575a <tcp_close_shutdown_fin+0x8e>
      break;
 8005758:	bf00      	nop
  }

  if (err == ERR_OK) {
 800575a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d103      	bne.n	800576a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f003 fff2 	bl	800974c <tcp_output>
 8005768:	e00d      	b.n	8005786 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800576a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800576e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005772:	d108      	bne.n	8005786 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	8b5b      	ldrh	r3, [r3, #26]
 8005778:	f043 0308 	orr.w	r3, r3, #8
 800577c:	b29a      	uxth	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8005782:	2300      	movs	r3, #0
 8005784:	e001      	b.n	800578a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8005786:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800578a:	4618      	mov	r0, r3
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	0800ede4 	.word	0x0800ede4
 8005798:	0800ee94 	.word	0x0800ee94
 800579c:	0800ee28 	.word	0x0800ee28

080057a0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d109      	bne.n	80057c2 <tcp_close+0x22>
 80057ae:	4b0f      	ldr	r3, [pc, #60]	; (80057ec <tcp_close+0x4c>)
 80057b0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80057b4:	490e      	ldr	r1, [pc, #56]	; (80057f0 <tcp_close+0x50>)
 80057b6:	480f      	ldr	r0, [pc, #60]	; (80057f4 <tcp_close+0x54>)
 80057b8:	f007 fd52 	bl	800d260 <iprintf>
 80057bc:	f06f 030f 	mvn.w	r3, #15
 80057c0:	e00f      	b.n	80057e2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	7d1b      	ldrb	r3, [r3, #20]
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d006      	beq.n	80057d8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	8b5b      	ldrh	r3, [r3, #26]
 80057ce:	f043 0310 	orr.w	r3, r3, #16
 80057d2:	b29a      	uxth	r2, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80057d8:	2101      	movs	r1, #1
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f7ff fe94 	bl	8005508 <tcp_close_shutdown>
 80057e0:	4603      	mov	r3, r0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3708      	adds	r7, #8
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	0800ede4 	.word	0x0800ede4
 80057f0:	0800eef4 	.word	0x0800eef4
 80057f4:	0800ee28 	.word	0x0800ee28

080057f8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b08e      	sub	sp, #56	; 0x38
 80057fc:	af04      	add	r7, sp, #16
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d107      	bne.n	8005818 <tcp_abandon+0x20>
 8005808:	4b52      	ldr	r3, [pc, #328]	; (8005954 <tcp_abandon+0x15c>)
 800580a:	f240 223d 	movw	r2, #573	; 0x23d
 800580e:	4952      	ldr	r1, [pc, #328]	; (8005958 <tcp_abandon+0x160>)
 8005810:	4852      	ldr	r0, [pc, #328]	; (800595c <tcp_abandon+0x164>)
 8005812:	f007 fd25 	bl	800d260 <iprintf>
 8005816:	e099      	b.n	800594c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	7d1b      	ldrb	r3, [r3, #20]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d106      	bne.n	800582e <tcp_abandon+0x36>
 8005820:	4b4c      	ldr	r3, [pc, #304]	; (8005954 <tcp_abandon+0x15c>)
 8005822:	f44f 7210 	mov.w	r2, #576	; 0x240
 8005826:	494e      	ldr	r1, [pc, #312]	; (8005960 <tcp_abandon+0x168>)
 8005828:	484c      	ldr	r0, [pc, #304]	; (800595c <tcp_abandon+0x164>)
 800582a:	f007 fd19 	bl	800d260 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	7d1b      	ldrb	r3, [r3, #20]
 8005832:	2b0a      	cmp	r3, #10
 8005834:	d107      	bne.n	8005846 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8005836:	6879      	ldr	r1, [r7, #4]
 8005838:	484a      	ldr	r0, [pc, #296]	; (8005964 <tcp_abandon+0x16c>)
 800583a:	f000 ffc3 	bl	80067c4 <tcp_pcb_remove>
    tcp_free(pcb);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f7ff fdb0 	bl	80053a4 <tcp_free>
 8005844:	e082      	b.n	800594c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8005846:	2300      	movs	r3, #0
 8005848:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800584a:	2300      	movs	r3, #0
 800584c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005852:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005858:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005860:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	7d1b      	ldrb	r3, [r3, #20]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d126      	bne.n	80058be <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	8adb      	ldrh	r3, [r3, #22]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d02e      	beq.n	80058d6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005878:	4b3b      	ldr	r3, [pc, #236]	; (8005968 <tcp_abandon+0x170>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	429a      	cmp	r2, r3
 8005880:	d105      	bne.n	800588e <tcp_abandon+0x96>
 8005882:	4b39      	ldr	r3, [pc, #228]	; (8005968 <tcp_abandon+0x170>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	4a37      	ldr	r2, [pc, #220]	; (8005968 <tcp_abandon+0x170>)
 800588a:	6013      	str	r3, [r2, #0]
 800588c:	e013      	b.n	80058b6 <tcp_abandon+0xbe>
 800588e:	4b36      	ldr	r3, [pc, #216]	; (8005968 <tcp_abandon+0x170>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	61fb      	str	r3, [r7, #28]
 8005894:	e00c      	b.n	80058b0 <tcp_abandon+0xb8>
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	429a      	cmp	r2, r3
 800589e:	d104      	bne.n	80058aa <tcp_abandon+0xb2>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	68da      	ldr	r2, [r3, #12]
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	60da      	str	r2, [r3, #12]
 80058a8:	e005      	b.n	80058b6 <tcp_abandon+0xbe>
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	61fb      	str	r3, [r7, #28]
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1ef      	bne.n	8005896 <tcp_abandon+0x9e>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	60da      	str	r2, [r3, #12]
 80058bc:	e00b      	b.n	80058d6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	8adb      	ldrh	r3, [r3, #22]
 80058c6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80058c8:	6879      	ldr	r1, [r7, #4]
 80058ca:	4828      	ldr	r0, [pc, #160]	; (800596c <tcp_abandon+0x174>)
 80058cc:	f000 ff7a 	bl	80067c4 <tcp_pcb_remove>
 80058d0:	4b27      	ldr	r3, [pc, #156]	; (8005970 <tcp_abandon+0x178>)
 80058d2:	2201      	movs	r2, #1
 80058d4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d004      	beq.n	80058e8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e2:	4618      	mov	r0, r3
 80058e4:	f000 fd1c 	bl	8006320 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d004      	beq.n	80058fa <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058f4:	4618      	mov	r0, r3
 80058f6:	f000 fd13 	bl	8006320 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d004      	beq.n	800590c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005906:	4618      	mov	r0, r3
 8005908:	f000 fd0a 	bl	8006320 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00e      	beq.n	8005930 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8005912:	6879      	ldr	r1, [r7, #4]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	3304      	adds	r3, #4
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	8b12      	ldrh	r2, [r2, #24]
 800591c:	9202      	str	r2, [sp, #8]
 800591e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005920:	9201      	str	r2, [sp, #4]
 8005922:	9300      	str	r3, [sp, #0]
 8005924:	460b      	mov	r3, r1
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	69b9      	ldr	r1, [r7, #24]
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f004 fcc2 	bl	800a2b4 <tcp_rst>
    }
    last_state = pcb->state;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	7d1b      	ldrb	r3, [r3, #20]
 8005934:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f7ff fd34 	bl	80053a4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d004      	beq.n	800594c <tcp_abandon+0x154>
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	f06f 010c 	mvn.w	r1, #12
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	4798      	blx	r3
  }
}
 800594c:	3728      	adds	r7, #40	; 0x28
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	0800ede4 	.word	0x0800ede4
 8005958:	0800ef28 	.word	0x0800ef28
 800595c:	0800ee28 	.word	0x0800ee28
 8005960:	0800ef44 	.word	0x0800ef44
 8005964:	20008258 	.word	0x20008258
 8005968:	2000824c 	.word	0x2000824c
 800596c:	20008254 	.word	0x20008254
 8005970:	2000825c 	.word	0x2000825c

08005974 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800597c:	2101      	movs	r1, #1
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7ff ff3a 	bl	80057f8 <tcp_abandon>
}
 8005984:	bf00      	nop
 8005986:	3708      	adds	r7, #8
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d106      	bne.n	80059a8 <tcp_update_rcv_ann_wnd+0x1c>
 800599a:	4b25      	ldr	r3, [pc, #148]	; (8005a30 <tcp_update_rcv_ann_wnd+0xa4>)
 800599c:	f240 32a6 	movw	r2, #934	; 0x3a6
 80059a0:	4924      	ldr	r1, [pc, #144]	; (8005a34 <tcp_update_rcv_ann_wnd+0xa8>)
 80059a2:	4825      	ldr	r0, [pc, #148]	; (8005a38 <tcp_update_rcv_ann_wnd+0xac>)
 80059a4:	f007 fc5c 	bl	800d260 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80059b0:	4413      	add	r3, r2
 80059b2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80059bc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80059c0:	bf28      	it	cs
 80059c2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80059c6:	b292      	uxth	r2, r2
 80059c8:	4413      	add	r3, r2
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	db08      	blt.n	80059e4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	e020      	b.n	8005a26 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	dd03      	ble.n	80059fa <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80059f8:	e014      	b.n	8005a24 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a0c:	d306      	bcc.n	8005a1c <tcp_update_rcv_ann_wnd+0x90>
 8005a0e:	4b08      	ldr	r3, [pc, #32]	; (8005a30 <tcp_update_rcv_ann_wnd+0xa4>)
 8005a10:	f240 32b6 	movw	r2, #950	; 0x3b6
 8005a14:	4909      	ldr	r1, [pc, #36]	; (8005a3c <tcp_update_rcv_ann_wnd+0xb0>)
 8005a16:	4808      	ldr	r0, [pc, #32]	; (8005a38 <tcp_update_rcv_ann_wnd+0xac>)
 8005a18:	f007 fc22 	bl	800d260 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8005a24:	2300      	movs	r3, #0
  }
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	0800ede4 	.word	0x0800ede4
 8005a34:	0800f040 	.word	0x0800f040
 8005a38:	0800ee28 	.word	0x0800ee28
 8005a3c:	0800f064 	.word	0x0800f064

08005a40 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	460b      	mov	r3, r1
 8005a4a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d107      	bne.n	8005a62 <tcp_recved+0x22>
 8005a52:	4b1f      	ldr	r3, [pc, #124]	; (8005ad0 <tcp_recved+0x90>)
 8005a54:	f240 32cf 	movw	r2, #975	; 0x3cf
 8005a58:	491e      	ldr	r1, [pc, #120]	; (8005ad4 <tcp_recved+0x94>)
 8005a5a:	481f      	ldr	r0, [pc, #124]	; (8005ad8 <tcp_recved+0x98>)
 8005a5c:	f007 fc00 	bl	800d260 <iprintf>
 8005a60:	e032      	b.n	8005ac8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	7d1b      	ldrb	r3, [r3, #20]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d106      	bne.n	8005a78 <tcp_recved+0x38>
 8005a6a:	4b19      	ldr	r3, [pc, #100]	; (8005ad0 <tcp_recved+0x90>)
 8005a6c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8005a70:	491a      	ldr	r1, [pc, #104]	; (8005adc <tcp_recved+0x9c>)
 8005a72:	4819      	ldr	r0, [pc, #100]	; (8005ad8 <tcp_recved+0x98>)
 8005a74:	f007 fbf4 	bl	800d260 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8005a7c:	887b      	ldrh	r3, [r7, #2]
 8005a7e:	4413      	add	r3, r2
 8005a80:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8005a82:	89fb      	ldrh	r3, [r7, #14]
 8005a84:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8005a88:	d804      	bhi.n	8005a94 <tcp_recved+0x54>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a8e:	89fa      	ldrh	r2, [r7, #14]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d204      	bcs.n	8005a9e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8005a9a:	851a      	strh	r2, [r3, #40]	; 0x28
 8005a9c:	e002      	b.n	8005aa4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	89fa      	ldrh	r2, [r7, #14]
 8005aa2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f7ff ff71 	bl	800598c <tcp_update_rcv_ann_wnd>
 8005aaa:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8005ab2:	d309      	bcc.n	8005ac8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	8b5b      	ldrh	r3, [r3, #26]
 8005ab8:	f043 0302 	orr.w	r3, r3, #2
 8005abc:	b29a      	uxth	r2, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f003 fe42 	bl	800974c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8005ac8:	3710      	adds	r7, #16
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	0800ede4 	.word	0x0800ede4
 8005ad4:	0800f080 	.word	0x0800f080
 8005ad8:	0800ee28 	.word	0x0800ee28
 8005adc:	0800f098 	.word	0x0800f098

08005ae0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8005ae0:	b5b0      	push	{r4, r5, r7, lr}
 8005ae2:	b090      	sub	sp, #64	; 0x40
 8005ae4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8005aec:	4b94      	ldr	r3, [pc, #592]	; (8005d40 <tcp_slowtmr+0x260>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	3301      	adds	r3, #1
 8005af2:	4a93      	ldr	r2, [pc, #588]	; (8005d40 <tcp_slowtmr+0x260>)
 8005af4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8005af6:	4b93      	ldr	r3, [pc, #588]	; (8005d44 <tcp_slowtmr+0x264>)
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	3301      	adds	r3, #1
 8005afc:	b2da      	uxtb	r2, r3
 8005afe:	4b91      	ldr	r3, [pc, #580]	; (8005d44 <tcp_slowtmr+0x264>)
 8005b00:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8005b02:	2300      	movs	r3, #0
 8005b04:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8005b06:	4b90      	ldr	r3, [pc, #576]	; (8005d48 <tcp_slowtmr+0x268>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8005b0c:	e29f      	b.n	800604e <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8005b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b10:	7d1b      	ldrb	r3, [r3, #20]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d106      	bne.n	8005b24 <tcp_slowtmr+0x44>
 8005b16:	4b8d      	ldr	r3, [pc, #564]	; (8005d4c <tcp_slowtmr+0x26c>)
 8005b18:	f240 42be 	movw	r2, #1214	; 0x4be
 8005b1c:	498c      	ldr	r1, [pc, #560]	; (8005d50 <tcp_slowtmr+0x270>)
 8005b1e:	488d      	ldr	r0, [pc, #564]	; (8005d54 <tcp_slowtmr+0x274>)
 8005b20:	f007 fb9e 	bl	800d260 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8005b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b26:	7d1b      	ldrb	r3, [r3, #20]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d106      	bne.n	8005b3a <tcp_slowtmr+0x5a>
 8005b2c:	4b87      	ldr	r3, [pc, #540]	; (8005d4c <tcp_slowtmr+0x26c>)
 8005b2e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8005b32:	4989      	ldr	r1, [pc, #548]	; (8005d58 <tcp_slowtmr+0x278>)
 8005b34:	4887      	ldr	r0, [pc, #540]	; (8005d54 <tcp_slowtmr+0x274>)
 8005b36:	f007 fb93 	bl	800d260 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8005b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b3c:	7d1b      	ldrb	r3, [r3, #20]
 8005b3e:	2b0a      	cmp	r3, #10
 8005b40:	d106      	bne.n	8005b50 <tcp_slowtmr+0x70>
 8005b42:	4b82      	ldr	r3, [pc, #520]	; (8005d4c <tcp_slowtmr+0x26c>)
 8005b44:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8005b48:	4984      	ldr	r1, [pc, #528]	; (8005d5c <tcp_slowtmr+0x27c>)
 8005b4a:	4882      	ldr	r0, [pc, #520]	; (8005d54 <tcp_slowtmr+0x274>)
 8005b4c:	f007 fb88 	bl	800d260 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8005b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b52:	7f9a      	ldrb	r2, [r3, #30]
 8005b54:	4b7b      	ldr	r3, [pc, #492]	; (8005d44 <tcp_slowtmr+0x264>)
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d105      	bne.n	8005b68 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8005b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b5e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8005b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8005b66:	e272      	b.n	800604e <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8005b68:	4b76      	ldr	r3, [pc, #472]	; (8005d44 <tcp_slowtmr+0x264>)
 8005b6a:	781a      	ldrb	r2, [r3, #0]
 8005b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8005b70:	2300      	movs	r3, #0
 8005b72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8005b76:	2300      	movs	r3, #0
 8005b78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8005b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7e:	7d1b      	ldrb	r3, [r3, #20]
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d10a      	bne.n	8005b9a <tcp_slowtmr+0xba>
 8005b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b8a:	2b05      	cmp	r3, #5
 8005b8c:	d905      	bls.n	8005b9a <tcp_slowtmr+0xba>
      ++pcb_remove;
 8005b8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b92:	3301      	adds	r3, #1
 8005b94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005b98:	e11e      	b.n	8005dd8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8005b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ba0:	2b0b      	cmp	r3, #11
 8005ba2:	d905      	bls.n	8005bb0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8005ba4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ba8:	3301      	adds	r3, #1
 8005baa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005bae:	e113      	b.n	8005dd8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8005bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d075      	beq.n	8005ca6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8005bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d006      	beq.n	8005bd0 <tcp_slowtmr+0xf0>
 8005bc2:	4b62      	ldr	r3, [pc, #392]	; (8005d4c <tcp_slowtmr+0x26c>)
 8005bc4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8005bc8:	4965      	ldr	r1, [pc, #404]	; (8005d60 <tcp_slowtmr+0x280>)
 8005bca:	4862      	ldr	r0, [pc, #392]	; (8005d54 <tcp_slowtmr+0x274>)
 8005bcc:	f007 fb48 	bl	800d260 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8005bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d106      	bne.n	8005be6 <tcp_slowtmr+0x106>
 8005bd8:	4b5c      	ldr	r3, [pc, #368]	; (8005d4c <tcp_slowtmr+0x26c>)
 8005bda:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8005bde:	4961      	ldr	r1, [pc, #388]	; (8005d64 <tcp_slowtmr+0x284>)
 8005be0:	485c      	ldr	r0, [pc, #368]	; (8005d54 <tcp_slowtmr+0x274>)
 8005be2:	f007 fb3d 	bl	800d260 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8005be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8005bec:	2b0b      	cmp	r3, #11
 8005bee:	d905      	bls.n	8005bfc <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8005bf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005bfa:	e0ed      	b.n	8005dd8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8005bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bfe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8005c02:	3b01      	subs	r3, #1
 8005c04:	4a58      	ldr	r2, [pc, #352]	; (8005d68 <tcp_slowtmr+0x288>)
 8005c06:	5cd3      	ldrb	r3, [r2, r3]
 8005c08:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8005c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c0c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005c10:	7c7a      	ldrb	r2, [r7, #17]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d907      	bls.n	8005c26 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8005c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c18:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	b2da      	uxtb	r2, r3
 8005c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c22:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8005c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c28:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005c2c:	7c7a      	ldrb	r2, [r7, #17]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	f200 80d2 	bhi.w	8005dd8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8005c34:	2301      	movs	r3, #1
 8005c36:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8005c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d108      	bne.n	8005c54 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8005c42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c44:	f004 fc2a 	bl	800a49c <tcp_zero_window_probe>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d014      	beq.n	8005c78 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8005c4e:	2300      	movs	r3, #0
 8005c50:	623b      	str	r3, [r7, #32]
 8005c52:	e011      	b.n	8005c78 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8005c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c5e:	f003 faef 	bl	8009240 <tcp_split_unsent_seg>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d107      	bne.n	8005c78 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8005c68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c6a:	f003 fd6f 	bl	800974c <tcp_output>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d101      	bne.n	8005c78 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8005c74:	2300      	movs	r3, #0
 8005c76:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8005c78:	6a3b      	ldr	r3, [r7, #32]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	f000 80ac 	beq.w	8005dd8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8005c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8005c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8005c8e:	2b06      	cmp	r3, #6
 8005c90:	f200 80a2 	bhi.w	8005dd8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8005c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c96:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	b2da      	uxtb	r2, r3
 8005c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8005ca4:	e098      	b.n	8005dd8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8005ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	db0f      	blt.n	8005cd0 <tcp_slowtmr+0x1f0>
 8005cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005cb6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d008      	beq.n	8005cd0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8005cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	b21a      	sxth	r2, r3
 8005ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cce:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8005cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8005cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	db7b      	blt.n	8005dd8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8005ce0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ce2:	f004 f825 	bl	8009d30 <tcp_rexmit_rto_prepare>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d007      	beq.n	8005cfc <tcp_slowtmr+0x21c>
 8005cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d171      	bne.n	8005dd8 <tcp_slowtmr+0x2f8>
 8005cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d06d      	beq.n	8005dd8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8005cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cfe:	7d1b      	ldrb	r3, [r3, #20]
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d03a      	beq.n	8005d7a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8005d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005d0a:	2b0c      	cmp	r3, #12
 8005d0c:	bf28      	it	cs
 8005d0e:	230c      	movcs	r3, #12
 8005d10:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8005d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d14:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8005d18:	10db      	asrs	r3, r3, #3
 8005d1a:	b21b      	sxth	r3, r3
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d20:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8005d24:	4413      	add	r3, r2
 8005d26:	7efa      	ldrb	r2, [r7, #27]
 8005d28:	4910      	ldr	r1, [pc, #64]	; (8005d6c <tcp_slowtmr+0x28c>)
 8005d2a:	5c8a      	ldrb	r2, [r1, r2]
 8005d2c:	4093      	lsls	r3, r2
 8005d2e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8005d36:	4293      	cmp	r3, r2
 8005d38:	dc1a      	bgt.n	8005d70 <tcp_slowtmr+0x290>
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	b21a      	sxth	r2, r3
 8005d3e:	e019      	b.n	8005d74 <tcp_slowtmr+0x294>
 8005d40:	20008248 	.word	0x20008248
 8005d44:	2000825e 	.word	0x2000825e
 8005d48:	20008254 	.word	0x20008254
 8005d4c:	0800ede4 	.word	0x0800ede4
 8005d50:	0800f128 	.word	0x0800f128
 8005d54:	0800ee28 	.word	0x0800ee28
 8005d58:	0800f154 	.word	0x0800f154
 8005d5c:	0800f180 	.word	0x0800f180
 8005d60:	0800f1b0 	.word	0x0800f1b0
 8005d64:	0800f1e4 	.word	0x0800f1e4
 8005d68:	08010db4 	.word	0x08010db4
 8005d6c:	08010da4 	.word	0x08010da4
 8005d70:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8005d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8005d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d82:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8005d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d88:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	bf28      	it	cs
 8005d90:	4613      	movcs	r3, r2
 8005d92:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8005d94:	8a7b      	ldrh	r3, [r7, #18]
 8005d96:	085b      	lsrs	r3, r3, #1
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8005da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8005da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005daa:	005b      	lsls	r3, r3, #1
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d206      	bcs.n	8005dc0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8005db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005db6:	005b      	lsls	r3, r3, #1
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dbc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8005dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8005dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8005dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8005dd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005dd4:	f004 f81c 	bl	8009e10 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8005dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dda:	7d1b      	ldrb	r3, [r3, #20]
 8005ddc:	2b06      	cmp	r3, #6
 8005dde:	d111      	bne.n	8005e04 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8005de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de2:	8b5b      	ldrh	r3, [r3, #26]
 8005de4:	f003 0310 	and.w	r3, r3, #16
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00b      	beq.n	8005e04 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005dec:	4b9d      	ldr	r3, [pc, #628]	; (8006064 <tcp_slowtmr+0x584>)
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df2:	6a1b      	ldr	r3, [r3, #32]
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	2b28      	cmp	r3, #40	; 0x28
 8005df8:	d904      	bls.n	8005e04 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8005dfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005dfe:	3301      	adds	r3, #1
 8005e00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8005e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e06:	7a5b      	ldrb	r3, [r3, #9]
 8005e08:	f003 0308 	and.w	r3, r3, #8
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d04c      	beq.n	8005eaa <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8005e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e12:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8005e14:	2b04      	cmp	r3, #4
 8005e16:	d003      	beq.n	8005e20 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8005e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e1a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8005e1c:	2b07      	cmp	r3, #7
 8005e1e:	d144      	bne.n	8005eaa <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005e20:	4b90      	ldr	r3, [pc, #576]	; (8006064 <tcp_slowtmr+0x584>)
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e26:	6a1b      	ldr	r3, [r3, #32]
 8005e28:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8005e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e30:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8005e34:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8005e38:	498b      	ldr	r1, [pc, #556]	; (8006068 <tcp_slowtmr+0x588>)
 8005e3a:	fba1 1303 	umull	r1, r3, r1, r3
 8005e3e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d90a      	bls.n	8005e5a <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8005e44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e48:	3301      	adds	r3, #1
 8005e4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8005e4e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005e52:	3301      	adds	r3, #1
 8005e54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005e58:	e027      	b.n	8005eaa <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005e5a:	4b82      	ldr	r3, [pc, #520]	; (8006064 <tcp_slowtmr+0x584>)
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8005e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e66:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8005e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e6c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8005e70:	4618      	mov	r0, r3
 8005e72:	4b7e      	ldr	r3, [pc, #504]	; (800606c <tcp_slowtmr+0x58c>)
 8005e74:	fb00 f303 	mul.w	r3, r0, r3
 8005e78:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8005e7a:	497b      	ldr	r1, [pc, #492]	; (8006068 <tcp_slowtmr+0x588>)
 8005e7c:	fba1 1303 	umull	r1, r3, r1, r3
 8005e80:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d911      	bls.n	8005eaa <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8005e86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e88:	f004 fac8 	bl	800a41c <tcp_keepalive>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8005e92:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d107      	bne.n	8005eaa <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8005e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e9c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	b2da      	uxtb	r2, r3
 8005ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8005eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d011      	beq.n	8005ed6 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8005eb2:	4b6c      	ldr	r3, [pc, #432]	; (8006064 <tcp_slowtmr+0x584>)
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb8:	6a1b      	ldr	r3, [r3, #32]
 8005eba:	1ad2      	subs	r2, r2, r3
 8005ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ebe:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	005b      	lsls	r3, r3, #1
 8005ec8:	440b      	add	r3, r1
 8005eca:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d302      	bcc.n	8005ed6 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8005ed0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ed2:	f000 fddb 	bl	8006a8c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8005ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed8:	7d1b      	ldrb	r3, [r3, #20]
 8005eda:	2b03      	cmp	r3, #3
 8005edc:	d10b      	bne.n	8005ef6 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005ede:	4b61      	ldr	r3, [pc, #388]	; (8006064 <tcp_slowtmr+0x584>)
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee4:	6a1b      	ldr	r3, [r3, #32]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	2b28      	cmp	r3, #40	; 0x28
 8005eea:	d904      	bls.n	8005ef6 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8005eec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8005ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef8:	7d1b      	ldrb	r3, [r3, #20]
 8005efa:	2b09      	cmp	r3, #9
 8005efc:	d10b      	bne.n	8005f16 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8005efe:	4b59      	ldr	r3, [pc, #356]	; (8006064 <tcp_slowtmr+0x584>)
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f04:	6a1b      	ldr	r3, [r3, #32]
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	2bf0      	cmp	r3, #240	; 0xf0
 8005f0a:	d904      	bls.n	8005f16 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8005f0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f10:	3301      	adds	r3, #1
 8005f12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8005f16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d060      	beq.n	8005fe0 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8005f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f24:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8005f26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f28:	f000 fbfc 	bl	8006724 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8005f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d010      	beq.n	8005f54 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8005f32:	4b4f      	ldr	r3, [pc, #316]	; (8006070 <tcp_slowtmr+0x590>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d106      	bne.n	8005f4a <tcp_slowtmr+0x46a>
 8005f3c:	4b4d      	ldr	r3, [pc, #308]	; (8006074 <tcp_slowtmr+0x594>)
 8005f3e:	f240 526d 	movw	r2, #1389	; 0x56d
 8005f42:	494d      	ldr	r1, [pc, #308]	; (8006078 <tcp_slowtmr+0x598>)
 8005f44:	484d      	ldr	r0, [pc, #308]	; (800607c <tcp_slowtmr+0x59c>)
 8005f46:	f007 f98b 	bl	800d260 <iprintf>
        prev->next = pcb->next;
 8005f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f4c:	68da      	ldr	r2, [r3, #12]
 8005f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f50:	60da      	str	r2, [r3, #12]
 8005f52:	e00f      	b.n	8005f74 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8005f54:	4b46      	ldr	r3, [pc, #280]	; (8006070 <tcp_slowtmr+0x590>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d006      	beq.n	8005f6c <tcp_slowtmr+0x48c>
 8005f5e:	4b45      	ldr	r3, [pc, #276]	; (8006074 <tcp_slowtmr+0x594>)
 8005f60:	f240 5271 	movw	r2, #1393	; 0x571
 8005f64:	4946      	ldr	r1, [pc, #280]	; (8006080 <tcp_slowtmr+0x5a0>)
 8005f66:	4845      	ldr	r0, [pc, #276]	; (800607c <tcp_slowtmr+0x59c>)
 8005f68:	f007 f97a 	bl	800d260 <iprintf>
        tcp_active_pcbs = pcb->next;
 8005f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	4a3f      	ldr	r2, [pc, #252]	; (8006070 <tcp_slowtmr+0x590>)
 8005f72:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8005f74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d013      	beq.n	8005fa4 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f7e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f82:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005f84:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8005f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f88:	3304      	adds	r3, #4
 8005f8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f8c:	8ad2      	ldrh	r2, [r2, #22]
 8005f8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f90:	8b09      	ldrh	r1, [r1, #24]
 8005f92:	9102      	str	r1, [sp, #8]
 8005f94:	9201      	str	r2, [sp, #4]
 8005f96:	9300      	str	r3, [sp, #0]
 8005f98:	462b      	mov	r3, r5
 8005f9a:	4622      	mov	r2, r4
 8005f9c:	4601      	mov	r1, r0
 8005f9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005fa0:	f004 f988 	bl	800a2b4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8005fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8005faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fac:	7d1b      	ldrb	r3, [r3, #20]
 8005fae:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8005fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8005fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8005fba:	6838      	ldr	r0, [r7, #0]
 8005fbc:	f7ff f9f2 	bl	80053a4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8005fc0:	4b30      	ldr	r3, [pc, #192]	; (8006084 <tcp_slowtmr+0x5a4>)
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d004      	beq.n	8005fd6 <tcp_slowtmr+0x4f6>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f06f 010c 	mvn.w	r1, #12
 8005fd2:	68b8      	ldr	r0, [r7, #8]
 8005fd4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8005fd6:	4b2b      	ldr	r3, [pc, #172]	; (8006084 <tcp_slowtmr+0x5a4>)
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d037      	beq.n	800604e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8005fde:	e590      	b.n	8005b02 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8005fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8005fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8005fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fec:	7f1b      	ldrb	r3, [r3, #28]
 8005fee:	3301      	adds	r3, #1
 8005ff0:	b2da      	uxtb	r2, r3
 8005ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8005ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff8:	7f1a      	ldrb	r2, [r3, #28]
 8005ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffc:	7f5b      	ldrb	r3, [r3, #29]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d325      	bcc.n	800604e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8006002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006004:	2200      	movs	r2, #0
 8006006:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8006008:	4b1e      	ldr	r3, [pc, #120]	; (8006084 <tcp_slowtmr+0x5a4>)
 800600a:	2200      	movs	r2, #0
 800600c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800600e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006010:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006014:	2b00      	cmp	r3, #0
 8006016:	d00b      	beq.n	8006030 <tcp_slowtmr+0x550>
 8006018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800601e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006020:	6912      	ldr	r2, [r2, #16]
 8006022:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006024:	4610      	mov	r0, r2
 8006026:	4798      	blx	r3
 8006028:	4603      	mov	r3, r0
 800602a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800602e:	e002      	b.n	8006036 <tcp_slowtmr+0x556>
 8006030:	2300      	movs	r3, #0
 8006032:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8006036:	4b13      	ldr	r3, [pc, #76]	; (8006084 <tcp_slowtmr+0x5a4>)
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d000      	beq.n	8006040 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800603e:	e560      	b.n	8005b02 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8006040:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8006044:	2b00      	cmp	r3, #0
 8006046:	d102      	bne.n	800604e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8006048:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800604a:	f003 fb7f 	bl	800974c <tcp_output>
  while (pcb != NULL) {
 800604e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006050:	2b00      	cmp	r3, #0
 8006052:	f47f ad5c 	bne.w	8005b0e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8006056:	2300      	movs	r3, #0
 8006058:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800605a:	4b0b      	ldr	r3, [pc, #44]	; (8006088 <tcp_slowtmr+0x5a8>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8006060:	e067      	b.n	8006132 <tcp_slowtmr+0x652>
 8006062:	bf00      	nop
 8006064:	20008248 	.word	0x20008248
 8006068:	10624dd3 	.word	0x10624dd3
 800606c:	000124f8 	.word	0x000124f8
 8006070:	20008254 	.word	0x20008254
 8006074:	0800ede4 	.word	0x0800ede4
 8006078:	0800f21c 	.word	0x0800f21c
 800607c:	0800ee28 	.word	0x0800ee28
 8006080:	0800f248 	.word	0x0800f248
 8006084:	2000825c 	.word	0x2000825c
 8006088:	20008258 	.word	0x20008258
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800608c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800608e:	7d1b      	ldrb	r3, [r3, #20]
 8006090:	2b0a      	cmp	r3, #10
 8006092:	d006      	beq.n	80060a2 <tcp_slowtmr+0x5c2>
 8006094:	4b2b      	ldr	r3, [pc, #172]	; (8006144 <tcp_slowtmr+0x664>)
 8006096:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800609a:	492b      	ldr	r1, [pc, #172]	; (8006148 <tcp_slowtmr+0x668>)
 800609c:	482b      	ldr	r0, [pc, #172]	; (800614c <tcp_slowtmr+0x66c>)
 800609e:	f007 f8df 	bl	800d260 <iprintf>
    pcb_remove = 0;
 80060a2:	2300      	movs	r3, #0
 80060a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80060a8:	4b29      	ldr	r3, [pc, #164]	; (8006150 <tcp_slowtmr+0x670>)
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ae:	6a1b      	ldr	r3, [r3, #32]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	2bf0      	cmp	r3, #240	; 0xf0
 80060b4:	d904      	bls.n	80060c0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80060b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060ba:	3301      	adds	r3, #1
 80060bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80060c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d02f      	beq.n	8006128 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80060c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80060ca:	f000 fb2b 	bl	8006724 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80060ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d010      	beq.n	80060f6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80060d4:	4b1f      	ldr	r3, [pc, #124]	; (8006154 <tcp_slowtmr+0x674>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060da:	429a      	cmp	r2, r3
 80060dc:	d106      	bne.n	80060ec <tcp_slowtmr+0x60c>
 80060de:	4b19      	ldr	r3, [pc, #100]	; (8006144 <tcp_slowtmr+0x664>)
 80060e0:	f240 52af 	movw	r2, #1455	; 0x5af
 80060e4:	491c      	ldr	r1, [pc, #112]	; (8006158 <tcp_slowtmr+0x678>)
 80060e6:	4819      	ldr	r0, [pc, #100]	; (800614c <tcp_slowtmr+0x66c>)
 80060e8:	f007 f8ba 	bl	800d260 <iprintf>
        prev->next = pcb->next;
 80060ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ee:	68da      	ldr	r2, [r3, #12]
 80060f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f2:	60da      	str	r2, [r3, #12]
 80060f4:	e00f      	b.n	8006116 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80060f6:	4b17      	ldr	r3, [pc, #92]	; (8006154 <tcp_slowtmr+0x674>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d006      	beq.n	800610e <tcp_slowtmr+0x62e>
 8006100:	4b10      	ldr	r3, [pc, #64]	; (8006144 <tcp_slowtmr+0x664>)
 8006102:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8006106:	4915      	ldr	r1, [pc, #84]	; (800615c <tcp_slowtmr+0x67c>)
 8006108:	4810      	ldr	r0, [pc, #64]	; (800614c <tcp_slowtmr+0x66c>)
 800610a:	f007 f8a9 	bl	800d260 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800610e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	4a10      	ldr	r2, [pc, #64]	; (8006154 <tcp_slowtmr+0x674>)
 8006114:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8006116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006118:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800611a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8006120:	69f8      	ldr	r0, [r7, #28]
 8006122:	f7ff f93f 	bl	80053a4 <tcp_free>
 8006126:	e004      	b.n	8006132 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8006128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800612a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800612c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8006132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1a9      	bne.n	800608c <tcp_slowtmr+0x5ac>
    }
  }
}
 8006138:	bf00      	nop
 800613a:	bf00      	nop
 800613c:	3730      	adds	r7, #48	; 0x30
 800613e:	46bd      	mov	sp, r7
 8006140:	bdb0      	pop	{r4, r5, r7, pc}
 8006142:	bf00      	nop
 8006144:	0800ede4 	.word	0x0800ede4
 8006148:	0800f274 	.word	0x0800f274
 800614c:	0800ee28 	.word	0x0800ee28
 8006150:	20008248 	.word	0x20008248
 8006154:	20008258 	.word	0x20008258
 8006158:	0800f2a4 	.word	0x0800f2a4
 800615c:	0800f2cc 	.word	0x0800f2cc

08006160 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8006166:	4b2d      	ldr	r3, [pc, #180]	; (800621c <tcp_fasttmr+0xbc>)
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	3301      	adds	r3, #1
 800616c:	b2da      	uxtb	r2, r3
 800616e:	4b2b      	ldr	r3, [pc, #172]	; (800621c <tcp_fasttmr+0xbc>)
 8006170:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8006172:	4b2b      	ldr	r3, [pc, #172]	; (8006220 <tcp_fasttmr+0xc0>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006178:	e048      	b.n	800620c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	7f9a      	ldrb	r2, [r3, #30]
 800617e:	4b27      	ldr	r3, [pc, #156]	; (800621c <tcp_fasttmr+0xbc>)
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	429a      	cmp	r2, r3
 8006184:	d03f      	beq.n	8006206 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8006186:	4b25      	ldr	r3, [pc, #148]	; (800621c <tcp_fasttmr+0xbc>)
 8006188:	781a      	ldrb	r2, [r3, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	8b5b      	ldrh	r3, [r3, #26]
 8006192:	f003 0301 	and.w	r3, r3, #1
 8006196:	2b00      	cmp	r3, #0
 8006198:	d010      	beq.n	80061bc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	8b5b      	ldrh	r3, [r3, #26]
 800619e:	f043 0302 	orr.w	r3, r3, #2
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f003 facf 	bl	800974c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	8b5b      	ldrh	r3, [r3, #26]
 80061b2:	f023 0303 	bic.w	r3, r3, #3
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	8b5b      	ldrh	r3, [r3, #26]
 80061c0:	f003 0308 	and.w	r3, r3, #8
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d009      	beq.n	80061dc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	8b5b      	ldrh	r3, [r3, #26]
 80061cc:	f023 0308 	bic.w	r3, r3, #8
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f7ff fa78 	bl	80056cc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00a      	beq.n	8006200 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80061ea:	4b0e      	ldr	r3, [pc, #56]	; (8006224 <tcp_fasttmr+0xc4>)
 80061ec:	2200      	movs	r2, #0
 80061ee:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 f819 	bl	8006228 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80061f6:	4b0b      	ldr	r3, [pc, #44]	; (8006224 <tcp_fasttmr+0xc4>)
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d000      	beq.n	8006200 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80061fe:	e7b8      	b.n	8006172 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	607b      	str	r3, [r7, #4]
 8006204:	e002      	b.n	800620c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d1b3      	bne.n	800617a <tcp_fasttmr+0x1a>
    }
  }
}
 8006212:	bf00      	nop
 8006214:	bf00      	nop
 8006216:	3708      	adds	r7, #8
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	2000825e 	.word	0x2000825e
 8006220:	20008254 	.word	0x20008254
 8006224:	2000825c 	.word	0x2000825c

08006228 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8006228:	b590      	push	{r4, r7, lr}
 800622a:	b085      	sub	sp, #20
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d109      	bne.n	800624a <tcp_process_refused_data+0x22>
 8006236:	4b37      	ldr	r3, [pc, #220]	; (8006314 <tcp_process_refused_data+0xec>)
 8006238:	f240 6209 	movw	r2, #1545	; 0x609
 800623c:	4936      	ldr	r1, [pc, #216]	; (8006318 <tcp_process_refused_data+0xf0>)
 800623e:	4837      	ldr	r0, [pc, #220]	; (800631c <tcp_process_refused_data+0xf4>)
 8006240:	f007 f80e 	bl	800d260 <iprintf>
 8006244:	f06f 030f 	mvn.w	r3, #15
 8006248:	e060      	b.n	800630c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800624e:	7b5b      	ldrb	r3, [r3, #13]
 8006250:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006256:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006264:	2b00      	cmp	r3, #0
 8006266:	d00b      	beq.n	8006280 <tcp_process_refused_data+0x58>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6918      	ldr	r0, [r3, #16]
 8006272:	2300      	movs	r3, #0
 8006274:	68ba      	ldr	r2, [r7, #8]
 8006276:	6879      	ldr	r1, [r7, #4]
 8006278:	47a0      	blx	r4
 800627a:	4603      	mov	r3, r0
 800627c:	73fb      	strb	r3, [r7, #15]
 800627e:	e007      	b.n	8006290 <tcp_process_refused_data+0x68>
 8006280:	2300      	movs	r3, #0
 8006282:	68ba      	ldr	r2, [r7, #8]
 8006284:	6879      	ldr	r1, [r7, #4]
 8006286:	2000      	movs	r0, #0
 8006288:	f000 f8a4 	bl	80063d4 <tcp_recv_null>
 800628c:	4603      	mov	r3, r0
 800628e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006290:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d12a      	bne.n	80062ee <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8006298:	7bbb      	ldrb	r3, [r7, #14]
 800629a:	f003 0320 	and.w	r3, r3, #32
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d033      	beq.n	800630a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062a6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80062aa:	d005      	beq.n	80062b8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062b0:	3301      	adds	r3, #1
 80062b2:	b29a      	uxth	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00b      	beq.n	80062da <tcp_process_refused_data+0xb2>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6918      	ldr	r0, [r3, #16]
 80062cc:	2300      	movs	r3, #0
 80062ce:	2200      	movs	r2, #0
 80062d0:	6879      	ldr	r1, [r7, #4]
 80062d2:	47a0      	blx	r4
 80062d4:	4603      	mov	r3, r0
 80062d6:	73fb      	strb	r3, [r7, #15]
 80062d8:	e001      	b.n	80062de <tcp_process_refused_data+0xb6>
 80062da:	2300      	movs	r3, #0
 80062dc:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80062de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062e2:	f113 0f0d 	cmn.w	r3, #13
 80062e6:	d110      	bne.n	800630a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80062e8:	f06f 030c 	mvn.w	r3, #12
 80062ec:	e00e      	b.n	800630c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80062ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062f2:	f113 0f0d 	cmn.w	r3, #13
 80062f6:	d102      	bne.n	80062fe <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80062f8:	f06f 030c 	mvn.w	r3, #12
 80062fc:	e006      	b.n	800630c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8006304:	f06f 0304 	mvn.w	r3, #4
 8006308:	e000      	b.n	800630c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3714      	adds	r7, #20
 8006310:	46bd      	mov	sp, r7
 8006312:	bd90      	pop	{r4, r7, pc}
 8006314:	0800ede4 	.word	0x0800ede4
 8006318:	0800f2f4 	.word	0x0800f2f4
 800631c:	0800ee28 	.word	0x0800ee28

08006320 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8006328:	e007      	b.n	800633a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 f80a 	bl	800634a <tcp_seg_free>
    seg = next;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1f4      	bne.n	800632a <tcp_segs_free+0xa>
  }
}
 8006340:	bf00      	nop
 8006342:	bf00      	nop
 8006344:	3710      	adds	r7, #16
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}

0800634a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800634a:	b580      	push	{r7, lr}
 800634c:	b082      	sub	sp, #8
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00c      	beq.n	8006372 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d004      	beq.n	800636a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	4618      	mov	r0, r3
 8006366:	f7fe fd7d 	bl	8004e64 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800636a:	6879      	ldr	r1, [r7, #4]
 800636c:	2003      	movs	r0, #3
 800636e:	f7fd ff03 	bl	8004178 <memp_free>
  }
}
 8006372:	bf00      	nop
 8006374:	3708      	adds	r7, #8
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
	...

0800637c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d106      	bne.n	8006398 <tcp_seg_copy+0x1c>
 800638a:	4b0f      	ldr	r3, [pc, #60]	; (80063c8 <tcp_seg_copy+0x4c>)
 800638c:	f240 6282 	movw	r2, #1666	; 0x682
 8006390:	490e      	ldr	r1, [pc, #56]	; (80063cc <tcp_seg_copy+0x50>)
 8006392:	480f      	ldr	r0, [pc, #60]	; (80063d0 <tcp_seg_copy+0x54>)
 8006394:	f006 ff64 	bl	800d260 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8006398:	2003      	movs	r0, #3
 800639a:	f7fd fe7d 	bl	8004098 <memp_malloc>
 800639e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d101      	bne.n	80063aa <tcp_seg_copy+0x2e>
    return NULL;
 80063a6:	2300      	movs	r3, #0
 80063a8:	e00a      	b.n	80063c0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80063aa:	2210      	movs	r2, #16
 80063ac:	6879      	ldr	r1, [r7, #4]
 80063ae:	68f8      	ldr	r0, [r7, #12]
 80063b0:	f006 ff40 	bl	800d234 <memcpy>
  pbuf_ref(cseg->p);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	4618      	mov	r0, r3
 80063ba:	f7fe fdf3 	bl	8004fa4 <pbuf_ref>
  return cseg;
 80063be:	68fb      	ldr	r3, [r7, #12]
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3710      	adds	r7, #16
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	0800ede4 	.word	0x0800ede4
 80063cc:	0800f338 	.word	0x0800f338
 80063d0:	0800ee28 	.word	0x0800ee28

080063d4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	607a      	str	r2, [r7, #4]
 80063e0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d109      	bne.n	80063fc <tcp_recv_null+0x28>
 80063e8:	4b12      	ldr	r3, [pc, #72]	; (8006434 <tcp_recv_null+0x60>)
 80063ea:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80063ee:	4912      	ldr	r1, [pc, #72]	; (8006438 <tcp_recv_null+0x64>)
 80063f0:	4812      	ldr	r0, [pc, #72]	; (800643c <tcp_recv_null+0x68>)
 80063f2:	f006 ff35 	bl	800d260 <iprintf>
 80063f6:	f06f 030f 	mvn.w	r3, #15
 80063fa:	e016      	b.n	800642a <tcp_recv_null+0x56>

  if (p != NULL) {
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d009      	beq.n	8006416 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	891b      	ldrh	r3, [r3, #8]
 8006406:	4619      	mov	r1, r3
 8006408:	68b8      	ldr	r0, [r7, #8]
 800640a:	f7ff fb19 	bl	8005a40 <tcp_recved>
    pbuf_free(p);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f7fe fd28 	bl	8004e64 <pbuf_free>
 8006414:	e008      	b.n	8006428 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8006416:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d104      	bne.n	8006428 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800641e:	68b8      	ldr	r0, [r7, #8]
 8006420:	f7ff f9be 	bl	80057a0 <tcp_close>
 8006424:	4603      	mov	r3, r0
 8006426:	e000      	b.n	800642a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	3710      	adds	r7, #16
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	0800ede4 	.word	0x0800ede4
 8006438:	0800f354 	.word	0x0800f354
 800643c:	0800ee28 	.word	0x0800ee28

08006440 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b086      	sub	sp, #24
 8006444:	af00      	add	r7, sp, #0
 8006446:	4603      	mov	r3, r0
 8006448:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800644a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800644e:	2b00      	cmp	r3, #0
 8006450:	db01      	blt.n	8006456 <tcp_kill_prio+0x16>
 8006452:	79fb      	ldrb	r3, [r7, #7]
 8006454:	e000      	b.n	8006458 <tcp_kill_prio+0x18>
 8006456:	237f      	movs	r3, #127	; 0x7f
 8006458:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800645a:	7afb      	ldrb	r3, [r7, #11]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d034      	beq.n	80064ca <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8006460:	7afb      	ldrb	r3, [r7, #11]
 8006462:	3b01      	subs	r3, #1
 8006464:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8006466:	2300      	movs	r3, #0
 8006468:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800646a:	2300      	movs	r3, #0
 800646c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800646e:	4b19      	ldr	r3, [pc, #100]	; (80064d4 <tcp_kill_prio+0x94>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	617b      	str	r3, [r7, #20]
 8006474:	e01f      	b.n	80064b6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	7d5b      	ldrb	r3, [r3, #21]
 800647a:	7afa      	ldrb	r2, [r7, #11]
 800647c:	429a      	cmp	r2, r3
 800647e:	d80c      	bhi.n	800649a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8006484:	7afa      	ldrb	r2, [r7, #11]
 8006486:	429a      	cmp	r2, r3
 8006488:	d112      	bne.n	80064b0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800648a:	4b13      	ldr	r3, [pc, #76]	; (80064d8 <tcp_kill_prio+0x98>)
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	6a1b      	ldr	r3, [r3, #32]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	429a      	cmp	r2, r3
 8006498:	d80a      	bhi.n	80064b0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800649a:	4b0f      	ldr	r3, [pc, #60]	; (80064d8 <tcp_kill_prio+0x98>)
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	1ad3      	subs	r3, r2, r3
 80064a4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	7d5b      	ldrb	r3, [r3, #21]
 80064ae:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	617b      	str	r3, [r7, #20]
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d1dc      	bne.n	8006476 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d004      	beq.n	80064cc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80064c2:	6938      	ldr	r0, [r7, #16]
 80064c4:	f7ff fa56 	bl	8005974 <tcp_abort>
 80064c8:	e000      	b.n	80064cc <tcp_kill_prio+0x8c>
    return;
 80064ca:	bf00      	nop
  }
}
 80064cc:	3718      	adds	r7, #24
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	20008254 	.word	0x20008254
 80064d8:	20008248 	.word	0x20008248

080064dc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b086      	sub	sp, #24
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	4603      	mov	r3, r0
 80064e4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80064e6:	79fb      	ldrb	r3, [r7, #7]
 80064e8:	2b08      	cmp	r3, #8
 80064ea:	d009      	beq.n	8006500 <tcp_kill_state+0x24>
 80064ec:	79fb      	ldrb	r3, [r7, #7]
 80064ee:	2b09      	cmp	r3, #9
 80064f0:	d006      	beq.n	8006500 <tcp_kill_state+0x24>
 80064f2:	4b1a      	ldr	r3, [pc, #104]	; (800655c <tcp_kill_state+0x80>)
 80064f4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80064f8:	4919      	ldr	r1, [pc, #100]	; (8006560 <tcp_kill_state+0x84>)
 80064fa:	481a      	ldr	r0, [pc, #104]	; (8006564 <tcp_kill_state+0x88>)
 80064fc:	f006 feb0 	bl	800d260 <iprintf>

  inactivity = 0;
 8006500:	2300      	movs	r3, #0
 8006502:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006504:	2300      	movs	r3, #0
 8006506:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006508:	4b17      	ldr	r3, [pc, #92]	; (8006568 <tcp_kill_state+0x8c>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	617b      	str	r3, [r7, #20]
 800650e:	e017      	b.n	8006540 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	7d1b      	ldrb	r3, [r3, #20]
 8006514:	79fa      	ldrb	r2, [r7, #7]
 8006516:	429a      	cmp	r2, r3
 8006518:	d10f      	bne.n	800653a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800651a:	4b14      	ldr	r3, [pc, #80]	; (800656c <tcp_kill_state+0x90>)
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	6a1b      	ldr	r3, [r3, #32]
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	429a      	cmp	r2, r3
 8006528:	d807      	bhi.n	800653a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800652a:	4b10      	ldr	r3, [pc, #64]	; (800656c <tcp_kill_state+0x90>)
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	6a1b      	ldr	r3, [r3, #32]
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	617b      	str	r3, [r7, #20]
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1e4      	bne.n	8006510 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d003      	beq.n	8006554 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800654c:	2100      	movs	r1, #0
 800654e:	6938      	ldr	r0, [r7, #16]
 8006550:	f7ff f952 	bl	80057f8 <tcp_abandon>
  }
}
 8006554:	bf00      	nop
 8006556:	3718      	adds	r7, #24
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}
 800655c:	0800ede4 	.word	0x0800ede4
 8006560:	0800f370 	.word	0x0800f370
 8006564:	0800ee28 	.word	0x0800ee28
 8006568:	20008254 	.word	0x20008254
 800656c:	20008248 	.word	0x20008248

08006570 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8006576:	2300      	movs	r3, #0
 8006578:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800657a:	2300      	movs	r3, #0
 800657c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800657e:	4b12      	ldr	r3, [pc, #72]	; (80065c8 <tcp_kill_timewait+0x58>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	60fb      	str	r3, [r7, #12]
 8006584:	e012      	b.n	80065ac <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006586:	4b11      	ldr	r3, [pc, #68]	; (80065cc <tcp_kill_timewait+0x5c>)
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6a1b      	ldr	r3, [r3, #32]
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	429a      	cmp	r2, r3
 8006594:	d807      	bhi.n	80065a6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8006596:	4b0d      	ldr	r3, [pc, #52]	; (80065cc <tcp_kill_timewait+0x5c>)
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6a1b      	ldr	r3, [r3, #32]
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	60fb      	str	r3, [r7, #12]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1e9      	bne.n	8006586 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d002      	beq.n	80065be <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80065b8:	68b8      	ldr	r0, [r7, #8]
 80065ba:	f7ff f9db 	bl	8005974 <tcp_abort>
  }
}
 80065be:	bf00      	nop
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	20008258 	.word	0x20008258
 80065cc:	20008248 	.word	0x20008248

080065d0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b082      	sub	sp, #8
 80065d4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80065d6:	4b10      	ldr	r3, [pc, #64]	; (8006618 <tcp_handle_closepend+0x48>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80065dc:	e014      	b.n	8006608 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	8b5b      	ldrh	r3, [r3, #26]
 80065e8:	f003 0308 	and.w	r3, r3, #8
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d009      	beq.n	8006604 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	8b5b      	ldrh	r3, [r3, #26]
 80065f4:	f023 0308 	bic.w	r3, r3, #8
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f7ff f864 	bl	80056cc <tcp_close_shutdown_fin>
    }
    pcb = next;
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1e7      	bne.n	80065de <tcp_handle_closepend+0xe>
  }
}
 800660e:	bf00      	nop
 8006610:	bf00      	nop
 8006612:	3708      	adds	r7, #8
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}
 8006618:	20008254 	.word	0x20008254

0800661c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	4603      	mov	r3, r0
 8006624:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006626:	2001      	movs	r0, #1
 8006628:	f7fd fd36 	bl	8004098 <memp_malloc>
 800662c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d126      	bne.n	8006682 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8006634:	f7ff ffcc 	bl	80065d0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8006638:	f7ff ff9a 	bl	8006570 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800663c:	2001      	movs	r0, #1
 800663e:	f7fd fd2b 	bl	8004098 <memp_malloc>
 8006642:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d11b      	bne.n	8006682 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800664a:	2009      	movs	r0, #9
 800664c:	f7ff ff46 	bl	80064dc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006650:	2001      	movs	r0, #1
 8006652:	f7fd fd21 	bl	8004098 <memp_malloc>
 8006656:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d111      	bne.n	8006682 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800665e:	2008      	movs	r0, #8
 8006660:	f7ff ff3c 	bl	80064dc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006664:	2001      	movs	r0, #1
 8006666:	f7fd fd17 	bl	8004098 <memp_malloc>
 800666a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d107      	bne.n	8006682 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8006672:	79fb      	ldrb	r3, [r7, #7]
 8006674:	4618      	mov	r0, r3
 8006676:	f7ff fee3 	bl	8006440 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800667a:	2001      	movs	r0, #1
 800667c:	f7fd fd0c 	bl	8004098 <memp_malloc>
 8006680:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d03f      	beq.n	8006708 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8006688:	229c      	movs	r2, #156	; 0x9c
 800668a:	2100      	movs	r1, #0
 800668c:	68f8      	ldr	r0, [r7, #12]
 800668e:	f006 fddf 	bl	800d250 <memset>
    pcb->prio = prio;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	79fa      	ldrb	r2, [r7, #7]
 8006696:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800669e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80066a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	22ff      	movs	r2, #255	; 0xff
 80066b6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f44f 7206 	mov.w	r2, #536	; 0x218
 80066be:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2206      	movs	r2, #6
 80066c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2206      	movs	r2, #6
 80066cc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80066d4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2201      	movs	r2, #1
 80066da:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80066de:	4b0d      	ldr	r3, [pc, #52]	; (8006714 <tcp_alloc+0xf8>)
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80066e6:	4b0c      	ldr	r3, [pc, #48]	; (8006718 <tcp_alloc+0xfc>)
 80066e8:	781a      	ldrb	r2, [r3, #0]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80066f4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	4a08      	ldr	r2, [pc, #32]	; (800671c <tcp_alloc+0x100>)
 80066fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	4a07      	ldr	r2, [pc, #28]	; (8006720 <tcp_alloc+0x104>)
 8006704:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8006708:	68fb      	ldr	r3, [r7, #12]
}
 800670a:	4618      	mov	r0, r3
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	20008248 	.word	0x20008248
 8006718:	2000825e 	.word	0x2000825e
 800671c:	080063d5 	.word	0x080063d5
 8006720:	006ddd00 	.word	0x006ddd00

08006724 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d107      	bne.n	8006742 <tcp_pcb_purge+0x1e>
 8006732:	4b21      	ldr	r3, [pc, #132]	; (80067b8 <tcp_pcb_purge+0x94>)
 8006734:	f640 0251 	movw	r2, #2129	; 0x851
 8006738:	4920      	ldr	r1, [pc, #128]	; (80067bc <tcp_pcb_purge+0x98>)
 800673a:	4821      	ldr	r0, [pc, #132]	; (80067c0 <tcp_pcb_purge+0x9c>)
 800673c:	f006 fd90 	bl	800d260 <iprintf>
 8006740:	e037      	b.n	80067b2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	7d1b      	ldrb	r3, [r3, #20]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d033      	beq.n	80067b2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800674e:	2b0a      	cmp	r3, #10
 8006750:	d02f      	beq.n	80067b2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8006756:	2b01      	cmp	r3, #1
 8006758:	d02b      	beq.n	80067b2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800675e:	2b00      	cmp	r3, #0
 8006760:	d007      	beq.n	8006772 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006766:	4618      	mov	r0, r3
 8006768:	f7fe fb7c 	bl	8004e64 <pbuf_free>
      pcb->refused_data = NULL;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006776:	2b00      	cmp	r3, #0
 8006778:	d002      	beq.n	8006780 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f986 	bl	8006a8c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006786:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800678c:	4618      	mov	r0, r3
 800678e:	f7ff fdc7 	bl	8006320 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006796:	4618      	mov	r0, r3
 8006798:	f7ff fdc2 	bl	8006320 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	66da      	str	r2, [r3, #108]	; 0x6c
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80067b2:	3708      	adds	r7, #8
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	0800ede4 	.word	0x0800ede4
 80067bc:	0800f430 	.word	0x0800f430
 80067c0:	0800ee28 	.word	0x0800ee28

080067c4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d106      	bne.n	80067e2 <tcp_pcb_remove+0x1e>
 80067d4:	4b3e      	ldr	r3, [pc, #248]	; (80068d0 <tcp_pcb_remove+0x10c>)
 80067d6:	f640 0283 	movw	r2, #2179	; 0x883
 80067da:	493e      	ldr	r1, [pc, #248]	; (80068d4 <tcp_pcb_remove+0x110>)
 80067dc:	483e      	ldr	r0, [pc, #248]	; (80068d8 <tcp_pcb_remove+0x114>)
 80067de:	f006 fd3f 	bl	800d260 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d106      	bne.n	80067f6 <tcp_pcb_remove+0x32>
 80067e8:	4b39      	ldr	r3, [pc, #228]	; (80068d0 <tcp_pcb_remove+0x10c>)
 80067ea:	f640 0284 	movw	r2, #2180	; 0x884
 80067ee:	493b      	ldr	r1, [pc, #236]	; (80068dc <tcp_pcb_remove+0x118>)
 80067f0:	4839      	ldr	r0, [pc, #228]	; (80068d8 <tcp_pcb_remove+0x114>)
 80067f2:	f006 fd35 	bl	800d260 <iprintf>

  TCP_RMV(pcblist, pcb);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	683a      	ldr	r2, [r7, #0]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d105      	bne.n	800680c <tcp_pcb_remove+0x48>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68da      	ldr	r2, [r3, #12]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	601a      	str	r2, [r3, #0]
 800680a:	e013      	b.n	8006834 <tcp_pcb_remove+0x70>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	60fb      	str	r3, [r7, #12]
 8006812:	e00c      	b.n	800682e <tcp_pcb_remove+0x6a>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	683a      	ldr	r2, [r7, #0]
 800681a:	429a      	cmp	r2, r3
 800681c:	d104      	bne.n	8006828 <tcp_pcb_remove+0x64>
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	68da      	ldr	r2, [r3, #12]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	60da      	str	r2, [r3, #12]
 8006826:	e005      	b.n	8006834 <tcp_pcb_remove+0x70>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	60fb      	str	r3, [r7, #12]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d1ef      	bne.n	8006814 <tcp_pcb_remove+0x50>
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	2200      	movs	r2, #0
 8006838:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800683a:	6838      	ldr	r0, [r7, #0]
 800683c:	f7ff ff72 	bl	8006724 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	7d1b      	ldrb	r3, [r3, #20]
 8006844:	2b0a      	cmp	r3, #10
 8006846:	d013      	beq.n	8006870 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800684c:	2b01      	cmp	r3, #1
 800684e:	d00f      	beq.n	8006870 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	8b5b      	ldrh	r3, [r3, #26]
 8006854:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8006858:	2b00      	cmp	r3, #0
 800685a:	d009      	beq.n	8006870 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	8b5b      	ldrh	r3, [r3, #26]
 8006860:	f043 0302 	orr.w	r3, r3, #2
 8006864:	b29a      	uxth	r2, r3
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800686a:	6838      	ldr	r0, [r7, #0]
 800686c:	f002 ff6e 	bl	800974c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	7d1b      	ldrb	r3, [r3, #20]
 8006874:	2b01      	cmp	r3, #1
 8006876:	d020      	beq.n	80068ba <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800687c:	2b00      	cmp	r3, #0
 800687e:	d006      	beq.n	800688e <tcp_pcb_remove+0xca>
 8006880:	4b13      	ldr	r3, [pc, #76]	; (80068d0 <tcp_pcb_remove+0x10c>)
 8006882:	f640 0293 	movw	r2, #2195	; 0x893
 8006886:	4916      	ldr	r1, [pc, #88]	; (80068e0 <tcp_pcb_remove+0x11c>)
 8006888:	4813      	ldr	r0, [pc, #76]	; (80068d8 <tcp_pcb_remove+0x114>)
 800688a:	f006 fce9 	bl	800d260 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006892:	2b00      	cmp	r3, #0
 8006894:	d006      	beq.n	80068a4 <tcp_pcb_remove+0xe0>
 8006896:	4b0e      	ldr	r3, [pc, #56]	; (80068d0 <tcp_pcb_remove+0x10c>)
 8006898:	f640 0294 	movw	r2, #2196	; 0x894
 800689c:	4911      	ldr	r1, [pc, #68]	; (80068e4 <tcp_pcb_remove+0x120>)
 800689e:	480e      	ldr	r0, [pc, #56]	; (80068d8 <tcp_pcb_remove+0x114>)
 80068a0:	f006 fcde 	bl	800d260 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d006      	beq.n	80068ba <tcp_pcb_remove+0xf6>
 80068ac:	4b08      	ldr	r3, [pc, #32]	; (80068d0 <tcp_pcb_remove+0x10c>)
 80068ae:	f640 0296 	movw	r2, #2198	; 0x896
 80068b2:	490d      	ldr	r1, [pc, #52]	; (80068e8 <tcp_pcb_remove+0x124>)
 80068b4:	4808      	ldr	r0, [pc, #32]	; (80068d8 <tcp_pcb_remove+0x114>)
 80068b6:	f006 fcd3 	bl	800d260 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	2200      	movs	r2, #0
 80068be:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	2200      	movs	r2, #0
 80068c4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80068c6:	bf00      	nop
 80068c8:	3710      	adds	r7, #16
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	0800ede4 	.word	0x0800ede4
 80068d4:	0800f44c 	.word	0x0800f44c
 80068d8:	0800ee28 	.word	0x0800ee28
 80068dc:	0800f468 	.word	0x0800f468
 80068e0:	0800f488 	.word	0x0800f488
 80068e4:	0800f4a0 	.word	0x0800f4a0
 80068e8:	0800f4bc 	.word	0x0800f4bc

080068ec <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d106      	bne.n	8006908 <tcp_next_iss+0x1c>
 80068fa:	4b0a      	ldr	r3, [pc, #40]	; (8006924 <tcp_next_iss+0x38>)
 80068fc:	f640 02af 	movw	r2, #2223	; 0x8af
 8006900:	4909      	ldr	r1, [pc, #36]	; (8006928 <tcp_next_iss+0x3c>)
 8006902:	480a      	ldr	r0, [pc, #40]	; (800692c <tcp_next_iss+0x40>)
 8006904:	f006 fcac 	bl	800d260 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8006908:	4b09      	ldr	r3, [pc, #36]	; (8006930 <tcp_next_iss+0x44>)
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	4b09      	ldr	r3, [pc, #36]	; (8006934 <tcp_next_iss+0x48>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4413      	add	r3, r2
 8006912:	4a07      	ldr	r2, [pc, #28]	; (8006930 <tcp_next_iss+0x44>)
 8006914:	6013      	str	r3, [r2, #0]
  return iss;
 8006916:	4b06      	ldr	r3, [pc, #24]	; (8006930 <tcp_next_iss+0x44>)
 8006918:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800691a:	4618      	mov	r0, r3
 800691c:	3708      	adds	r7, #8
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	0800ede4 	.word	0x0800ede4
 8006928:	0800f4d4 	.word	0x0800f4d4
 800692c:	0800ee28 	.word	0x0800ee28
 8006930:	20000024 	.word	0x20000024
 8006934:	20008248 	.word	0x20008248

08006938 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b086      	sub	sp, #24
 800693c:	af00      	add	r7, sp, #0
 800693e:	4603      	mov	r3, r0
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]
 8006944:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d106      	bne.n	800695a <tcp_eff_send_mss_netif+0x22>
 800694c:	4b14      	ldr	r3, [pc, #80]	; (80069a0 <tcp_eff_send_mss_netif+0x68>)
 800694e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8006952:	4914      	ldr	r1, [pc, #80]	; (80069a4 <tcp_eff_send_mss_netif+0x6c>)
 8006954:	4814      	ldr	r0, [pc, #80]	; (80069a8 <tcp_eff_send_mss_netif+0x70>)
 8006956:	f006 fc83 	bl	800d260 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d101      	bne.n	8006964 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8006960:	89fb      	ldrh	r3, [r7, #14]
 8006962:	e019      	b.n	8006998 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006968:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800696a:	8afb      	ldrh	r3, [r7, #22]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d012      	beq.n	8006996 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8006970:	2328      	movs	r3, #40	; 0x28
 8006972:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8006974:	8afa      	ldrh	r2, [r7, #22]
 8006976:	8abb      	ldrh	r3, [r7, #20]
 8006978:	429a      	cmp	r2, r3
 800697a:	d904      	bls.n	8006986 <tcp_eff_send_mss_netif+0x4e>
 800697c:	8afa      	ldrh	r2, [r7, #22]
 800697e:	8abb      	ldrh	r3, [r7, #20]
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	b29b      	uxth	r3, r3
 8006984:	e000      	b.n	8006988 <tcp_eff_send_mss_netif+0x50>
 8006986:	2300      	movs	r3, #0
 8006988:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800698a:	8a7a      	ldrh	r2, [r7, #18]
 800698c:	89fb      	ldrh	r3, [r7, #14]
 800698e:	4293      	cmp	r3, r2
 8006990:	bf28      	it	cs
 8006992:	4613      	movcs	r3, r2
 8006994:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8006996:	89fb      	ldrh	r3, [r7, #14]
}
 8006998:	4618      	mov	r0, r3
 800699a:	3718      	adds	r7, #24
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	0800ede4 	.word	0x0800ede4
 80069a4:	0800f4f0 	.word	0x0800f4f0
 80069a8:	0800ee28 	.word	0x0800ee28

080069ac <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d119      	bne.n	80069f4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80069c0:	4b10      	ldr	r3, [pc, #64]	; (8006a04 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80069c2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80069c6:	4910      	ldr	r1, [pc, #64]	; (8006a08 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80069c8:	4810      	ldr	r0, [pc, #64]	; (8006a0c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80069ca:	f006 fc49 	bl	800d260 <iprintf>

  while (pcb != NULL) {
 80069ce:	e011      	b.n	80069f4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d108      	bne.n	80069ee <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80069e2:	68f8      	ldr	r0, [r7, #12]
 80069e4:	f7fe ffc6 	bl	8005974 <tcp_abort>
      pcb = next;
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	60fb      	str	r3, [r7, #12]
 80069ec:	e002      	b.n	80069f4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1ea      	bne.n	80069d0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80069fa:	bf00      	nop
 80069fc:	bf00      	nop
 80069fe:	3710      	adds	r7, #16
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	0800ede4 	.word	0x0800ede4
 8006a08:	0800f518 	.word	0x0800f518
 8006a0c:	0800ee28 	.word	0x0800ee28

08006a10 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d02a      	beq.n	8006a76 <tcp_netif_ip_addr_changed+0x66>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d026      	beq.n	8006a76 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8006a28:	4b15      	ldr	r3, [pc, #84]	; (8006a80 <tcp_netif_ip_addr_changed+0x70>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f7ff ffbc 	bl	80069ac <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8006a34:	4b13      	ldr	r3, [pc, #76]	; (8006a84 <tcp_netif_ip_addr_changed+0x74>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4619      	mov	r1, r3
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f7ff ffb6 	bl	80069ac <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d017      	beq.n	8006a76 <tcp_netif_ip_addr_changed+0x66>
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d013      	beq.n	8006a76 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006a4e:	4b0e      	ldr	r3, [pc, #56]	; (8006a88 <tcp_netif_ip_addr_changed+0x78>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	60fb      	str	r3, [r7, #12]
 8006a54:	e00c      	b.n	8006a70 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d103      	bne.n	8006a6a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	60fb      	str	r3, [r7, #12]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d1ef      	bne.n	8006a56 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8006a76:	bf00      	nop
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	20008254 	.word	0x20008254
 8006a84:	2000824c 	.word	0x2000824c
 8006a88:	20008250 	.word	0x20008250

08006a8c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d007      	beq.n	8006aac <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f7ff fc3d 	bl	8006320 <tcp_segs_free>
    pcb->ooseq = NULL;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8006aac:	bf00      	nop
 8006aae:	3708      	adds	r7, #8
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8006ab4:	b590      	push	{r4, r7, lr}
 8006ab6:	b08d      	sub	sp, #52	; 0x34
 8006ab8:	af04      	add	r7, sp, #16
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d105      	bne.n	8006ad0 <tcp_input+0x1c>
 8006ac4:	4b9b      	ldr	r3, [pc, #620]	; (8006d34 <tcp_input+0x280>)
 8006ac6:	2283      	movs	r2, #131	; 0x83
 8006ac8:	499b      	ldr	r1, [pc, #620]	; (8006d38 <tcp_input+0x284>)
 8006aca:	489c      	ldr	r0, [pc, #624]	; (8006d3c <tcp_input+0x288>)
 8006acc:	f006 fbc8 	bl	800d260 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	4a9a      	ldr	r2, [pc, #616]	; (8006d40 <tcp_input+0x28c>)
 8006ad6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	895b      	ldrh	r3, [r3, #10]
 8006adc:	2b13      	cmp	r3, #19
 8006ade:	f240 83d1 	bls.w	8007284 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8006ae2:	4b98      	ldr	r3, [pc, #608]	; (8006d44 <tcp_input+0x290>)
 8006ae4:	695b      	ldr	r3, [r3, #20]
 8006ae6:	4a97      	ldr	r2, [pc, #604]	; (8006d44 <tcp_input+0x290>)
 8006ae8:	6812      	ldr	r2, [r2, #0]
 8006aea:	4611      	mov	r1, r2
 8006aec:	4618      	mov	r0, r3
 8006aee:	f005 fc17 	bl	800c320 <ip4_addr_isbroadcast_u32>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f040 83c7 	bne.w	8007288 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8006afa:	4b92      	ldr	r3, [pc, #584]	; (8006d44 <tcp_input+0x290>)
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8006b02:	2be0      	cmp	r3, #224	; 0xe0
 8006b04:	f000 83c0 	beq.w	8007288 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8006b08:	4b8d      	ldr	r3, [pc, #564]	; (8006d40 <tcp_input+0x28c>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	899b      	ldrh	r3, [r3, #12]
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	4618      	mov	r0, r3
 8006b12:	f7fc fe49 	bl	80037a8 <lwip_htons>
 8006b16:	4603      	mov	r3, r0
 8006b18:	0b1b      	lsrs	r3, r3, #12
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8006b22:	7cbb      	ldrb	r3, [r7, #18]
 8006b24:	2b13      	cmp	r3, #19
 8006b26:	f240 83b1 	bls.w	800728c <tcp_input+0x7d8>
 8006b2a:	7cbb      	ldrb	r3, [r7, #18]
 8006b2c:	b29a      	uxth	r2, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	891b      	ldrh	r3, [r3, #8]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	f200 83aa 	bhi.w	800728c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8006b38:	7cbb      	ldrb	r3, [r7, #18]
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	3b14      	subs	r3, #20
 8006b3e:	b29a      	uxth	r2, r3
 8006b40:	4b81      	ldr	r3, [pc, #516]	; (8006d48 <tcp_input+0x294>)
 8006b42:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8006b44:	4b81      	ldr	r3, [pc, #516]	; (8006d4c <tcp_input+0x298>)
 8006b46:	2200      	movs	r2, #0
 8006b48:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	895a      	ldrh	r2, [r3, #10]
 8006b4e:	7cbb      	ldrb	r3, [r7, #18]
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d309      	bcc.n	8006b6a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8006b56:	4b7c      	ldr	r3, [pc, #496]	; (8006d48 <tcp_input+0x294>)
 8006b58:	881a      	ldrh	r2, [r3, #0]
 8006b5a:	4b7d      	ldr	r3, [pc, #500]	; (8006d50 <tcp_input+0x29c>)
 8006b5c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8006b5e:	7cbb      	ldrb	r3, [r7, #18]
 8006b60:	4619      	mov	r1, r3
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f7fe f8f8 	bl	8004d58 <pbuf_remove_header>
 8006b68:	e04e      	b.n	8006c08 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d105      	bne.n	8006b7e <tcp_input+0xca>
 8006b72:	4b70      	ldr	r3, [pc, #448]	; (8006d34 <tcp_input+0x280>)
 8006b74:	22c2      	movs	r2, #194	; 0xc2
 8006b76:	4977      	ldr	r1, [pc, #476]	; (8006d54 <tcp_input+0x2a0>)
 8006b78:	4870      	ldr	r0, [pc, #448]	; (8006d3c <tcp_input+0x288>)
 8006b7a:	f006 fb71 	bl	800d260 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8006b7e:	2114      	movs	r1, #20
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f7fe f8e9 	bl	8004d58 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	895a      	ldrh	r2, [r3, #10]
 8006b8a:	4b71      	ldr	r3, [pc, #452]	; (8006d50 <tcp_input+0x29c>)
 8006b8c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8006b8e:	4b6e      	ldr	r3, [pc, #440]	; (8006d48 <tcp_input+0x294>)
 8006b90:	881a      	ldrh	r2, [r3, #0]
 8006b92:	4b6f      	ldr	r3, [pc, #444]	; (8006d50 <tcp_input+0x29c>)
 8006b94:	881b      	ldrh	r3, [r3, #0]
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8006b9a:	4b6d      	ldr	r3, [pc, #436]	; (8006d50 <tcp_input+0x29c>)
 8006b9c:	881b      	ldrh	r3, [r3, #0]
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f7fe f8d9 	bl	8004d58 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	895b      	ldrh	r3, [r3, #10]
 8006bac:	8a3a      	ldrh	r2, [r7, #16]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	f200 836e 	bhi.w	8007290 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	4a64      	ldr	r2, [pc, #400]	; (8006d4c <tcp_input+0x298>)
 8006bbc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	8a3a      	ldrh	r2, [r7, #16]
 8006bc4:	4611      	mov	r1, r2
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7fe f8c6 	bl	8004d58 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	891a      	ldrh	r2, [r3, #8]
 8006bd0:	8a3b      	ldrh	r3, [r7, #16]
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	b29a      	uxth	r2, r3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	895b      	ldrh	r3, [r3, #10]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d005      	beq.n	8006bee <tcp_input+0x13a>
 8006be2:	4b54      	ldr	r3, [pc, #336]	; (8006d34 <tcp_input+0x280>)
 8006be4:	22df      	movs	r2, #223	; 0xdf
 8006be6:	495c      	ldr	r1, [pc, #368]	; (8006d58 <tcp_input+0x2a4>)
 8006be8:	4854      	ldr	r0, [pc, #336]	; (8006d3c <tcp_input+0x288>)
 8006bea:	f006 fb39 	bl	800d260 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	891a      	ldrh	r2, [r3, #8]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	891b      	ldrh	r3, [r3, #8]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d005      	beq.n	8006c08 <tcp_input+0x154>
 8006bfc:	4b4d      	ldr	r3, [pc, #308]	; (8006d34 <tcp_input+0x280>)
 8006bfe:	22e0      	movs	r2, #224	; 0xe0
 8006c00:	4956      	ldr	r1, [pc, #344]	; (8006d5c <tcp_input+0x2a8>)
 8006c02:	484e      	ldr	r0, [pc, #312]	; (8006d3c <tcp_input+0x288>)
 8006c04:	f006 fb2c 	bl	800d260 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8006c08:	4b4d      	ldr	r3, [pc, #308]	; (8006d40 <tcp_input+0x28c>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	881b      	ldrh	r3, [r3, #0]
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	4a4b      	ldr	r2, [pc, #300]	; (8006d40 <tcp_input+0x28c>)
 8006c12:	6814      	ldr	r4, [r2, #0]
 8006c14:	4618      	mov	r0, r3
 8006c16:	f7fc fdc7 	bl	80037a8 <lwip_htons>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8006c1e:	4b48      	ldr	r3, [pc, #288]	; (8006d40 <tcp_input+0x28c>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	885b      	ldrh	r3, [r3, #2]
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	4a46      	ldr	r2, [pc, #280]	; (8006d40 <tcp_input+0x28c>)
 8006c28:	6814      	ldr	r4, [r2, #0]
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f7fc fdbc 	bl	80037a8 <lwip_htons>
 8006c30:	4603      	mov	r3, r0
 8006c32:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8006c34:	4b42      	ldr	r3, [pc, #264]	; (8006d40 <tcp_input+0x28c>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	4a41      	ldr	r2, [pc, #260]	; (8006d40 <tcp_input+0x28c>)
 8006c3c:	6814      	ldr	r4, [r2, #0]
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7fc fdc7 	bl	80037d2 <lwip_htonl>
 8006c44:	4603      	mov	r3, r0
 8006c46:	6063      	str	r3, [r4, #4]
 8006c48:	6863      	ldr	r3, [r4, #4]
 8006c4a:	4a45      	ldr	r2, [pc, #276]	; (8006d60 <tcp_input+0x2ac>)
 8006c4c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8006c4e:	4b3c      	ldr	r3, [pc, #240]	; (8006d40 <tcp_input+0x28c>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	4a3a      	ldr	r2, [pc, #232]	; (8006d40 <tcp_input+0x28c>)
 8006c56:	6814      	ldr	r4, [r2, #0]
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f7fc fdba 	bl	80037d2 <lwip_htonl>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	60a3      	str	r3, [r4, #8]
 8006c62:	68a3      	ldr	r3, [r4, #8]
 8006c64:	4a3f      	ldr	r2, [pc, #252]	; (8006d64 <tcp_input+0x2b0>)
 8006c66:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8006c68:	4b35      	ldr	r3, [pc, #212]	; (8006d40 <tcp_input+0x28c>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	89db      	ldrh	r3, [r3, #14]
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	4a33      	ldr	r2, [pc, #204]	; (8006d40 <tcp_input+0x28c>)
 8006c72:	6814      	ldr	r4, [r2, #0]
 8006c74:	4618      	mov	r0, r3
 8006c76:	f7fc fd97 	bl	80037a8 <lwip_htons>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8006c7e:	4b30      	ldr	r3, [pc, #192]	; (8006d40 <tcp_input+0x28c>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	899b      	ldrh	r3, [r3, #12]
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7fc fd8e 	bl	80037a8 <lwip_htons>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c94:	b2da      	uxtb	r2, r3
 8006c96:	4b34      	ldr	r3, [pc, #208]	; (8006d68 <tcp_input+0x2b4>)
 8006c98:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	891a      	ldrh	r2, [r3, #8]
 8006c9e:	4b33      	ldr	r3, [pc, #204]	; (8006d6c <tcp_input+0x2b8>)
 8006ca0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8006ca2:	4b31      	ldr	r3, [pc, #196]	; (8006d68 <tcp_input+0x2b4>)
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	f003 0303 	and.w	r3, r3, #3
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00c      	beq.n	8006cc8 <tcp_input+0x214>
    tcplen++;
 8006cae:	4b2f      	ldr	r3, [pc, #188]	; (8006d6c <tcp_input+0x2b8>)
 8006cb0:	881b      	ldrh	r3, [r3, #0]
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	b29a      	uxth	r2, r3
 8006cb6:	4b2d      	ldr	r3, [pc, #180]	; (8006d6c <tcp_input+0x2b8>)
 8006cb8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	891a      	ldrh	r2, [r3, #8]
 8006cbe:	4b2b      	ldr	r3, [pc, #172]	; (8006d6c <tcp_input+0x2b8>)
 8006cc0:	881b      	ldrh	r3, [r3, #0]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	f200 82e6 	bhi.w	8007294 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006ccc:	4b28      	ldr	r3, [pc, #160]	; (8006d70 <tcp_input+0x2bc>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	61fb      	str	r3, [r7, #28]
 8006cd2:	e09d      	b.n	8006e10 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	7d1b      	ldrb	r3, [r3, #20]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d105      	bne.n	8006ce8 <tcp_input+0x234>
 8006cdc:	4b15      	ldr	r3, [pc, #84]	; (8006d34 <tcp_input+0x280>)
 8006cde:	22fb      	movs	r2, #251	; 0xfb
 8006ce0:	4924      	ldr	r1, [pc, #144]	; (8006d74 <tcp_input+0x2c0>)
 8006ce2:	4816      	ldr	r0, [pc, #88]	; (8006d3c <tcp_input+0x288>)
 8006ce4:	f006 fabc 	bl	800d260 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	7d1b      	ldrb	r3, [r3, #20]
 8006cec:	2b0a      	cmp	r3, #10
 8006cee:	d105      	bne.n	8006cfc <tcp_input+0x248>
 8006cf0:	4b10      	ldr	r3, [pc, #64]	; (8006d34 <tcp_input+0x280>)
 8006cf2:	22fc      	movs	r2, #252	; 0xfc
 8006cf4:	4920      	ldr	r1, [pc, #128]	; (8006d78 <tcp_input+0x2c4>)
 8006cf6:	4811      	ldr	r0, [pc, #68]	; (8006d3c <tcp_input+0x288>)
 8006cf8:	f006 fab2 	bl	800d260 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	7d1b      	ldrb	r3, [r3, #20]
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d105      	bne.n	8006d10 <tcp_input+0x25c>
 8006d04:	4b0b      	ldr	r3, [pc, #44]	; (8006d34 <tcp_input+0x280>)
 8006d06:	22fd      	movs	r2, #253	; 0xfd
 8006d08:	491c      	ldr	r1, [pc, #112]	; (8006d7c <tcp_input+0x2c8>)
 8006d0a:	480c      	ldr	r0, [pc, #48]	; (8006d3c <tcp_input+0x288>)
 8006d0c:	f006 faa8 	bl	800d260 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	7a1b      	ldrb	r3, [r3, #8]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d033      	beq.n	8006d80 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	7a1a      	ldrb	r2, [r3, #8]
 8006d1c:	4b09      	ldr	r3, [pc, #36]	; (8006d44 <tcp_input+0x290>)
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d24:	3301      	adds	r3, #1
 8006d26:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d029      	beq.n	8006d80 <tcp_input+0x2cc>
      prev = pcb;
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	61bb      	str	r3, [r7, #24]
      continue;
 8006d30:	e06b      	b.n	8006e0a <tcp_input+0x356>
 8006d32:	bf00      	nop
 8006d34:	0800f54c 	.word	0x0800f54c
 8006d38:	0800f580 	.word	0x0800f580
 8006d3c:	0800f598 	.word	0x0800f598
 8006d40:	20008270 	.word	0x20008270
 8006d44:	20004cd8 	.word	0x20004cd8
 8006d48:	20008274 	.word	0x20008274
 8006d4c:	20008278 	.word	0x20008278
 8006d50:	20008276 	.word	0x20008276
 8006d54:	0800f5c0 	.word	0x0800f5c0
 8006d58:	0800f5d0 	.word	0x0800f5d0
 8006d5c:	0800f5dc 	.word	0x0800f5dc
 8006d60:	20008280 	.word	0x20008280
 8006d64:	20008284 	.word	0x20008284
 8006d68:	2000828c 	.word	0x2000828c
 8006d6c:	2000828a 	.word	0x2000828a
 8006d70:	20008254 	.word	0x20008254
 8006d74:	0800f5fc 	.word	0x0800f5fc
 8006d78:	0800f624 	.word	0x0800f624
 8006d7c:	0800f650 	.word	0x0800f650
    }

    if (pcb->remote_port == tcphdr->src &&
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	8b1a      	ldrh	r2, [r3, #24]
 8006d84:	4b72      	ldr	r3, [pc, #456]	; (8006f50 <tcp_input+0x49c>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	881b      	ldrh	r3, [r3, #0]
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d13a      	bne.n	8006e06 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	8ada      	ldrh	r2, [r3, #22]
 8006d94:	4b6e      	ldr	r3, [pc, #440]	; (8006f50 <tcp_input+0x49c>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	885b      	ldrh	r3, [r3, #2]
 8006d9a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d132      	bne.n	8006e06 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	685a      	ldr	r2, [r3, #4]
 8006da4:	4b6b      	ldr	r3, [pc, #428]	; (8006f54 <tcp_input+0x4a0>)
 8006da6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d12c      	bne.n	8006e06 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	4b68      	ldr	r3, [pc, #416]	; (8006f54 <tcp_input+0x4a0>)
 8006db2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d126      	bne.n	8006e06 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	69fa      	ldr	r2, [r7, #28]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d106      	bne.n	8006dd0 <tcp_input+0x31c>
 8006dc2:	4b65      	ldr	r3, [pc, #404]	; (8006f58 <tcp_input+0x4a4>)
 8006dc4:	f240 120d 	movw	r2, #269	; 0x10d
 8006dc8:	4964      	ldr	r1, [pc, #400]	; (8006f5c <tcp_input+0x4a8>)
 8006dca:	4865      	ldr	r0, [pc, #404]	; (8006f60 <tcp_input+0x4ac>)
 8006dcc:	f006 fa48 	bl	800d260 <iprintf>
      if (prev != NULL) {
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00a      	beq.n	8006dec <tcp_input+0x338>
        prev->next = pcb->next;
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	68da      	ldr	r2, [r3, #12]
 8006dda:	69bb      	ldr	r3, [r7, #24]
 8006ddc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8006dde:	4b61      	ldr	r3, [pc, #388]	; (8006f64 <tcp_input+0x4b0>)
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8006de6:	4a5f      	ldr	r2, [pc, #380]	; (8006f64 <tcp_input+0x4b0>)
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	69fa      	ldr	r2, [r7, #28]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d111      	bne.n	8006e1a <tcp_input+0x366>
 8006df6:	4b58      	ldr	r3, [pc, #352]	; (8006f58 <tcp_input+0x4a4>)
 8006df8:	f240 1215 	movw	r2, #277	; 0x115
 8006dfc:	495a      	ldr	r1, [pc, #360]	; (8006f68 <tcp_input+0x4b4>)
 8006dfe:	4858      	ldr	r0, [pc, #352]	; (8006f60 <tcp_input+0x4ac>)
 8006e00:	f006 fa2e 	bl	800d260 <iprintf>
      break;
 8006e04:	e009      	b.n	8006e1a <tcp_input+0x366>
    }
    prev = pcb;
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	61fb      	str	r3, [r7, #28]
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	f47f af5e 	bne.w	8006cd4 <tcp_input+0x220>
 8006e18:	e000      	b.n	8006e1c <tcp_input+0x368>
      break;
 8006e1a:	bf00      	nop
  }

  if (pcb == NULL) {
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f040 80aa 	bne.w	8006f78 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006e24:	4b51      	ldr	r3, [pc, #324]	; (8006f6c <tcp_input+0x4b8>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	61fb      	str	r3, [r7, #28]
 8006e2a:	e03f      	b.n	8006eac <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	7d1b      	ldrb	r3, [r3, #20]
 8006e30:	2b0a      	cmp	r3, #10
 8006e32:	d006      	beq.n	8006e42 <tcp_input+0x38e>
 8006e34:	4b48      	ldr	r3, [pc, #288]	; (8006f58 <tcp_input+0x4a4>)
 8006e36:	f240 121f 	movw	r2, #287	; 0x11f
 8006e3a:	494d      	ldr	r1, [pc, #308]	; (8006f70 <tcp_input+0x4bc>)
 8006e3c:	4848      	ldr	r0, [pc, #288]	; (8006f60 <tcp_input+0x4ac>)
 8006e3e:	f006 fa0f 	bl	800d260 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	7a1b      	ldrb	r3, [r3, #8]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d009      	beq.n	8006e5e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	7a1a      	ldrb	r2, [r3, #8]
 8006e4e:	4b41      	ldr	r3, [pc, #260]	; (8006f54 <tcp_input+0x4a0>)
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006e56:	3301      	adds	r3, #1
 8006e58:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d122      	bne.n	8006ea4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	8b1a      	ldrh	r2, [r3, #24]
 8006e62:	4b3b      	ldr	r3, [pc, #236]	; (8006f50 <tcp_input+0x49c>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	881b      	ldrh	r3, [r3, #0]
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d11b      	bne.n	8006ea6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8006e6e:	69fb      	ldr	r3, [r7, #28]
 8006e70:	8ada      	ldrh	r2, [r3, #22]
 8006e72:	4b37      	ldr	r3, [pc, #220]	; (8006f50 <tcp_input+0x49c>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	885b      	ldrh	r3, [r3, #2]
 8006e78:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d113      	bne.n	8006ea6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	685a      	ldr	r2, [r3, #4]
 8006e82:	4b34      	ldr	r3, [pc, #208]	; (8006f54 <tcp_input+0x4a0>)
 8006e84:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d10d      	bne.n	8006ea6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	4b31      	ldr	r3, [pc, #196]	; (8006f54 <tcp_input+0x4a0>)
 8006e90:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d107      	bne.n	8006ea6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8006e96:	69f8      	ldr	r0, [r7, #28]
 8006e98:	f000 fb56 	bl	8007548 <tcp_timewait_input>
        }
        pbuf_free(p);
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f7fd ffe1 	bl	8004e64 <pbuf_free>
        return;
 8006ea2:	e1fd      	b.n	80072a0 <tcp_input+0x7ec>
        continue;
 8006ea4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	61fb      	str	r3, [r7, #28]
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d1bc      	bne.n	8006e2c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006eb6:	4b2f      	ldr	r3, [pc, #188]	; (8006f74 <tcp_input+0x4c0>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	617b      	str	r3, [r7, #20]
 8006ebc:	e02a      	b.n	8006f14 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	7a1b      	ldrb	r3, [r3, #8]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d00c      	beq.n	8006ee0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	7a1a      	ldrb	r2, [r3, #8]
 8006eca:	4b22      	ldr	r3, [pc, #136]	; (8006f54 <tcp_input+0x4a0>)
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d002      	beq.n	8006ee0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	61bb      	str	r3, [r7, #24]
        continue;
 8006ede:	e016      	b.n	8006f0e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	8ada      	ldrh	r2, [r3, #22]
 8006ee4:	4b1a      	ldr	r3, [pc, #104]	; (8006f50 <tcp_input+0x49c>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	885b      	ldrh	r3, [r3, #2]
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d10c      	bne.n	8006f0a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	4b17      	ldr	r3, [pc, #92]	; (8006f54 <tcp_input+0x4a0>)
 8006ef6:	695b      	ldr	r3, [r3, #20]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d00f      	beq.n	8006f1c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d00d      	beq.n	8006f1e <tcp_input+0x46a>
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d009      	beq.n	8006f1e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	617b      	str	r3, [r7, #20]
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d1d1      	bne.n	8006ebe <tcp_input+0x40a>
 8006f1a:	e000      	b.n	8006f1e <tcp_input+0x46a>
            break;
 8006f1c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d029      	beq.n	8006f78 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00a      	beq.n	8006f40 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	68da      	ldr	r2, [r3, #12]
 8006f2e:	69bb      	ldr	r3, [r7, #24]
 8006f30:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8006f32:	4b10      	ldr	r3, [pc, #64]	; (8006f74 <tcp_input+0x4c0>)
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8006f3a:	4a0e      	ldr	r2, [pc, #56]	; (8006f74 <tcp_input+0x4c0>)
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8006f40:	6978      	ldr	r0, [r7, #20]
 8006f42:	f000 fa03 	bl	800734c <tcp_listen_input>
      }
      pbuf_free(p);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f7fd ff8c 	bl	8004e64 <pbuf_free>
      return;
 8006f4c:	e1a8      	b.n	80072a0 <tcp_input+0x7ec>
 8006f4e:	bf00      	nop
 8006f50:	20008270 	.word	0x20008270
 8006f54:	20004cd8 	.word	0x20004cd8
 8006f58:	0800f54c 	.word	0x0800f54c
 8006f5c:	0800f678 	.word	0x0800f678
 8006f60:	0800f598 	.word	0x0800f598
 8006f64:	20008254 	.word	0x20008254
 8006f68:	0800f6a4 	.word	0x0800f6a4
 8006f6c:	20008258 	.word	0x20008258
 8006f70:	0800f6d0 	.word	0x0800f6d0
 8006f74:	20008250 	.word	0x20008250
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	f000 8158 	beq.w	8007230 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8006f80:	4b95      	ldr	r3, [pc, #596]	; (80071d8 <tcp_input+0x724>)
 8006f82:	2200      	movs	r2, #0
 8006f84:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	891a      	ldrh	r2, [r3, #8]
 8006f8a:	4b93      	ldr	r3, [pc, #588]	; (80071d8 <tcp_input+0x724>)
 8006f8c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8006f8e:	4a92      	ldr	r2, [pc, #584]	; (80071d8 <tcp_input+0x724>)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8006f94:	4b91      	ldr	r3, [pc, #580]	; (80071dc <tcp_input+0x728>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a8f      	ldr	r2, [pc, #572]	; (80071d8 <tcp_input+0x724>)
 8006f9a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8006f9c:	4b90      	ldr	r3, [pc, #576]	; (80071e0 <tcp_input+0x72c>)
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8006fa2:	4b90      	ldr	r3, [pc, #576]	; (80071e4 <tcp_input+0x730>)
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8006fa8:	4b8f      	ldr	r3, [pc, #572]	; (80071e8 <tcp_input+0x734>)
 8006faa:	2200      	movs	r2, #0
 8006fac:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8006fae:	4b8f      	ldr	r3, [pc, #572]	; (80071ec <tcp_input+0x738>)
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	f003 0308 	and.w	r3, r3, #8
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d006      	beq.n	8006fc8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	7b5b      	ldrb	r3, [r3, #13]
 8006fbe:	f043 0301 	orr.w	r3, r3, #1
 8006fc2:	b2da      	uxtb	r2, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d017      	beq.n	8007000 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8006fd0:	69f8      	ldr	r0, [r7, #28]
 8006fd2:	f7ff f929 	bl	8006228 <tcp_process_refused_data>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	f113 0f0d 	cmn.w	r3, #13
 8006fdc:	d007      	beq.n	8006fee <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00c      	beq.n	8007000 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8006fe6:	4b82      	ldr	r3, [pc, #520]	; (80071f0 <tcp_input+0x73c>)
 8006fe8:	881b      	ldrh	r3, [r3, #0]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d008      	beq.n	8007000 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8006fee:	69fb      	ldr	r3, [r7, #28]
 8006ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	f040 80e3 	bne.w	80071be <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8006ff8:	69f8      	ldr	r0, [r7, #28]
 8006ffa:	f003 f9ad 	bl	800a358 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8006ffe:	e0de      	b.n	80071be <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8007000:	4a7c      	ldr	r2, [pc, #496]	; (80071f4 <tcp_input+0x740>)
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8007006:	69f8      	ldr	r0, [r7, #28]
 8007008:	f000 fb18 	bl	800763c <tcp_process>
 800700c:	4603      	mov	r3, r0
 800700e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8007010:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007014:	f113 0f0d 	cmn.w	r3, #13
 8007018:	f000 80d3 	beq.w	80071c2 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800701c:	4b71      	ldr	r3, [pc, #452]	; (80071e4 <tcp_input+0x730>)
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	f003 0308 	and.w	r3, r3, #8
 8007024:	2b00      	cmp	r3, #0
 8007026:	d015      	beq.n	8007054 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800702e:	2b00      	cmp	r3, #0
 8007030:	d008      	beq.n	8007044 <tcp_input+0x590>
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007038:	69fa      	ldr	r2, [r7, #28]
 800703a:	6912      	ldr	r2, [r2, #16]
 800703c:	f06f 010d 	mvn.w	r1, #13
 8007040:	4610      	mov	r0, r2
 8007042:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007044:	69f9      	ldr	r1, [r7, #28]
 8007046:	486c      	ldr	r0, [pc, #432]	; (80071f8 <tcp_input+0x744>)
 8007048:	f7ff fbbc 	bl	80067c4 <tcp_pcb_remove>
        tcp_free(pcb);
 800704c:	69f8      	ldr	r0, [r7, #28]
 800704e:	f7fe f9a9 	bl	80053a4 <tcp_free>
 8007052:	e0da      	b.n	800720a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8007054:	2300      	movs	r3, #0
 8007056:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8007058:	4b63      	ldr	r3, [pc, #396]	; (80071e8 <tcp_input+0x734>)
 800705a:	881b      	ldrh	r3, [r3, #0]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d01d      	beq.n	800709c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8007060:	4b61      	ldr	r3, [pc, #388]	; (80071e8 <tcp_input+0x734>)
 8007062:	881b      	ldrh	r3, [r3, #0]
 8007064:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800706c:	2b00      	cmp	r3, #0
 800706e:	d00a      	beq.n	8007086 <tcp_input+0x5d2>
 8007070:	69fb      	ldr	r3, [r7, #28]
 8007072:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007076:	69fa      	ldr	r2, [r7, #28]
 8007078:	6910      	ldr	r0, [r2, #16]
 800707a:	89fa      	ldrh	r2, [r7, #14]
 800707c:	69f9      	ldr	r1, [r7, #28]
 800707e:	4798      	blx	r3
 8007080:	4603      	mov	r3, r0
 8007082:	74fb      	strb	r3, [r7, #19]
 8007084:	e001      	b.n	800708a <tcp_input+0x5d6>
 8007086:	2300      	movs	r3, #0
 8007088:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800708a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800708e:	f113 0f0d 	cmn.w	r3, #13
 8007092:	f000 8098 	beq.w	80071c6 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8007096:	4b54      	ldr	r3, [pc, #336]	; (80071e8 <tcp_input+0x734>)
 8007098:	2200      	movs	r2, #0
 800709a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800709c:	69f8      	ldr	r0, [r7, #28]
 800709e:	f000 f915 	bl	80072cc <tcp_input_delayed_close>
 80070a2:	4603      	mov	r3, r0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	f040 8090 	bne.w	80071ca <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80070aa:	4b4d      	ldr	r3, [pc, #308]	; (80071e0 <tcp_input+0x72c>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d041      	beq.n	8007136 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d006      	beq.n	80070c8 <tcp_input+0x614>
 80070ba:	4b50      	ldr	r3, [pc, #320]	; (80071fc <tcp_input+0x748>)
 80070bc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80070c0:	494f      	ldr	r1, [pc, #316]	; (8007200 <tcp_input+0x74c>)
 80070c2:	4850      	ldr	r0, [pc, #320]	; (8007204 <tcp_input+0x750>)
 80070c4:	f006 f8cc 	bl	800d260 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	8b5b      	ldrh	r3, [r3, #26]
 80070cc:	f003 0310 	and.w	r3, r3, #16
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d008      	beq.n	80070e6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80070d4:	4b42      	ldr	r3, [pc, #264]	; (80071e0 <tcp_input+0x72c>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4618      	mov	r0, r3
 80070da:	f7fd fec3 	bl	8004e64 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80070de:	69f8      	ldr	r0, [r7, #28]
 80070e0:	f7fe fc48 	bl	8005974 <tcp_abort>
            goto aborted;
 80070e4:	e091      	b.n	800720a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d00c      	beq.n	800710a <tcp_input+0x656>
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	6918      	ldr	r0, [r3, #16]
 80070fa:	4b39      	ldr	r3, [pc, #228]	; (80071e0 <tcp_input+0x72c>)
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	2300      	movs	r3, #0
 8007100:	69f9      	ldr	r1, [r7, #28]
 8007102:	47a0      	blx	r4
 8007104:	4603      	mov	r3, r0
 8007106:	74fb      	strb	r3, [r7, #19]
 8007108:	e008      	b.n	800711c <tcp_input+0x668>
 800710a:	4b35      	ldr	r3, [pc, #212]	; (80071e0 <tcp_input+0x72c>)
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	2300      	movs	r3, #0
 8007110:	69f9      	ldr	r1, [r7, #28]
 8007112:	2000      	movs	r0, #0
 8007114:	f7ff f95e 	bl	80063d4 <tcp_recv_null>
 8007118:	4603      	mov	r3, r0
 800711a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800711c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007120:	f113 0f0d 	cmn.w	r3, #13
 8007124:	d053      	beq.n	80071ce <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8007126:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d003      	beq.n	8007136 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800712e:	4b2c      	ldr	r3, [pc, #176]	; (80071e0 <tcp_input+0x72c>)
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	69fb      	ldr	r3, [r7, #28]
 8007134:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8007136:	4b2b      	ldr	r3, [pc, #172]	; (80071e4 <tcp_input+0x730>)
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	f003 0320 	and.w	r3, r3, #32
 800713e:	2b00      	cmp	r3, #0
 8007140:	d030      	beq.n	80071a4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007146:	2b00      	cmp	r3, #0
 8007148:	d009      	beq.n	800715e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800714e:	7b5a      	ldrb	r2, [r3, #13]
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007154:	f042 0220 	orr.w	r2, r2, #32
 8007158:	b2d2      	uxtb	r2, r2
 800715a:	735a      	strb	r2, [r3, #13]
 800715c:	e022      	b.n	80071a4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007162:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007166:	d005      	beq.n	8007174 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800716c:	3301      	adds	r3, #1
 800716e:	b29a      	uxth	r2, r3
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00b      	beq.n	8007196 <tcp_input+0x6e2>
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	6918      	ldr	r0, [r3, #16]
 8007188:	2300      	movs	r3, #0
 800718a:	2200      	movs	r2, #0
 800718c:	69f9      	ldr	r1, [r7, #28]
 800718e:	47a0      	blx	r4
 8007190:	4603      	mov	r3, r0
 8007192:	74fb      	strb	r3, [r7, #19]
 8007194:	e001      	b.n	800719a <tcp_input+0x6e6>
 8007196:	2300      	movs	r3, #0
 8007198:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800719a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800719e:	f113 0f0d 	cmn.w	r3, #13
 80071a2:	d016      	beq.n	80071d2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80071a4:	4b13      	ldr	r3, [pc, #76]	; (80071f4 <tcp_input+0x740>)
 80071a6:	2200      	movs	r2, #0
 80071a8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80071aa:	69f8      	ldr	r0, [r7, #28]
 80071ac:	f000 f88e 	bl	80072cc <tcp_input_delayed_close>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d128      	bne.n	8007208 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80071b6:	69f8      	ldr	r0, [r7, #28]
 80071b8:	f002 fac8 	bl	800974c <tcp_output>
 80071bc:	e025      	b.n	800720a <tcp_input+0x756>
        goto aborted;
 80071be:	bf00      	nop
 80071c0:	e023      	b.n	800720a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80071c2:	bf00      	nop
 80071c4:	e021      	b.n	800720a <tcp_input+0x756>
              goto aborted;
 80071c6:	bf00      	nop
 80071c8:	e01f      	b.n	800720a <tcp_input+0x756>
          goto aborted;
 80071ca:	bf00      	nop
 80071cc:	e01d      	b.n	800720a <tcp_input+0x756>
            goto aborted;
 80071ce:	bf00      	nop
 80071d0:	e01b      	b.n	800720a <tcp_input+0x756>
              goto aborted;
 80071d2:	bf00      	nop
 80071d4:	e019      	b.n	800720a <tcp_input+0x756>
 80071d6:	bf00      	nop
 80071d8:	20008260 	.word	0x20008260
 80071dc:	20008270 	.word	0x20008270
 80071e0:	20008290 	.word	0x20008290
 80071e4:	2000828d 	.word	0x2000828d
 80071e8:	20008288 	.word	0x20008288
 80071ec:	2000828c 	.word	0x2000828c
 80071f0:	2000828a 	.word	0x2000828a
 80071f4:	20008294 	.word	0x20008294
 80071f8:	20008254 	.word	0x20008254
 80071fc:	0800f54c 	.word	0x0800f54c
 8007200:	0800f700 	.word	0x0800f700
 8007204:	0800f598 	.word	0x0800f598
          goto aborted;
 8007208:	bf00      	nop
    tcp_input_pcb = NULL;
 800720a:	4b27      	ldr	r3, [pc, #156]	; (80072a8 <tcp_input+0x7f4>)
 800720c:	2200      	movs	r2, #0
 800720e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8007210:	4b26      	ldr	r3, [pc, #152]	; (80072ac <tcp_input+0x7f8>)
 8007212:	2200      	movs	r2, #0
 8007214:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8007216:	4b26      	ldr	r3, [pc, #152]	; (80072b0 <tcp_input+0x7fc>)
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d03f      	beq.n	800729e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800721e:	4b24      	ldr	r3, [pc, #144]	; (80072b0 <tcp_input+0x7fc>)
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	4618      	mov	r0, r3
 8007224:	f7fd fe1e 	bl	8004e64 <pbuf_free>
      inseg.p = NULL;
 8007228:	4b21      	ldr	r3, [pc, #132]	; (80072b0 <tcp_input+0x7fc>)
 800722a:	2200      	movs	r2, #0
 800722c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800722e:	e036      	b.n	800729e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8007230:	4b20      	ldr	r3, [pc, #128]	; (80072b4 <tcp_input+0x800>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	899b      	ldrh	r3, [r3, #12]
 8007236:	b29b      	uxth	r3, r3
 8007238:	4618      	mov	r0, r3
 800723a:	f7fc fab5 	bl	80037a8 <lwip_htons>
 800723e:	4603      	mov	r3, r0
 8007240:	b2db      	uxtb	r3, r3
 8007242:	f003 0304 	and.w	r3, r3, #4
 8007246:	2b00      	cmp	r3, #0
 8007248:	d118      	bne.n	800727c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800724a:	4b1b      	ldr	r3, [pc, #108]	; (80072b8 <tcp_input+0x804>)
 800724c:	6819      	ldr	r1, [r3, #0]
 800724e:	4b1b      	ldr	r3, [pc, #108]	; (80072bc <tcp_input+0x808>)
 8007250:	881b      	ldrh	r3, [r3, #0]
 8007252:	461a      	mov	r2, r3
 8007254:	4b1a      	ldr	r3, [pc, #104]	; (80072c0 <tcp_input+0x80c>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800725a:	4b16      	ldr	r3, [pc, #88]	; (80072b4 <tcp_input+0x800>)
 800725c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800725e:	885b      	ldrh	r3, [r3, #2]
 8007260:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007262:	4a14      	ldr	r2, [pc, #80]	; (80072b4 <tcp_input+0x800>)
 8007264:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007266:	8812      	ldrh	r2, [r2, #0]
 8007268:	b292      	uxth	r2, r2
 800726a:	9202      	str	r2, [sp, #8]
 800726c:	9301      	str	r3, [sp, #4]
 800726e:	4b15      	ldr	r3, [pc, #84]	; (80072c4 <tcp_input+0x810>)
 8007270:	9300      	str	r3, [sp, #0]
 8007272:	4b15      	ldr	r3, [pc, #84]	; (80072c8 <tcp_input+0x814>)
 8007274:	4602      	mov	r2, r0
 8007276:	2000      	movs	r0, #0
 8007278:	f003 f81c 	bl	800a2b4 <tcp_rst>
    pbuf_free(p);
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f7fd fdf1 	bl	8004e64 <pbuf_free>
  return;
 8007282:	e00c      	b.n	800729e <tcp_input+0x7ea>
    goto dropped;
 8007284:	bf00      	nop
 8007286:	e006      	b.n	8007296 <tcp_input+0x7e2>
    goto dropped;
 8007288:	bf00      	nop
 800728a:	e004      	b.n	8007296 <tcp_input+0x7e2>
    goto dropped;
 800728c:	bf00      	nop
 800728e:	e002      	b.n	8007296 <tcp_input+0x7e2>
      goto dropped;
 8007290:	bf00      	nop
 8007292:	e000      	b.n	8007296 <tcp_input+0x7e2>
      goto dropped;
 8007294:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f7fd fde4 	bl	8004e64 <pbuf_free>
 800729c:	e000      	b.n	80072a0 <tcp_input+0x7ec>
  return;
 800729e:	bf00      	nop
}
 80072a0:	3724      	adds	r7, #36	; 0x24
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd90      	pop	{r4, r7, pc}
 80072a6:	bf00      	nop
 80072a8:	20008294 	.word	0x20008294
 80072ac:	20008290 	.word	0x20008290
 80072b0:	20008260 	.word	0x20008260
 80072b4:	20008270 	.word	0x20008270
 80072b8:	20008284 	.word	0x20008284
 80072bc:	2000828a 	.word	0x2000828a
 80072c0:	20008280 	.word	0x20008280
 80072c4:	20004ce8 	.word	0x20004ce8
 80072c8:	20004cec 	.word	0x20004cec

080072cc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d106      	bne.n	80072e8 <tcp_input_delayed_close+0x1c>
 80072da:	4b17      	ldr	r3, [pc, #92]	; (8007338 <tcp_input_delayed_close+0x6c>)
 80072dc:	f240 225a 	movw	r2, #602	; 0x25a
 80072e0:	4916      	ldr	r1, [pc, #88]	; (800733c <tcp_input_delayed_close+0x70>)
 80072e2:	4817      	ldr	r0, [pc, #92]	; (8007340 <tcp_input_delayed_close+0x74>)
 80072e4:	f005 ffbc 	bl	800d260 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80072e8:	4b16      	ldr	r3, [pc, #88]	; (8007344 <tcp_input_delayed_close+0x78>)
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	f003 0310 	and.w	r3, r3, #16
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d01c      	beq.n	800732e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	8b5b      	ldrh	r3, [r3, #26]
 80072f8:	f003 0310 	and.w	r3, r3, #16
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d10d      	bne.n	800731c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007306:	2b00      	cmp	r3, #0
 8007308:	d008      	beq.n	800731c <tcp_input_delayed_close+0x50>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	6912      	ldr	r2, [r2, #16]
 8007314:	f06f 010e 	mvn.w	r1, #14
 8007318:	4610      	mov	r0, r2
 800731a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800731c:	6879      	ldr	r1, [r7, #4]
 800731e:	480a      	ldr	r0, [pc, #40]	; (8007348 <tcp_input_delayed_close+0x7c>)
 8007320:	f7ff fa50 	bl	80067c4 <tcp_pcb_remove>
    tcp_free(pcb);
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f7fe f83d 	bl	80053a4 <tcp_free>
    return 1;
 800732a:	2301      	movs	r3, #1
 800732c:	e000      	b.n	8007330 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800732e:	2300      	movs	r3, #0
}
 8007330:	4618      	mov	r0, r3
 8007332:	3708      	adds	r7, #8
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}
 8007338:	0800f54c 	.word	0x0800f54c
 800733c:	0800f71c 	.word	0x0800f71c
 8007340:	0800f598 	.word	0x0800f598
 8007344:	2000828d 	.word	0x2000828d
 8007348:	20008254 	.word	0x20008254

0800734c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800734c:	b590      	push	{r4, r7, lr}
 800734e:	b08b      	sub	sp, #44	; 0x2c
 8007350:	af04      	add	r7, sp, #16
 8007352:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8007354:	4b6f      	ldr	r3, [pc, #444]	; (8007514 <tcp_listen_input+0x1c8>)
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	f003 0304 	and.w	r3, r3, #4
 800735c:	2b00      	cmp	r3, #0
 800735e:	f040 80d2 	bne.w	8007506 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d106      	bne.n	8007376 <tcp_listen_input+0x2a>
 8007368:	4b6b      	ldr	r3, [pc, #428]	; (8007518 <tcp_listen_input+0x1cc>)
 800736a:	f240 2281 	movw	r2, #641	; 0x281
 800736e:	496b      	ldr	r1, [pc, #428]	; (800751c <tcp_listen_input+0x1d0>)
 8007370:	486b      	ldr	r0, [pc, #428]	; (8007520 <tcp_listen_input+0x1d4>)
 8007372:	f005 ff75 	bl	800d260 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8007376:	4b67      	ldr	r3, [pc, #412]	; (8007514 <tcp_listen_input+0x1c8>)
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	f003 0310 	and.w	r3, r3, #16
 800737e:	2b00      	cmp	r3, #0
 8007380:	d019      	beq.n	80073b6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007382:	4b68      	ldr	r3, [pc, #416]	; (8007524 <tcp_listen_input+0x1d8>)
 8007384:	6819      	ldr	r1, [r3, #0]
 8007386:	4b68      	ldr	r3, [pc, #416]	; (8007528 <tcp_listen_input+0x1dc>)
 8007388:	881b      	ldrh	r3, [r3, #0]
 800738a:	461a      	mov	r2, r3
 800738c:	4b67      	ldr	r3, [pc, #412]	; (800752c <tcp_listen_input+0x1e0>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007392:	4b67      	ldr	r3, [pc, #412]	; (8007530 <tcp_listen_input+0x1e4>)
 8007394:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007396:	885b      	ldrh	r3, [r3, #2]
 8007398:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800739a:	4a65      	ldr	r2, [pc, #404]	; (8007530 <tcp_listen_input+0x1e4>)
 800739c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800739e:	8812      	ldrh	r2, [r2, #0]
 80073a0:	b292      	uxth	r2, r2
 80073a2:	9202      	str	r2, [sp, #8]
 80073a4:	9301      	str	r3, [sp, #4]
 80073a6:	4b63      	ldr	r3, [pc, #396]	; (8007534 <tcp_listen_input+0x1e8>)
 80073a8:	9300      	str	r3, [sp, #0]
 80073aa:	4b63      	ldr	r3, [pc, #396]	; (8007538 <tcp_listen_input+0x1ec>)
 80073ac:	4602      	mov	r2, r0
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f002 ff80 	bl	800a2b4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80073b4:	e0a9      	b.n	800750a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80073b6:	4b57      	ldr	r3, [pc, #348]	; (8007514 <tcp_listen_input+0x1c8>)
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	f003 0302 	and.w	r3, r3, #2
 80073be:	2b00      	cmp	r3, #0
 80073c0:	f000 80a3 	beq.w	800750a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	7d5b      	ldrb	r3, [r3, #21]
 80073c8:	4618      	mov	r0, r3
 80073ca:	f7ff f927 	bl	800661c <tcp_alloc>
 80073ce:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d111      	bne.n	80073fa <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	699b      	ldr	r3, [r3, #24]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00a      	beq.n	80073f4 <tcp_listen_input+0xa8>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	699b      	ldr	r3, [r3, #24]
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	6910      	ldr	r0, [r2, #16]
 80073e6:	f04f 32ff 	mov.w	r2, #4294967295
 80073ea:	2100      	movs	r1, #0
 80073ec:	4798      	blx	r3
 80073ee:	4603      	mov	r3, r0
 80073f0:	73bb      	strb	r3, [r7, #14]
      return;
 80073f2:	e08b      	b.n	800750c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80073f4:	23f0      	movs	r3, #240	; 0xf0
 80073f6:	73bb      	strb	r3, [r7, #14]
      return;
 80073f8:	e088      	b.n	800750c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80073fa:	4b50      	ldr	r3, [pc, #320]	; (800753c <tcp_listen_input+0x1f0>)
 80073fc:	695a      	ldr	r2, [r3, #20]
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8007402:	4b4e      	ldr	r3, [pc, #312]	; (800753c <tcp_listen_input+0x1f0>)
 8007404:	691a      	ldr	r2, [r3, #16]
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	8ada      	ldrh	r2, [r3, #22]
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8007412:	4b47      	ldr	r3, [pc, #284]	; (8007530 <tcp_listen_input+0x1e4>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	881b      	ldrh	r3, [r3, #0]
 8007418:	b29a      	uxth	r2, r3
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	2203      	movs	r2, #3
 8007422:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8007424:	4b41      	ldr	r3, [pc, #260]	; (800752c <tcp_listen_input+0x1e0>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	1c5a      	adds	r2, r3, #1
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8007436:	6978      	ldr	r0, [r7, #20]
 8007438:	f7ff fa58 	bl	80068ec <tcp_next_iss>
 800743c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	693a      	ldr	r2, [r7, #16]
 8007442:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	693a      	ldr	r2, [r7, #16]
 8007448:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	693a      	ldr	r2, [r7, #16]
 800744e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	693a      	ldr	r2, [r7, #16]
 8007454:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8007456:	4b35      	ldr	r3, [pc, #212]	; (800752c <tcp_listen_input+0x1e0>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	1e5a      	subs	r2, r3, #1
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	691a      	ldr	r2, [r3, #16]
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	7a5b      	ldrb	r3, [r3, #9]
 8007472:	f003 030c 	and.w	r3, r3, #12
 8007476:	b2da      	uxtb	r2, r3
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	7a1a      	ldrb	r2, [r3, #8]
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8007484:	4b2e      	ldr	r3, [pc, #184]	; (8007540 <tcp_listen_input+0x1f4>)
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	60da      	str	r2, [r3, #12]
 800748c:	4a2c      	ldr	r2, [pc, #176]	; (8007540 <tcp_listen_input+0x1f4>)
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	6013      	str	r3, [r2, #0]
 8007492:	f003 f8d1 	bl	800a638 <tcp_timer_needed>
 8007496:	4b2b      	ldr	r3, [pc, #172]	; (8007544 <tcp_listen_input+0x1f8>)
 8007498:	2201      	movs	r2, #1
 800749a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800749c:	6978      	ldr	r0, [r7, #20]
 800749e:	f001 fd8f 	bl	8008fc0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80074a2:	4b23      	ldr	r3, [pc, #140]	; (8007530 <tcp_listen_input+0x1e4>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	89db      	ldrh	r3, [r3, #14]
 80074a8:	b29a      	uxth	r2, r3
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	3304      	adds	r3, #4
 80074c4:	4618      	mov	r0, r3
 80074c6:	f004 fc95 	bl	800bdf4 <ip4_route>
 80074ca:	4601      	mov	r1, r0
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	3304      	adds	r3, #4
 80074d0:	461a      	mov	r2, r3
 80074d2:	4620      	mov	r0, r4
 80074d4:	f7ff fa30 	bl	8006938 <tcp_eff_send_mss_netif>
 80074d8:	4603      	mov	r3, r0
 80074da:	461a      	mov	r2, r3
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80074e0:	2112      	movs	r1, #18
 80074e2:	6978      	ldr	r0, [r7, #20]
 80074e4:	f002 f844 	bl	8009570 <tcp_enqueue_flags>
 80074e8:	4603      	mov	r3, r0
 80074ea:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80074ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d004      	beq.n	80074fe <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80074f4:	2100      	movs	r1, #0
 80074f6:	6978      	ldr	r0, [r7, #20]
 80074f8:	f7fe f97e 	bl	80057f8 <tcp_abandon>
      return;
 80074fc:	e006      	b.n	800750c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80074fe:	6978      	ldr	r0, [r7, #20]
 8007500:	f002 f924 	bl	800974c <tcp_output>
  return;
 8007504:	e001      	b.n	800750a <tcp_listen_input+0x1be>
    return;
 8007506:	bf00      	nop
 8007508:	e000      	b.n	800750c <tcp_listen_input+0x1c0>
  return;
 800750a:	bf00      	nop
}
 800750c:	371c      	adds	r7, #28
 800750e:	46bd      	mov	sp, r7
 8007510:	bd90      	pop	{r4, r7, pc}
 8007512:	bf00      	nop
 8007514:	2000828c 	.word	0x2000828c
 8007518:	0800f54c 	.word	0x0800f54c
 800751c:	0800f744 	.word	0x0800f744
 8007520:	0800f598 	.word	0x0800f598
 8007524:	20008284 	.word	0x20008284
 8007528:	2000828a 	.word	0x2000828a
 800752c:	20008280 	.word	0x20008280
 8007530:	20008270 	.word	0x20008270
 8007534:	20004ce8 	.word	0x20004ce8
 8007538:	20004cec 	.word	0x20004cec
 800753c:	20004cd8 	.word	0x20004cd8
 8007540:	20008254 	.word	0x20008254
 8007544:	2000825c 	.word	0x2000825c

08007548 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b086      	sub	sp, #24
 800754c:	af04      	add	r7, sp, #16
 800754e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8007550:	4b2f      	ldr	r3, [pc, #188]	; (8007610 <tcp_timewait_input+0xc8>)
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	f003 0304 	and.w	r3, r3, #4
 8007558:	2b00      	cmp	r3, #0
 800755a:	d153      	bne.n	8007604 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d106      	bne.n	8007570 <tcp_timewait_input+0x28>
 8007562:	4b2c      	ldr	r3, [pc, #176]	; (8007614 <tcp_timewait_input+0xcc>)
 8007564:	f240 22ee 	movw	r2, #750	; 0x2ee
 8007568:	492b      	ldr	r1, [pc, #172]	; (8007618 <tcp_timewait_input+0xd0>)
 800756a:	482c      	ldr	r0, [pc, #176]	; (800761c <tcp_timewait_input+0xd4>)
 800756c:	f005 fe78 	bl	800d260 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8007570:	4b27      	ldr	r3, [pc, #156]	; (8007610 <tcp_timewait_input+0xc8>)
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	f003 0302 	and.w	r3, r3, #2
 8007578:	2b00      	cmp	r3, #0
 800757a:	d02a      	beq.n	80075d2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800757c:	4b28      	ldr	r3, [pc, #160]	; (8007620 <tcp_timewait_input+0xd8>)
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007584:	1ad3      	subs	r3, r2, r3
 8007586:	2b00      	cmp	r3, #0
 8007588:	db2d      	blt.n	80075e6 <tcp_timewait_input+0x9e>
 800758a:	4b25      	ldr	r3, [pc, #148]	; (8007620 <tcp_timewait_input+0xd8>)
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007592:	6879      	ldr	r1, [r7, #4]
 8007594:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007596:	440b      	add	r3, r1
 8007598:	1ad3      	subs	r3, r2, r3
 800759a:	2b00      	cmp	r3, #0
 800759c:	dc23      	bgt.n	80075e6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800759e:	4b21      	ldr	r3, [pc, #132]	; (8007624 <tcp_timewait_input+0xdc>)
 80075a0:	6819      	ldr	r1, [r3, #0]
 80075a2:	4b21      	ldr	r3, [pc, #132]	; (8007628 <tcp_timewait_input+0xe0>)
 80075a4:	881b      	ldrh	r3, [r3, #0]
 80075a6:	461a      	mov	r2, r3
 80075a8:	4b1d      	ldr	r3, [pc, #116]	; (8007620 <tcp_timewait_input+0xd8>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80075ae:	4b1f      	ldr	r3, [pc, #124]	; (800762c <tcp_timewait_input+0xe4>)
 80075b0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80075b2:	885b      	ldrh	r3, [r3, #2]
 80075b4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80075b6:	4a1d      	ldr	r2, [pc, #116]	; (800762c <tcp_timewait_input+0xe4>)
 80075b8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80075ba:	8812      	ldrh	r2, [r2, #0]
 80075bc:	b292      	uxth	r2, r2
 80075be:	9202      	str	r2, [sp, #8]
 80075c0:	9301      	str	r3, [sp, #4]
 80075c2:	4b1b      	ldr	r3, [pc, #108]	; (8007630 <tcp_timewait_input+0xe8>)
 80075c4:	9300      	str	r3, [sp, #0]
 80075c6:	4b1b      	ldr	r3, [pc, #108]	; (8007634 <tcp_timewait_input+0xec>)
 80075c8:	4602      	mov	r2, r0
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f002 fe72 	bl	800a2b4 <tcp_rst>
      return;
 80075d0:	e01b      	b.n	800760a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80075d2:	4b0f      	ldr	r3, [pc, #60]	; (8007610 <tcp_timewait_input+0xc8>)
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	f003 0301 	and.w	r3, r3, #1
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d003      	beq.n	80075e6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80075de:	4b16      	ldr	r3, [pc, #88]	; (8007638 <tcp_timewait_input+0xf0>)
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80075e6:	4b10      	ldr	r3, [pc, #64]	; (8007628 <tcp_timewait_input+0xe0>)
 80075e8:	881b      	ldrh	r3, [r3, #0]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00c      	beq.n	8007608 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	8b5b      	ldrh	r3, [r3, #26]
 80075f2:	f043 0302 	orr.w	r3, r3, #2
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f002 f8a5 	bl	800974c <tcp_output>
  }
  return;
 8007602:	e001      	b.n	8007608 <tcp_timewait_input+0xc0>
    return;
 8007604:	bf00      	nop
 8007606:	e000      	b.n	800760a <tcp_timewait_input+0xc2>
  return;
 8007608:	bf00      	nop
}
 800760a:	3708      	adds	r7, #8
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}
 8007610:	2000828c 	.word	0x2000828c
 8007614:	0800f54c 	.word	0x0800f54c
 8007618:	0800f764 	.word	0x0800f764
 800761c:	0800f598 	.word	0x0800f598
 8007620:	20008280 	.word	0x20008280
 8007624:	20008284 	.word	0x20008284
 8007628:	2000828a 	.word	0x2000828a
 800762c:	20008270 	.word	0x20008270
 8007630:	20004ce8 	.word	0x20004ce8
 8007634:	20004cec 	.word	0x20004cec
 8007638:	20008248 	.word	0x20008248

0800763c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800763c:	b590      	push	{r4, r7, lr}
 800763e:	b08d      	sub	sp, #52	; 0x34
 8007640:	af04      	add	r7, sp, #16
 8007642:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8007644:	2300      	movs	r3, #0
 8007646:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8007648:	2300      	movs	r3, #0
 800764a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d106      	bne.n	8007660 <tcp_process+0x24>
 8007652:	4b9d      	ldr	r3, [pc, #628]	; (80078c8 <tcp_process+0x28c>)
 8007654:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8007658:	499c      	ldr	r1, [pc, #624]	; (80078cc <tcp_process+0x290>)
 800765a:	489d      	ldr	r0, [pc, #628]	; (80078d0 <tcp_process+0x294>)
 800765c:	f005 fe00 	bl	800d260 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8007660:	4b9c      	ldr	r3, [pc, #624]	; (80078d4 <tcp_process+0x298>)
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	f003 0304 	and.w	r3, r3, #4
 8007668:	2b00      	cmp	r3, #0
 800766a:	d04e      	beq.n	800770a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	7d1b      	ldrb	r3, [r3, #20]
 8007670:	2b02      	cmp	r3, #2
 8007672:	d108      	bne.n	8007686 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007678:	4b97      	ldr	r3, [pc, #604]	; (80078d8 <tcp_process+0x29c>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	429a      	cmp	r2, r3
 800767e:	d123      	bne.n	80076c8 <tcp_process+0x8c>
        acceptable = 1;
 8007680:	2301      	movs	r3, #1
 8007682:	76fb      	strb	r3, [r7, #27]
 8007684:	e020      	b.n	80076c8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800768a:	4b94      	ldr	r3, [pc, #592]	; (80078dc <tcp_process+0x2a0>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	429a      	cmp	r2, r3
 8007690:	d102      	bne.n	8007698 <tcp_process+0x5c>
        acceptable = 1;
 8007692:	2301      	movs	r3, #1
 8007694:	76fb      	strb	r3, [r7, #27]
 8007696:	e017      	b.n	80076c8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007698:	4b90      	ldr	r3, [pc, #576]	; (80078dc <tcp_process+0x2a0>)
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	db10      	blt.n	80076c8 <tcp_process+0x8c>
 80076a6:	4b8d      	ldr	r3, [pc, #564]	; (80078dc <tcp_process+0x2a0>)
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ae:	6879      	ldr	r1, [r7, #4]
 80076b0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80076b2:	440b      	add	r3, r1
 80076b4:	1ad3      	subs	r3, r2, r3
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	dc06      	bgt.n	80076c8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	8b5b      	ldrh	r3, [r3, #26]
 80076be:	f043 0302 	orr.w	r3, r3, #2
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80076c8:	7efb      	ldrb	r3, [r7, #27]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d01b      	beq.n	8007706 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	7d1b      	ldrb	r3, [r3, #20]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d106      	bne.n	80076e4 <tcp_process+0xa8>
 80076d6:	4b7c      	ldr	r3, [pc, #496]	; (80078c8 <tcp_process+0x28c>)
 80076d8:	f44f 724e 	mov.w	r2, #824	; 0x338
 80076dc:	4980      	ldr	r1, [pc, #512]	; (80078e0 <tcp_process+0x2a4>)
 80076de:	487c      	ldr	r0, [pc, #496]	; (80078d0 <tcp_process+0x294>)
 80076e0:	f005 fdbe 	bl	800d260 <iprintf>
      recv_flags |= TF_RESET;
 80076e4:	4b7f      	ldr	r3, [pc, #508]	; (80078e4 <tcp_process+0x2a8>)
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	f043 0308 	orr.w	r3, r3, #8
 80076ec:	b2da      	uxtb	r2, r3
 80076ee:	4b7d      	ldr	r3, [pc, #500]	; (80078e4 <tcp_process+0x2a8>)
 80076f0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	8b5b      	ldrh	r3, [r3, #26]
 80076f6:	f023 0301 	bic.w	r3, r3, #1
 80076fa:	b29a      	uxth	r2, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8007700:	f06f 030d 	mvn.w	r3, #13
 8007704:	e37a      	b.n	8007dfc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8007706:	2300      	movs	r3, #0
 8007708:	e378      	b.n	8007dfc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800770a:	4b72      	ldr	r3, [pc, #456]	; (80078d4 <tcp_process+0x298>)
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	f003 0302 	and.w	r3, r3, #2
 8007712:	2b00      	cmp	r3, #0
 8007714:	d010      	beq.n	8007738 <tcp_process+0xfc>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	7d1b      	ldrb	r3, [r3, #20]
 800771a:	2b02      	cmp	r3, #2
 800771c:	d00c      	beq.n	8007738 <tcp_process+0xfc>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	7d1b      	ldrb	r3, [r3, #20]
 8007722:	2b03      	cmp	r3, #3
 8007724:	d008      	beq.n	8007738 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	8b5b      	ldrh	r3, [r3, #26]
 800772a:	f043 0302 	orr.w	r3, r3, #2
 800772e:	b29a      	uxth	r2, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8007734:	2300      	movs	r3, #0
 8007736:	e361      	b.n	8007dfc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	8b5b      	ldrh	r3, [r3, #26]
 800773c:	f003 0310 	and.w	r3, r3, #16
 8007740:	2b00      	cmp	r3, #0
 8007742:	d103      	bne.n	800774c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8007744:	4b68      	ldr	r3, [pc, #416]	; (80078e8 <tcp_process+0x2ac>)
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f001 fc2f 	bl	8008fc0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	7d1b      	ldrb	r3, [r3, #20]
 8007766:	3b02      	subs	r3, #2
 8007768:	2b07      	cmp	r3, #7
 800776a:	f200 8337 	bhi.w	8007ddc <tcp_process+0x7a0>
 800776e:	a201      	add	r2, pc, #4	; (adr r2, 8007774 <tcp_process+0x138>)
 8007770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007774:	08007795 	.word	0x08007795
 8007778:	080079c5 	.word	0x080079c5
 800777c:	08007b3d 	.word	0x08007b3d
 8007780:	08007b67 	.word	0x08007b67
 8007784:	08007c8b 	.word	0x08007c8b
 8007788:	08007b3d 	.word	0x08007b3d
 800778c:	08007d17 	.word	0x08007d17
 8007790:	08007da7 	.word	0x08007da7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8007794:	4b4f      	ldr	r3, [pc, #316]	; (80078d4 <tcp_process+0x298>)
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	f003 0310 	and.w	r3, r3, #16
 800779c:	2b00      	cmp	r3, #0
 800779e:	f000 80e4 	beq.w	800796a <tcp_process+0x32e>
 80077a2:	4b4c      	ldr	r3, [pc, #304]	; (80078d4 <tcp_process+0x298>)
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	f003 0302 	and.w	r3, r3, #2
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	f000 80dd 	beq.w	800796a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077b4:	1c5a      	adds	r2, r3, #1
 80077b6:	4b48      	ldr	r3, [pc, #288]	; (80078d8 <tcp_process+0x29c>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	f040 80d5 	bne.w	800796a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80077c0:	4b46      	ldr	r3, [pc, #280]	; (80078dc <tcp_process+0x2a0>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	1c5a      	adds	r2, r3, #1
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80077d2:	4b41      	ldr	r3, [pc, #260]	; (80078d8 <tcp_process+0x29c>)
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80077da:	4b44      	ldr	r3, [pc, #272]	; (80078ec <tcp_process+0x2b0>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	89db      	ldrh	r3, [r3, #14]
 80077e0:	b29a      	uxth	r2, r3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80077f4:	4b39      	ldr	r3, [pc, #228]	; (80078dc <tcp_process+0x2a0>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	1e5a      	subs	r2, r3, #1
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2204      	movs	r2, #4
 8007802:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	3304      	adds	r3, #4
 800780c:	4618      	mov	r0, r3
 800780e:	f004 faf1 	bl	800bdf4 <ip4_route>
 8007812:	4601      	mov	r1, r0
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	3304      	adds	r3, #4
 8007818:	461a      	mov	r2, r3
 800781a:	4620      	mov	r0, r4
 800781c:	f7ff f88c 	bl	8006938 <tcp_eff_send_mss_netif>
 8007820:	4603      	mov	r3, r0
 8007822:	461a      	mov	r2, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800782c:	009a      	lsls	r2, r3, #2
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007832:	005b      	lsls	r3, r3, #1
 8007834:	f241 111c 	movw	r1, #4380	; 0x111c
 8007838:	428b      	cmp	r3, r1
 800783a:	bf38      	it	cc
 800783c:	460b      	movcc	r3, r1
 800783e:	429a      	cmp	r2, r3
 8007840:	d204      	bcs.n	800784c <tcp_process+0x210>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	b29b      	uxth	r3, r3
 800784a:	e00d      	b.n	8007868 <tcp_process+0x22c>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007850:	005b      	lsls	r3, r3, #1
 8007852:	f241 121c 	movw	r2, #4380	; 0x111c
 8007856:	4293      	cmp	r3, r2
 8007858:	d904      	bls.n	8007864 <tcp_process+0x228>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800785e:	005b      	lsls	r3, r3, #1
 8007860:	b29b      	uxth	r3, r3
 8007862:	e001      	b.n	8007868 <tcp_process+0x22c>
 8007864:	f241 131c 	movw	r3, #4380	; 0x111c
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007874:	2b00      	cmp	r3, #0
 8007876:	d106      	bne.n	8007886 <tcp_process+0x24a>
 8007878:	4b13      	ldr	r3, [pc, #76]	; (80078c8 <tcp_process+0x28c>)
 800787a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800787e:	491c      	ldr	r1, [pc, #112]	; (80078f0 <tcp_process+0x2b4>)
 8007880:	4813      	ldr	r0, [pc, #76]	; (80078d0 <tcp_process+0x294>)
 8007882:	f005 fced 	bl	800d260 <iprintf>
        --pcb->snd_queuelen;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800788c:	3b01      	subs	r3, #1
 800788e:	b29a      	uxth	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800789a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d12a      	bne.n	80078f8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078a6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d106      	bne.n	80078bc <tcp_process+0x280>
 80078ae:	4b06      	ldr	r3, [pc, #24]	; (80078c8 <tcp_process+0x28c>)
 80078b0:	f44f 725d 	mov.w	r2, #884	; 0x374
 80078b4:	490f      	ldr	r1, [pc, #60]	; (80078f4 <tcp_process+0x2b8>)
 80078b6:	4806      	ldr	r0, [pc, #24]	; (80078d0 <tcp_process+0x294>)
 80078b8:	f005 fcd2 	bl	800d260 <iprintf>
          pcb->unsent = rseg->next;
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	66da      	str	r2, [r3, #108]	; 0x6c
 80078c4:	e01c      	b.n	8007900 <tcp_process+0x2c4>
 80078c6:	bf00      	nop
 80078c8:	0800f54c 	.word	0x0800f54c
 80078cc:	0800f784 	.word	0x0800f784
 80078d0:	0800f598 	.word	0x0800f598
 80078d4:	2000828c 	.word	0x2000828c
 80078d8:	20008284 	.word	0x20008284
 80078dc:	20008280 	.word	0x20008280
 80078e0:	0800f7a0 	.word	0x0800f7a0
 80078e4:	2000828d 	.word	0x2000828d
 80078e8:	20008248 	.word	0x20008248
 80078ec:	20008270 	.word	0x20008270
 80078f0:	0800f7c0 	.word	0x0800f7c0
 80078f4:	0800f7d8 	.word	0x0800f7d8
        } else {
          pcb->unacked = rseg->next;
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8007900:	69f8      	ldr	r0, [r7, #28]
 8007902:	f7fe fd22 	bl	800634a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800790a:	2b00      	cmp	r3, #0
 800790c:	d104      	bne.n	8007918 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007914:	861a      	strh	r2, [r3, #48]	; 0x30
 8007916:	e006      	b.n	8007926 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800792c:	2b00      	cmp	r3, #0
 800792e:	d00a      	beq.n	8007946 <tcp_process+0x30a>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	6910      	ldr	r0, [r2, #16]
 800793a:	2200      	movs	r2, #0
 800793c:	6879      	ldr	r1, [r7, #4]
 800793e:	4798      	blx	r3
 8007940:	4603      	mov	r3, r0
 8007942:	76bb      	strb	r3, [r7, #26]
 8007944:	e001      	b.n	800794a <tcp_process+0x30e>
 8007946:	2300      	movs	r3, #0
 8007948:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800794a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800794e:	f113 0f0d 	cmn.w	r3, #13
 8007952:	d102      	bne.n	800795a <tcp_process+0x31e>
          return ERR_ABRT;
 8007954:	f06f 030c 	mvn.w	r3, #12
 8007958:	e250      	b.n	8007dfc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	8b5b      	ldrh	r3, [r3, #26]
 800795e:	f043 0302 	orr.w	r3, r3, #2
 8007962:	b29a      	uxth	r2, r3
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8007968:	e23a      	b.n	8007de0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800796a:	4b98      	ldr	r3, [pc, #608]	; (8007bcc <tcp_process+0x590>)
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	f003 0310 	and.w	r3, r3, #16
 8007972:	2b00      	cmp	r3, #0
 8007974:	f000 8234 	beq.w	8007de0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007978:	4b95      	ldr	r3, [pc, #596]	; (8007bd0 <tcp_process+0x594>)
 800797a:	6819      	ldr	r1, [r3, #0]
 800797c:	4b95      	ldr	r3, [pc, #596]	; (8007bd4 <tcp_process+0x598>)
 800797e:	881b      	ldrh	r3, [r3, #0]
 8007980:	461a      	mov	r2, r3
 8007982:	4b95      	ldr	r3, [pc, #596]	; (8007bd8 <tcp_process+0x59c>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007988:	4b94      	ldr	r3, [pc, #592]	; (8007bdc <tcp_process+0x5a0>)
 800798a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800798c:	885b      	ldrh	r3, [r3, #2]
 800798e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007990:	4a92      	ldr	r2, [pc, #584]	; (8007bdc <tcp_process+0x5a0>)
 8007992:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007994:	8812      	ldrh	r2, [r2, #0]
 8007996:	b292      	uxth	r2, r2
 8007998:	9202      	str	r2, [sp, #8]
 800799a:	9301      	str	r3, [sp, #4]
 800799c:	4b90      	ldr	r3, [pc, #576]	; (8007be0 <tcp_process+0x5a4>)
 800799e:	9300      	str	r3, [sp, #0]
 80079a0:	4b90      	ldr	r3, [pc, #576]	; (8007be4 <tcp_process+0x5a8>)
 80079a2:	4602      	mov	r2, r0
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f002 fc85 	bl	800a2b4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80079b0:	2b05      	cmp	r3, #5
 80079b2:	f200 8215 	bhi.w	8007de0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f002 fa4f 	bl	8009e60 <tcp_rexmit_rto>
      break;
 80079c2:	e20d      	b.n	8007de0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80079c4:	4b81      	ldr	r3, [pc, #516]	; (8007bcc <tcp_process+0x590>)
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	f003 0310 	and.w	r3, r3, #16
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	f000 80a1 	beq.w	8007b14 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80079d2:	4b7f      	ldr	r3, [pc, #508]	; (8007bd0 <tcp_process+0x594>)
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079da:	1ad3      	subs	r3, r2, r3
 80079dc:	3b01      	subs	r3, #1
 80079de:	2b00      	cmp	r3, #0
 80079e0:	db7e      	blt.n	8007ae0 <tcp_process+0x4a4>
 80079e2:	4b7b      	ldr	r3, [pc, #492]	; (8007bd0 <tcp_process+0x594>)
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079ea:	1ad3      	subs	r3, r2, r3
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	dc77      	bgt.n	8007ae0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2204      	movs	r2, #4
 80079f4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d102      	bne.n	8007a04 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80079fe:	23fa      	movs	r3, #250	; 0xfa
 8007a00:	76bb      	strb	r3, [r7, #26]
 8007a02:	e01d      	b.n	8007a40 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d106      	bne.n	8007a1c <tcp_process+0x3e0>
 8007a0e:	4b76      	ldr	r3, [pc, #472]	; (8007be8 <tcp_process+0x5ac>)
 8007a10:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8007a14:	4975      	ldr	r1, [pc, #468]	; (8007bec <tcp_process+0x5b0>)
 8007a16:	4876      	ldr	r0, [pc, #472]	; (8007bf0 <tcp_process+0x5b4>)
 8007a18:	f005 fc22 	bl	800d260 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a20:	699b      	ldr	r3, [r3, #24]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d00a      	beq.n	8007a3c <tcp_process+0x400>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a2a:	699b      	ldr	r3, [r3, #24]
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	6910      	ldr	r0, [r2, #16]
 8007a30:	2200      	movs	r2, #0
 8007a32:	6879      	ldr	r1, [r7, #4]
 8007a34:	4798      	blx	r3
 8007a36:	4603      	mov	r3, r0
 8007a38:	76bb      	strb	r3, [r7, #26]
 8007a3a:	e001      	b.n	8007a40 <tcp_process+0x404>
 8007a3c:	23f0      	movs	r3, #240	; 0xf0
 8007a3e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8007a40:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d00a      	beq.n	8007a5e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8007a48:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007a4c:	f113 0f0d 	cmn.w	r3, #13
 8007a50:	d002      	beq.n	8007a58 <tcp_process+0x41c>
              tcp_abort(pcb);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f7fd ff8e 	bl	8005974 <tcp_abort>
            }
            return ERR_ABRT;
 8007a58:	f06f 030c 	mvn.w	r3, #12
 8007a5c:	e1ce      	b.n	8007dfc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 fae0 	bl	8008024 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8007a64:	4b63      	ldr	r3, [pc, #396]	; (8007bf4 <tcp_process+0x5b8>)
 8007a66:	881b      	ldrh	r3, [r3, #0]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d005      	beq.n	8007a78 <tcp_process+0x43c>
            recv_acked--;
 8007a6c:	4b61      	ldr	r3, [pc, #388]	; (8007bf4 <tcp_process+0x5b8>)
 8007a6e:	881b      	ldrh	r3, [r3, #0]
 8007a70:	3b01      	subs	r3, #1
 8007a72:	b29a      	uxth	r2, r3
 8007a74:	4b5f      	ldr	r3, [pc, #380]	; (8007bf4 <tcp_process+0x5b8>)
 8007a76:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007a7c:	009a      	lsls	r2, r3, #2
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007a82:	005b      	lsls	r3, r3, #1
 8007a84:	f241 111c 	movw	r1, #4380	; 0x111c
 8007a88:	428b      	cmp	r3, r1
 8007a8a:	bf38      	it	cc
 8007a8c:	460b      	movcc	r3, r1
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d204      	bcs.n	8007a9c <tcp_process+0x460>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	e00d      	b.n	8007ab8 <tcp_process+0x47c>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007aa0:	005b      	lsls	r3, r3, #1
 8007aa2:	f241 121c 	movw	r2, #4380	; 0x111c
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d904      	bls.n	8007ab4 <tcp_process+0x478>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007aae:	005b      	lsls	r3, r3, #1
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	e001      	b.n	8007ab8 <tcp_process+0x47c>
 8007ab4:	f241 131c 	movw	r3, #4380	; 0x111c
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8007abe:	4b4e      	ldr	r3, [pc, #312]	; (8007bf8 <tcp_process+0x5bc>)
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	f003 0320 	and.w	r3, r3, #32
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d037      	beq.n	8007b3a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	8b5b      	ldrh	r3, [r3, #26]
 8007ace:	f043 0302 	orr.w	r3, r3, #2
 8007ad2:	b29a      	uxth	r2, r3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2207      	movs	r2, #7
 8007adc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8007ade:	e02c      	b.n	8007b3a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007ae0:	4b3b      	ldr	r3, [pc, #236]	; (8007bd0 <tcp_process+0x594>)
 8007ae2:	6819      	ldr	r1, [r3, #0]
 8007ae4:	4b3b      	ldr	r3, [pc, #236]	; (8007bd4 <tcp_process+0x598>)
 8007ae6:	881b      	ldrh	r3, [r3, #0]
 8007ae8:	461a      	mov	r2, r3
 8007aea:	4b3b      	ldr	r3, [pc, #236]	; (8007bd8 <tcp_process+0x59c>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007af0:	4b3a      	ldr	r3, [pc, #232]	; (8007bdc <tcp_process+0x5a0>)
 8007af2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007af4:	885b      	ldrh	r3, [r3, #2]
 8007af6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007af8:	4a38      	ldr	r2, [pc, #224]	; (8007bdc <tcp_process+0x5a0>)
 8007afa:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007afc:	8812      	ldrh	r2, [r2, #0]
 8007afe:	b292      	uxth	r2, r2
 8007b00:	9202      	str	r2, [sp, #8]
 8007b02:	9301      	str	r3, [sp, #4]
 8007b04:	4b36      	ldr	r3, [pc, #216]	; (8007be0 <tcp_process+0x5a4>)
 8007b06:	9300      	str	r3, [sp, #0]
 8007b08:	4b36      	ldr	r3, [pc, #216]	; (8007be4 <tcp_process+0x5a8>)
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f002 fbd1 	bl	800a2b4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8007b12:	e167      	b.n	8007de4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8007b14:	4b2d      	ldr	r3, [pc, #180]	; (8007bcc <tcp_process+0x590>)
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	f003 0302 	and.w	r3, r3, #2
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	f000 8161 	beq.w	8007de4 <tcp_process+0x7a8>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b26:	1e5a      	subs	r2, r3, #1
 8007b28:	4b2b      	ldr	r3, [pc, #172]	; (8007bd8 <tcp_process+0x59c>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	f040 8159 	bne.w	8007de4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f002 f9b6 	bl	8009ea4 <tcp_rexmit>
      break;
 8007b38:	e154      	b.n	8007de4 <tcp_process+0x7a8>
 8007b3a:	e153      	b.n	8007de4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 fa71 	bl	8008024 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8007b42:	4b2d      	ldr	r3, [pc, #180]	; (8007bf8 <tcp_process+0x5bc>)
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	f003 0320 	and.w	r3, r3, #32
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	f000 814c 	beq.w	8007de8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	8b5b      	ldrh	r3, [r3, #26]
 8007b54:	f043 0302 	orr.w	r3, r3, #2
 8007b58:	b29a      	uxth	r2, r3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2207      	movs	r2, #7
 8007b62:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007b64:	e140      	b.n	8007de8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 fa5c 	bl	8008024 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8007b6c:	4b22      	ldr	r3, [pc, #136]	; (8007bf8 <tcp_process+0x5bc>)
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	f003 0320 	and.w	r3, r3, #32
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d071      	beq.n	8007c5c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007b78:	4b14      	ldr	r3, [pc, #80]	; (8007bcc <tcp_process+0x590>)
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	f003 0310 	and.w	r3, r3, #16
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d060      	beq.n	8007c46 <tcp_process+0x60a>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007b88:	4b11      	ldr	r3, [pc, #68]	; (8007bd0 <tcp_process+0x594>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d15a      	bne.n	8007c46 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d156      	bne.n	8007c46 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	8b5b      	ldrh	r3, [r3, #26]
 8007b9c:	f043 0302 	orr.w	r3, r3, #2
 8007ba0:	b29a      	uxth	r2, r3
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f7fe fdbc 	bl	8006724 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8007bac:	4b13      	ldr	r3, [pc, #76]	; (8007bfc <tcp_process+0x5c0>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d105      	bne.n	8007bc2 <tcp_process+0x586>
 8007bb6:	4b11      	ldr	r3, [pc, #68]	; (8007bfc <tcp_process+0x5c0>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	4a0f      	ldr	r2, [pc, #60]	; (8007bfc <tcp_process+0x5c0>)
 8007bbe:	6013      	str	r3, [r2, #0]
 8007bc0:	e02e      	b.n	8007c20 <tcp_process+0x5e4>
 8007bc2:	4b0e      	ldr	r3, [pc, #56]	; (8007bfc <tcp_process+0x5c0>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	617b      	str	r3, [r7, #20]
 8007bc8:	e027      	b.n	8007c1a <tcp_process+0x5de>
 8007bca:	bf00      	nop
 8007bcc:	2000828c 	.word	0x2000828c
 8007bd0:	20008284 	.word	0x20008284
 8007bd4:	2000828a 	.word	0x2000828a
 8007bd8:	20008280 	.word	0x20008280
 8007bdc:	20008270 	.word	0x20008270
 8007be0:	20004ce8 	.word	0x20004ce8
 8007be4:	20004cec 	.word	0x20004cec
 8007be8:	0800f54c 	.word	0x0800f54c
 8007bec:	0800f7ec 	.word	0x0800f7ec
 8007bf0:	0800f598 	.word	0x0800f598
 8007bf4:	20008288 	.word	0x20008288
 8007bf8:	2000828d 	.word	0x2000828d
 8007bfc:	20008254 	.word	0x20008254
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d104      	bne.n	8007c14 <tcp_process+0x5d8>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	68da      	ldr	r2, [r3, #12]
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	60da      	str	r2, [r3, #12]
 8007c12:	e005      	b.n	8007c20 <tcp_process+0x5e4>
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	617b      	str	r3, [r7, #20]
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d1ef      	bne.n	8007c00 <tcp_process+0x5c4>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	60da      	str	r2, [r3, #12]
 8007c26:	4b77      	ldr	r3, [pc, #476]	; (8007e04 <tcp_process+0x7c8>)
 8007c28:	2201      	movs	r2, #1
 8007c2a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	220a      	movs	r2, #10
 8007c30:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8007c32:	4b75      	ldr	r3, [pc, #468]	; (8007e08 <tcp_process+0x7cc>)
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	60da      	str	r2, [r3, #12]
 8007c3a:	4a73      	ldr	r2, [pc, #460]	; (8007e08 <tcp_process+0x7cc>)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6013      	str	r3, [r2, #0]
 8007c40:	f002 fcfa 	bl	800a638 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8007c44:	e0d2      	b.n	8007dec <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	8b5b      	ldrh	r3, [r3, #26]
 8007c4a:	f043 0302 	orr.w	r3, r3, #2
 8007c4e:	b29a      	uxth	r2, r3
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2208      	movs	r2, #8
 8007c58:	751a      	strb	r2, [r3, #20]
      break;
 8007c5a:	e0c7      	b.n	8007dec <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007c5c:	4b6b      	ldr	r3, [pc, #428]	; (8007e0c <tcp_process+0x7d0>)
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	f003 0310 	and.w	r3, r3, #16
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	f000 80c1 	beq.w	8007dec <tcp_process+0x7b0>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007c6e:	4b68      	ldr	r3, [pc, #416]	; (8007e10 <tcp_process+0x7d4>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	f040 80ba 	bne.w	8007dec <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	f040 80b5 	bne.w	8007dec <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2206      	movs	r2, #6
 8007c86:	751a      	strb	r2, [r3, #20]
      break;
 8007c88:	e0b0      	b.n	8007dec <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 f9ca 	bl	8008024 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8007c90:	4b60      	ldr	r3, [pc, #384]	; (8007e14 <tcp_process+0x7d8>)
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	f003 0320 	and.w	r3, r3, #32
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	f000 80a9 	beq.w	8007df0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	8b5b      	ldrh	r3, [r3, #26]
 8007ca2:	f043 0302 	orr.w	r3, r3, #2
 8007ca6:	b29a      	uxth	r2, r3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f7fe fd39 	bl	8006724 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8007cb2:	4b59      	ldr	r3, [pc, #356]	; (8007e18 <tcp_process+0x7dc>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d105      	bne.n	8007cc8 <tcp_process+0x68c>
 8007cbc:	4b56      	ldr	r3, [pc, #344]	; (8007e18 <tcp_process+0x7dc>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	68db      	ldr	r3, [r3, #12]
 8007cc2:	4a55      	ldr	r2, [pc, #340]	; (8007e18 <tcp_process+0x7dc>)
 8007cc4:	6013      	str	r3, [r2, #0]
 8007cc6:	e013      	b.n	8007cf0 <tcp_process+0x6b4>
 8007cc8:	4b53      	ldr	r3, [pc, #332]	; (8007e18 <tcp_process+0x7dc>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	613b      	str	r3, [r7, #16]
 8007cce:	e00c      	b.n	8007cea <tcp_process+0x6ae>
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	68db      	ldr	r3, [r3, #12]
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d104      	bne.n	8007ce4 <tcp_process+0x6a8>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	68da      	ldr	r2, [r3, #12]
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	60da      	str	r2, [r3, #12]
 8007ce2:	e005      	b.n	8007cf0 <tcp_process+0x6b4>
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	613b      	str	r3, [r7, #16]
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d1ef      	bne.n	8007cd0 <tcp_process+0x694>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	60da      	str	r2, [r3, #12]
 8007cf6:	4b43      	ldr	r3, [pc, #268]	; (8007e04 <tcp_process+0x7c8>)
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	220a      	movs	r2, #10
 8007d00:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8007d02:	4b41      	ldr	r3, [pc, #260]	; (8007e08 <tcp_process+0x7cc>)
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	60da      	str	r2, [r3, #12]
 8007d0a:	4a3f      	ldr	r2, [pc, #252]	; (8007e08 <tcp_process+0x7cc>)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6013      	str	r3, [r2, #0]
 8007d10:	f002 fc92 	bl	800a638 <tcp_timer_needed>
      }
      break;
 8007d14:	e06c      	b.n	8007df0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 f984 	bl	8008024 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8007d1c:	4b3b      	ldr	r3, [pc, #236]	; (8007e0c <tcp_process+0x7d0>)
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	f003 0310 	and.w	r3, r3, #16
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d065      	beq.n	8007df4 <tcp_process+0x7b8>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007d2c:	4b38      	ldr	r3, [pc, #224]	; (8007e10 <tcp_process+0x7d4>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d15f      	bne.n	8007df4 <tcp_process+0x7b8>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d15b      	bne.n	8007df4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f7fe fcf1 	bl	8006724 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8007d42:	4b35      	ldr	r3, [pc, #212]	; (8007e18 <tcp_process+0x7dc>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d105      	bne.n	8007d58 <tcp_process+0x71c>
 8007d4c:	4b32      	ldr	r3, [pc, #200]	; (8007e18 <tcp_process+0x7dc>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	68db      	ldr	r3, [r3, #12]
 8007d52:	4a31      	ldr	r2, [pc, #196]	; (8007e18 <tcp_process+0x7dc>)
 8007d54:	6013      	str	r3, [r2, #0]
 8007d56:	e013      	b.n	8007d80 <tcp_process+0x744>
 8007d58:	4b2f      	ldr	r3, [pc, #188]	; (8007e18 <tcp_process+0x7dc>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	60fb      	str	r3, [r7, #12]
 8007d5e:	e00c      	b.n	8007d7a <tcp_process+0x73e>
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	68db      	ldr	r3, [r3, #12]
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d104      	bne.n	8007d74 <tcp_process+0x738>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	68da      	ldr	r2, [r3, #12]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	60da      	str	r2, [r3, #12]
 8007d72:	e005      	b.n	8007d80 <tcp_process+0x744>
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	60fb      	str	r3, [r7, #12]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d1ef      	bne.n	8007d60 <tcp_process+0x724>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	60da      	str	r2, [r3, #12]
 8007d86:	4b1f      	ldr	r3, [pc, #124]	; (8007e04 <tcp_process+0x7c8>)
 8007d88:	2201      	movs	r2, #1
 8007d8a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	220a      	movs	r2, #10
 8007d90:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8007d92:	4b1d      	ldr	r3, [pc, #116]	; (8007e08 <tcp_process+0x7cc>)
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	60da      	str	r2, [r3, #12]
 8007d9a:	4a1b      	ldr	r2, [pc, #108]	; (8007e08 <tcp_process+0x7cc>)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6013      	str	r3, [r2, #0]
 8007da0:	f002 fc4a 	bl	800a638 <tcp_timer_needed>
      }
      break;
 8007da4:	e026      	b.n	8007df4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 f93c 	bl	8008024 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8007dac:	4b17      	ldr	r3, [pc, #92]	; (8007e0c <tcp_process+0x7d0>)
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	f003 0310 	and.w	r3, r3, #16
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d01f      	beq.n	8007df8 <tcp_process+0x7bc>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007dbc:	4b14      	ldr	r3, [pc, #80]	; (8007e10 <tcp_process+0x7d4>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d119      	bne.n	8007df8 <tcp_process+0x7bc>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d115      	bne.n	8007df8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8007dcc:	4b11      	ldr	r3, [pc, #68]	; (8007e14 <tcp_process+0x7d8>)
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	f043 0310 	orr.w	r3, r3, #16
 8007dd4:	b2da      	uxtb	r2, r3
 8007dd6:	4b0f      	ldr	r3, [pc, #60]	; (8007e14 <tcp_process+0x7d8>)
 8007dd8:	701a      	strb	r2, [r3, #0]
      }
      break;
 8007dda:	e00d      	b.n	8007df8 <tcp_process+0x7bc>
    default:
      break;
 8007ddc:	bf00      	nop
 8007dde:	e00c      	b.n	8007dfa <tcp_process+0x7be>
      break;
 8007de0:	bf00      	nop
 8007de2:	e00a      	b.n	8007dfa <tcp_process+0x7be>
      break;
 8007de4:	bf00      	nop
 8007de6:	e008      	b.n	8007dfa <tcp_process+0x7be>
      break;
 8007de8:	bf00      	nop
 8007dea:	e006      	b.n	8007dfa <tcp_process+0x7be>
      break;
 8007dec:	bf00      	nop
 8007dee:	e004      	b.n	8007dfa <tcp_process+0x7be>
      break;
 8007df0:	bf00      	nop
 8007df2:	e002      	b.n	8007dfa <tcp_process+0x7be>
      break;
 8007df4:	bf00      	nop
 8007df6:	e000      	b.n	8007dfa <tcp_process+0x7be>
      break;
 8007df8:	bf00      	nop
  }
  return ERR_OK;
 8007dfa:	2300      	movs	r3, #0
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3724      	adds	r7, #36	; 0x24
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd90      	pop	{r4, r7, pc}
 8007e04:	2000825c 	.word	0x2000825c
 8007e08:	20008258 	.word	0x20008258
 8007e0c:	2000828c 	.word	0x2000828c
 8007e10:	20008284 	.word	0x20008284
 8007e14:	2000828d 	.word	0x2000828d
 8007e18:	20008254 	.word	0x20008254

08007e1c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8007e1c:	b590      	push	{r4, r7, lr}
 8007e1e:	b085      	sub	sp, #20
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d106      	bne.n	8007e3a <tcp_oos_insert_segment+0x1e>
 8007e2c:	4b3b      	ldr	r3, [pc, #236]	; (8007f1c <tcp_oos_insert_segment+0x100>)
 8007e2e:	f240 421f 	movw	r2, #1055	; 0x41f
 8007e32:	493b      	ldr	r1, [pc, #236]	; (8007f20 <tcp_oos_insert_segment+0x104>)
 8007e34:	483b      	ldr	r0, [pc, #236]	; (8007f24 <tcp_oos_insert_segment+0x108>)
 8007e36:	f005 fa13 	bl	800d260 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	68db      	ldr	r3, [r3, #12]
 8007e3e:	899b      	ldrh	r3, [r3, #12]
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7fb fcb0 	bl	80037a8 <lwip_htons>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	f003 0301 	and.w	r3, r3, #1
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d028      	beq.n	8007ea6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8007e54:	6838      	ldr	r0, [r7, #0]
 8007e56:	f7fe fa63 	bl	8006320 <tcp_segs_free>
    next = NULL;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	603b      	str	r3, [r7, #0]
 8007e5e:	e056      	b.n	8007f0e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	899b      	ldrh	r3, [r3, #12]
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f7fb fc9d 	bl	80037a8 <lwip_htons>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	f003 0301 	and.w	r3, r3, #1
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d00d      	beq.n	8007e96 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	899b      	ldrh	r3, [r3, #12]
 8007e80:	b29c      	uxth	r4, r3
 8007e82:	2001      	movs	r0, #1
 8007e84:	f7fb fc90 	bl	80037a8 <lwip_htons>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	4322      	orrs	r2, r4
 8007e92:	b292      	uxth	r2, r2
 8007e94:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8007ea0:	68f8      	ldr	r0, [r7, #12]
 8007ea2:	f7fe fa52 	bl	800634a <tcp_seg_free>
    while (next &&
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d00e      	beq.n	8007eca <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	891b      	ldrh	r3, [r3, #8]
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	4b1d      	ldr	r3, [pc, #116]	; (8007f28 <tcp_oos_insert_segment+0x10c>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	441a      	add	r2, r3
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	6839      	ldr	r1, [r7, #0]
 8007ec0:	8909      	ldrh	r1, [r1, #8]
 8007ec2:	440b      	add	r3, r1
 8007ec4:	1ad3      	subs	r3, r2, r3
    while (next &&
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	daca      	bge.n	8007e60 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d01e      	beq.n	8007f0e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	891b      	ldrh	r3, [r3, #8]
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	4b14      	ldr	r3, [pc, #80]	; (8007f28 <tcp_oos_insert_segment+0x10c>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	441a      	add	r2, r3
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	68db      	ldr	r3, [r3, #12]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	1ad3      	subs	r3, r2, r3
    if (next &&
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	dd12      	ble.n	8007f0e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	68db      	ldr	r3, [r3, #12]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	b29a      	uxth	r2, r3
 8007ef0:	4b0d      	ldr	r3, [pc, #52]	; (8007f28 <tcp_oos_insert_segment+0x10c>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	1ad3      	subs	r3, r2, r3
 8007ef8:	b29a      	uxth	r2, r3
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	685a      	ldr	r2, [r3, #4]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	891b      	ldrh	r3, [r3, #8]
 8007f06:	4619      	mov	r1, r3
 8007f08:	4610      	mov	r0, r2
 8007f0a:	f7fc fe25 	bl	8004b58 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	683a      	ldr	r2, [r7, #0]
 8007f12:	601a      	str	r2, [r3, #0]
}
 8007f14:	bf00      	nop
 8007f16:	3714      	adds	r7, #20
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd90      	pop	{r4, r7, pc}
 8007f1c:	0800f54c 	.word	0x0800f54c
 8007f20:	0800f80c 	.word	0x0800f80c
 8007f24:	0800f598 	.word	0x0800f598
 8007f28:	20008280 	.word	0x20008280

08007f2c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8007f2c:	b5b0      	push	{r4, r5, r7, lr}
 8007f2e:	b086      	sub	sp, #24
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	60b9      	str	r1, [r7, #8]
 8007f36:	607a      	str	r2, [r7, #4]
 8007f38:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8007f3a:	e03e      	b.n	8007fba <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f7fd f812 	bl	8004f74 <pbuf_clen>
 8007f50:	4603      	mov	r3, r0
 8007f52:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007f5a:	8a7a      	ldrh	r2, [r7, #18]
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d906      	bls.n	8007f6e <tcp_free_acked_segments+0x42>
 8007f60:	4b2a      	ldr	r3, [pc, #168]	; (800800c <tcp_free_acked_segments+0xe0>)
 8007f62:	f240 4257 	movw	r2, #1111	; 0x457
 8007f66:	492a      	ldr	r1, [pc, #168]	; (8008010 <tcp_free_acked_segments+0xe4>)
 8007f68:	482a      	ldr	r0, [pc, #168]	; (8008014 <tcp_free_acked_segments+0xe8>)
 8007f6a:	f005 f979 	bl	800d260 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8007f74:	8a7b      	ldrh	r3, [r7, #18]
 8007f76:	1ad3      	subs	r3, r2, r3
 8007f78:	b29a      	uxth	r2, r3
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	891a      	ldrh	r2, [r3, #8]
 8007f84:	4b24      	ldr	r3, [pc, #144]	; (8008018 <tcp_free_acked_segments+0xec>)
 8007f86:	881b      	ldrh	r3, [r3, #0]
 8007f88:	4413      	add	r3, r2
 8007f8a:	b29a      	uxth	r2, r3
 8007f8c:	4b22      	ldr	r3, [pc, #136]	; (8008018 <tcp_free_acked_segments+0xec>)
 8007f8e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8007f90:	6978      	ldr	r0, [r7, #20]
 8007f92:	f7fe f9da 	bl	800634a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d00c      	beq.n	8007fba <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d109      	bne.n	8007fba <tcp_free_acked_segments+0x8e>
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d106      	bne.n	8007fba <tcp_free_acked_segments+0x8e>
 8007fac:	4b17      	ldr	r3, [pc, #92]	; (800800c <tcp_free_acked_segments+0xe0>)
 8007fae:	f240 4261 	movw	r2, #1121	; 0x461
 8007fb2:	491a      	ldr	r1, [pc, #104]	; (800801c <tcp_free_acked_segments+0xf0>)
 8007fb4:	4817      	ldr	r0, [pc, #92]	; (8008014 <tcp_free_acked_segments+0xe8>)
 8007fb6:	f005 f953 	bl	800d260 <iprintf>
  while (seg_list != NULL &&
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d020      	beq.n	8008002 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7fb fc03 	bl	80037d2 <lwip_htonl>
 8007fcc:	4604      	mov	r4, r0
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	891b      	ldrh	r3, [r3, #8]
 8007fd2:	461d      	mov	r5, r3
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	899b      	ldrh	r3, [r3, #12]
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f7fb fbe3 	bl	80037a8 <lwip_htons>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	f003 0303 	and.w	r3, r3, #3
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d001      	beq.n	8007ff2 <tcp_free_acked_segments+0xc6>
 8007fee:	2301      	movs	r3, #1
 8007ff0:	e000      	b.n	8007ff4 <tcp_free_acked_segments+0xc8>
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	442b      	add	r3, r5
 8007ff6:	18e2      	adds	r2, r4, r3
 8007ff8:	4b09      	ldr	r3, [pc, #36]	; (8008020 <tcp_free_acked_segments+0xf4>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	dd9c      	ble.n	8007f3c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8008002:	68bb      	ldr	r3, [r7, #8]
}
 8008004:	4618      	mov	r0, r3
 8008006:	3718      	adds	r7, #24
 8008008:	46bd      	mov	sp, r7
 800800a:	bdb0      	pop	{r4, r5, r7, pc}
 800800c:	0800f54c 	.word	0x0800f54c
 8008010:	0800f834 	.word	0x0800f834
 8008014:	0800f598 	.word	0x0800f598
 8008018:	20008288 	.word	0x20008288
 800801c:	0800f85c 	.word	0x0800f85c
 8008020:	20008284 	.word	0x20008284

08008024 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8008024:	b5b0      	push	{r4, r5, r7, lr}
 8008026:	b094      	sub	sp, #80	; 0x50
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800802c:	2300      	movs	r3, #0
 800802e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d106      	bne.n	8008044 <tcp_receive+0x20>
 8008036:	4b91      	ldr	r3, [pc, #580]	; (800827c <tcp_receive+0x258>)
 8008038:	f240 427b 	movw	r2, #1147	; 0x47b
 800803c:	4990      	ldr	r1, [pc, #576]	; (8008280 <tcp_receive+0x25c>)
 800803e:	4891      	ldr	r0, [pc, #580]	; (8008284 <tcp_receive+0x260>)
 8008040:	f005 f90e 	bl	800d260 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	7d1b      	ldrb	r3, [r3, #20]
 8008048:	2b03      	cmp	r3, #3
 800804a:	d806      	bhi.n	800805a <tcp_receive+0x36>
 800804c:	4b8b      	ldr	r3, [pc, #556]	; (800827c <tcp_receive+0x258>)
 800804e:	f240 427c 	movw	r2, #1148	; 0x47c
 8008052:	498d      	ldr	r1, [pc, #564]	; (8008288 <tcp_receive+0x264>)
 8008054:	488b      	ldr	r0, [pc, #556]	; (8008284 <tcp_receive+0x260>)
 8008056:	f005 f903 	bl	800d260 <iprintf>

  if (flags & TCP_ACK) {
 800805a:	4b8c      	ldr	r3, [pc, #560]	; (800828c <tcp_receive+0x268>)
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	f003 0310 	and.w	r3, r3, #16
 8008062:	2b00      	cmp	r3, #0
 8008064:	f000 8264 	beq.w	8008530 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800806e:	461a      	mov	r2, r3
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008074:	4413      	add	r3, r2
 8008076:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800807c:	4b84      	ldr	r3, [pc, #528]	; (8008290 <tcp_receive+0x26c>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	1ad3      	subs	r3, r2, r3
 8008082:	2b00      	cmp	r3, #0
 8008084:	db1b      	blt.n	80080be <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800808a:	4b81      	ldr	r3, [pc, #516]	; (8008290 <tcp_receive+0x26c>)
 800808c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800808e:	429a      	cmp	r2, r3
 8008090:	d106      	bne.n	80080a0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008096:	4b7f      	ldr	r3, [pc, #508]	; (8008294 <tcp_receive+0x270>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	1ad3      	subs	r3, r2, r3
 800809c:	2b00      	cmp	r3, #0
 800809e:	db0e      	blt.n	80080be <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80080a4:	4b7b      	ldr	r3, [pc, #492]	; (8008294 <tcp_receive+0x270>)
 80080a6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d125      	bne.n	80080f8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80080ac:	4b7a      	ldr	r3, [pc, #488]	; (8008298 <tcp_receive+0x274>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	89db      	ldrh	r3, [r3, #14]
 80080b2:	b29a      	uxth	r2, r3
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d91c      	bls.n	80080f8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80080be:	4b76      	ldr	r3, [pc, #472]	; (8008298 <tcp_receive+0x274>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	89db      	ldrh	r3, [r3, #14]
 80080c4:	b29a      	uxth	r2, r3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80080d8:	429a      	cmp	r2, r3
 80080da:	d205      	bcs.n	80080e8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80080e8:	4b69      	ldr	r3, [pc, #420]	; (8008290 <tcp_receive+0x26c>)
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80080f0:	4b68      	ldr	r3, [pc, #416]	; (8008294 <tcp_receive+0x270>)
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80080f8:	4b66      	ldr	r3, [pc, #408]	; (8008294 <tcp_receive+0x270>)
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008100:	1ad3      	subs	r3, r2, r3
 8008102:	2b00      	cmp	r3, #0
 8008104:	dc58      	bgt.n	80081b8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8008106:	4b65      	ldr	r3, [pc, #404]	; (800829c <tcp_receive+0x278>)
 8008108:	881b      	ldrh	r3, [r3, #0]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d14b      	bne.n	80081a6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8008118:	4413      	add	r3, r2
 800811a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800811c:	429a      	cmp	r2, r3
 800811e:	d142      	bne.n	80081a6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008126:	2b00      	cmp	r3, #0
 8008128:	db3d      	blt.n	80081a6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800812e:	4b59      	ldr	r3, [pc, #356]	; (8008294 <tcp_receive+0x270>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	429a      	cmp	r2, r3
 8008134:	d137      	bne.n	80081a6 <tcp_receive+0x182>
              found_dupack = 1;
 8008136:	2301      	movs	r3, #1
 8008138:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008140:	2bff      	cmp	r3, #255	; 0xff
 8008142:	d007      	beq.n	8008154 <tcp_receive+0x130>
                ++pcb->dupacks;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800814a:	3301      	adds	r3, #1
 800814c:	b2da      	uxtb	r2, r3
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800815a:	2b03      	cmp	r3, #3
 800815c:	d91b      	bls.n	8008196 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008168:	4413      	add	r3, r2
 800816a:	b29a      	uxth	r2, r3
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008172:	429a      	cmp	r2, r3
 8008174:	d30a      	bcc.n	800818c <tcp_receive+0x168>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008180:	4413      	add	r3, r2
 8008182:	b29a      	uxth	r2, r3
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800818a:	e004      	b.n	8008196 <tcp_receive+0x172>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008192:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800819c:	2b02      	cmp	r3, #2
 800819e:	d902      	bls.n	80081a6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f001 feeb 	bl	8009f7c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80081a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	f040 8161 	bne.w	8008470 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80081b6:	e15b      	b.n	8008470 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80081b8:	4b36      	ldr	r3, [pc, #216]	; (8008294 <tcp_receive+0x270>)
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081c0:	1ad3      	subs	r3, r2, r3
 80081c2:	3b01      	subs	r3, #1
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	f2c0 814e 	blt.w	8008466 <tcp_receive+0x442>
 80081ca:	4b32      	ldr	r3, [pc, #200]	; (8008294 <tcp_receive+0x270>)
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081d2:	1ad3      	subs	r3, r2, r3
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	f300 8146 	bgt.w	8008466 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	8b5b      	ldrh	r3, [r3, #26]
 80081de:	f003 0304 	and.w	r3, r3, #4
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d010      	beq.n	8008208 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	8b5b      	ldrh	r3, [r3, #26]
 80081ea:	f023 0304 	bic.w	r3, r3, #4
 80081ee:	b29a      	uxth	r2, r3
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008216:	10db      	asrs	r3, r3, #3
 8008218:	b21b      	sxth	r3, r3
 800821a:	b29a      	uxth	r2, r3
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008222:	b29b      	uxth	r3, r3
 8008224:	4413      	add	r3, r2
 8008226:	b29b      	uxth	r3, r3
 8008228:	b21a      	sxth	r2, r3
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8008230:	4b18      	ldr	r3, [pc, #96]	; (8008294 <tcp_receive+0x270>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	b29a      	uxth	r2, r3
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800823a:	b29b      	uxth	r3, r3
 800823c:	1ad3      	subs	r3, r2, r3
 800823e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8008248:	4b12      	ldr	r3, [pc, #72]	; (8008294 <tcp_receive+0x270>)
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	7d1b      	ldrb	r3, [r3, #20]
 8008254:	2b03      	cmp	r3, #3
 8008256:	f240 8097 	bls.w	8008388 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8008266:	429a      	cmp	r2, r3
 8008268:	d245      	bcs.n	80082f6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	8b5b      	ldrh	r3, [r3, #26]
 800826e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008272:	2b00      	cmp	r3, #0
 8008274:	d014      	beq.n	80082a0 <tcp_receive+0x27c>
 8008276:	2301      	movs	r3, #1
 8008278:	e013      	b.n	80082a2 <tcp_receive+0x27e>
 800827a:	bf00      	nop
 800827c:	0800f54c 	.word	0x0800f54c
 8008280:	0800f87c 	.word	0x0800f87c
 8008284:	0800f598 	.word	0x0800f598
 8008288:	0800f898 	.word	0x0800f898
 800828c:	2000828c 	.word	0x2000828c
 8008290:	20008280 	.word	0x20008280
 8008294:	20008284 	.word	0x20008284
 8008298:	20008270 	.word	0x20008270
 800829c:	2000828a 	.word	0x2000828a
 80082a0:	2302      	movs	r3, #2
 80082a2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80082a6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80082aa:	b29a      	uxth	r2, r3
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80082b0:	fb12 f303 	smulbb	r3, r2, r3
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80082b8:	4293      	cmp	r3, r2
 80082ba:	bf28      	it	cs
 80082bc:	4613      	movcs	r3, r2
 80082be:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80082c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80082c8:	4413      	add	r3, r2
 80082ca:	b29a      	uxth	r2, r3
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d309      	bcc.n	80082ea <tcp_receive+0x2c6>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80082dc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80082de:	4413      	add	r3, r2
 80082e0:	b29a      	uxth	r2, r3
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80082e8:	e04e      	b.n	8008388 <tcp_receive+0x364>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80082f0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80082f4:	e048      	b.n	8008388 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80082fc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80082fe:	4413      	add	r3, r2
 8008300:	b29a      	uxth	r2, r3
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008308:	429a      	cmp	r2, r3
 800830a:	d309      	bcc.n	8008320 <tcp_receive+0x2fc>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008312:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008314:	4413      	add	r3, r2
 8008316:	b29a      	uxth	r2, r3
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800831e:	e004      	b.n	800832a <tcp_receive+0x306>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008326:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008336:	429a      	cmp	r2, r3
 8008338:	d326      	bcc.n	8008388 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008346:	1ad3      	subs	r3, r2, r3
 8008348:	b29a      	uxth	r2, r3
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800835a:	4413      	add	r3, r2
 800835c:	b29a      	uxth	r2, r3
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008364:	429a      	cmp	r2, r3
 8008366:	d30a      	bcc.n	800837e <tcp_receive+0x35a>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008372:	4413      	add	r3, r2
 8008374:	b29a      	uxth	r2, r3
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800837c:	e004      	b.n	8008388 <tcp_receive+0x364>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008384:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008390:	4a98      	ldr	r2, [pc, #608]	; (80085f4 <tcp_receive+0x5d0>)
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f7ff fdca 	bl	8007f2c <tcp_free_acked_segments>
 8008398:	4602      	mov	r2, r0
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083a6:	4a94      	ldr	r2, [pc, #592]	; (80085f8 <tcp_receive+0x5d4>)
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f7ff fdbf 	bl	8007f2c <tcp_free_acked_segments>
 80083ae:	4602      	mov	r2, r0
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d104      	bne.n	80083c6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083c2:	861a      	strh	r2, [r3, #48]	; 0x30
 80083c4:	e002      	b.n	80083cc <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2200      	movs	r2, #0
 80083ca:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2200      	movs	r2, #0
 80083d0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d103      	bne.n	80083e2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80083e8:	4b84      	ldr	r3, [pc, #528]	; (80085fc <tcp_receive+0x5d8>)
 80083ea:	881b      	ldrh	r3, [r3, #0]
 80083ec:	4413      	add	r3, r2
 80083ee:	b29a      	uxth	r2, r3
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	8b5b      	ldrh	r3, [r3, #26]
 80083fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d035      	beq.n	800846e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008406:	2b00      	cmp	r3, #0
 8008408:	d118      	bne.n	800843c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800840e:	2b00      	cmp	r3, #0
 8008410:	d00c      	beq.n	800842c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800841a:	68db      	ldr	r3, [r3, #12]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	4618      	mov	r0, r3
 8008420:	f7fb f9d7 	bl	80037d2 <lwip_htonl>
 8008424:	4603      	mov	r3, r0
 8008426:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8008428:	2b00      	cmp	r3, #0
 800842a:	dc20      	bgt.n	800846e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	8b5b      	ldrh	r3, [r3, #26]
 8008430:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008434:	b29a      	uxth	r2, r3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800843a:	e018      	b.n	800846e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	4618      	mov	r0, r3
 800844a:	f7fb f9c2 	bl	80037d2 <lwip_htonl>
 800844e:	4603      	mov	r3, r0
 8008450:	1ae3      	subs	r3, r4, r3
 8008452:	2b00      	cmp	r3, #0
 8008454:	dc0b      	bgt.n	800846e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	8b5b      	ldrh	r3, [r3, #26]
 800845a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800845e:	b29a      	uxth	r2, r3
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008464:	e003      	b.n	800846e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f001 ff76 	bl	800a358 <tcp_send_empty_ack>
 800846c:	e000      	b.n	8008470 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800846e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008474:	2b00      	cmp	r3, #0
 8008476:	d05b      	beq.n	8008530 <tcp_receive+0x50c>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800847c:	4b60      	ldr	r3, [pc, #384]	; (8008600 <tcp_receive+0x5dc>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	1ad3      	subs	r3, r2, r3
 8008482:	2b00      	cmp	r3, #0
 8008484:	da54      	bge.n	8008530 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8008486:	4b5f      	ldr	r3, [pc, #380]	; (8008604 <tcp_receive+0x5e0>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	b29a      	uxth	r2, r3
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008490:	b29b      	uxth	r3, r3
 8008492:	1ad3      	subs	r3, r2, r3
 8008494:	b29b      	uxth	r3, r3
 8008496:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800849a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80084a4:	10db      	asrs	r3, r3, #3
 80084a6:	b21b      	sxth	r3, r3
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	1ad3      	subs	r3, r2, r3
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80084b8:	b29a      	uxth	r2, r3
 80084ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80084be:	4413      	add	r3, r2
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	b21a      	sxth	r2, r3
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80084c8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	da05      	bge.n	80084dc <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80084d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80084d4:	425b      	negs	r3, r3
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80084dc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80084e6:	109b      	asrs	r3, r3, #2
 80084e8:	b21b      	sxth	r3, r3
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	1ad3      	subs	r3, r2, r3
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008500:	4413      	add	r3, r2
 8008502:	b29b      	uxth	r3, r3
 8008504:	b21a      	sxth	r2, r3
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008510:	10db      	asrs	r3, r3, #3
 8008512:	b21b      	sxth	r3, r3
 8008514:	b29a      	uxth	r2, r3
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800851c:	b29b      	uxth	r3, r3
 800851e:	4413      	add	r3, r2
 8008520:	b29b      	uxth	r3, r3
 8008522:	b21a      	sxth	r2, r3
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8008530:	4b35      	ldr	r3, [pc, #212]	; (8008608 <tcp_receive+0x5e4>)
 8008532:	881b      	ldrh	r3, [r3, #0]
 8008534:	2b00      	cmp	r3, #0
 8008536:	f000 84e2 	beq.w	8008efe <tcp_receive+0xeda>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	7d1b      	ldrb	r3, [r3, #20]
 800853e:	2b06      	cmp	r3, #6
 8008540:	f200 84dd 	bhi.w	8008efe <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008548:	4b30      	ldr	r3, [pc, #192]	; (800860c <tcp_receive+0x5e8>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	1ad3      	subs	r3, r2, r3
 800854e:	3b01      	subs	r3, #1
 8008550:	2b00      	cmp	r3, #0
 8008552:	f2c0 808f 	blt.w	8008674 <tcp_receive+0x650>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800855a:	4b2b      	ldr	r3, [pc, #172]	; (8008608 <tcp_receive+0x5e4>)
 800855c:	881b      	ldrh	r3, [r3, #0]
 800855e:	4619      	mov	r1, r3
 8008560:	4b2a      	ldr	r3, [pc, #168]	; (800860c <tcp_receive+0x5e8>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	440b      	add	r3, r1
 8008566:	1ad3      	subs	r3, r2, r3
 8008568:	3301      	adds	r3, #1
 800856a:	2b00      	cmp	r3, #0
 800856c:	f300 8082 	bgt.w	8008674 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8008570:	4b27      	ldr	r3, [pc, #156]	; (8008610 <tcp_receive+0x5ec>)
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800857a:	4b24      	ldr	r3, [pc, #144]	; (800860c <tcp_receive+0x5e8>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	1ad3      	subs	r3, r2, r3
 8008580:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8008582:	4b23      	ldr	r3, [pc, #140]	; (8008610 <tcp_receive+0x5ec>)
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d106      	bne.n	8008598 <tcp_receive+0x574>
 800858a:	4b22      	ldr	r3, [pc, #136]	; (8008614 <tcp_receive+0x5f0>)
 800858c:	f240 5294 	movw	r2, #1428	; 0x594
 8008590:	4921      	ldr	r1, [pc, #132]	; (8008618 <tcp_receive+0x5f4>)
 8008592:	4822      	ldr	r0, [pc, #136]	; (800861c <tcp_receive+0x5f8>)
 8008594:	f004 fe64 	bl	800d260 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8008598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800859e:	4293      	cmp	r3, r2
 80085a0:	d906      	bls.n	80085b0 <tcp_receive+0x58c>
 80085a2:	4b1c      	ldr	r3, [pc, #112]	; (8008614 <tcp_receive+0x5f0>)
 80085a4:	f240 5295 	movw	r2, #1429	; 0x595
 80085a8:	491d      	ldr	r1, [pc, #116]	; (8008620 <tcp_receive+0x5fc>)
 80085aa:	481c      	ldr	r0, [pc, #112]	; (800861c <tcp_receive+0x5f8>)
 80085ac:	f004 fe58 	bl	800d260 <iprintf>
      off = (u16_t)off32;
 80085b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80085b6:	4b16      	ldr	r3, [pc, #88]	; (8008610 <tcp_receive+0x5ec>)
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	891b      	ldrh	r3, [r3, #8]
 80085bc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d906      	bls.n	80085d2 <tcp_receive+0x5ae>
 80085c4:	4b13      	ldr	r3, [pc, #76]	; (8008614 <tcp_receive+0x5f0>)
 80085c6:	f240 5297 	movw	r2, #1431	; 0x597
 80085ca:	4916      	ldr	r1, [pc, #88]	; (8008624 <tcp_receive+0x600>)
 80085cc:	4813      	ldr	r0, [pc, #76]	; (800861c <tcp_receive+0x5f8>)
 80085ce:	f004 fe47 	bl	800d260 <iprintf>
      inseg.len -= off;
 80085d2:	4b0f      	ldr	r3, [pc, #60]	; (8008610 <tcp_receive+0x5ec>)
 80085d4:	891a      	ldrh	r2, [r3, #8]
 80085d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80085da:	1ad3      	subs	r3, r2, r3
 80085dc:	b29a      	uxth	r2, r3
 80085de:	4b0c      	ldr	r3, [pc, #48]	; (8008610 <tcp_receive+0x5ec>)
 80085e0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80085e2:	4b0b      	ldr	r3, [pc, #44]	; (8008610 <tcp_receive+0x5ec>)
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	891a      	ldrh	r2, [r3, #8]
 80085e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80085ec:	1ad3      	subs	r3, r2, r3
 80085ee:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80085f0:	e02a      	b.n	8008648 <tcp_receive+0x624>
 80085f2:	bf00      	nop
 80085f4:	0800f8b4 	.word	0x0800f8b4
 80085f8:	0800f8bc 	.word	0x0800f8bc
 80085fc:	20008288 	.word	0x20008288
 8008600:	20008284 	.word	0x20008284
 8008604:	20008248 	.word	0x20008248
 8008608:	2000828a 	.word	0x2000828a
 800860c:	20008280 	.word	0x20008280
 8008610:	20008260 	.word	0x20008260
 8008614:	0800f54c 	.word	0x0800f54c
 8008618:	0800f8c4 	.word	0x0800f8c4
 800861c:	0800f598 	.word	0x0800f598
 8008620:	0800f8d4 	.word	0x0800f8d4
 8008624:	0800f8e4 	.word	0x0800f8e4
        off -= p->len;
 8008628:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800862a:	895b      	ldrh	r3, [r3, #10]
 800862c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008630:	1ad3      	subs	r3, r2, r3
 8008632:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8008636:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008638:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800863a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800863c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800863e:	2200      	movs	r2, #0
 8008640:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8008642:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8008648:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800864a:	895b      	ldrh	r3, [r3, #10]
 800864c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008650:	429a      	cmp	r2, r3
 8008652:	d8e9      	bhi.n	8008628 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8008654:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008658:	4619      	mov	r1, r3
 800865a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800865c:	f7fc fb7c 	bl	8004d58 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008664:	4a91      	ldr	r2, [pc, #580]	; (80088ac <tcp_receive+0x888>)
 8008666:	6013      	str	r3, [r2, #0]
 8008668:	4b91      	ldr	r3, [pc, #580]	; (80088b0 <tcp_receive+0x88c>)
 800866a:	68db      	ldr	r3, [r3, #12]
 800866c:	4a8f      	ldr	r2, [pc, #572]	; (80088ac <tcp_receive+0x888>)
 800866e:	6812      	ldr	r2, [r2, #0]
 8008670:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008672:	e00d      	b.n	8008690 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8008674:	4b8d      	ldr	r3, [pc, #564]	; (80088ac <tcp_receive+0x888>)
 8008676:	681a      	ldr	r2, [r3, #0]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800867c:	1ad3      	subs	r3, r2, r3
 800867e:	2b00      	cmp	r3, #0
 8008680:	da06      	bge.n	8008690 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	8b5b      	ldrh	r3, [r3, #26]
 8008686:	f043 0302 	orr.w	r3, r3, #2
 800868a:	b29a      	uxth	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008690:	4b86      	ldr	r3, [pc, #536]	; (80088ac <tcp_receive+0x888>)
 8008692:	681a      	ldr	r2, [r3, #0]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008698:	1ad3      	subs	r3, r2, r3
 800869a:	2b00      	cmp	r3, #0
 800869c:	f2c0 842a 	blt.w	8008ef4 <tcp_receive+0xed0>
 80086a0:	4b82      	ldr	r3, [pc, #520]	; (80088ac <tcp_receive+0x888>)
 80086a2:	681a      	ldr	r2, [r3, #0]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a8:	6879      	ldr	r1, [r7, #4]
 80086aa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80086ac:	440b      	add	r3, r1
 80086ae:	1ad3      	subs	r3, r2, r3
 80086b0:	3301      	adds	r3, #1
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	f300 841e 	bgt.w	8008ef4 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086bc:	4b7b      	ldr	r3, [pc, #492]	; (80088ac <tcp_receive+0x888>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	429a      	cmp	r2, r3
 80086c2:	f040 829a 	bne.w	8008bfa <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80086c6:	4b7a      	ldr	r3, [pc, #488]	; (80088b0 <tcp_receive+0x88c>)
 80086c8:	891c      	ldrh	r4, [r3, #8]
 80086ca:	4b79      	ldr	r3, [pc, #484]	; (80088b0 <tcp_receive+0x88c>)
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	899b      	ldrh	r3, [r3, #12]
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7fb f868 	bl	80037a8 <lwip_htons>
 80086d8:	4603      	mov	r3, r0
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	f003 0303 	and.w	r3, r3, #3
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d001      	beq.n	80086e8 <tcp_receive+0x6c4>
 80086e4:	2301      	movs	r3, #1
 80086e6:	e000      	b.n	80086ea <tcp_receive+0x6c6>
 80086e8:	2300      	movs	r3, #0
 80086ea:	4423      	add	r3, r4
 80086ec:	b29a      	uxth	r2, r3
 80086ee:	4b71      	ldr	r3, [pc, #452]	; (80088b4 <tcp_receive+0x890>)
 80086f0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80086f6:	4b6f      	ldr	r3, [pc, #444]	; (80088b4 <tcp_receive+0x890>)
 80086f8:	881b      	ldrh	r3, [r3, #0]
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d275      	bcs.n	80087ea <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80086fe:	4b6c      	ldr	r3, [pc, #432]	; (80088b0 <tcp_receive+0x88c>)
 8008700:	68db      	ldr	r3, [r3, #12]
 8008702:	899b      	ldrh	r3, [r3, #12]
 8008704:	b29b      	uxth	r3, r3
 8008706:	4618      	mov	r0, r3
 8008708:	f7fb f84e 	bl	80037a8 <lwip_htons>
 800870c:	4603      	mov	r3, r0
 800870e:	b2db      	uxtb	r3, r3
 8008710:	f003 0301 	and.w	r3, r3, #1
 8008714:	2b00      	cmp	r3, #0
 8008716:	d01f      	beq.n	8008758 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8008718:	4b65      	ldr	r3, [pc, #404]	; (80088b0 <tcp_receive+0x88c>)
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	899b      	ldrh	r3, [r3, #12]
 800871e:	b29b      	uxth	r3, r3
 8008720:	b21b      	sxth	r3, r3
 8008722:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008726:	b21c      	sxth	r4, r3
 8008728:	4b61      	ldr	r3, [pc, #388]	; (80088b0 <tcp_receive+0x88c>)
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	899b      	ldrh	r3, [r3, #12]
 800872e:	b29b      	uxth	r3, r3
 8008730:	4618      	mov	r0, r3
 8008732:	f7fb f839 	bl	80037a8 <lwip_htons>
 8008736:	4603      	mov	r3, r0
 8008738:	b2db      	uxtb	r3, r3
 800873a:	b29b      	uxth	r3, r3
 800873c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8008740:	b29b      	uxth	r3, r3
 8008742:	4618      	mov	r0, r3
 8008744:	f7fb f830 	bl	80037a8 <lwip_htons>
 8008748:	4603      	mov	r3, r0
 800874a:	b21b      	sxth	r3, r3
 800874c:	4323      	orrs	r3, r4
 800874e:	b21a      	sxth	r2, r3
 8008750:	4b57      	ldr	r3, [pc, #348]	; (80088b0 <tcp_receive+0x88c>)
 8008752:	68db      	ldr	r3, [r3, #12]
 8008754:	b292      	uxth	r2, r2
 8008756:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800875c:	4b54      	ldr	r3, [pc, #336]	; (80088b0 <tcp_receive+0x88c>)
 800875e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008760:	4b53      	ldr	r3, [pc, #332]	; (80088b0 <tcp_receive+0x88c>)
 8008762:	68db      	ldr	r3, [r3, #12]
 8008764:	899b      	ldrh	r3, [r3, #12]
 8008766:	b29b      	uxth	r3, r3
 8008768:	4618      	mov	r0, r3
 800876a:	f7fb f81d 	bl	80037a8 <lwip_htons>
 800876e:	4603      	mov	r3, r0
 8008770:	b2db      	uxtb	r3, r3
 8008772:	f003 0302 	and.w	r3, r3, #2
 8008776:	2b00      	cmp	r3, #0
 8008778:	d005      	beq.n	8008786 <tcp_receive+0x762>
            inseg.len -= 1;
 800877a:	4b4d      	ldr	r3, [pc, #308]	; (80088b0 <tcp_receive+0x88c>)
 800877c:	891b      	ldrh	r3, [r3, #8]
 800877e:	3b01      	subs	r3, #1
 8008780:	b29a      	uxth	r2, r3
 8008782:	4b4b      	ldr	r3, [pc, #300]	; (80088b0 <tcp_receive+0x88c>)
 8008784:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8008786:	4b4a      	ldr	r3, [pc, #296]	; (80088b0 <tcp_receive+0x88c>)
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	4a49      	ldr	r2, [pc, #292]	; (80088b0 <tcp_receive+0x88c>)
 800878c:	8912      	ldrh	r2, [r2, #8]
 800878e:	4611      	mov	r1, r2
 8008790:	4618      	mov	r0, r3
 8008792:	f7fc f9e1 	bl	8004b58 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8008796:	4b46      	ldr	r3, [pc, #280]	; (80088b0 <tcp_receive+0x88c>)
 8008798:	891c      	ldrh	r4, [r3, #8]
 800879a:	4b45      	ldr	r3, [pc, #276]	; (80088b0 <tcp_receive+0x88c>)
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	899b      	ldrh	r3, [r3, #12]
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	4618      	mov	r0, r3
 80087a4:	f7fb f800 	bl	80037a8 <lwip_htons>
 80087a8:	4603      	mov	r3, r0
 80087aa:	b2db      	uxtb	r3, r3
 80087ac:	f003 0303 	and.w	r3, r3, #3
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d001      	beq.n	80087b8 <tcp_receive+0x794>
 80087b4:	2301      	movs	r3, #1
 80087b6:	e000      	b.n	80087ba <tcp_receive+0x796>
 80087b8:	2300      	movs	r3, #0
 80087ba:	4423      	add	r3, r4
 80087bc:	b29a      	uxth	r2, r3
 80087be:	4b3d      	ldr	r3, [pc, #244]	; (80088b4 <tcp_receive+0x890>)
 80087c0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80087c2:	4b3c      	ldr	r3, [pc, #240]	; (80088b4 <tcp_receive+0x890>)
 80087c4:	881b      	ldrh	r3, [r3, #0]
 80087c6:	461a      	mov	r2, r3
 80087c8:	4b38      	ldr	r3, [pc, #224]	; (80088ac <tcp_receive+0x888>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	441a      	add	r2, r3
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d2:	6879      	ldr	r1, [r7, #4]
 80087d4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80087d6:	440b      	add	r3, r1
 80087d8:	429a      	cmp	r2, r3
 80087da:	d006      	beq.n	80087ea <tcp_receive+0x7c6>
 80087dc:	4b36      	ldr	r3, [pc, #216]	; (80088b8 <tcp_receive+0x894>)
 80087de:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80087e2:	4936      	ldr	r1, [pc, #216]	; (80088bc <tcp_receive+0x898>)
 80087e4:	4836      	ldr	r0, [pc, #216]	; (80088c0 <tcp_receive+0x89c>)
 80087e6:	f004 fd3b 	bl	800d260 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	f000 80e7 	beq.w	80089c2 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80087f4:	4b2e      	ldr	r3, [pc, #184]	; (80088b0 <tcp_receive+0x88c>)
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	899b      	ldrh	r3, [r3, #12]
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7fa ffd3 	bl	80037a8 <lwip_htons>
 8008802:	4603      	mov	r3, r0
 8008804:	b2db      	uxtb	r3, r3
 8008806:	f003 0301 	and.w	r3, r3, #1
 800880a:	2b00      	cmp	r3, #0
 800880c:	d010      	beq.n	8008830 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800880e:	e00a      	b.n	8008826 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008814:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8008820:	68f8      	ldr	r0, [r7, #12]
 8008822:	f7fd fd92 	bl	800634a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800882a:	2b00      	cmp	r3, #0
 800882c:	d1f0      	bne.n	8008810 <tcp_receive+0x7ec>
 800882e:	e0c8      	b.n	80089c2 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008834:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8008836:	e052      	b.n	80088de <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800883a:	68db      	ldr	r3, [r3, #12]
 800883c:	899b      	ldrh	r3, [r3, #12]
 800883e:	b29b      	uxth	r3, r3
 8008840:	4618      	mov	r0, r3
 8008842:	f7fa ffb1 	bl	80037a8 <lwip_htons>
 8008846:	4603      	mov	r3, r0
 8008848:	b2db      	uxtb	r3, r3
 800884a:	f003 0301 	and.w	r3, r3, #1
 800884e:	2b00      	cmp	r3, #0
 8008850:	d03d      	beq.n	80088ce <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8008852:	4b17      	ldr	r3, [pc, #92]	; (80088b0 <tcp_receive+0x88c>)
 8008854:	68db      	ldr	r3, [r3, #12]
 8008856:	899b      	ldrh	r3, [r3, #12]
 8008858:	b29b      	uxth	r3, r3
 800885a:	4618      	mov	r0, r3
 800885c:	f7fa ffa4 	bl	80037a8 <lwip_htons>
 8008860:	4603      	mov	r3, r0
 8008862:	b2db      	uxtb	r3, r3
 8008864:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008868:	2b00      	cmp	r3, #0
 800886a:	d130      	bne.n	80088ce <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800886c:	4b10      	ldr	r3, [pc, #64]	; (80088b0 <tcp_receive+0x88c>)
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	899b      	ldrh	r3, [r3, #12]
 8008872:	b29c      	uxth	r4, r3
 8008874:	2001      	movs	r0, #1
 8008876:	f7fa ff97 	bl	80037a8 <lwip_htons>
 800887a:	4603      	mov	r3, r0
 800887c:	461a      	mov	r2, r3
 800887e:	4b0c      	ldr	r3, [pc, #48]	; (80088b0 <tcp_receive+0x88c>)
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	4322      	orrs	r2, r4
 8008884:	b292      	uxth	r2, r2
 8008886:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8008888:	4b09      	ldr	r3, [pc, #36]	; (80088b0 <tcp_receive+0x88c>)
 800888a:	891c      	ldrh	r4, [r3, #8]
 800888c:	4b08      	ldr	r3, [pc, #32]	; (80088b0 <tcp_receive+0x88c>)
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	899b      	ldrh	r3, [r3, #12]
 8008892:	b29b      	uxth	r3, r3
 8008894:	4618      	mov	r0, r3
 8008896:	f7fa ff87 	bl	80037a8 <lwip_htons>
 800889a:	4603      	mov	r3, r0
 800889c:	b2db      	uxtb	r3, r3
 800889e:	f003 0303 	and.w	r3, r3, #3
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d00e      	beq.n	80088c4 <tcp_receive+0x8a0>
 80088a6:	2301      	movs	r3, #1
 80088a8:	e00d      	b.n	80088c6 <tcp_receive+0x8a2>
 80088aa:	bf00      	nop
 80088ac:	20008280 	.word	0x20008280
 80088b0:	20008260 	.word	0x20008260
 80088b4:	2000828a 	.word	0x2000828a
 80088b8:	0800f54c 	.word	0x0800f54c
 80088bc:	0800f8f4 	.word	0x0800f8f4
 80088c0:	0800f598 	.word	0x0800f598
 80088c4:	2300      	movs	r3, #0
 80088c6:	4423      	add	r3, r4
 80088c8:	b29a      	uxth	r2, r3
 80088ca:	4b98      	ldr	r3, [pc, #608]	; (8008b2c <tcp_receive+0xb08>)
 80088cc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80088ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088d0:	613b      	str	r3, [r7, #16]
              next = next->next;
 80088d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80088d8:	6938      	ldr	r0, [r7, #16]
 80088da:	f7fd fd36 	bl	800634a <tcp_seg_free>
            while (next &&
 80088de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d00e      	beq.n	8008902 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80088e4:	4b91      	ldr	r3, [pc, #580]	; (8008b2c <tcp_receive+0xb08>)
 80088e6:	881b      	ldrh	r3, [r3, #0]
 80088e8:	461a      	mov	r2, r3
 80088ea:	4b91      	ldr	r3, [pc, #580]	; (8008b30 <tcp_receive+0xb0c>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	441a      	add	r2, r3
 80088f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088f2:	68db      	ldr	r3, [r3, #12]
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80088f8:	8909      	ldrh	r1, [r1, #8]
 80088fa:	440b      	add	r3, r1
 80088fc:	1ad3      	subs	r3, r2, r3
            while (next &&
 80088fe:	2b00      	cmp	r3, #0
 8008900:	da9a      	bge.n	8008838 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8008902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008904:	2b00      	cmp	r3, #0
 8008906:	d059      	beq.n	80089bc <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8008908:	4b88      	ldr	r3, [pc, #544]	; (8008b2c <tcp_receive+0xb08>)
 800890a:	881b      	ldrh	r3, [r3, #0]
 800890c:	461a      	mov	r2, r3
 800890e:	4b88      	ldr	r3, [pc, #544]	; (8008b30 <tcp_receive+0xb0c>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	441a      	add	r2, r3
 8008914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008916:	68db      	ldr	r3, [r3, #12]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800891c:	2b00      	cmp	r3, #0
 800891e:	dd4d      	ble.n	80089bc <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8008920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008922:	68db      	ldr	r3, [r3, #12]
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	b29a      	uxth	r2, r3
 8008928:	4b81      	ldr	r3, [pc, #516]	; (8008b30 <tcp_receive+0xb0c>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	b29b      	uxth	r3, r3
 800892e:	1ad3      	subs	r3, r2, r3
 8008930:	b29a      	uxth	r2, r3
 8008932:	4b80      	ldr	r3, [pc, #512]	; (8008b34 <tcp_receive+0xb10>)
 8008934:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008936:	4b7f      	ldr	r3, [pc, #508]	; (8008b34 <tcp_receive+0xb10>)
 8008938:	68db      	ldr	r3, [r3, #12]
 800893a:	899b      	ldrh	r3, [r3, #12]
 800893c:	b29b      	uxth	r3, r3
 800893e:	4618      	mov	r0, r3
 8008940:	f7fa ff32 	bl	80037a8 <lwip_htons>
 8008944:	4603      	mov	r3, r0
 8008946:	b2db      	uxtb	r3, r3
 8008948:	f003 0302 	and.w	r3, r3, #2
 800894c:	2b00      	cmp	r3, #0
 800894e:	d005      	beq.n	800895c <tcp_receive+0x938>
                inseg.len -= 1;
 8008950:	4b78      	ldr	r3, [pc, #480]	; (8008b34 <tcp_receive+0xb10>)
 8008952:	891b      	ldrh	r3, [r3, #8]
 8008954:	3b01      	subs	r3, #1
 8008956:	b29a      	uxth	r2, r3
 8008958:	4b76      	ldr	r3, [pc, #472]	; (8008b34 <tcp_receive+0xb10>)
 800895a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800895c:	4b75      	ldr	r3, [pc, #468]	; (8008b34 <tcp_receive+0xb10>)
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	4a74      	ldr	r2, [pc, #464]	; (8008b34 <tcp_receive+0xb10>)
 8008962:	8912      	ldrh	r2, [r2, #8]
 8008964:	4611      	mov	r1, r2
 8008966:	4618      	mov	r0, r3
 8008968:	f7fc f8f6 	bl	8004b58 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800896c:	4b71      	ldr	r3, [pc, #452]	; (8008b34 <tcp_receive+0xb10>)
 800896e:	891c      	ldrh	r4, [r3, #8]
 8008970:	4b70      	ldr	r3, [pc, #448]	; (8008b34 <tcp_receive+0xb10>)
 8008972:	68db      	ldr	r3, [r3, #12]
 8008974:	899b      	ldrh	r3, [r3, #12]
 8008976:	b29b      	uxth	r3, r3
 8008978:	4618      	mov	r0, r3
 800897a:	f7fa ff15 	bl	80037a8 <lwip_htons>
 800897e:	4603      	mov	r3, r0
 8008980:	b2db      	uxtb	r3, r3
 8008982:	f003 0303 	and.w	r3, r3, #3
 8008986:	2b00      	cmp	r3, #0
 8008988:	d001      	beq.n	800898e <tcp_receive+0x96a>
 800898a:	2301      	movs	r3, #1
 800898c:	e000      	b.n	8008990 <tcp_receive+0x96c>
 800898e:	2300      	movs	r3, #0
 8008990:	4423      	add	r3, r4
 8008992:	b29a      	uxth	r2, r3
 8008994:	4b65      	ldr	r3, [pc, #404]	; (8008b2c <tcp_receive+0xb08>)
 8008996:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8008998:	4b64      	ldr	r3, [pc, #400]	; (8008b2c <tcp_receive+0xb08>)
 800899a:	881b      	ldrh	r3, [r3, #0]
 800899c:	461a      	mov	r2, r3
 800899e:	4b64      	ldr	r3, [pc, #400]	; (8008b30 <tcp_receive+0xb0c>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	441a      	add	r2, r3
 80089a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d006      	beq.n	80089bc <tcp_receive+0x998>
 80089ae:	4b62      	ldr	r3, [pc, #392]	; (8008b38 <tcp_receive+0xb14>)
 80089b0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80089b4:	4961      	ldr	r1, [pc, #388]	; (8008b3c <tcp_receive+0xb18>)
 80089b6:	4862      	ldr	r0, [pc, #392]	; (8008b40 <tcp_receive+0xb1c>)
 80089b8:	f004 fc52 	bl	800d260 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80089c0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80089c2:	4b5a      	ldr	r3, [pc, #360]	; (8008b2c <tcp_receive+0xb08>)
 80089c4:	881b      	ldrh	r3, [r3, #0]
 80089c6:	461a      	mov	r2, r3
 80089c8:	4b59      	ldr	r3, [pc, #356]	; (8008b30 <tcp_receive+0xb0c>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	441a      	add	r2, r3
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80089d6:	4b55      	ldr	r3, [pc, #340]	; (8008b2c <tcp_receive+0xb08>)
 80089d8:	881b      	ldrh	r3, [r3, #0]
 80089da:	429a      	cmp	r2, r3
 80089dc:	d206      	bcs.n	80089ec <tcp_receive+0x9c8>
 80089de:	4b56      	ldr	r3, [pc, #344]	; (8008b38 <tcp_receive+0xb14>)
 80089e0:	f240 6207 	movw	r2, #1543	; 0x607
 80089e4:	4957      	ldr	r1, [pc, #348]	; (8008b44 <tcp_receive+0xb20>)
 80089e6:	4856      	ldr	r0, [pc, #344]	; (8008b40 <tcp_receive+0xb1c>)
 80089e8:	f004 fc3a 	bl	800d260 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80089f0:	4b4e      	ldr	r3, [pc, #312]	; (8008b2c <tcp_receive+0xb08>)
 80089f2:	881b      	ldrh	r3, [r3, #0]
 80089f4:	1ad3      	subs	r3, r2, r3
 80089f6:	b29a      	uxth	r2, r3
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f7fc ffc5 	bl	800598c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8008a02:	4b4c      	ldr	r3, [pc, #304]	; (8008b34 <tcp_receive+0xb10>)
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	891b      	ldrh	r3, [r3, #8]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d006      	beq.n	8008a1a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8008a0c:	4b49      	ldr	r3, [pc, #292]	; (8008b34 <tcp_receive+0xb10>)
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	4a4d      	ldr	r2, [pc, #308]	; (8008b48 <tcp_receive+0xb24>)
 8008a12:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8008a14:	4b47      	ldr	r3, [pc, #284]	; (8008b34 <tcp_receive+0xb10>)
 8008a16:	2200      	movs	r2, #0
 8008a18:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008a1a:	4b46      	ldr	r3, [pc, #280]	; (8008b34 <tcp_receive+0xb10>)
 8008a1c:	68db      	ldr	r3, [r3, #12]
 8008a1e:	899b      	ldrh	r3, [r3, #12]
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7fa fec0 	bl	80037a8 <lwip_htons>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	f003 0301 	and.w	r3, r3, #1
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	f000 80b8 	beq.w	8008ba6 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8008a36:	4b45      	ldr	r3, [pc, #276]	; (8008b4c <tcp_receive+0xb28>)
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	f043 0320 	orr.w	r3, r3, #32
 8008a3e:	b2da      	uxtb	r2, r3
 8008a40:	4b42      	ldr	r3, [pc, #264]	; (8008b4c <tcp_receive+0xb28>)
 8008a42:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8008a44:	e0af      	b.n	8008ba6 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a4a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a50:	68db      	ldr	r3, [r3, #12]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	4a36      	ldr	r2, [pc, #216]	; (8008b30 <tcp_receive+0xb0c>)
 8008a56:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	891b      	ldrh	r3, [r3, #8]
 8008a5c:	461c      	mov	r4, r3
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	68db      	ldr	r3, [r3, #12]
 8008a62:	899b      	ldrh	r3, [r3, #12]
 8008a64:	b29b      	uxth	r3, r3
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7fa fe9e 	bl	80037a8 <lwip_htons>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	b2db      	uxtb	r3, r3
 8008a70:	f003 0303 	and.w	r3, r3, #3
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d001      	beq.n	8008a7c <tcp_receive+0xa58>
 8008a78:	2301      	movs	r3, #1
 8008a7a:	e000      	b.n	8008a7e <tcp_receive+0xa5a>
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	191a      	adds	r2, r3, r4
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a84:	441a      	add	r2, r3
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a8e:	461c      	mov	r4, r3
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	891b      	ldrh	r3, [r3, #8]
 8008a94:	461d      	mov	r5, r3
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	68db      	ldr	r3, [r3, #12]
 8008a9a:	899b      	ldrh	r3, [r3, #12]
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f7fa fe82 	bl	80037a8 <lwip_htons>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	f003 0303 	and.w	r3, r3, #3
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d001      	beq.n	8008ab4 <tcp_receive+0xa90>
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	e000      	b.n	8008ab6 <tcp_receive+0xa92>
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	442b      	add	r3, r5
 8008ab8:	429c      	cmp	r4, r3
 8008aba:	d206      	bcs.n	8008aca <tcp_receive+0xaa6>
 8008abc:	4b1e      	ldr	r3, [pc, #120]	; (8008b38 <tcp_receive+0xb14>)
 8008abe:	f240 622b 	movw	r2, #1579	; 0x62b
 8008ac2:	4923      	ldr	r1, [pc, #140]	; (8008b50 <tcp_receive+0xb2c>)
 8008ac4:	481e      	ldr	r0, [pc, #120]	; (8008b40 <tcp_receive+0xb1c>)
 8008ac6:	f004 fbcb 	bl	800d260 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	891b      	ldrh	r3, [r3, #8]
 8008ace:	461c      	mov	r4, r3
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	68db      	ldr	r3, [r3, #12]
 8008ad4:	899b      	ldrh	r3, [r3, #12]
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f7fa fe65 	bl	80037a8 <lwip_htons>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	f003 0303 	and.w	r3, r3, #3
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d001      	beq.n	8008aee <tcp_receive+0xaca>
 8008aea:	2301      	movs	r3, #1
 8008aec:	e000      	b.n	8008af0 <tcp_receive+0xacc>
 8008aee:	2300      	movs	r3, #0
 8008af0:	1919      	adds	r1, r3, r4
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008af6:	b28b      	uxth	r3, r1
 8008af8:	1ad3      	subs	r3, r2, r3
 8008afa:	b29a      	uxth	r2, r3
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f7fc ff43 	bl	800598c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	891b      	ldrh	r3, [r3, #8]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d028      	beq.n	8008b62 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8008b10:	4b0d      	ldr	r3, [pc, #52]	; (8008b48 <tcp_receive+0xb24>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d01d      	beq.n	8008b54 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8008b18:	4b0b      	ldr	r3, [pc, #44]	; (8008b48 <tcp_receive+0xb24>)
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	4619      	mov	r1, r3
 8008b22:	4610      	mov	r0, r2
 8008b24:	f7fc fa60 	bl	8004fe8 <pbuf_cat>
 8008b28:	e018      	b.n	8008b5c <tcp_receive+0xb38>
 8008b2a:	bf00      	nop
 8008b2c:	2000828a 	.word	0x2000828a
 8008b30:	20008280 	.word	0x20008280
 8008b34:	20008260 	.word	0x20008260
 8008b38:	0800f54c 	.word	0x0800f54c
 8008b3c:	0800f92c 	.word	0x0800f92c
 8008b40:	0800f598 	.word	0x0800f598
 8008b44:	0800f968 	.word	0x0800f968
 8008b48:	20008290 	.word	0x20008290
 8008b4c:	2000828d 	.word	0x2000828d
 8008b50:	0800f988 	.word	0x0800f988
            } else {
              recv_data = cseg->p;
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	4a70      	ldr	r2, [pc, #448]	; (8008d1c <tcp_receive+0xcf8>)
 8008b5a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	899b      	ldrh	r3, [r3, #12]
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f7fa fe1c 	bl	80037a8 <lwip_htons>
 8008b70:	4603      	mov	r3, r0
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	f003 0301 	and.w	r3, r3, #1
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d00d      	beq.n	8008b98 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8008b7c:	4b68      	ldr	r3, [pc, #416]	; (8008d20 <tcp_receive+0xcfc>)
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	f043 0320 	orr.w	r3, r3, #32
 8008b84:	b2da      	uxtb	r2, r3
 8008b86:	4b66      	ldr	r3, [pc, #408]	; (8008d20 <tcp_receive+0xcfc>)
 8008b88:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	7d1b      	ldrb	r3, [r3, #20]
 8008b8e:	2b04      	cmp	r3, #4
 8008b90:	d102      	bne.n	8008b98 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2207      	movs	r2, #7
 8008b96:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	681a      	ldr	r2, [r3, #0]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8008ba0:	68b8      	ldr	r0, [r7, #8]
 8008ba2:	f7fd fbd2 	bl	800634a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d008      	beq.n	8008bc0 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bb2:	68db      	ldr	r3, [r3, #12]
 8008bb4:	685a      	ldr	r2, [r3, #4]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	f43f af43 	beq.w	8008a46 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	8b5b      	ldrh	r3, [r3, #26]
 8008bc4:	f003 0301 	and.w	r3, r3, #1
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d00e      	beq.n	8008bea <tcp_receive+0xbc6>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	8b5b      	ldrh	r3, [r3, #26]
 8008bd0:	f023 0301 	bic.w	r3, r3, #1
 8008bd4:	b29a      	uxth	r2, r3
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	835a      	strh	r2, [r3, #26]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	8b5b      	ldrh	r3, [r3, #26]
 8008bde:	f043 0302 	orr.w	r3, r3, #2
 8008be2:	b29a      	uxth	r2, r3
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8008be8:	e188      	b.n	8008efc <tcp_receive+0xed8>
        tcp_ack(pcb);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	8b5b      	ldrh	r3, [r3, #26]
 8008bee:	f043 0301 	orr.w	r3, r3, #1
 8008bf2:	b29a      	uxth	r2, r3
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8008bf8:	e180      	b.n	8008efc <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d106      	bne.n	8008c10 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8008c02:	4848      	ldr	r0, [pc, #288]	; (8008d24 <tcp_receive+0xd00>)
 8008c04:	f7fd fbba 	bl	800637c <tcp_seg_copy>
 8008c08:	4602      	mov	r2, r0
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	675a      	str	r2, [r3, #116]	; 0x74
 8008c0e:	e16d      	b.n	8008eec <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8008c10:	2300      	movs	r3, #0
 8008c12:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c18:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c1a:	e157      	b.n	8008ecc <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8008c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c1e:	68db      	ldr	r3, [r3, #12]
 8008c20:	685a      	ldr	r2, [r3, #4]
 8008c22:	4b41      	ldr	r3, [pc, #260]	; (8008d28 <tcp_receive+0xd04>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d11d      	bne.n	8008c66 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8008c2a:	4b3e      	ldr	r3, [pc, #248]	; (8008d24 <tcp_receive+0xd00>)
 8008c2c:	891a      	ldrh	r2, [r3, #8]
 8008c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c30:	891b      	ldrh	r3, [r3, #8]
 8008c32:	429a      	cmp	r2, r3
 8008c34:	f240 814f 	bls.w	8008ed6 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8008c38:	483a      	ldr	r0, [pc, #232]	; (8008d24 <tcp_receive+0xd00>)
 8008c3a:	f7fd fb9f 	bl	800637c <tcp_seg_copy>
 8008c3e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	f000 8149 	beq.w	8008eda <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8008c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d003      	beq.n	8008c56 <tcp_receive+0xc32>
                    prev->next = cseg;
 8008c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c50:	697a      	ldr	r2, [r7, #20]
 8008c52:	601a      	str	r2, [r3, #0]
 8008c54:	e002      	b.n	8008c5c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	697a      	ldr	r2, [r7, #20]
 8008c5a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8008c5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008c5e:	6978      	ldr	r0, [r7, #20]
 8008c60:	f7ff f8dc 	bl	8007e1c <tcp_oos_insert_segment>
                }
                break;
 8008c64:	e139      	b.n	8008eda <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8008c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d117      	bne.n	8008c9c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8008c6c:	4b2e      	ldr	r3, [pc, #184]	; (8008d28 <tcp_receive+0xd04>)
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c72:	68db      	ldr	r3, [r3, #12]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	1ad3      	subs	r3, r2, r3
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	da57      	bge.n	8008d2c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8008c7c:	4829      	ldr	r0, [pc, #164]	; (8008d24 <tcp_receive+0xd00>)
 8008c7e:	f7fd fb7d 	bl	800637c <tcp_seg_copy>
 8008c82:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8008c84:	69bb      	ldr	r3, [r7, #24]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	f000 8129 	beq.w	8008ede <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	69ba      	ldr	r2, [r7, #24]
 8008c90:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8008c92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008c94:	69b8      	ldr	r0, [r7, #24]
 8008c96:	f7ff f8c1 	bl	8007e1c <tcp_oos_insert_segment>
                  }
                  break;
 8008c9a:	e120      	b.n	8008ede <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8008c9c:	4b22      	ldr	r3, [pc, #136]	; (8008d28 <tcp_receive+0xd04>)
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	1ad3      	subs	r3, r2, r3
 8008ca8:	3b01      	subs	r3, #1
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	db3e      	blt.n	8008d2c <tcp_receive+0xd08>
 8008cae:	4b1e      	ldr	r3, [pc, #120]	; (8008d28 <tcp_receive+0xd04>)
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cb4:	68db      	ldr	r3, [r3, #12]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	1ad3      	subs	r3, r2, r3
 8008cba:	3301      	adds	r3, #1
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	dc35      	bgt.n	8008d2c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8008cc0:	4818      	ldr	r0, [pc, #96]	; (8008d24 <tcp_receive+0xd00>)
 8008cc2:	f7fd fb5b 	bl	800637c <tcp_seg_copy>
 8008cc6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8008cc8:	69fb      	ldr	r3, [r7, #28]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	f000 8109 	beq.w	8008ee2 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8008cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cd8:	8912      	ldrh	r2, [r2, #8]
 8008cda:	441a      	add	r2, r3
 8008cdc:	4b12      	ldr	r3, [pc, #72]	; (8008d28 <tcp_receive+0xd04>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	1ad3      	subs	r3, r2, r3
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	dd12      	ble.n	8008d0c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8008ce6:	4b10      	ldr	r3, [pc, #64]	; (8008d28 <tcp_receive+0xd04>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	b29a      	uxth	r2, r3
 8008cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cee:	68db      	ldr	r3, [r3, #12]
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	1ad3      	subs	r3, r2, r3
 8008cf6:	b29a      	uxth	r2, r3
 8008cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cfa:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8008cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cfe:	685a      	ldr	r2, [r3, #4]
 8008d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d02:	891b      	ldrh	r3, [r3, #8]
 8008d04:	4619      	mov	r1, r3
 8008d06:	4610      	mov	r0, r2
 8008d08:	f7fb ff26 	bl	8004b58 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8008d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d0e:	69fa      	ldr	r2, [r7, #28]
 8008d10:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8008d12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d14:	69f8      	ldr	r0, [r7, #28]
 8008d16:	f7ff f881 	bl	8007e1c <tcp_oos_insert_segment>
                  }
                  break;
 8008d1a:	e0e2      	b.n	8008ee2 <tcp_receive+0xebe>
 8008d1c:	20008290 	.word	0x20008290
 8008d20:	2000828d 	.word	0x2000828d
 8008d24:	20008260 	.word	0x20008260
 8008d28:	20008280 	.word	0x20008280
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8008d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d2e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8008d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	f040 80c6 	bne.w	8008ec6 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8008d3a:	4b80      	ldr	r3, [pc, #512]	; (8008f3c <tcp_receive+0xf18>)
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d40:	68db      	ldr	r3, [r3, #12]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	f340 80bd 	ble.w	8008ec6 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d4e:	68db      	ldr	r3, [r3, #12]
 8008d50:	899b      	ldrh	r3, [r3, #12]
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	4618      	mov	r0, r3
 8008d56:	f7fa fd27 	bl	80037a8 <lwip_htons>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	b2db      	uxtb	r3, r3
 8008d5e:	f003 0301 	and.w	r3, r3, #1
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	f040 80bf 	bne.w	8008ee6 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8008d68:	4875      	ldr	r0, [pc, #468]	; (8008f40 <tcp_receive+0xf1c>)
 8008d6a:	f7fd fb07 	bl	800637c <tcp_seg_copy>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d72:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8008d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	f000 80b6 	beq.w	8008eea <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8008d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d80:	68db      	ldr	r3, [r3, #12]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d86:	8912      	ldrh	r2, [r2, #8]
 8008d88:	441a      	add	r2, r3
 8008d8a:	4b6c      	ldr	r3, [pc, #432]	; (8008f3c <tcp_receive+0xf18>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	1ad3      	subs	r3, r2, r3
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	dd12      	ble.n	8008dba <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8008d94:	4b69      	ldr	r3, [pc, #420]	; (8008f3c <tcp_receive+0xf18>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	b29a      	uxth	r2, r3
 8008d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d9c:	68db      	ldr	r3, [r3, #12]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	1ad3      	subs	r3, r2, r3
 8008da4:	b29a      	uxth	r2, r3
 8008da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8008daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dac:	685a      	ldr	r2, [r3, #4]
 8008dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db0:	891b      	ldrh	r3, [r3, #8]
 8008db2:	4619      	mov	r1, r3
 8008db4:	4610      	mov	r0, r2
 8008db6:	f7fb fecf 	bl	8004b58 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8008dba:	4b62      	ldr	r3, [pc, #392]	; (8008f44 <tcp_receive+0xf20>)
 8008dbc:	881b      	ldrh	r3, [r3, #0]
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	4b5e      	ldr	r3, [pc, #376]	; (8008f3c <tcp_receive+0xf18>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	441a      	add	r2, r3
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dca:	6879      	ldr	r1, [r7, #4]
 8008dcc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008dce:	440b      	add	r3, r1
 8008dd0:	1ad3      	subs	r3, r2, r3
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	f340 8089 	ble.w	8008eea <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8008dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	68db      	ldr	r3, [r3, #12]
 8008dde:	899b      	ldrh	r3, [r3, #12]
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7fa fce0 	bl	80037a8 <lwip_htons>
 8008de8:	4603      	mov	r3, r0
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	f003 0301 	and.w	r3, r3, #1
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d022      	beq.n	8008e3a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8008df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	68db      	ldr	r3, [r3, #12]
 8008dfa:	899b      	ldrh	r3, [r3, #12]
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	b21b      	sxth	r3, r3
 8008e00:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008e04:	b21c      	sxth	r4, r3
 8008e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	68db      	ldr	r3, [r3, #12]
 8008e0c:	899b      	ldrh	r3, [r3, #12]
 8008e0e:	b29b      	uxth	r3, r3
 8008e10:	4618      	mov	r0, r3
 8008e12:	f7fa fcc9 	bl	80037a8 <lwip_htons>
 8008e16:	4603      	mov	r3, r0
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	4618      	mov	r0, r3
 8008e24:	f7fa fcc0 	bl	80037a8 <lwip_htons>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	b21b      	sxth	r3, r3
 8008e2c:	4323      	orrs	r3, r4
 8008e2e:	b21a      	sxth	r2, r3
 8008e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	68db      	ldr	r3, [r3, #12]
 8008e36:	b292      	uxth	r2, r2
 8008e38:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3e:	b29a      	uxth	r2, r3
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e44:	4413      	add	r3, r2
 8008e46:	b299      	uxth	r1, r3
 8008e48:	4b3c      	ldr	r3, [pc, #240]	; (8008f3c <tcp_receive+0xf18>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	b29a      	uxth	r2, r3
 8008e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	1a8a      	subs	r2, r1, r2
 8008e54:	b292      	uxth	r2, r2
 8008e56:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8008e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	685a      	ldr	r2, [r3, #4]
 8008e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	891b      	ldrh	r3, [r3, #8]
 8008e64:	4619      	mov	r1, r3
 8008e66:	4610      	mov	r0, r2
 8008e68:	f7fb fe76 	bl	8004b58 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8008e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	891c      	ldrh	r4, [r3, #8]
 8008e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	68db      	ldr	r3, [r3, #12]
 8008e78:	899b      	ldrh	r3, [r3, #12]
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f7fa fc93 	bl	80037a8 <lwip_htons>
 8008e82:	4603      	mov	r3, r0
 8008e84:	b2db      	uxtb	r3, r3
 8008e86:	f003 0303 	and.w	r3, r3, #3
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d001      	beq.n	8008e92 <tcp_receive+0xe6e>
 8008e8e:	2301      	movs	r3, #1
 8008e90:	e000      	b.n	8008e94 <tcp_receive+0xe70>
 8008e92:	2300      	movs	r3, #0
 8008e94:	4423      	add	r3, r4
 8008e96:	b29a      	uxth	r2, r3
 8008e98:	4b2a      	ldr	r3, [pc, #168]	; (8008f44 <tcp_receive+0xf20>)
 8008e9a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008e9c:	4b29      	ldr	r3, [pc, #164]	; (8008f44 <tcp_receive+0xf20>)
 8008e9e:	881b      	ldrh	r3, [r3, #0]
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	4b26      	ldr	r3, [pc, #152]	; (8008f3c <tcp_receive+0xf18>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	441a      	add	r2, r3
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eac:	6879      	ldr	r1, [r7, #4]
 8008eae:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008eb0:	440b      	add	r3, r1
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d019      	beq.n	8008eea <tcp_receive+0xec6>
 8008eb6:	4b24      	ldr	r3, [pc, #144]	; (8008f48 <tcp_receive+0xf24>)
 8008eb8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8008ebc:	4923      	ldr	r1, [pc, #140]	; (8008f4c <tcp_receive+0xf28>)
 8008ebe:	4824      	ldr	r0, [pc, #144]	; (8008f50 <tcp_receive+0xf2c>)
 8008ec0:	f004 f9ce 	bl	800d260 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8008ec4:	e011      	b.n	8008eea <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8008ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	f47f aea4 	bne.w	8008c1c <tcp_receive+0xbf8>
 8008ed4:	e00a      	b.n	8008eec <tcp_receive+0xec8>
                break;
 8008ed6:	bf00      	nop
 8008ed8:	e008      	b.n	8008eec <tcp_receive+0xec8>
                break;
 8008eda:	bf00      	nop
 8008edc:	e006      	b.n	8008eec <tcp_receive+0xec8>
                  break;
 8008ede:	bf00      	nop
 8008ee0:	e004      	b.n	8008eec <tcp_receive+0xec8>
                  break;
 8008ee2:	bf00      	nop
 8008ee4:	e002      	b.n	8008eec <tcp_receive+0xec8>
                  break;
 8008ee6:	bf00      	nop
 8008ee8:	e000      	b.n	8008eec <tcp_receive+0xec8>
                break;
 8008eea:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f001 fa33 	bl	800a358 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8008ef2:	e003      	b.n	8008efc <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f001 fa2f 	bl	800a358 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008efa:	e01a      	b.n	8008f32 <tcp_receive+0xf0e>
 8008efc:	e019      	b.n	8008f32 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8008efe:	4b0f      	ldr	r3, [pc, #60]	; (8008f3c <tcp_receive+0xf18>)
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f06:	1ad3      	subs	r3, r2, r3
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	db0a      	blt.n	8008f22 <tcp_receive+0xefe>
 8008f0c:	4b0b      	ldr	r3, [pc, #44]	; (8008f3c <tcp_receive+0xf18>)
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f14:	6879      	ldr	r1, [r7, #4]
 8008f16:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008f18:	440b      	add	r3, r1
 8008f1a:	1ad3      	subs	r3, r2, r3
 8008f1c:	3301      	adds	r3, #1
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	dd07      	ble.n	8008f32 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	8b5b      	ldrh	r3, [r3, #26]
 8008f26:	f043 0302 	orr.w	r3, r3, #2
 8008f2a:	b29a      	uxth	r2, r3
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8008f30:	e7ff      	b.n	8008f32 <tcp_receive+0xf0e>
 8008f32:	bf00      	nop
 8008f34:	3750      	adds	r7, #80	; 0x50
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bdb0      	pop	{r4, r5, r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	20008280 	.word	0x20008280
 8008f40:	20008260 	.word	0x20008260
 8008f44:	2000828a 	.word	0x2000828a
 8008f48:	0800f54c 	.word	0x0800f54c
 8008f4c:	0800f8f4 	.word	0x0800f8f4
 8008f50:	0800f598 	.word	0x0800f598

08008f54 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8008f5a:	4b15      	ldr	r3, [pc, #84]	; (8008fb0 <tcp_get_next_optbyte+0x5c>)
 8008f5c:	881b      	ldrh	r3, [r3, #0]
 8008f5e:	1c5a      	adds	r2, r3, #1
 8008f60:	b291      	uxth	r1, r2
 8008f62:	4a13      	ldr	r2, [pc, #76]	; (8008fb0 <tcp_get_next_optbyte+0x5c>)
 8008f64:	8011      	strh	r1, [r2, #0]
 8008f66:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8008f68:	4b12      	ldr	r3, [pc, #72]	; (8008fb4 <tcp_get_next_optbyte+0x60>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d004      	beq.n	8008f7a <tcp_get_next_optbyte+0x26>
 8008f70:	4b11      	ldr	r3, [pc, #68]	; (8008fb8 <tcp_get_next_optbyte+0x64>)
 8008f72:	881b      	ldrh	r3, [r3, #0]
 8008f74:	88fa      	ldrh	r2, [r7, #6]
 8008f76:	429a      	cmp	r2, r3
 8008f78:	d208      	bcs.n	8008f8c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8008f7a:	4b10      	ldr	r3, [pc, #64]	; (8008fbc <tcp_get_next_optbyte+0x68>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	3314      	adds	r3, #20
 8008f80:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8008f82:	88fb      	ldrh	r3, [r7, #6]
 8008f84:	683a      	ldr	r2, [r7, #0]
 8008f86:	4413      	add	r3, r2
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	e00b      	b.n	8008fa4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8008f8c:	88fb      	ldrh	r3, [r7, #6]
 8008f8e:	b2da      	uxtb	r2, r3
 8008f90:	4b09      	ldr	r3, [pc, #36]	; (8008fb8 <tcp_get_next_optbyte+0x64>)
 8008f92:	881b      	ldrh	r3, [r3, #0]
 8008f94:	b2db      	uxtb	r3, r3
 8008f96:	1ad3      	subs	r3, r2, r3
 8008f98:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8008f9a:	4b06      	ldr	r3, [pc, #24]	; (8008fb4 <tcp_get_next_optbyte+0x60>)
 8008f9c:	681a      	ldr	r2, [r3, #0]
 8008f9e:	797b      	ldrb	r3, [r7, #5]
 8008fa0:	4413      	add	r3, r2
 8008fa2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	370c      	adds	r7, #12
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr
 8008fb0:	2000827c 	.word	0x2000827c
 8008fb4:	20008278 	.word	0x20008278
 8008fb8:	20008276 	.word	0x20008276
 8008fbc:	20008270 	.word	0x20008270

08008fc0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d106      	bne.n	8008fdc <tcp_parseopt+0x1c>
 8008fce:	4b32      	ldr	r3, [pc, #200]	; (8009098 <tcp_parseopt+0xd8>)
 8008fd0:	f240 727d 	movw	r2, #1917	; 0x77d
 8008fd4:	4931      	ldr	r1, [pc, #196]	; (800909c <tcp_parseopt+0xdc>)
 8008fd6:	4832      	ldr	r0, [pc, #200]	; (80090a0 <tcp_parseopt+0xe0>)
 8008fd8:	f004 f942 	bl	800d260 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8008fdc:	4b31      	ldr	r3, [pc, #196]	; (80090a4 <tcp_parseopt+0xe4>)
 8008fde:	881b      	ldrh	r3, [r3, #0]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d055      	beq.n	8009090 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8008fe4:	4b30      	ldr	r3, [pc, #192]	; (80090a8 <tcp_parseopt+0xe8>)
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	801a      	strh	r2, [r3, #0]
 8008fea:	e045      	b.n	8009078 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8008fec:	f7ff ffb2 	bl	8008f54 <tcp_get_next_optbyte>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8008ff4:	7bfb      	ldrb	r3, [r7, #15]
 8008ff6:	2b02      	cmp	r3, #2
 8008ff8:	d006      	beq.n	8009008 <tcp_parseopt+0x48>
 8008ffa:	2b02      	cmp	r3, #2
 8008ffc:	dc2b      	bgt.n	8009056 <tcp_parseopt+0x96>
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d041      	beq.n	8009086 <tcp_parseopt+0xc6>
 8009002:	2b01      	cmp	r3, #1
 8009004:	d127      	bne.n	8009056 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8009006:	e037      	b.n	8009078 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009008:	f7ff ffa4 	bl	8008f54 <tcp_get_next_optbyte>
 800900c:	4603      	mov	r3, r0
 800900e:	2b04      	cmp	r3, #4
 8009010:	d13b      	bne.n	800908a <tcp_parseopt+0xca>
 8009012:	4b25      	ldr	r3, [pc, #148]	; (80090a8 <tcp_parseopt+0xe8>)
 8009014:	881b      	ldrh	r3, [r3, #0]
 8009016:	3301      	adds	r3, #1
 8009018:	4a22      	ldr	r2, [pc, #136]	; (80090a4 <tcp_parseopt+0xe4>)
 800901a:	8812      	ldrh	r2, [r2, #0]
 800901c:	4293      	cmp	r3, r2
 800901e:	da34      	bge.n	800908a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8009020:	f7ff ff98 	bl	8008f54 <tcp_get_next_optbyte>
 8009024:	4603      	mov	r3, r0
 8009026:	b29b      	uxth	r3, r3
 8009028:	021b      	lsls	r3, r3, #8
 800902a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800902c:	f7ff ff92 	bl	8008f54 <tcp_get_next_optbyte>
 8009030:	4603      	mov	r3, r0
 8009032:	b29a      	uxth	r2, r3
 8009034:	89bb      	ldrh	r3, [r7, #12]
 8009036:	4313      	orrs	r3, r2
 8009038:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800903a:	89bb      	ldrh	r3, [r7, #12]
 800903c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009040:	d804      	bhi.n	800904c <tcp_parseopt+0x8c>
 8009042:	89bb      	ldrh	r3, [r7, #12]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d001      	beq.n	800904c <tcp_parseopt+0x8c>
 8009048:	89ba      	ldrh	r2, [r7, #12]
 800904a:	e001      	b.n	8009050 <tcp_parseopt+0x90>
 800904c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8009054:	e010      	b.n	8009078 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8009056:	f7ff ff7d 	bl	8008f54 <tcp_get_next_optbyte>
 800905a:	4603      	mov	r3, r0
 800905c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800905e:	7afb      	ldrb	r3, [r7, #11]
 8009060:	2b01      	cmp	r3, #1
 8009062:	d914      	bls.n	800908e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8009064:	7afb      	ldrb	r3, [r7, #11]
 8009066:	b29a      	uxth	r2, r3
 8009068:	4b0f      	ldr	r3, [pc, #60]	; (80090a8 <tcp_parseopt+0xe8>)
 800906a:	881b      	ldrh	r3, [r3, #0]
 800906c:	4413      	add	r3, r2
 800906e:	b29b      	uxth	r3, r3
 8009070:	3b02      	subs	r3, #2
 8009072:	b29a      	uxth	r2, r3
 8009074:	4b0c      	ldr	r3, [pc, #48]	; (80090a8 <tcp_parseopt+0xe8>)
 8009076:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009078:	4b0b      	ldr	r3, [pc, #44]	; (80090a8 <tcp_parseopt+0xe8>)
 800907a:	881a      	ldrh	r2, [r3, #0]
 800907c:	4b09      	ldr	r3, [pc, #36]	; (80090a4 <tcp_parseopt+0xe4>)
 800907e:	881b      	ldrh	r3, [r3, #0]
 8009080:	429a      	cmp	r2, r3
 8009082:	d3b3      	bcc.n	8008fec <tcp_parseopt+0x2c>
 8009084:	e004      	b.n	8009090 <tcp_parseopt+0xd0>
          return;
 8009086:	bf00      	nop
 8009088:	e002      	b.n	8009090 <tcp_parseopt+0xd0>
            return;
 800908a:	bf00      	nop
 800908c:	e000      	b.n	8009090 <tcp_parseopt+0xd0>
            return;
 800908e:	bf00      	nop
      }
    }
  }
}
 8009090:	3710      	adds	r7, #16
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
 8009096:	bf00      	nop
 8009098:	0800f54c 	.word	0x0800f54c
 800909c:	0800f9b0 	.word	0x0800f9b0
 80090a0:	0800f598 	.word	0x0800f598
 80090a4:	20008274 	.word	0x20008274
 80090a8:	2000827c 	.word	0x2000827c

080090ac <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80090ac:	b480      	push	{r7}
 80090ae:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80090b0:	4b05      	ldr	r3, [pc, #20]	; (80090c8 <tcp_trigger_input_pcb_close+0x1c>)
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	f043 0310 	orr.w	r3, r3, #16
 80090b8:	b2da      	uxtb	r2, r3
 80090ba:	4b03      	ldr	r3, [pc, #12]	; (80090c8 <tcp_trigger_input_pcb_close+0x1c>)
 80090bc:	701a      	strb	r2, [r3, #0]
}
 80090be:	bf00      	nop
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr
 80090c8:	2000828d 	.word	0x2000828d

080090cc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	60f8      	str	r0, [r7, #12]
 80090d4:	60b9      	str	r1, [r7, #8]
 80090d6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d00a      	beq.n	80090f4 <tcp_route+0x28>
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	7a1b      	ldrb	r3, [r3, #8]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d006      	beq.n	80090f4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	7a1b      	ldrb	r3, [r3, #8]
 80090ea:	4618      	mov	r0, r3
 80090ec:	f7fb fb5a 	bl	80047a4 <netif_get_by_index>
 80090f0:	4603      	mov	r3, r0
 80090f2:	e003      	b.n	80090fc <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f002 fe7d 	bl	800bdf4 <ip4_route>
 80090fa:	4603      	mov	r3, r0
  }
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3710      	adds	r7, #16
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8009104:	b590      	push	{r4, r7, lr}
 8009106:	b087      	sub	sp, #28
 8009108:	af00      	add	r7, sp, #0
 800910a:	60f8      	str	r0, [r7, #12]
 800910c:	60b9      	str	r1, [r7, #8]
 800910e:	603b      	str	r3, [r7, #0]
 8009110:	4613      	mov	r3, r2
 8009112:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d105      	bne.n	8009126 <tcp_create_segment+0x22>
 800911a:	4b44      	ldr	r3, [pc, #272]	; (800922c <tcp_create_segment+0x128>)
 800911c:	22a3      	movs	r2, #163	; 0xa3
 800911e:	4944      	ldr	r1, [pc, #272]	; (8009230 <tcp_create_segment+0x12c>)
 8009120:	4844      	ldr	r0, [pc, #272]	; (8009234 <tcp_create_segment+0x130>)
 8009122:	f004 f89d 	bl	800d260 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d105      	bne.n	8009138 <tcp_create_segment+0x34>
 800912c:	4b3f      	ldr	r3, [pc, #252]	; (800922c <tcp_create_segment+0x128>)
 800912e:	22a4      	movs	r2, #164	; 0xa4
 8009130:	4941      	ldr	r1, [pc, #260]	; (8009238 <tcp_create_segment+0x134>)
 8009132:	4840      	ldr	r0, [pc, #256]	; (8009234 <tcp_create_segment+0x130>)
 8009134:	f004 f894 	bl	800d260 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009138:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	b2db      	uxtb	r3, r3
 8009140:	f003 0304 	and.w	r3, r3, #4
 8009144:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8009146:	2003      	movs	r0, #3
 8009148:	f7fa ffa6 	bl	8004098 <memp_malloc>
 800914c:	6138      	str	r0, [r7, #16]
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d104      	bne.n	800915e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8009154:	68b8      	ldr	r0, [r7, #8]
 8009156:	f7fb fe85 	bl	8004e64 <pbuf_free>
    return NULL;
 800915a:	2300      	movs	r3, #0
 800915c:	e061      	b.n	8009222 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8009164:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	2200      	movs	r2, #0
 800916a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	68ba      	ldr	r2, [r7, #8]
 8009170:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	891a      	ldrh	r2, [r3, #8]
 8009176:	7dfb      	ldrb	r3, [r7, #23]
 8009178:	b29b      	uxth	r3, r3
 800917a:	429a      	cmp	r2, r3
 800917c:	d205      	bcs.n	800918a <tcp_create_segment+0x86>
 800917e:	4b2b      	ldr	r3, [pc, #172]	; (800922c <tcp_create_segment+0x128>)
 8009180:	22b0      	movs	r2, #176	; 0xb0
 8009182:	492e      	ldr	r1, [pc, #184]	; (800923c <tcp_create_segment+0x138>)
 8009184:	482b      	ldr	r0, [pc, #172]	; (8009234 <tcp_create_segment+0x130>)
 8009186:	f004 f86b 	bl	800d260 <iprintf>
  seg->len = p->tot_len - optlen;
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	891a      	ldrh	r2, [r3, #8]
 800918e:	7dfb      	ldrb	r3, [r7, #23]
 8009190:	b29b      	uxth	r3, r3
 8009192:	1ad3      	subs	r3, r2, r3
 8009194:	b29a      	uxth	r2, r3
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800919a:	2114      	movs	r1, #20
 800919c:	68b8      	ldr	r0, [r7, #8]
 800919e:	f7fb fdcb 	bl	8004d38 <pbuf_add_header>
 80091a2:	4603      	mov	r3, r0
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d004      	beq.n	80091b2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80091a8:	6938      	ldr	r0, [r7, #16]
 80091aa:	f7fd f8ce 	bl	800634a <tcp_seg_free>
    return NULL;
 80091ae:	2300      	movs	r3, #0
 80091b0:	e037      	b.n	8009222 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	685a      	ldr	r2, [r3, #4]
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	8ada      	ldrh	r2, [r3, #22]
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	68dc      	ldr	r4, [r3, #12]
 80091c4:	4610      	mov	r0, r2
 80091c6:	f7fa faef 	bl	80037a8 <lwip_htons>
 80091ca:	4603      	mov	r3, r0
 80091cc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	8b1a      	ldrh	r2, [r3, #24]
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	68dc      	ldr	r4, [r3, #12]
 80091d6:	4610      	mov	r0, r2
 80091d8:	f7fa fae6 	bl	80037a8 <lwip_htons>
 80091dc:	4603      	mov	r3, r0
 80091de:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	68dc      	ldr	r4, [r3, #12]
 80091e4:	6838      	ldr	r0, [r7, #0]
 80091e6:	f7fa faf4 	bl	80037d2 <lwip_htonl>
 80091ea:	4603      	mov	r3, r0
 80091ec:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80091ee:	7dfb      	ldrb	r3, [r7, #23]
 80091f0:	089b      	lsrs	r3, r3, #2
 80091f2:	b2db      	uxtb	r3, r3
 80091f4:	b29b      	uxth	r3, r3
 80091f6:	3305      	adds	r3, #5
 80091f8:	b29b      	uxth	r3, r3
 80091fa:	031b      	lsls	r3, r3, #12
 80091fc:	b29a      	uxth	r2, r3
 80091fe:	79fb      	ldrb	r3, [r7, #7]
 8009200:	b29b      	uxth	r3, r3
 8009202:	4313      	orrs	r3, r2
 8009204:	b29a      	uxth	r2, r3
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	68dc      	ldr	r4, [r3, #12]
 800920a:	4610      	mov	r0, r2
 800920c:	f7fa facc 	bl	80037a8 <lwip_htons>
 8009210:	4603      	mov	r3, r0
 8009212:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	68db      	ldr	r3, [r3, #12]
 8009218:	2200      	movs	r2, #0
 800921a:	749a      	strb	r2, [r3, #18]
 800921c:	2200      	movs	r2, #0
 800921e:	74da      	strb	r2, [r3, #19]
  return seg;
 8009220:	693b      	ldr	r3, [r7, #16]
}
 8009222:	4618      	mov	r0, r3
 8009224:	371c      	adds	r7, #28
 8009226:	46bd      	mov	sp, r7
 8009228:	bd90      	pop	{r4, r7, pc}
 800922a:	bf00      	nop
 800922c:	0800f9cc 	.word	0x0800f9cc
 8009230:	0800fa00 	.word	0x0800fa00
 8009234:	0800fa20 	.word	0x0800fa20
 8009238:	0800fa48 	.word	0x0800fa48
 800923c:	0800fa6c 	.word	0x0800fa6c

08009240 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8009240:	b590      	push	{r4, r7, lr}
 8009242:	b08b      	sub	sp, #44	; 0x2c
 8009244:	af02      	add	r7, sp, #8
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	460b      	mov	r3, r1
 800924a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800924c:	2300      	movs	r3, #0
 800924e:	61fb      	str	r3, [r7, #28]
 8009250:	2300      	movs	r3, #0
 8009252:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8009254:	2300      	movs	r3, #0
 8009256:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d106      	bne.n	800926c <tcp_split_unsent_seg+0x2c>
 800925e:	4b95      	ldr	r3, [pc, #596]	; (80094b4 <tcp_split_unsent_seg+0x274>)
 8009260:	f240 324b 	movw	r2, #843	; 0x34b
 8009264:	4994      	ldr	r1, [pc, #592]	; (80094b8 <tcp_split_unsent_seg+0x278>)
 8009266:	4895      	ldr	r0, [pc, #596]	; (80094bc <tcp_split_unsent_seg+0x27c>)
 8009268:	f003 fffa 	bl	800d260 <iprintf>

  useg = pcb->unsent;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009270:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d102      	bne.n	800927e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8009278:	f04f 33ff 	mov.w	r3, #4294967295
 800927c:	e116      	b.n	80094ac <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800927e:	887b      	ldrh	r3, [r7, #2]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d109      	bne.n	8009298 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8009284:	4b8b      	ldr	r3, [pc, #556]	; (80094b4 <tcp_split_unsent_seg+0x274>)
 8009286:	f240 3253 	movw	r2, #851	; 0x353
 800928a:	498d      	ldr	r1, [pc, #564]	; (80094c0 <tcp_split_unsent_seg+0x280>)
 800928c:	488b      	ldr	r0, [pc, #556]	; (80094bc <tcp_split_unsent_seg+0x27c>)
 800928e:	f003 ffe7 	bl	800d260 <iprintf>
    return ERR_VAL;
 8009292:	f06f 0305 	mvn.w	r3, #5
 8009296:	e109      	b.n	80094ac <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	891b      	ldrh	r3, [r3, #8]
 800929c:	887a      	ldrh	r2, [r7, #2]
 800929e:	429a      	cmp	r2, r3
 80092a0:	d301      	bcc.n	80092a6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80092a2:	2300      	movs	r3, #0
 80092a4:	e102      	b.n	80094ac <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80092aa:	887a      	ldrh	r2, [r7, #2]
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d906      	bls.n	80092be <tcp_split_unsent_seg+0x7e>
 80092b0:	4b80      	ldr	r3, [pc, #512]	; (80094b4 <tcp_split_unsent_seg+0x274>)
 80092b2:	f240 325b 	movw	r2, #859	; 0x35b
 80092b6:	4983      	ldr	r1, [pc, #524]	; (80094c4 <tcp_split_unsent_seg+0x284>)
 80092b8:	4880      	ldr	r0, [pc, #512]	; (80094bc <tcp_split_unsent_seg+0x27c>)
 80092ba:	f003 ffd1 	bl	800d260 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	891b      	ldrh	r3, [r3, #8]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d106      	bne.n	80092d4 <tcp_split_unsent_seg+0x94>
 80092c6:	4b7b      	ldr	r3, [pc, #492]	; (80094b4 <tcp_split_unsent_seg+0x274>)
 80092c8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80092cc:	497e      	ldr	r1, [pc, #504]	; (80094c8 <tcp_split_unsent_seg+0x288>)
 80092ce:	487b      	ldr	r0, [pc, #492]	; (80094bc <tcp_split_unsent_seg+0x27c>)
 80092d0:	f003 ffc6 	bl	800d260 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	7a9b      	ldrb	r3, [r3, #10]
 80092d8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80092da:	7bfb      	ldrb	r3, [r7, #15]
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	f003 0304 	and.w	r3, r3, #4
 80092e4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	891a      	ldrh	r2, [r3, #8]
 80092ea:	887b      	ldrh	r3, [r7, #2]
 80092ec:	1ad3      	subs	r3, r2, r3
 80092ee:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80092f0:	7bbb      	ldrb	r3, [r7, #14]
 80092f2:	b29a      	uxth	r2, r3
 80092f4:	89bb      	ldrh	r3, [r7, #12]
 80092f6:	4413      	add	r3, r2
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80092fe:	4619      	mov	r1, r3
 8009300:	2036      	movs	r0, #54	; 0x36
 8009302:	f7fb facb 	bl	800489c <pbuf_alloc>
 8009306:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	2b00      	cmp	r3, #0
 800930c:	f000 80b7 	beq.w	800947e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	685b      	ldr	r3, [r3, #4]
 8009314:	891a      	ldrh	r2, [r3, #8]
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	891b      	ldrh	r3, [r3, #8]
 800931a:	1ad3      	subs	r3, r2, r3
 800931c:	b29a      	uxth	r2, r3
 800931e:	887b      	ldrh	r3, [r7, #2]
 8009320:	4413      	add	r3, r2
 8009322:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	6858      	ldr	r0, [r3, #4]
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	685a      	ldr	r2, [r3, #4]
 800932c:	7bbb      	ldrb	r3, [r7, #14]
 800932e:	18d1      	adds	r1, r2, r3
 8009330:	897b      	ldrh	r3, [r7, #10]
 8009332:	89ba      	ldrh	r2, [r7, #12]
 8009334:	f7fb ff80 	bl	8005238 <pbuf_copy_partial>
 8009338:	4603      	mov	r3, r0
 800933a:	461a      	mov	r2, r3
 800933c:	89bb      	ldrh	r3, [r7, #12]
 800933e:	4293      	cmp	r3, r2
 8009340:	f040 809f 	bne.w	8009482 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	68db      	ldr	r3, [r3, #12]
 8009348:	899b      	ldrh	r3, [r3, #12]
 800934a:	b29b      	uxth	r3, r3
 800934c:	4618      	mov	r0, r3
 800934e:	f7fa fa2b 	bl	80037a8 <lwip_htons>
 8009352:	4603      	mov	r3, r0
 8009354:	b2db      	uxtb	r3, r3
 8009356:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800935a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800935c:	2300      	movs	r3, #0
 800935e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8009360:	7efb      	ldrb	r3, [r7, #27]
 8009362:	f003 0308 	and.w	r3, r3, #8
 8009366:	2b00      	cmp	r3, #0
 8009368:	d007      	beq.n	800937a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800936a:	7efb      	ldrb	r3, [r7, #27]
 800936c:	f023 0308 	bic.w	r3, r3, #8
 8009370:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8009372:	7ebb      	ldrb	r3, [r7, #26]
 8009374:	f043 0308 	orr.w	r3, r3, #8
 8009378:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800937a:	7efb      	ldrb	r3, [r7, #27]
 800937c:	f003 0301 	and.w	r3, r3, #1
 8009380:	2b00      	cmp	r3, #0
 8009382:	d007      	beq.n	8009394 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8009384:	7efb      	ldrb	r3, [r7, #27]
 8009386:	f023 0301 	bic.w	r3, r3, #1
 800938a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800938c:	7ebb      	ldrb	r3, [r7, #26]
 800938e:	f043 0301 	orr.w	r3, r3, #1
 8009392:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	4618      	mov	r0, r3
 800939c:	f7fa fa19 	bl	80037d2 <lwip_htonl>
 80093a0:	4602      	mov	r2, r0
 80093a2:	887b      	ldrh	r3, [r7, #2]
 80093a4:	18d1      	adds	r1, r2, r3
 80093a6:	7eba      	ldrb	r2, [r7, #26]
 80093a8:	7bfb      	ldrb	r3, [r7, #15]
 80093aa:	9300      	str	r3, [sp, #0]
 80093ac:	460b      	mov	r3, r1
 80093ae:	6939      	ldr	r1, [r7, #16]
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f7ff fea7 	bl	8009104 <tcp_create_segment>
 80093b6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80093b8:	69fb      	ldr	r3, [r7, #28]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d063      	beq.n	8009486 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	4618      	mov	r0, r3
 80093c4:	f7fb fdd6 	bl	8004f74 <pbuf_clen>
 80093c8:	4603      	mov	r3, r0
 80093ca:	461a      	mov	r2, r3
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80093d2:	1a9b      	subs	r3, r3, r2
 80093d4:	b29a      	uxth	r2, r3
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	6858      	ldr	r0, [r3, #4]
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	685b      	ldr	r3, [r3, #4]
 80093e4:	891a      	ldrh	r2, [r3, #8]
 80093e6:	89bb      	ldrh	r3, [r7, #12]
 80093e8:	1ad3      	subs	r3, r2, r3
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	4619      	mov	r1, r3
 80093ee:	f7fb fbb3 	bl	8004b58 <pbuf_realloc>
  useg->len -= remainder;
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	891a      	ldrh	r2, [r3, #8]
 80093f6:	89bb      	ldrh	r3, [r7, #12]
 80093f8:	1ad3      	subs	r3, r2, r3
 80093fa:	b29a      	uxth	r2, r3
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	899b      	ldrh	r3, [r3, #12]
 8009406:	b29c      	uxth	r4, r3
 8009408:	7efb      	ldrb	r3, [r7, #27]
 800940a:	b29b      	uxth	r3, r3
 800940c:	4618      	mov	r0, r3
 800940e:	f7fa f9cb 	bl	80037a8 <lwip_htons>
 8009412:	4603      	mov	r3, r0
 8009414:	461a      	mov	r2, r3
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	68db      	ldr	r3, [r3, #12]
 800941a:	4322      	orrs	r2, r4
 800941c:	b292      	uxth	r2, r2
 800941e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	4618      	mov	r0, r3
 8009426:	f7fb fda5 	bl	8004f74 <pbuf_clen>
 800942a:	4603      	mov	r3, r0
 800942c:	461a      	mov	r2, r3
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009434:	4413      	add	r3, r2
 8009436:	b29a      	uxth	r2, r3
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800943e:	69fb      	ldr	r3, [r7, #28]
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	4618      	mov	r0, r3
 8009444:	f7fb fd96 	bl	8004f74 <pbuf_clen>
 8009448:	4603      	mov	r3, r0
 800944a:	461a      	mov	r2, r3
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009452:	4413      	add	r3, r2
 8009454:	b29a      	uxth	r2, r3
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	681a      	ldr	r2, [r3, #0]
 8009460:	69fb      	ldr	r3, [r7, #28]
 8009462:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	69fa      	ldr	r2, [r7, #28]
 8009468:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800946a:	69fb      	ldr	r3, [r7, #28]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d103      	bne.n	800947a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2200      	movs	r2, #0
 8009476:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800947a:	2300      	movs	r3, #0
 800947c:	e016      	b.n	80094ac <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800947e:	bf00      	nop
 8009480:	e002      	b.n	8009488 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8009482:	bf00      	nop
 8009484:	e000      	b.n	8009488 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8009486:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8009488:	69fb      	ldr	r3, [r7, #28]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d006      	beq.n	800949c <tcp_split_unsent_seg+0x25c>
 800948e:	4b09      	ldr	r3, [pc, #36]	; (80094b4 <tcp_split_unsent_seg+0x274>)
 8009490:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8009494:	490d      	ldr	r1, [pc, #52]	; (80094cc <tcp_split_unsent_seg+0x28c>)
 8009496:	4809      	ldr	r0, [pc, #36]	; (80094bc <tcp_split_unsent_seg+0x27c>)
 8009498:	f003 fee2 	bl	800d260 <iprintf>
  if (p != NULL) {
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d002      	beq.n	80094a8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80094a2:	6938      	ldr	r0, [r7, #16]
 80094a4:	f7fb fcde 	bl	8004e64 <pbuf_free>
  }

  return ERR_MEM;
 80094a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3724      	adds	r7, #36	; 0x24
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd90      	pop	{r4, r7, pc}
 80094b4:	0800f9cc 	.word	0x0800f9cc
 80094b8:	0800fd60 	.word	0x0800fd60
 80094bc:	0800fa20 	.word	0x0800fa20
 80094c0:	0800fd84 	.word	0x0800fd84
 80094c4:	0800fda8 	.word	0x0800fda8
 80094c8:	0800fdb8 	.word	0x0800fdb8
 80094cc:	0800fdc8 	.word	0x0800fdc8

080094d0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80094d0:	b590      	push	{r4, r7, lr}
 80094d2:	b085      	sub	sp, #20
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d106      	bne.n	80094ec <tcp_send_fin+0x1c>
 80094de:	4b21      	ldr	r3, [pc, #132]	; (8009564 <tcp_send_fin+0x94>)
 80094e0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80094e4:	4920      	ldr	r1, [pc, #128]	; (8009568 <tcp_send_fin+0x98>)
 80094e6:	4821      	ldr	r0, [pc, #132]	; (800956c <tcp_send_fin+0x9c>)
 80094e8:	f003 feba 	bl	800d260 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d02e      	beq.n	8009552 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094f8:	60fb      	str	r3, [r7, #12]
 80094fa:	e002      	b.n	8009502 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d1f8      	bne.n	80094fc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	68db      	ldr	r3, [r3, #12]
 800950e:	899b      	ldrh	r3, [r3, #12]
 8009510:	b29b      	uxth	r3, r3
 8009512:	4618      	mov	r0, r3
 8009514:	f7fa f948 	bl	80037a8 <lwip_htons>
 8009518:	4603      	mov	r3, r0
 800951a:	b2db      	uxtb	r3, r3
 800951c:	f003 0307 	and.w	r3, r3, #7
 8009520:	2b00      	cmp	r3, #0
 8009522:	d116      	bne.n	8009552 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	68db      	ldr	r3, [r3, #12]
 8009528:	899b      	ldrh	r3, [r3, #12]
 800952a:	b29c      	uxth	r4, r3
 800952c:	2001      	movs	r0, #1
 800952e:	f7fa f93b 	bl	80037a8 <lwip_htons>
 8009532:	4603      	mov	r3, r0
 8009534:	461a      	mov	r2, r3
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	68db      	ldr	r3, [r3, #12]
 800953a:	4322      	orrs	r2, r4
 800953c:	b292      	uxth	r2, r2
 800953e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	8b5b      	ldrh	r3, [r3, #26]
 8009544:	f043 0320 	orr.w	r3, r3, #32
 8009548:	b29a      	uxth	r2, r3
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800954e:	2300      	movs	r3, #0
 8009550:	e004      	b.n	800955c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8009552:	2101      	movs	r1, #1
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f000 f80b 	bl	8009570 <tcp_enqueue_flags>
 800955a:	4603      	mov	r3, r0
}
 800955c:	4618      	mov	r0, r3
 800955e:	3714      	adds	r7, #20
 8009560:	46bd      	mov	sp, r7
 8009562:	bd90      	pop	{r4, r7, pc}
 8009564:	0800f9cc 	.word	0x0800f9cc
 8009568:	0800fdd4 	.word	0x0800fdd4
 800956c:	0800fa20 	.word	0x0800fa20

08009570 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b08a      	sub	sp, #40	; 0x28
 8009574:	af02      	add	r7, sp, #8
 8009576:	6078      	str	r0, [r7, #4]
 8009578:	460b      	mov	r3, r1
 800957a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800957c:	2300      	movs	r3, #0
 800957e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8009580:	2300      	movs	r3, #0
 8009582:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8009584:	78fb      	ldrb	r3, [r7, #3]
 8009586:	f003 0303 	and.w	r3, r3, #3
 800958a:	2b00      	cmp	r3, #0
 800958c:	d106      	bne.n	800959c <tcp_enqueue_flags+0x2c>
 800958e:	4b67      	ldr	r3, [pc, #412]	; (800972c <tcp_enqueue_flags+0x1bc>)
 8009590:	f240 4211 	movw	r2, #1041	; 0x411
 8009594:	4966      	ldr	r1, [pc, #408]	; (8009730 <tcp_enqueue_flags+0x1c0>)
 8009596:	4867      	ldr	r0, [pc, #412]	; (8009734 <tcp_enqueue_flags+0x1c4>)
 8009598:	f003 fe62 	bl	800d260 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d106      	bne.n	80095b0 <tcp_enqueue_flags+0x40>
 80095a2:	4b62      	ldr	r3, [pc, #392]	; (800972c <tcp_enqueue_flags+0x1bc>)
 80095a4:	f240 4213 	movw	r2, #1043	; 0x413
 80095a8:	4963      	ldr	r1, [pc, #396]	; (8009738 <tcp_enqueue_flags+0x1c8>)
 80095aa:	4862      	ldr	r0, [pc, #392]	; (8009734 <tcp_enqueue_flags+0x1c4>)
 80095ac:	f003 fe58 	bl	800d260 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80095b0:	78fb      	ldrb	r3, [r7, #3]
 80095b2:	f003 0302 	and.w	r3, r3, #2
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d001      	beq.n	80095be <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80095ba:	2301      	movs	r3, #1
 80095bc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80095be:	7ffb      	ldrb	r3, [r7, #31]
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	b2db      	uxtb	r3, r3
 80095c4:	f003 0304 	and.w	r3, r3, #4
 80095c8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80095ca:	7dfb      	ldrb	r3, [r7, #23]
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	f44f 7220 	mov.w	r2, #640	; 0x280
 80095d2:	4619      	mov	r1, r3
 80095d4:	2036      	movs	r0, #54	; 0x36
 80095d6:	f7fb f961 	bl	800489c <pbuf_alloc>
 80095da:	6138      	str	r0, [r7, #16]
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d109      	bne.n	80095f6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	8b5b      	ldrh	r3, [r3, #26]
 80095e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095ea:	b29a      	uxth	r2, r3
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80095f0:	f04f 33ff 	mov.w	r3, #4294967295
 80095f4:	e095      	b.n	8009722 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	895a      	ldrh	r2, [r3, #10]
 80095fa:	7dfb      	ldrb	r3, [r7, #23]
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	429a      	cmp	r2, r3
 8009600:	d206      	bcs.n	8009610 <tcp_enqueue_flags+0xa0>
 8009602:	4b4a      	ldr	r3, [pc, #296]	; (800972c <tcp_enqueue_flags+0x1bc>)
 8009604:	f240 4239 	movw	r2, #1081	; 0x439
 8009608:	494c      	ldr	r1, [pc, #304]	; (800973c <tcp_enqueue_flags+0x1cc>)
 800960a:	484a      	ldr	r0, [pc, #296]	; (8009734 <tcp_enqueue_flags+0x1c4>)
 800960c:	f003 fe28 	bl	800d260 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8009614:	78fa      	ldrb	r2, [r7, #3]
 8009616:	7ffb      	ldrb	r3, [r7, #31]
 8009618:	9300      	str	r3, [sp, #0]
 800961a:	460b      	mov	r3, r1
 800961c:	6939      	ldr	r1, [r7, #16]
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f7ff fd70 	bl	8009104 <tcp_create_segment>
 8009624:	60f8      	str	r0, [r7, #12]
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d109      	bne.n	8009640 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	8b5b      	ldrh	r3, [r3, #26]
 8009630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009634:	b29a      	uxth	r2, r3
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800963a:	f04f 33ff 	mov.w	r3, #4294967295
 800963e:	e070      	b.n	8009722 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	68db      	ldr	r3, [r3, #12]
 8009644:	f003 0303 	and.w	r3, r3, #3
 8009648:	2b00      	cmp	r3, #0
 800964a:	d006      	beq.n	800965a <tcp_enqueue_flags+0xea>
 800964c:	4b37      	ldr	r3, [pc, #220]	; (800972c <tcp_enqueue_flags+0x1bc>)
 800964e:	f240 4242 	movw	r2, #1090	; 0x442
 8009652:	493b      	ldr	r1, [pc, #236]	; (8009740 <tcp_enqueue_flags+0x1d0>)
 8009654:	4837      	ldr	r0, [pc, #220]	; (8009734 <tcp_enqueue_flags+0x1c4>)
 8009656:	f003 fe03 	bl	800d260 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	891b      	ldrh	r3, [r3, #8]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d006      	beq.n	8009670 <tcp_enqueue_flags+0x100>
 8009662:	4b32      	ldr	r3, [pc, #200]	; (800972c <tcp_enqueue_flags+0x1bc>)
 8009664:	f240 4243 	movw	r2, #1091	; 0x443
 8009668:	4936      	ldr	r1, [pc, #216]	; (8009744 <tcp_enqueue_flags+0x1d4>)
 800966a:	4832      	ldr	r0, [pc, #200]	; (8009734 <tcp_enqueue_flags+0x1c4>)
 800966c:	f003 fdf8 	bl	800d260 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009674:	2b00      	cmp	r3, #0
 8009676:	d103      	bne.n	8009680 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	68fa      	ldr	r2, [r7, #12]
 800967c:	66da      	str	r2, [r3, #108]	; 0x6c
 800967e:	e00d      	b.n	800969c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009684:	61bb      	str	r3, [r7, #24]
 8009686:	e002      	b.n	800968e <tcp_enqueue_flags+0x11e>
 8009688:	69bb      	ldr	r3, [r7, #24]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	61bb      	str	r3, [r7, #24]
 800968e:	69bb      	ldr	r3, [r7, #24]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d1f8      	bne.n	8009688 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8009696:	69bb      	ldr	r3, [r7, #24]
 8009698:	68fa      	ldr	r2, [r7, #12]
 800969a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2200      	movs	r2, #0
 80096a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80096a4:	78fb      	ldrb	r3, [r7, #3]
 80096a6:	f003 0302 	and.w	r3, r3, #2
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d104      	bne.n	80096b8 <tcp_enqueue_flags+0x148>
 80096ae:	78fb      	ldrb	r3, [r7, #3]
 80096b0:	f003 0301 	and.w	r3, r3, #1
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d004      	beq.n	80096c2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096bc:	1c5a      	adds	r2, r3, #1
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80096c2:	78fb      	ldrb	r3, [r7, #3]
 80096c4:	f003 0301 	and.w	r3, r3, #1
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d006      	beq.n	80096da <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	8b5b      	ldrh	r3, [r3, #26]
 80096d0:	f043 0320 	orr.w	r3, r3, #32
 80096d4:	b29a      	uxth	r2, r3
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	4618      	mov	r0, r3
 80096e0:	f7fb fc48 	bl	8004f74 <pbuf_clen>
 80096e4:	4603      	mov	r3, r0
 80096e6:	461a      	mov	r2, r3
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80096ee:	4413      	add	r3, r2
 80096f0:	b29a      	uxth	r2, r3
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d00e      	beq.n	8009720 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009706:	2b00      	cmp	r3, #0
 8009708:	d10a      	bne.n	8009720 <tcp_enqueue_flags+0x1b0>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800970e:	2b00      	cmp	r3, #0
 8009710:	d106      	bne.n	8009720 <tcp_enqueue_flags+0x1b0>
 8009712:	4b06      	ldr	r3, [pc, #24]	; (800972c <tcp_enqueue_flags+0x1bc>)
 8009714:	f240 4265 	movw	r2, #1125	; 0x465
 8009718:	490b      	ldr	r1, [pc, #44]	; (8009748 <tcp_enqueue_flags+0x1d8>)
 800971a:	4806      	ldr	r0, [pc, #24]	; (8009734 <tcp_enqueue_flags+0x1c4>)
 800971c:	f003 fda0 	bl	800d260 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8009720:	2300      	movs	r3, #0
}
 8009722:	4618      	mov	r0, r3
 8009724:	3720      	adds	r7, #32
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}
 800972a:	bf00      	nop
 800972c:	0800f9cc 	.word	0x0800f9cc
 8009730:	0800fdf0 	.word	0x0800fdf0
 8009734:	0800fa20 	.word	0x0800fa20
 8009738:	0800fe48 	.word	0x0800fe48
 800973c:	0800fe68 	.word	0x0800fe68
 8009740:	0800fea4 	.word	0x0800fea4
 8009744:	0800febc 	.word	0x0800febc
 8009748:	0800fee8 	.word	0x0800fee8

0800974c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800974c:	b5b0      	push	{r4, r5, r7, lr}
 800974e:	b08a      	sub	sp, #40	; 0x28
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d106      	bne.n	8009768 <tcp_output+0x1c>
 800975a:	4b8a      	ldr	r3, [pc, #552]	; (8009984 <tcp_output+0x238>)
 800975c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8009760:	4989      	ldr	r1, [pc, #548]	; (8009988 <tcp_output+0x23c>)
 8009762:	488a      	ldr	r0, [pc, #552]	; (800998c <tcp_output+0x240>)
 8009764:	f003 fd7c 	bl	800d260 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	7d1b      	ldrb	r3, [r3, #20]
 800976c:	2b01      	cmp	r3, #1
 800976e:	d106      	bne.n	800977e <tcp_output+0x32>
 8009770:	4b84      	ldr	r3, [pc, #528]	; (8009984 <tcp_output+0x238>)
 8009772:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8009776:	4986      	ldr	r1, [pc, #536]	; (8009990 <tcp_output+0x244>)
 8009778:	4884      	ldr	r0, [pc, #528]	; (800998c <tcp_output+0x240>)
 800977a:	f003 fd71 	bl	800d260 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800977e:	4b85      	ldr	r3, [pc, #532]	; (8009994 <tcp_output+0x248>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	687a      	ldr	r2, [r7, #4]
 8009784:	429a      	cmp	r2, r3
 8009786:	d101      	bne.n	800978c <tcp_output+0x40>
    return ERR_OK;
 8009788:	2300      	movs	r3, #0
 800978a:	e1ce      	b.n	8009b2a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009798:	4293      	cmp	r3, r2
 800979a:	bf28      	it	cs
 800979c:	4613      	movcs	r3, r2
 800979e:	b29b      	uxth	r3, r3
 80097a0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097a6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80097a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d10b      	bne.n	80097c6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	8b5b      	ldrh	r3, [r3, #26]
 80097b2:	f003 0302 	and.w	r3, r3, #2
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	f000 81aa 	beq.w	8009b10 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f000 fdcb 	bl	800a358 <tcp_send_empty_ack>
 80097c2:	4603      	mov	r3, r0
 80097c4:	e1b1      	b.n	8009b2a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80097c6:	6879      	ldr	r1, [r7, #4]
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	3304      	adds	r3, #4
 80097cc:	461a      	mov	r2, r3
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f7ff fc7c 	bl	80090cc <tcp_route>
 80097d4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d102      	bne.n	80097e2 <tcp_output+0x96>
    return ERR_RTE;
 80097dc:	f06f 0303 	mvn.w	r3, #3
 80097e0:	e1a3      	b.n	8009b2a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d003      	beq.n	80097f0 <tcp_output+0xa4>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d111      	bne.n	8009814 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d002      	beq.n	80097fc <tcp_output+0xb0>
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	3304      	adds	r3, #4
 80097fa:	e000      	b.n	80097fe <tcp_output+0xb2>
 80097fc:	2300      	movs	r3, #0
 80097fe:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d102      	bne.n	800980c <tcp_output+0xc0>
      return ERR_RTE;
 8009806:	f06f 0303 	mvn.w	r3, #3
 800980a:	e18e      	b.n	8009b2a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	681a      	ldr	r2, [r3, #0]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8009814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	4618      	mov	r0, r3
 800981c:	f7f9 ffd9 	bl	80037d2 <lwip_htonl>
 8009820:	4602      	mov	r2, r0
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009826:	1ad3      	subs	r3, r2, r3
 8009828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800982a:	8912      	ldrh	r2, [r2, #8]
 800982c:	4413      	add	r3, r2
 800982e:	69ba      	ldr	r2, [r7, #24]
 8009830:	429a      	cmp	r2, r3
 8009832:	d227      	bcs.n	8009884 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800983a:	461a      	mov	r2, r3
 800983c:	69bb      	ldr	r3, [r7, #24]
 800983e:	4293      	cmp	r3, r2
 8009840:	d114      	bne.n	800986c <tcp_output+0x120>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009846:	2b00      	cmp	r3, #0
 8009848:	d110      	bne.n	800986c <tcp_output+0x120>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009850:	2b00      	cmp	r3, #0
 8009852:	d10b      	bne.n	800986c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2200      	movs	r2, #0
 8009858:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2201      	movs	r2, #1
 8009860:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2200      	movs	r2, #0
 8009868:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	8b5b      	ldrh	r3, [r3, #26]
 8009870:	f003 0302 	and.w	r3, r3, #2
 8009874:	2b00      	cmp	r3, #0
 8009876:	f000 814d 	beq.w	8009b14 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 fd6c 	bl	800a358 <tcp_send_empty_ack>
 8009880:	4603      	mov	r3, r0
 8009882:	e152      	b.n	8009b2a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2200      	movs	r2, #0
 8009888:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009890:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8009892:	6a3b      	ldr	r3, [r7, #32]
 8009894:	2b00      	cmp	r3, #0
 8009896:	f000 811c 	beq.w	8009ad2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800989a:	e002      	b.n	80098a2 <tcp_output+0x156>
 800989c:	6a3b      	ldr	r3, [r7, #32]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	623b      	str	r3, [r7, #32]
 80098a2:	6a3b      	ldr	r3, [r7, #32]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d1f8      	bne.n	800989c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80098aa:	e112      	b.n	8009ad2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80098ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ae:	68db      	ldr	r3, [r3, #12]
 80098b0:	899b      	ldrh	r3, [r3, #12]
 80098b2:	b29b      	uxth	r3, r3
 80098b4:	4618      	mov	r0, r3
 80098b6:	f7f9 ff77 	bl	80037a8 <lwip_htons>
 80098ba:	4603      	mov	r3, r0
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	f003 0304 	and.w	r3, r3, #4
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d006      	beq.n	80098d4 <tcp_output+0x188>
 80098c6:	4b2f      	ldr	r3, [pc, #188]	; (8009984 <tcp_output+0x238>)
 80098c8:	f240 5236 	movw	r2, #1334	; 0x536
 80098cc:	4932      	ldr	r1, [pc, #200]	; (8009998 <tcp_output+0x24c>)
 80098ce:	482f      	ldr	r0, [pc, #188]	; (800998c <tcp_output+0x240>)
 80098d0:	f003 fcc6 	bl	800d260 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d01f      	beq.n	800991c <tcp_output+0x1d0>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	8b5b      	ldrh	r3, [r3, #26]
 80098e0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d119      	bne.n	800991c <tcp_output+0x1d0>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d00b      	beq.n	8009908 <tcp_output+0x1bc>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d110      	bne.n	800991c <tcp_output+0x1d0>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098fe:	891a      	ldrh	r2, [r3, #8]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009904:	429a      	cmp	r2, r3
 8009906:	d209      	bcs.n	800991c <tcp_output+0x1d0>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800990e:	2b00      	cmp	r3, #0
 8009910:	d004      	beq.n	800991c <tcp_output+0x1d0>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009918:	2b08      	cmp	r3, #8
 800991a:	d901      	bls.n	8009920 <tcp_output+0x1d4>
 800991c:	2301      	movs	r3, #1
 800991e:	e000      	b.n	8009922 <tcp_output+0x1d6>
 8009920:	2300      	movs	r3, #0
 8009922:	2b00      	cmp	r3, #0
 8009924:	d106      	bne.n	8009934 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	8b5b      	ldrh	r3, [r3, #26]
 800992a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800992e:	2b00      	cmp	r3, #0
 8009930:	f000 80e4 	beq.w	8009afc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	7d1b      	ldrb	r3, [r3, #20]
 8009938:	2b02      	cmp	r3, #2
 800993a:	d00d      	beq.n	8009958 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800993c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800993e:	68db      	ldr	r3, [r3, #12]
 8009940:	899b      	ldrh	r3, [r3, #12]
 8009942:	b29c      	uxth	r4, r3
 8009944:	2010      	movs	r0, #16
 8009946:	f7f9 ff2f 	bl	80037a8 <lwip_htons>
 800994a:	4603      	mov	r3, r0
 800994c:	461a      	mov	r2, r3
 800994e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009950:	68db      	ldr	r3, [r3, #12]
 8009952:	4322      	orrs	r2, r4
 8009954:	b292      	uxth	r2, r2
 8009956:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8009958:	697a      	ldr	r2, [r7, #20]
 800995a:	6879      	ldr	r1, [r7, #4]
 800995c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800995e:	f000 f909 	bl	8009b74 <tcp_output_segment>
 8009962:	4603      	mov	r3, r0
 8009964:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8009966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d016      	beq.n	800999c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	8b5b      	ldrh	r3, [r3, #26]
 8009972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009976:	b29a      	uxth	r2, r3
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	835a      	strh	r2, [r3, #26]
      return err;
 800997c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009980:	e0d3      	b.n	8009b2a <tcp_output+0x3de>
 8009982:	bf00      	nop
 8009984:	0800f9cc 	.word	0x0800f9cc
 8009988:	0800ff10 	.word	0x0800ff10
 800998c:	0800fa20 	.word	0x0800fa20
 8009990:	0800ff28 	.word	0x0800ff28
 8009994:	20008294 	.word	0x20008294
 8009998:	0800ff50 	.word	0x0800ff50
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800999c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999e:	681a      	ldr	r2, [r3, #0]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	7d1b      	ldrb	r3, [r3, #20]
 80099a8:	2b02      	cmp	r3, #2
 80099aa:	d006      	beq.n	80099ba <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	8b5b      	ldrh	r3, [r3, #26]
 80099b0:	f023 0303 	bic.w	r3, r3, #3
 80099b4:	b29a      	uxth	r2, r3
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80099ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099bc:	68db      	ldr	r3, [r3, #12]
 80099be:	685b      	ldr	r3, [r3, #4]
 80099c0:	4618      	mov	r0, r3
 80099c2:	f7f9 ff06 	bl	80037d2 <lwip_htonl>
 80099c6:	4604      	mov	r4, r0
 80099c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ca:	891b      	ldrh	r3, [r3, #8]
 80099cc:	461d      	mov	r5, r3
 80099ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d0:	68db      	ldr	r3, [r3, #12]
 80099d2:	899b      	ldrh	r3, [r3, #12]
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	4618      	mov	r0, r3
 80099d8:	f7f9 fee6 	bl	80037a8 <lwip_htons>
 80099dc:	4603      	mov	r3, r0
 80099de:	b2db      	uxtb	r3, r3
 80099e0:	f003 0303 	and.w	r3, r3, #3
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d001      	beq.n	80099ec <tcp_output+0x2a0>
 80099e8:	2301      	movs	r3, #1
 80099ea:	e000      	b.n	80099ee <tcp_output+0x2a2>
 80099ec:	2300      	movs	r3, #0
 80099ee:	442b      	add	r3, r5
 80099f0:	4423      	add	r3, r4
 80099f2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	1ad3      	subs	r3, r2, r3
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	da02      	bge.n	8009a06 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	68ba      	ldr	r2, [r7, #8]
 8009a04:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8009a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a08:	891b      	ldrh	r3, [r3, #8]
 8009a0a:	461c      	mov	r4, r3
 8009a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a0e:	68db      	ldr	r3, [r3, #12]
 8009a10:	899b      	ldrh	r3, [r3, #12]
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	4618      	mov	r0, r3
 8009a16:	f7f9 fec7 	bl	80037a8 <lwip_htons>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	f003 0303 	and.w	r3, r3, #3
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d001      	beq.n	8009a2a <tcp_output+0x2de>
 8009a26:	2301      	movs	r3, #1
 8009a28:	e000      	b.n	8009a2c <tcp_output+0x2e0>
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	4423      	add	r3, r4
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d049      	beq.n	8009ac6 <tcp_output+0x37a>
      seg->next = NULL;
 8009a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a34:	2200      	movs	r2, #0
 8009a36:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d105      	bne.n	8009a4c <tcp_output+0x300>
        pcb->unacked = seg;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a44:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8009a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a48:	623b      	str	r3, [r7, #32]
 8009a4a:	e03f      	b.n	8009acc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8009a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	685b      	ldr	r3, [r3, #4]
 8009a52:	4618      	mov	r0, r3
 8009a54:	f7f9 febd 	bl	80037d2 <lwip_htonl>
 8009a58:	4604      	mov	r4, r0
 8009a5a:	6a3b      	ldr	r3, [r7, #32]
 8009a5c:	68db      	ldr	r3, [r3, #12]
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	4618      	mov	r0, r3
 8009a62:	f7f9 feb6 	bl	80037d2 <lwip_htonl>
 8009a66:	4603      	mov	r3, r0
 8009a68:	1ae3      	subs	r3, r4, r3
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	da24      	bge.n	8009ab8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	3370      	adds	r3, #112	; 0x70
 8009a72:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8009a74:	e002      	b.n	8009a7c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8009a76:	69fb      	ldr	r3, [r7, #28]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8009a7c:	69fb      	ldr	r3, [r7, #28]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d011      	beq.n	8009aa8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8009a84:	69fb      	ldr	r3, [r7, #28]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	68db      	ldr	r3, [r3, #12]
 8009a8a:	685b      	ldr	r3, [r3, #4]
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f7f9 fea0 	bl	80037d2 <lwip_htonl>
 8009a92:	4604      	mov	r4, r0
 8009a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a96:	68db      	ldr	r3, [r3, #12]
 8009a98:	685b      	ldr	r3, [r3, #4]
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7f9 fe99 	bl	80037d2 <lwip_htonl>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	dbe6      	blt.n	8009a76 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8009aa8:	69fb      	ldr	r3, [r7, #28]
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aae:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8009ab0:	69fb      	ldr	r3, [r7, #28]
 8009ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ab4:	601a      	str	r2, [r3, #0]
 8009ab6:	e009      	b.n	8009acc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8009ab8:	6a3b      	ldr	r3, [r7, #32]
 8009aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009abc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8009abe:	6a3b      	ldr	r3, [r7, #32]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	623b      	str	r3, [r7, #32]
 8009ac4:	e002      	b.n	8009acc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8009ac6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009ac8:	f7fc fc3f 	bl	800634a <tcp_seg_free>
    }
    seg = pcb->unsent;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ad0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8009ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d012      	beq.n	8009afe <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8009ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ada:	68db      	ldr	r3, [r3, #12]
 8009adc:	685b      	ldr	r3, [r3, #4]
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f7f9 fe77 	bl	80037d2 <lwip_htonl>
 8009ae4:	4602      	mov	r2, r0
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aea:	1ad3      	subs	r3, r2, r3
 8009aec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009aee:	8912      	ldrh	r2, [r2, #8]
 8009af0:	4413      	add	r3, r2
  while (seg != NULL &&
 8009af2:	69ba      	ldr	r2, [r7, #24]
 8009af4:	429a      	cmp	r2, r3
 8009af6:	f4bf aed9 	bcs.w	80098ac <tcp_output+0x160>
 8009afa:	e000      	b.n	8009afe <tcp_output+0x3b2>
      break;
 8009afc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d108      	bne.n	8009b18 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8009b0e:	e004      	b.n	8009b1a <tcp_output+0x3ce>
    goto output_done;
 8009b10:	bf00      	nop
 8009b12:	e002      	b.n	8009b1a <tcp_output+0x3ce>
    goto output_done;
 8009b14:	bf00      	nop
 8009b16:	e000      	b.n	8009b1a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8009b18:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	8b5b      	ldrh	r3, [r3, #26]
 8009b1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b22:	b29a      	uxth	r2, r3
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8009b28:	2300      	movs	r3, #0
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3728      	adds	r7, #40	; 0x28
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bdb0      	pop	{r4, r5, r7, pc}
 8009b32:	bf00      	nop

08009b34 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b082      	sub	sp, #8
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d106      	bne.n	8009b50 <tcp_output_segment_busy+0x1c>
 8009b42:	4b09      	ldr	r3, [pc, #36]	; (8009b68 <tcp_output_segment_busy+0x34>)
 8009b44:	f240 529a 	movw	r2, #1434	; 0x59a
 8009b48:	4908      	ldr	r1, [pc, #32]	; (8009b6c <tcp_output_segment_busy+0x38>)
 8009b4a:	4809      	ldr	r0, [pc, #36]	; (8009b70 <tcp_output_segment_busy+0x3c>)
 8009b4c:	f003 fb88 	bl	800d260 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	685b      	ldr	r3, [r3, #4]
 8009b54:	7b9b      	ldrb	r3, [r3, #14]
 8009b56:	2b01      	cmp	r3, #1
 8009b58:	d001      	beq.n	8009b5e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	e000      	b.n	8009b60 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8009b5e:	2300      	movs	r3, #0
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3708      	adds	r7, #8
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}
 8009b68:	0800f9cc 	.word	0x0800f9cc
 8009b6c:	0800ff68 	.word	0x0800ff68
 8009b70:	0800fa20 	.word	0x0800fa20

08009b74 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8009b74:	b5b0      	push	{r4, r5, r7, lr}
 8009b76:	b08c      	sub	sp, #48	; 0x30
 8009b78:	af04      	add	r7, sp, #16
 8009b7a:	60f8      	str	r0, [r7, #12]
 8009b7c:	60b9      	str	r1, [r7, #8]
 8009b7e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d106      	bne.n	8009b94 <tcp_output_segment+0x20>
 8009b86:	4b63      	ldr	r3, [pc, #396]	; (8009d14 <tcp_output_segment+0x1a0>)
 8009b88:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8009b8c:	4962      	ldr	r1, [pc, #392]	; (8009d18 <tcp_output_segment+0x1a4>)
 8009b8e:	4863      	ldr	r0, [pc, #396]	; (8009d1c <tcp_output_segment+0x1a8>)
 8009b90:	f003 fb66 	bl	800d260 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d106      	bne.n	8009ba8 <tcp_output_segment+0x34>
 8009b9a:	4b5e      	ldr	r3, [pc, #376]	; (8009d14 <tcp_output_segment+0x1a0>)
 8009b9c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8009ba0:	495f      	ldr	r1, [pc, #380]	; (8009d20 <tcp_output_segment+0x1ac>)
 8009ba2:	485e      	ldr	r0, [pc, #376]	; (8009d1c <tcp_output_segment+0x1a8>)
 8009ba4:	f003 fb5c 	bl	800d260 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d106      	bne.n	8009bbc <tcp_output_segment+0x48>
 8009bae:	4b59      	ldr	r3, [pc, #356]	; (8009d14 <tcp_output_segment+0x1a0>)
 8009bb0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8009bb4:	495b      	ldr	r1, [pc, #364]	; (8009d24 <tcp_output_segment+0x1b0>)
 8009bb6:	4859      	ldr	r0, [pc, #356]	; (8009d1c <tcp_output_segment+0x1a8>)
 8009bb8:	f003 fb52 	bl	800d260 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8009bbc:	68f8      	ldr	r0, [r7, #12]
 8009bbe:	f7ff ffb9 	bl	8009b34 <tcp_output_segment_busy>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d001      	beq.n	8009bcc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	e09f      	b.n	8009d0c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	68dc      	ldr	r4, [r3, #12]
 8009bd4:	4610      	mov	r0, r2
 8009bd6:	f7f9 fdfc 	bl	80037d2 <lwip_htonl>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	68dc      	ldr	r4, [r3, #12]
 8009be6:	4610      	mov	r0, r2
 8009be8:	f7f9 fdde 	bl	80037a8 <lwip_htons>
 8009bec:	4603      	mov	r3, r0
 8009bee:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf4:	68ba      	ldr	r2, [r7, #8]
 8009bf6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8009bf8:	441a      	add	r2, r3
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	68db      	ldr	r3, [r3, #12]
 8009c02:	3314      	adds	r3, #20
 8009c04:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	7a9b      	ldrb	r3, [r3, #10]
 8009c0a:	f003 0301 	and.w	r3, r3, #1
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d015      	beq.n	8009c3e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	3304      	adds	r3, #4
 8009c16:	461a      	mov	r2, r3
 8009c18:	6879      	ldr	r1, [r7, #4]
 8009c1a:	f44f 7006 	mov.w	r0, #536	; 0x218
 8009c1e:	f7fc fe8b 	bl	8006938 <tcp_eff_send_mss_netif>
 8009c22:	4603      	mov	r3, r0
 8009c24:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8009c26:	8b7b      	ldrh	r3, [r7, #26]
 8009c28:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f7f9 fdd0 	bl	80037d2 <lwip_htonl>
 8009c32:	4602      	mov	r2, r0
 8009c34:	69fb      	ldr	r3, [r7, #28]
 8009c36:	601a      	str	r2, [r3, #0]
    opts += 1;
 8009c38:	69fb      	ldr	r3, [r7, #28]
 8009c3a:	3304      	adds	r3, #4
 8009c3c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	da02      	bge.n	8009c4e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d10c      	bne.n	8009c70 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8009c56:	4b34      	ldr	r3, [pc, #208]	; (8009d28 <tcp_output_segment+0x1b4>)
 8009c58:	681a      	ldr	r2, [r3, #0]
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	68db      	ldr	r3, [r3, #12]
 8009c62:	685b      	ldr	r3, [r3, #4]
 8009c64:	4618      	mov	r0, r3
 8009c66:	f7f9 fdb4 	bl	80037d2 <lwip_htonl>
 8009c6a:	4602      	mov	r2, r0
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	68da      	ldr	r2, [r3, #12]
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	1ad3      	subs	r3, r2, r3
 8009c7c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	8959      	ldrh	r1, [r3, #10]
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	685b      	ldr	r3, [r3, #4]
 8009c88:	8b3a      	ldrh	r2, [r7, #24]
 8009c8a:	1a8a      	subs	r2, r1, r2
 8009c8c:	b292      	uxth	r2, r2
 8009c8e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	685b      	ldr	r3, [r3, #4]
 8009c94:	8919      	ldrh	r1, [r3, #8]
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	685b      	ldr	r3, [r3, #4]
 8009c9a:	8b3a      	ldrh	r2, [r7, #24]
 8009c9c:	1a8a      	subs	r2, r1, r2
 8009c9e:	b292      	uxth	r2, r2
 8009ca0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	68fa      	ldr	r2, [r7, #12]
 8009ca8:	68d2      	ldr	r2, [r2, #12]
 8009caa:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	68db      	ldr	r3, [r3, #12]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	741a      	strb	r2, [r3, #16]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	68db      	ldr	r3, [r3, #12]
 8009cbc:	f103 0214 	add.w	r2, r3, #20
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	7a9b      	ldrb	r3, [r3, #10]
 8009cc4:	009b      	lsls	r3, r3, #2
 8009cc6:	f003 0304 	and.w	r3, r3, #4
 8009cca:	4413      	add	r3, r2
 8009ccc:	69fa      	ldr	r2, [r7, #28]
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d006      	beq.n	8009ce0 <tcp_output_segment+0x16c>
 8009cd2:	4b10      	ldr	r3, [pc, #64]	; (8009d14 <tcp_output_segment+0x1a0>)
 8009cd4:	f240 621c 	movw	r2, #1564	; 0x61c
 8009cd8:	4914      	ldr	r1, [pc, #80]	; (8009d2c <tcp_output_segment+0x1b8>)
 8009cda:	4810      	ldr	r0, [pc, #64]	; (8009d1c <tcp_output_segment+0x1a8>)
 8009cdc:	f003 fac0 	bl	800d260 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	6858      	ldr	r0, [r3, #4]
 8009ce4:	68b9      	ldr	r1, [r7, #8]
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	1d1c      	adds	r4, r3, #4
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	7add      	ldrb	r5, [r3, #11]
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	7a9b      	ldrb	r3, [r3, #10]
 8009cf2:	687a      	ldr	r2, [r7, #4]
 8009cf4:	9202      	str	r2, [sp, #8]
 8009cf6:	2206      	movs	r2, #6
 8009cf8:	9201      	str	r2, [sp, #4]
 8009cfa:	9300      	str	r3, [sp, #0]
 8009cfc:	462b      	mov	r3, r5
 8009cfe:	4622      	mov	r2, r4
 8009d00:	f002 fa36 	bl	800c170 <ip4_output_if>
 8009d04:	4603      	mov	r3, r0
 8009d06:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8009d08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3720      	adds	r7, #32
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bdb0      	pop	{r4, r5, r7, pc}
 8009d14:	0800f9cc 	.word	0x0800f9cc
 8009d18:	0800ff90 	.word	0x0800ff90
 8009d1c:	0800fa20 	.word	0x0800fa20
 8009d20:	0800ffb0 	.word	0x0800ffb0
 8009d24:	0800ffd0 	.word	0x0800ffd0
 8009d28:	20008248 	.word	0x20008248
 8009d2c:	0800fff4 	.word	0x0800fff4

08009d30 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8009d30:	b5b0      	push	{r4, r5, r7, lr}
 8009d32:	b084      	sub	sp, #16
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d106      	bne.n	8009d4c <tcp_rexmit_rto_prepare+0x1c>
 8009d3e:	4b31      	ldr	r3, [pc, #196]	; (8009e04 <tcp_rexmit_rto_prepare+0xd4>)
 8009d40:	f240 6263 	movw	r2, #1635	; 0x663
 8009d44:	4930      	ldr	r1, [pc, #192]	; (8009e08 <tcp_rexmit_rto_prepare+0xd8>)
 8009d46:	4831      	ldr	r0, [pc, #196]	; (8009e0c <tcp_rexmit_rto_prepare+0xdc>)
 8009d48:	f003 fa8a 	bl	800d260 <iprintf>

  if (pcb->unacked == NULL) {
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d102      	bne.n	8009d5a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8009d54:	f06f 0305 	mvn.w	r3, #5
 8009d58:	e050      	b.n	8009dfc <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d5e:	60fb      	str	r3, [r7, #12]
 8009d60:	e00b      	b.n	8009d7a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8009d62:	68f8      	ldr	r0, [r7, #12]
 8009d64:	f7ff fee6 	bl	8009b34 <tcp_output_segment_busy>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d002      	beq.n	8009d74 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8009d6e:	f06f 0305 	mvn.w	r3, #5
 8009d72:	e043      	b.n	8009dfc <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	60fb      	str	r3, [r7, #12]
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d1ef      	bne.n	8009d62 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8009d82:	68f8      	ldr	r0, [r7, #12]
 8009d84:	f7ff fed6 	bl	8009b34 <tcp_output_segment_busy>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d002      	beq.n	8009d94 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8009d8e:	f06f 0305 	mvn.w	r3, #5
 8009d92:	e033      	b.n	8009dfc <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2200      	movs	r2, #0
 8009da8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	8b5b      	ldrh	r3, [r3, #26]
 8009dae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009db2:	b29a      	uxth	r2, r3
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	68db      	ldr	r3, [r3, #12]
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f7f9 fd07 	bl	80037d2 <lwip_htonl>
 8009dc4:	4604      	mov	r4, r0
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	891b      	ldrh	r3, [r3, #8]
 8009dca:	461d      	mov	r5, r3
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	68db      	ldr	r3, [r3, #12]
 8009dd0:	899b      	ldrh	r3, [r3, #12]
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f7f9 fce7 	bl	80037a8 <lwip_htons>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	b2db      	uxtb	r3, r3
 8009dde:	f003 0303 	and.w	r3, r3, #3
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d001      	beq.n	8009dea <tcp_rexmit_rto_prepare+0xba>
 8009de6:	2301      	movs	r3, #1
 8009de8:	e000      	b.n	8009dec <tcp_rexmit_rto_prepare+0xbc>
 8009dea:	2300      	movs	r3, #0
 8009dec:	442b      	add	r3, r5
 8009dee:	18e2      	adds	r2, r4, r3
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2200      	movs	r2, #0
 8009df8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8009dfa:	2300      	movs	r3, #0
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3710      	adds	r7, #16
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bdb0      	pop	{r4, r5, r7, pc}
 8009e04:	0800f9cc 	.word	0x0800f9cc
 8009e08:	08010008 	.word	0x08010008
 8009e0c:	0800fa20 	.word	0x0800fa20

08009e10 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b082      	sub	sp, #8
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d106      	bne.n	8009e2c <tcp_rexmit_rto_commit+0x1c>
 8009e1e:	4b0d      	ldr	r3, [pc, #52]	; (8009e54 <tcp_rexmit_rto_commit+0x44>)
 8009e20:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8009e24:	490c      	ldr	r1, [pc, #48]	; (8009e58 <tcp_rexmit_rto_commit+0x48>)
 8009e26:	480d      	ldr	r0, [pc, #52]	; (8009e5c <tcp_rexmit_rto_commit+0x4c>)
 8009e28:	f003 fa1a 	bl	800d260 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009e32:	2bff      	cmp	r3, #255	; 0xff
 8009e34:	d007      	beq.n	8009e46 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009e3c:	3301      	adds	r3, #1
 8009e3e:	b2da      	uxtb	r2, r3
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f7ff fc80 	bl	800974c <tcp_output>
}
 8009e4c:	bf00      	nop
 8009e4e:	3708      	adds	r7, #8
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}
 8009e54:	0800f9cc 	.word	0x0800f9cc
 8009e58:	0801002c 	.word	0x0801002c
 8009e5c:	0800fa20 	.word	0x0800fa20

08009e60 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b082      	sub	sp, #8
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d106      	bne.n	8009e7c <tcp_rexmit_rto+0x1c>
 8009e6e:	4b0a      	ldr	r3, [pc, #40]	; (8009e98 <tcp_rexmit_rto+0x38>)
 8009e70:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8009e74:	4909      	ldr	r1, [pc, #36]	; (8009e9c <tcp_rexmit_rto+0x3c>)
 8009e76:	480a      	ldr	r0, [pc, #40]	; (8009ea0 <tcp_rexmit_rto+0x40>)
 8009e78:	f003 f9f2 	bl	800d260 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f7ff ff57 	bl	8009d30 <tcp_rexmit_rto_prepare>
 8009e82:	4603      	mov	r3, r0
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d102      	bne.n	8009e8e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f7ff ffc1 	bl	8009e10 <tcp_rexmit_rto_commit>
  }
}
 8009e8e:	bf00      	nop
 8009e90:	3708      	adds	r7, #8
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	0800f9cc 	.word	0x0800f9cc
 8009e9c:	08010050 	.word	0x08010050
 8009ea0:	0800fa20 	.word	0x0800fa20

08009ea4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8009ea4:	b590      	push	{r4, r7, lr}
 8009ea6:	b085      	sub	sp, #20
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d106      	bne.n	8009ec0 <tcp_rexmit+0x1c>
 8009eb2:	4b2f      	ldr	r3, [pc, #188]	; (8009f70 <tcp_rexmit+0xcc>)
 8009eb4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8009eb8:	492e      	ldr	r1, [pc, #184]	; (8009f74 <tcp_rexmit+0xd0>)
 8009eba:	482f      	ldr	r0, [pc, #188]	; (8009f78 <tcp_rexmit+0xd4>)
 8009ebc:	f003 f9d0 	bl	800d260 <iprintf>

  if (pcb->unacked == NULL) {
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d102      	bne.n	8009ece <tcp_rexmit+0x2a>
    return ERR_VAL;
 8009ec8:	f06f 0305 	mvn.w	r3, #5
 8009ecc:	e04c      	b.n	8009f68 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ed2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8009ed4:	68b8      	ldr	r0, [r7, #8]
 8009ed6:	f7ff fe2d 	bl	8009b34 <tcp_output_segment_busy>
 8009eda:	4603      	mov	r3, r0
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d002      	beq.n	8009ee6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8009ee0:	f06f 0305 	mvn.w	r3, #5
 8009ee4:	e040      	b.n	8009f68 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	336c      	adds	r3, #108	; 0x6c
 8009ef2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8009ef4:	e002      	b.n	8009efc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d011      	beq.n	8009f28 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	68db      	ldr	r3, [r3, #12]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f7f9 fc60 	bl	80037d2 <lwip_htonl>
 8009f12:	4604      	mov	r4, r0
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	68db      	ldr	r3, [r3, #12]
 8009f18:	685b      	ldr	r3, [r3, #4]
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f7f9 fc59 	bl	80037d2 <lwip_htonl>
 8009f20:	4603      	mov	r3, r0
 8009f22:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	dbe6      	blt.n	8009ef6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681a      	ldr	r2, [r3, #0]
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	68ba      	ldr	r2, [r7, #8]
 8009f34:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d103      	bne.n	8009f46 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2200      	movs	r2, #0
 8009f42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009f4c:	2bff      	cmp	r3, #255	; 0xff
 8009f4e:	d007      	beq.n	8009f60 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009f56:	3301      	adds	r3, #1
 8009f58:	b2da      	uxtb	r2, r3
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2200      	movs	r2, #0
 8009f64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8009f66:	2300      	movs	r3, #0
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3714      	adds	r7, #20
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd90      	pop	{r4, r7, pc}
 8009f70:	0800f9cc 	.word	0x0800f9cc
 8009f74:	0801006c 	.word	0x0801006c
 8009f78:	0800fa20 	.word	0x0800fa20

08009f7c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b082      	sub	sp, #8
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d106      	bne.n	8009f98 <tcp_rexmit_fast+0x1c>
 8009f8a:	4b2a      	ldr	r3, [pc, #168]	; (800a034 <tcp_rexmit_fast+0xb8>)
 8009f8c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8009f90:	4929      	ldr	r1, [pc, #164]	; (800a038 <tcp_rexmit_fast+0xbc>)
 8009f92:	482a      	ldr	r0, [pc, #168]	; (800a03c <tcp_rexmit_fast+0xc0>)
 8009f94:	f003 f964 	bl	800d260 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d044      	beq.n	800a02a <tcp_rexmit_fast+0xae>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	8b5b      	ldrh	r3, [r3, #26]
 8009fa4:	f003 0304 	and.w	r3, r3, #4
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d13e      	bne.n	800a02a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f7ff ff79 	bl	8009ea4 <tcp_rexmit>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d138      	bne.n	800a02a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	bf28      	it	cs
 8009fc8:	4613      	movcs	r3, r2
 8009fca:	b29b      	uxth	r3, r3
 8009fcc:	0fda      	lsrs	r2, r3, #31
 8009fce:	4413      	add	r3, r2
 8009fd0:	105b      	asrs	r3, r3, #1
 8009fd2:	b29a      	uxth	r2, r3
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8009fe0:	461a      	mov	r2, r3
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009fe6:	005b      	lsls	r3, r3, #1
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	d206      	bcs.n	8009ffa <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009ff0:	005b      	lsls	r3, r3, #1
 8009ff2:	b29a      	uxth	r2, r3
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a004:	4619      	mov	r1, r3
 800a006:	0049      	lsls	r1, r1, #1
 800a008:	440b      	add	r3, r1
 800a00a:	b29b      	uxth	r3, r3
 800a00c:	4413      	add	r3, r2
 800a00e:	b29a      	uxth	r2, r3
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	8b5b      	ldrh	r3, [r3, #26]
 800a01a:	f043 0304 	orr.w	r3, r3, #4
 800a01e:	b29a      	uxth	r2, r3
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2200      	movs	r2, #0
 800a028:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800a02a:	bf00      	nop
 800a02c:	3708      	adds	r7, #8
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
 800a032:	bf00      	nop
 800a034:	0800f9cc 	.word	0x0800f9cc
 800a038:	08010084 	.word	0x08010084
 800a03c:	0800fa20 	.word	0x0800fa20

0800a040 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b086      	sub	sp, #24
 800a044:	af00      	add	r7, sp, #0
 800a046:	60f8      	str	r0, [r7, #12]
 800a048:	607b      	str	r3, [r7, #4]
 800a04a:	460b      	mov	r3, r1
 800a04c:	817b      	strh	r3, [r7, #10]
 800a04e:	4613      	mov	r3, r2
 800a050:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800a052:	897a      	ldrh	r2, [r7, #10]
 800a054:	893b      	ldrh	r3, [r7, #8]
 800a056:	4413      	add	r3, r2
 800a058:	b29b      	uxth	r3, r3
 800a05a:	3314      	adds	r3, #20
 800a05c:	b29b      	uxth	r3, r3
 800a05e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a062:	4619      	mov	r1, r3
 800a064:	2022      	movs	r0, #34	; 0x22
 800a066:	f7fa fc19 	bl	800489c <pbuf_alloc>
 800a06a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d04d      	beq.n	800a10e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800a072:	897b      	ldrh	r3, [r7, #10]
 800a074:	3313      	adds	r3, #19
 800a076:	697a      	ldr	r2, [r7, #20]
 800a078:	8952      	ldrh	r2, [r2, #10]
 800a07a:	4293      	cmp	r3, r2
 800a07c:	db06      	blt.n	800a08c <tcp_output_alloc_header_common+0x4c>
 800a07e:	4b26      	ldr	r3, [pc, #152]	; (800a118 <tcp_output_alloc_header_common+0xd8>)
 800a080:	f240 7223 	movw	r2, #1827	; 0x723
 800a084:	4925      	ldr	r1, [pc, #148]	; (800a11c <tcp_output_alloc_header_common+0xdc>)
 800a086:	4826      	ldr	r0, [pc, #152]	; (800a120 <tcp_output_alloc_header_common+0xe0>)
 800a088:	f003 f8ea 	bl	800d260 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	685b      	ldr	r3, [r3, #4]
 800a090:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800a092:	8c3b      	ldrh	r3, [r7, #32]
 800a094:	4618      	mov	r0, r3
 800a096:	f7f9 fb87 	bl	80037a8 <lwip_htons>
 800a09a:	4603      	mov	r3, r0
 800a09c:	461a      	mov	r2, r3
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800a0a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7f9 fb7f 	bl	80037a8 <lwip_htons>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	461a      	mov	r2, r3
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	687a      	ldr	r2, [r7, #4]
 800a0b6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800a0b8:	68f8      	ldr	r0, [r7, #12]
 800a0ba:	f7f9 fb8a 	bl	80037d2 <lwip_htonl>
 800a0be:	4602      	mov	r2, r0
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800a0c4:	897b      	ldrh	r3, [r7, #10]
 800a0c6:	089b      	lsrs	r3, r3, #2
 800a0c8:	b29b      	uxth	r3, r3
 800a0ca:	3305      	adds	r3, #5
 800a0cc:	b29b      	uxth	r3, r3
 800a0ce:	031b      	lsls	r3, r3, #12
 800a0d0:	b29a      	uxth	r2, r3
 800a0d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a0d6:	b29b      	uxth	r3, r3
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	b29b      	uxth	r3, r3
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f7f9 fb63 	bl	80037a8 <lwip_htons>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	461a      	mov	r2, r3
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800a0ea:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f7f9 fb5b 	bl	80037a8 <lwip_htons>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	741a      	strb	r2, [r3, #16]
 800a100:	2200      	movs	r2, #0
 800a102:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	2200      	movs	r2, #0
 800a108:	749a      	strb	r2, [r3, #18]
 800a10a:	2200      	movs	r2, #0
 800a10c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800a10e:	697b      	ldr	r3, [r7, #20]
}
 800a110:	4618      	mov	r0, r3
 800a112:	3718      	adds	r7, #24
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}
 800a118:	0800f9cc 	.word	0x0800f9cc
 800a11c:	080100a4 	.word	0x080100a4
 800a120:	0800fa20 	.word	0x0800fa20

0800a124 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800a124:	b5b0      	push	{r4, r5, r7, lr}
 800a126:	b08a      	sub	sp, #40	; 0x28
 800a128:	af04      	add	r7, sp, #16
 800a12a:	60f8      	str	r0, [r7, #12]
 800a12c:	607b      	str	r3, [r7, #4]
 800a12e:	460b      	mov	r3, r1
 800a130:	817b      	strh	r3, [r7, #10]
 800a132:	4613      	mov	r3, r2
 800a134:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d106      	bne.n	800a14a <tcp_output_alloc_header+0x26>
 800a13c:	4b15      	ldr	r3, [pc, #84]	; (800a194 <tcp_output_alloc_header+0x70>)
 800a13e:	f240 7242 	movw	r2, #1858	; 0x742
 800a142:	4915      	ldr	r1, [pc, #84]	; (800a198 <tcp_output_alloc_header+0x74>)
 800a144:	4815      	ldr	r0, [pc, #84]	; (800a19c <tcp_output_alloc_header+0x78>)
 800a146:	f003 f88b 	bl	800d260 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	8adb      	ldrh	r3, [r3, #22]
 800a152:	68fa      	ldr	r2, [r7, #12]
 800a154:	8b12      	ldrh	r2, [r2, #24]
 800a156:	68f9      	ldr	r1, [r7, #12]
 800a158:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800a15a:	893d      	ldrh	r5, [r7, #8]
 800a15c:	897c      	ldrh	r4, [r7, #10]
 800a15e:	9103      	str	r1, [sp, #12]
 800a160:	2110      	movs	r1, #16
 800a162:	9102      	str	r1, [sp, #8]
 800a164:	9201      	str	r2, [sp, #4]
 800a166:	9300      	str	r3, [sp, #0]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	462a      	mov	r2, r5
 800a16c:	4621      	mov	r1, r4
 800a16e:	f7ff ff67 	bl	800a040 <tcp_output_alloc_header_common>
 800a172:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d006      	beq.n	800a188 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a17e:	68fa      	ldr	r2, [r7, #12]
 800a180:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800a182:	441a      	add	r2, r3
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800a188:	697b      	ldr	r3, [r7, #20]
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3718      	adds	r7, #24
 800a18e:	46bd      	mov	sp, r7
 800a190:	bdb0      	pop	{r4, r5, r7, pc}
 800a192:	bf00      	nop
 800a194:	0800f9cc 	.word	0x0800f9cc
 800a198:	080100d4 	.word	0x080100d4
 800a19c:	0800fa20 	.word	0x0800fa20

0800a1a0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b088      	sub	sp, #32
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	60f8      	str	r0, [r7, #12]
 800a1a8:	60b9      	str	r1, [r7, #8]
 800a1aa:	4611      	mov	r1, r2
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	460b      	mov	r3, r1
 800a1b0:	71fb      	strb	r3, [r7, #7]
 800a1b2:	4613      	mov	r3, r2
 800a1b4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d106      	bne.n	800a1ce <tcp_output_fill_options+0x2e>
 800a1c0:	4b13      	ldr	r3, [pc, #76]	; (800a210 <tcp_output_fill_options+0x70>)
 800a1c2:	f240 7256 	movw	r2, #1878	; 0x756
 800a1c6:	4913      	ldr	r1, [pc, #76]	; (800a214 <tcp_output_fill_options+0x74>)
 800a1c8:	4813      	ldr	r0, [pc, #76]	; (800a218 <tcp_output_fill_options+0x78>)
 800a1ca:	f003 f849 	bl	800d260 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800a1d4:	69bb      	ldr	r3, [r7, #24]
 800a1d6:	3314      	adds	r3, #20
 800a1d8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800a1da:	69bb      	ldr	r3, [r7, #24]
 800a1dc:	f103 0214 	add.w	r2, r3, #20
 800a1e0:	8bfb      	ldrh	r3, [r7, #30]
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	79fb      	ldrb	r3, [r7, #7]
 800a1e8:	009b      	lsls	r3, r3, #2
 800a1ea:	f003 0304 	and.w	r3, r3, #4
 800a1ee:	440b      	add	r3, r1
 800a1f0:	4413      	add	r3, r2
 800a1f2:	697a      	ldr	r2, [r7, #20]
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	d006      	beq.n	800a206 <tcp_output_fill_options+0x66>
 800a1f8:	4b05      	ldr	r3, [pc, #20]	; (800a210 <tcp_output_fill_options+0x70>)
 800a1fa:	f240 7275 	movw	r2, #1909	; 0x775
 800a1fe:	4907      	ldr	r1, [pc, #28]	; (800a21c <tcp_output_fill_options+0x7c>)
 800a200:	4805      	ldr	r0, [pc, #20]	; (800a218 <tcp_output_fill_options+0x78>)
 800a202:	f003 f82d 	bl	800d260 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800a206:	bf00      	nop
 800a208:	3720      	adds	r7, #32
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
 800a20e:	bf00      	nop
 800a210:	0800f9cc 	.word	0x0800f9cc
 800a214:	080100fc 	.word	0x080100fc
 800a218:	0800fa20 	.word	0x0800fa20
 800a21c:	0800fff4 	.word	0x0800fff4

0800a220 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b08a      	sub	sp, #40	; 0x28
 800a224:	af04      	add	r7, sp, #16
 800a226:	60f8      	str	r0, [r7, #12]
 800a228:	60b9      	str	r1, [r7, #8]
 800a22a:	607a      	str	r2, [r7, #4]
 800a22c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d106      	bne.n	800a242 <tcp_output_control_segment+0x22>
 800a234:	4b1c      	ldr	r3, [pc, #112]	; (800a2a8 <tcp_output_control_segment+0x88>)
 800a236:	f240 7287 	movw	r2, #1927	; 0x787
 800a23a:	491c      	ldr	r1, [pc, #112]	; (800a2ac <tcp_output_control_segment+0x8c>)
 800a23c:	481c      	ldr	r0, [pc, #112]	; (800a2b0 <tcp_output_control_segment+0x90>)
 800a23e:	f003 f80f 	bl	800d260 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800a242:	683a      	ldr	r2, [r7, #0]
 800a244:	6879      	ldr	r1, [r7, #4]
 800a246:	68f8      	ldr	r0, [r7, #12]
 800a248:	f7fe ff40 	bl	80090cc <tcp_route>
 800a24c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d102      	bne.n	800a25a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800a254:	23fc      	movs	r3, #252	; 0xfc
 800a256:	75fb      	strb	r3, [r7, #23]
 800a258:	e01c      	b.n	800a294 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d006      	beq.n	800a26e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	7adb      	ldrb	r3, [r3, #11]
 800a264:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	7a9b      	ldrb	r3, [r3, #10]
 800a26a:	757b      	strb	r3, [r7, #21]
 800a26c:	e003      	b.n	800a276 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800a26e:	23ff      	movs	r3, #255	; 0xff
 800a270:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800a272:	2300      	movs	r3, #0
 800a274:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800a276:	7dba      	ldrb	r2, [r7, #22]
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	9302      	str	r3, [sp, #8]
 800a27c:	2306      	movs	r3, #6
 800a27e:	9301      	str	r3, [sp, #4]
 800a280:	7d7b      	ldrb	r3, [r7, #21]
 800a282:	9300      	str	r3, [sp, #0]
 800a284:	4613      	mov	r3, r2
 800a286:	683a      	ldr	r2, [r7, #0]
 800a288:	6879      	ldr	r1, [r7, #4]
 800a28a:	68b8      	ldr	r0, [r7, #8]
 800a28c:	f001 ff70 	bl	800c170 <ip4_output_if>
 800a290:	4603      	mov	r3, r0
 800a292:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800a294:	68b8      	ldr	r0, [r7, #8]
 800a296:	f7fa fde5 	bl	8004e64 <pbuf_free>
  return err;
 800a29a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3718      	adds	r7, #24
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	bf00      	nop
 800a2a8:	0800f9cc 	.word	0x0800f9cc
 800a2ac:	08010124 	.word	0x08010124
 800a2b0:	0800fa20 	.word	0x0800fa20

0800a2b4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800a2b4:	b590      	push	{r4, r7, lr}
 800a2b6:	b08b      	sub	sp, #44	; 0x2c
 800a2b8:	af04      	add	r7, sp, #16
 800a2ba:	60f8      	str	r0, [r7, #12]
 800a2bc:	60b9      	str	r1, [r7, #8]
 800a2be:	607a      	str	r2, [r7, #4]
 800a2c0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d106      	bne.n	800a2d6 <tcp_rst+0x22>
 800a2c8:	4b1f      	ldr	r3, [pc, #124]	; (800a348 <tcp_rst+0x94>)
 800a2ca:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800a2ce:	491f      	ldr	r1, [pc, #124]	; (800a34c <tcp_rst+0x98>)
 800a2d0:	481f      	ldr	r0, [pc, #124]	; (800a350 <tcp_rst+0x9c>)
 800a2d2:	f002 ffc5 	bl	800d260 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800a2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d106      	bne.n	800a2ea <tcp_rst+0x36>
 800a2dc:	4b1a      	ldr	r3, [pc, #104]	; (800a348 <tcp_rst+0x94>)
 800a2de:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800a2e2:	491c      	ldr	r1, [pc, #112]	; (800a354 <tcp_rst+0xa0>)
 800a2e4:	481a      	ldr	r0, [pc, #104]	; (800a350 <tcp_rst+0x9c>)
 800a2e6:	f002 ffbb 	bl	800d260 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800a2ee:	f246 0308 	movw	r3, #24584	; 0x6008
 800a2f2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800a2f4:	7dfb      	ldrb	r3, [r7, #23]
 800a2f6:	b29c      	uxth	r4, r3
 800a2f8:	68b8      	ldr	r0, [r7, #8]
 800a2fa:	f7f9 fa6a 	bl	80037d2 <lwip_htonl>
 800a2fe:	4602      	mov	r2, r0
 800a300:	8abb      	ldrh	r3, [r7, #20]
 800a302:	9303      	str	r3, [sp, #12]
 800a304:	2314      	movs	r3, #20
 800a306:	9302      	str	r3, [sp, #8]
 800a308:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a30a:	9301      	str	r3, [sp, #4]
 800a30c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a30e:	9300      	str	r3, [sp, #0]
 800a310:	4613      	mov	r3, r2
 800a312:	2200      	movs	r2, #0
 800a314:	4621      	mov	r1, r4
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f7ff fe92 	bl	800a040 <tcp_output_alloc_header_common>
 800a31c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d00c      	beq.n	800a33e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a324:	7dfb      	ldrb	r3, [r7, #23]
 800a326:	2200      	movs	r2, #0
 800a328:	6939      	ldr	r1, [r7, #16]
 800a32a:	68f8      	ldr	r0, [r7, #12]
 800a32c:	f7ff ff38 	bl	800a1a0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800a330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a332:	683a      	ldr	r2, [r7, #0]
 800a334:	6939      	ldr	r1, [r7, #16]
 800a336:	68f8      	ldr	r0, [r7, #12]
 800a338:	f7ff ff72 	bl	800a220 <tcp_output_control_segment>
 800a33c:	e000      	b.n	800a340 <tcp_rst+0x8c>
    return;
 800a33e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800a340:	371c      	adds	r7, #28
 800a342:	46bd      	mov	sp, r7
 800a344:	bd90      	pop	{r4, r7, pc}
 800a346:	bf00      	nop
 800a348:	0800f9cc 	.word	0x0800f9cc
 800a34c:	08010150 	.word	0x08010150
 800a350:	0800fa20 	.word	0x0800fa20
 800a354:	0801016c 	.word	0x0801016c

0800a358 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800a358:	b590      	push	{r4, r7, lr}
 800a35a:	b087      	sub	sp, #28
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800a360:	2300      	movs	r3, #0
 800a362:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800a364:	2300      	movs	r3, #0
 800a366:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d106      	bne.n	800a37c <tcp_send_empty_ack+0x24>
 800a36e:	4b28      	ldr	r3, [pc, #160]	; (800a410 <tcp_send_empty_ack+0xb8>)
 800a370:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800a374:	4927      	ldr	r1, [pc, #156]	; (800a414 <tcp_send_empty_ack+0xbc>)
 800a376:	4828      	ldr	r0, [pc, #160]	; (800a418 <tcp_send_empty_ack+0xc0>)
 800a378:	f002 ff72 	bl	800d260 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a37c:	7dfb      	ldrb	r3, [r7, #23]
 800a37e:	009b      	lsls	r3, r3, #2
 800a380:	b2db      	uxtb	r3, r3
 800a382:	f003 0304 	and.w	r3, r3, #4
 800a386:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800a388:	7d7b      	ldrb	r3, [r7, #21]
 800a38a:	b29c      	uxth	r4, r3
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a390:	4618      	mov	r0, r3
 800a392:	f7f9 fa1e 	bl	80037d2 <lwip_htonl>
 800a396:	4603      	mov	r3, r0
 800a398:	2200      	movs	r2, #0
 800a39a:	4621      	mov	r1, r4
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f7ff fec1 	bl	800a124 <tcp_output_alloc_header>
 800a3a2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d109      	bne.n	800a3be <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	8b5b      	ldrh	r3, [r3, #26]
 800a3ae:	f043 0303 	orr.w	r3, r3, #3
 800a3b2:	b29a      	uxth	r2, r3
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800a3b8:	f06f 0301 	mvn.w	r3, #1
 800a3bc:	e023      	b.n	800a406 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800a3be:	7dbb      	ldrb	r3, [r7, #22]
 800a3c0:	7dfa      	ldrb	r2, [r7, #23]
 800a3c2:	6939      	ldr	r1, [r7, #16]
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f7ff feeb 	bl	800a1a0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a3ca:	687a      	ldr	r2, [r7, #4]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	3304      	adds	r3, #4
 800a3d0:	6939      	ldr	r1, [r7, #16]
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f7ff ff24 	bl	800a220 <tcp_output_control_segment>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800a3dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d007      	beq.n	800a3f4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	8b5b      	ldrh	r3, [r3, #26]
 800a3e8:	f043 0303 	orr.w	r3, r3, #3
 800a3ec:	b29a      	uxth	r2, r3
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	835a      	strh	r2, [r3, #26]
 800a3f2:	e006      	b.n	800a402 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	8b5b      	ldrh	r3, [r3, #26]
 800a3f8:	f023 0303 	bic.w	r3, r3, #3
 800a3fc:	b29a      	uxth	r2, r3
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800a402:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a406:	4618      	mov	r0, r3
 800a408:	371c      	adds	r7, #28
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd90      	pop	{r4, r7, pc}
 800a40e:	bf00      	nop
 800a410:	0800f9cc 	.word	0x0800f9cc
 800a414:	08010188 	.word	0x08010188
 800a418:	0800fa20 	.word	0x0800fa20

0800a41c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800a41c:	b590      	push	{r4, r7, lr}
 800a41e:	b087      	sub	sp, #28
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a424:	2300      	movs	r3, #0
 800a426:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d106      	bne.n	800a43c <tcp_keepalive+0x20>
 800a42e:	4b18      	ldr	r3, [pc, #96]	; (800a490 <tcp_keepalive+0x74>)
 800a430:	f640 0224 	movw	r2, #2084	; 0x824
 800a434:	4917      	ldr	r1, [pc, #92]	; (800a494 <tcp_keepalive+0x78>)
 800a436:	4818      	ldr	r0, [pc, #96]	; (800a498 <tcp_keepalive+0x7c>)
 800a438:	f002 ff12 	bl	800d260 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800a43c:	7dfb      	ldrb	r3, [r7, #23]
 800a43e:	b29c      	uxth	r4, r3
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a444:	3b01      	subs	r3, #1
 800a446:	4618      	mov	r0, r3
 800a448:	f7f9 f9c3 	bl	80037d2 <lwip_htonl>
 800a44c:	4603      	mov	r3, r0
 800a44e:	2200      	movs	r2, #0
 800a450:	4621      	mov	r1, r4
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f7ff fe66 	bl	800a124 <tcp_output_alloc_header>
 800a458:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d102      	bne.n	800a466 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800a460:	f04f 33ff 	mov.w	r3, #4294967295
 800a464:	e010      	b.n	800a488 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a466:	7dfb      	ldrb	r3, [r7, #23]
 800a468:	2200      	movs	r2, #0
 800a46a:	6939      	ldr	r1, [r7, #16]
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f7ff fe97 	bl	800a1a0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a472:	687a      	ldr	r2, [r7, #4]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	3304      	adds	r3, #4
 800a478:	6939      	ldr	r1, [r7, #16]
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f7ff fed0 	bl	800a220 <tcp_output_control_segment>
 800a480:	4603      	mov	r3, r0
 800a482:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800a484:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a488:	4618      	mov	r0, r3
 800a48a:	371c      	adds	r7, #28
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd90      	pop	{r4, r7, pc}
 800a490:	0800f9cc 	.word	0x0800f9cc
 800a494:	080101a8 	.word	0x080101a8
 800a498:	0800fa20 	.word	0x0800fa20

0800a49c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800a49c:	b590      	push	{r4, r7, lr}
 800a49e:	b08b      	sub	sp, #44	; 0x2c
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d106      	bne.n	800a4be <tcp_zero_window_probe+0x22>
 800a4b0:	4b4c      	ldr	r3, [pc, #304]	; (800a5e4 <tcp_zero_window_probe+0x148>)
 800a4b2:	f640 024f 	movw	r2, #2127	; 0x84f
 800a4b6:	494c      	ldr	r1, [pc, #304]	; (800a5e8 <tcp_zero_window_probe+0x14c>)
 800a4b8:	484c      	ldr	r0, [pc, #304]	; (800a5ec <tcp_zero_window_probe+0x150>)
 800a4ba:	f002 fed1 	bl	800d260 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4c2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800a4c4:	6a3b      	ldr	r3, [r7, #32]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d101      	bne.n	800a4ce <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	e086      	b.n	800a5dc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800a4d4:	2bff      	cmp	r3, #255	; 0xff
 800a4d6:	d007      	beq.n	800a4e8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800a4de:	3301      	adds	r3, #1
 800a4e0:	b2da      	uxtb	r2, r3
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800a4e8:	6a3b      	ldr	r3, [r7, #32]
 800a4ea:	68db      	ldr	r3, [r3, #12]
 800a4ec:	899b      	ldrh	r3, [r3, #12]
 800a4ee:	b29b      	uxth	r3, r3
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f7f9 f959 	bl	80037a8 <lwip_htons>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	b2db      	uxtb	r3, r3
 800a4fa:	f003 0301 	and.w	r3, r3, #1
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d005      	beq.n	800a50e <tcp_zero_window_probe+0x72>
 800a502:	6a3b      	ldr	r3, [r7, #32]
 800a504:	891b      	ldrh	r3, [r3, #8]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d101      	bne.n	800a50e <tcp_zero_window_probe+0x72>
 800a50a:	2301      	movs	r3, #1
 800a50c:	e000      	b.n	800a510 <tcp_zero_window_probe+0x74>
 800a50e:	2300      	movs	r3, #0
 800a510:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800a512:	7ffb      	ldrb	r3, [r7, #31]
 800a514:	2b00      	cmp	r3, #0
 800a516:	bf0c      	ite	eq
 800a518:	2301      	moveq	r3, #1
 800a51a:	2300      	movne	r3, #0
 800a51c:	b2db      	uxtb	r3, r3
 800a51e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800a520:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a524:	b299      	uxth	r1, r3
 800a526:	6a3b      	ldr	r3, [r7, #32]
 800a528:	68db      	ldr	r3, [r3, #12]
 800a52a:	685b      	ldr	r3, [r3, #4]
 800a52c:	8bba      	ldrh	r2, [r7, #28]
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f7ff fdf8 	bl	800a124 <tcp_output_alloc_header>
 800a534:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800a536:	69bb      	ldr	r3, [r7, #24]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d102      	bne.n	800a542 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800a53c:	f04f 33ff 	mov.w	r3, #4294967295
 800a540:	e04c      	b.n	800a5dc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800a542:	69bb      	ldr	r3, [r7, #24]
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800a548:	7ffb      	ldrb	r3, [r7, #31]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d011      	beq.n	800a572 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	899b      	ldrh	r3, [r3, #12]
 800a552:	b29b      	uxth	r3, r3
 800a554:	b21b      	sxth	r3, r3
 800a556:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a55a:	b21c      	sxth	r4, r3
 800a55c:	2011      	movs	r0, #17
 800a55e:	f7f9 f923 	bl	80037a8 <lwip_htons>
 800a562:	4603      	mov	r3, r0
 800a564:	b21b      	sxth	r3, r3
 800a566:	4323      	orrs	r3, r4
 800a568:	b21b      	sxth	r3, r3
 800a56a:	b29a      	uxth	r2, r3
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	819a      	strh	r2, [r3, #12]
 800a570:	e010      	b.n	800a594 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800a572:	69bb      	ldr	r3, [r7, #24]
 800a574:	685b      	ldr	r3, [r3, #4]
 800a576:	3314      	adds	r3, #20
 800a578:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800a57a:	6a3b      	ldr	r3, [r7, #32]
 800a57c:	6858      	ldr	r0, [r3, #4]
 800a57e:	6a3b      	ldr	r3, [r7, #32]
 800a580:	685b      	ldr	r3, [r3, #4]
 800a582:	891a      	ldrh	r2, [r3, #8]
 800a584:	6a3b      	ldr	r3, [r7, #32]
 800a586:	891b      	ldrh	r3, [r3, #8]
 800a588:	1ad3      	subs	r3, r2, r3
 800a58a:	b29b      	uxth	r3, r3
 800a58c:	2201      	movs	r2, #1
 800a58e:	6939      	ldr	r1, [r7, #16]
 800a590:	f7fa fe52 	bl	8005238 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800a594:	6a3b      	ldr	r3, [r7, #32]
 800a596:	68db      	ldr	r3, [r3, #12]
 800a598:	685b      	ldr	r3, [r3, #4]
 800a59a:	4618      	mov	r0, r3
 800a59c:	f7f9 f919 	bl	80037d2 <lwip_htonl>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	3301      	adds	r3, #1
 800a5a4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	1ad3      	subs	r3, r2, r3
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	da02      	bge.n	800a5b8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	68fa      	ldr	r2, [r7, #12]
 800a5b6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a5b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5bc:	2200      	movs	r2, #0
 800a5be:	69b9      	ldr	r1, [r7, #24]
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f7ff fded 	bl	800a1a0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a5c6:	687a      	ldr	r2, [r7, #4]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	3304      	adds	r3, #4
 800a5cc:	69b9      	ldr	r1, [r7, #24]
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f7ff fe26 	bl	800a220 <tcp_output_control_segment>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800a5d8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	372c      	adds	r7, #44	; 0x2c
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd90      	pop	{r4, r7, pc}
 800a5e4:	0800f9cc 	.word	0x0800f9cc
 800a5e8:	080101c4 	.word	0x080101c4
 800a5ec:	0800fa20 	.word	0x0800fa20

0800a5f0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b082      	sub	sp, #8
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800a5f8:	f7fa ff0c 	bl	8005414 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800a5fc:	4b0a      	ldr	r3, [pc, #40]	; (800a628 <tcpip_tcp_timer+0x38>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d103      	bne.n	800a60c <tcpip_tcp_timer+0x1c>
 800a604:	4b09      	ldr	r3, [pc, #36]	; (800a62c <tcpip_tcp_timer+0x3c>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d005      	beq.n	800a618 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a60c:	2200      	movs	r2, #0
 800a60e:	4908      	ldr	r1, [pc, #32]	; (800a630 <tcpip_tcp_timer+0x40>)
 800a610:	20fa      	movs	r0, #250	; 0xfa
 800a612:	f000 f8f3 	bl	800a7fc <sys_timeout>
 800a616:	e003      	b.n	800a620 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800a618:	4b06      	ldr	r3, [pc, #24]	; (800a634 <tcpip_tcp_timer+0x44>)
 800a61a:	2200      	movs	r2, #0
 800a61c:	601a      	str	r2, [r3, #0]
  }
}
 800a61e:	bf00      	nop
 800a620:	bf00      	nop
 800a622:	3708      	adds	r7, #8
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}
 800a628:	20008254 	.word	0x20008254
 800a62c:	20008258 	.word	0x20008258
 800a630:	0800a5f1 	.word	0x0800a5f1
 800a634:	200082a0 	.word	0x200082a0

0800a638 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800a63c:	4b0a      	ldr	r3, [pc, #40]	; (800a668 <tcp_timer_needed+0x30>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d10f      	bne.n	800a664 <tcp_timer_needed+0x2c>
 800a644:	4b09      	ldr	r3, [pc, #36]	; (800a66c <tcp_timer_needed+0x34>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d103      	bne.n	800a654 <tcp_timer_needed+0x1c>
 800a64c:	4b08      	ldr	r3, [pc, #32]	; (800a670 <tcp_timer_needed+0x38>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d007      	beq.n	800a664 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800a654:	4b04      	ldr	r3, [pc, #16]	; (800a668 <tcp_timer_needed+0x30>)
 800a656:	2201      	movs	r2, #1
 800a658:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a65a:	2200      	movs	r2, #0
 800a65c:	4905      	ldr	r1, [pc, #20]	; (800a674 <tcp_timer_needed+0x3c>)
 800a65e:	20fa      	movs	r0, #250	; 0xfa
 800a660:	f000 f8cc 	bl	800a7fc <sys_timeout>
  }
}
 800a664:	bf00      	nop
 800a666:	bd80      	pop	{r7, pc}
 800a668:	200082a0 	.word	0x200082a0
 800a66c:	20008254 	.word	0x20008254
 800a670:	20008258 	.word	0x20008258
 800a674:	0800a5f1 	.word	0x0800a5f1

0800a678 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b086      	sub	sp, #24
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	60f8      	str	r0, [r7, #12]
 800a680:	60b9      	str	r1, [r7, #8]
 800a682:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800a684:	2006      	movs	r0, #6
 800a686:	f7f9 fd07 	bl	8004098 <memp_malloc>
 800a68a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d109      	bne.n	800a6a6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d151      	bne.n	800a73c <sys_timeout_abs+0xc4>
 800a698:	4b2a      	ldr	r3, [pc, #168]	; (800a744 <sys_timeout_abs+0xcc>)
 800a69a:	22be      	movs	r2, #190	; 0xbe
 800a69c:	492a      	ldr	r1, [pc, #168]	; (800a748 <sys_timeout_abs+0xd0>)
 800a69e:	482b      	ldr	r0, [pc, #172]	; (800a74c <sys_timeout_abs+0xd4>)
 800a6a0:	f002 fdde 	bl	800d260 <iprintf>
    return;
 800a6a4:	e04a      	b.n	800a73c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800a6a6:	693b      	ldr	r3, [r7, #16]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800a6ac:	693b      	ldr	r3, [r7, #16]
 800a6ae:	68ba      	ldr	r2, [r7, #8]
 800a6b0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	687a      	ldr	r2, [r7, #4]
 800a6b6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	68fa      	ldr	r2, [r7, #12]
 800a6bc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800a6be:	4b24      	ldr	r3, [pc, #144]	; (800a750 <sys_timeout_abs+0xd8>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d103      	bne.n	800a6ce <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800a6c6:	4a22      	ldr	r2, [pc, #136]	; (800a750 <sys_timeout_abs+0xd8>)
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	6013      	str	r3, [r2, #0]
    return;
 800a6cc:	e037      	b.n	800a73e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	685a      	ldr	r2, [r3, #4]
 800a6d2:	4b1f      	ldr	r3, [pc, #124]	; (800a750 <sys_timeout_abs+0xd8>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	685b      	ldr	r3, [r3, #4]
 800a6d8:	1ad3      	subs	r3, r2, r3
 800a6da:	0fdb      	lsrs	r3, r3, #31
 800a6dc:	f003 0301 	and.w	r3, r3, #1
 800a6e0:	b2db      	uxtb	r3, r3
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d007      	beq.n	800a6f6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800a6e6:	4b1a      	ldr	r3, [pc, #104]	; (800a750 <sys_timeout_abs+0xd8>)
 800a6e8:	681a      	ldr	r2, [r3, #0]
 800a6ea:	693b      	ldr	r3, [r7, #16]
 800a6ec:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800a6ee:	4a18      	ldr	r2, [pc, #96]	; (800a750 <sys_timeout_abs+0xd8>)
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	6013      	str	r3, [r2, #0]
 800a6f4:	e023      	b.n	800a73e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800a6f6:	4b16      	ldr	r3, [pc, #88]	; (800a750 <sys_timeout_abs+0xd8>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	617b      	str	r3, [r7, #20]
 800a6fc:	e01a      	b.n	800a734 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d00b      	beq.n	800a71e <sys_timeout_abs+0xa6>
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	685a      	ldr	r2, [r3, #4]
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	685b      	ldr	r3, [r3, #4]
 800a710:	1ad3      	subs	r3, r2, r3
 800a712:	0fdb      	lsrs	r3, r3, #31
 800a714:	f003 0301 	and.w	r3, r3, #1
 800a718:	b2db      	uxtb	r3, r3
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d007      	beq.n	800a72e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	681a      	ldr	r2, [r3, #0]
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800a726:	697b      	ldr	r3, [r7, #20]
 800a728:	693a      	ldr	r2, [r7, #16]
 800a72a:	601a      	str	r2, [r3, #0]
        break;
 800a72c:	e007      	b.n	800a73e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	617b      	str	r3, [r7, #20]
 800a734:	697b      	ldr	r3, [r7, #20]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d1e1      	bne.n	800a6fe <sys_timeout_abs+0x86>
 800a73a:	e000      	b.n	800a73e <sys_timeout_abs+0xc6>
    return;
 800a73c:	bf00      	nop
      }
    }
  }
}
 800a73e:	3718      	adds	r7, #24
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}
 800a744:	080101e8 	.word	0x080101e8
 800a748:	0801021c 	.word	0x0801021c
 800a74c:	0801025c 	.word	0x0801025c
 800a750:	20008298 	.word	0x20008298

0800a754 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b086      	sub	sp, #24
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800a760:	697b      	ldr	r3, [r7, #20]
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	4798      	blx	r3

  now = sys_now();
 800a766:	f7f8 fe27 	bl	80033b8 <sys_now>
 800a76a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	681a      	ldr	r2, [r3, #0]
 800a770:	4b0f      	ldr	r3, [pc, #60]	; (800a7b0 <lwip_cyclic_timer+0x5c>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4413      	add	r3, r2
 800a776:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800a778:	68fa      	ldr	r2, [r7, #12]
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	1ad3      	subs	r3, r2, r3
 800a77e:	0fdb      	lsrs	r3, r3, #31
 800a780:	f003 0301 	and.w	r3, r3, #1
 800a784:	b2db      	uxtb	r3, r3
 800a786:	2b00      	cmp	r3, #0
 800a788:	d009      	beq.n	800a79e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	681a      	ldr	r2, [r3, #0]
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	4413      	add	r3, r2
 800a792:	687a      	ldr	r2, [r7, #4]
 800a794:	4907      	ldr	r1, [pc, #28]	; (800a7b4 <lwip_cyclic_timer+0x60>)
 800a796:	4618      	mov	r0, r3
 800a798:	f7ff ff6e 	bl	800a678 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800a79c:	e004      	b.n	800a7a8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800a79e:	687a      	ldr	r2, [r7, #4]
 800a7a0:	4904      	ldr	r1, [pc, #16]	; (800a7b4 <lwip_cyclic_timer+0x60>)
 800a7a2:	68f8      	ldr	r0, [r7, #12]
 800a7a4:	f7ff ff68 	bl	800a678 <sys_timeout_abs>
}
 800a7a8:	bf00      	nop
 800a7aa:	3718      	adds	r7, #24
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}
 800a7b0:	2000829c 	.word	0x2000829c
 800a7b4:	0800a755 	.word	0x0800a755

0800a7b8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b082      	sub	sp, #8
 800a7bc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800a7be:	2301      	movs	r3, #1
 800a7c0:	607b      	str	r3, [r7, #4]
 800a7c2:	e00e      	b.n	800a7e2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800a7c4:	4a0b      	ldr	r2, [pc, #44]	; (800a7f4 <sys_timeouts_init+0x3c>)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	00db      	lsls	r3, r3, #3
 800a7d0:	4a08      	ldr	r2, [pc, #32]	; (800a7f4 <sys_timeouts_init+0x3c>)
 800a7d2:	4413      	add	r3, r2
 800a7d4:	461a      	mov	r2, r3
 800a7d6:	4908      	ldr	r1, [pc, #32]	; (800a7f8 <sys_timeouts_init+0x40>)
 800a7d8:	f000 f810 	bl	800a7fc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	3301      	adds	r3, #1
 800a7e0:	607b      	str	r3, [r7, #4]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2b02      	cmp	r3, #2
 800a7e6:	d9ed      	bls.n	800a7c4 <sys_timeouts_init+0xc>
  }
}
 800a7e8:	bf00      	nop
 800a7ea:	bf00      	nop
 800a7ec:	3708      	adds	r7, #8
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}
 800a7f2:	bf00      	nop
 800a7f4:	08010dcc 	.word	0x08010dcc
 800a7f8:	0800a755 	.word	0x0800a755

0800a7fc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b086      	sub	sp, #24
 800a800:	af00      	add	r7, sp, #0
 800a802:	60f8      	str	r0, [r7, #12]
 800a804:	60b9      	str	r1, [r7, #8]
 800a806:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a80e:	d306      	bcc.n	800a81e <sys_timeout+0x22>
 800a810:	4b0a      	ldr	r3, [pc, #40]	; (800a83c <sys_timeout+0x40>)
 800a812:	f240 1229 	movw	r2, #297	; 0x129
 800a816:	490a      	ldr	r1, [pc, #40]	; (800a840 <sys_timeout+0x44>)
 800a818:	480a      	ldr	r0, [pc, #40]	; (800a844 <sys_timeout+0x48>)
 800a81a:	f002 fd21 	bl	800d260 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800a81e:	f7f8 fdcb 	bl	80033b8 <sys_now>
 800a822:	4602      	mov	r2, r0
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	4413      	add	r3, r2
 800a828:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800a82a:	687a      	ldr	r2, [r7, #4]
 800a82c:	68b9      	ldr	r1, [r7, #8]
 800a82e:	6978      	ldr	r0, [r7, #20]
 800a830:	f7ff ff22 	bl	800a678 <sys_timeout_abs>
#endif
}
 800a834:	bf00      	nop
 800a836:	3718      	adds	r7, #24
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}
 800a83c:	080101e8 	.word	0x080101e8
 800a840:	08010284 	.word	0x08010284
 800a844:	0801025c 	.word	0x0801025c

0800a848 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b084      	sub	sp, #16
 800a84c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800a84e:	f7f8 fdb3 	bl	80033b8 <sys_now>
 800a852:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800a854:	4b1a      	ldr	r3, [pc, #104]	; (800a8c0 <sys_check_timeouts+0x78>)
 800a856:	781b      	ldrb	r3, [r3, #0]
 800a858:	b2db      	uxtb	r3, r3
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d001      	beq.n	800a862 <sys_check_timeouts+0x1a>
 800a85e:	f7f9 ffc7 	bl	80047f0 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800a862:	4b18      	ldr	r3, [pc, #96]	; (800a8c4 <sys_check_timeouts+0x7c>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d022      	beq.n	800a8b4 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	685b      	ldr	r3, [r3, #4]
 800a872:	68fa      	ldr	r2, [r7, #12]
 800a874:	1ad3      	subs	r3, r2, r3
 800a876:	0fdb      	lsrs	r3, r3, #31
 800a878:	f003 0301 	and.w	r3, r3, #1
 800a87c:	b2db      	uxtb	r3, r3
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d11a      	bne.n	800a8b8 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	4a0f      	ldr	r2, [pc, #60]	; (800a8c4 <sys_check_timeouts+0x7c>)
 800a888:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	689b      	ldr	r3, [r3, #8]
 800a88e:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	68db      	ldr	r3, [r3, #12]
 800a894:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	685b      	ldr	r3, [r3, #4]
 800a89a:	4a0b      	ldr	r2, [pc, #44]	; (800a8c8 <sys_check_timeouts+0x80>)
 800a89c:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800a89e:	68b9      	ldr	r1, [r7, #8]
 800a8a0:	2006      	movs	r0, #6
 800a8a2:	f7f9 fc69 	bl	8004178 <memp_free>
    if (handler != NULL) {
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d0d3      	beq.n	800a854 <sys_check_timeouts+0xc>
      handler(arg);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6838      	ldr	r0, [r7, #0]
 800a8b0:	4798      	blx	r3
  do {
 800a8b2:	e7cf      	b.n	800a854 <sys_check_timeouts+0xc>
      return;
 800a8b4:	bf00      	nop
 800a8b6:	e000      	b.n	800a8ba <sys_check_timeouts+0x72>
      return;
 800a8b8:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800a8ba:	3710      	adds	r7, #16
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}
 800a8c0:	20008245 	.word	0x20008245
 800a8c4:	20008298 	.word	0x20008298
 800a8c8:	2000829c 	.word	0x2000829c

0800a8cc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800a8d0:	f002 fcde 	bl	800d290 <rand>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	b29b      	uxth	r3, r3
 800a8d8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a8dc:	b29b      	uxth	r3, r3
 800a8de:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800a8e2:	b29a      	uxth	r2, r3
 800a8e4:	4b01      	ldr	r3, [pc, #4]	; (800a8ec <udp_init+0x20>)
 800a8e6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800a8e8:	bf00      	nop
 800a8ea:	bd80      	pop	{r7, pc}
 800a8ec:	20000028 	.word	0x20000028

0800a8f0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b084      	sub	sp, #16
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	60f8      	str	r0, [r7, #12]
 800a8f8:	60b9      	str	r1, [r7, #8]
 800a8fa:	4613      	mov	r3, r2
 800a8fc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d105      	bne.n	800a910 <udp_input_local_match+0x20>
 800a904:	4b27      	ldr	r3, [pc, #156]	; (800a9a4 <udp_input_local_match+0xb4>)
 800a906:	2287      	movs	r2, #135	; 0x87
 800a908:	4927      	ldr	r1, [pc, #156]	; (800a9a8 <udp_input_local_match+0xb8>)
 800a90a:	4828      	ldr	r0, [pc, #160]	; (800a9ac <udp_input_local_match+0xbc>)
 800a90c:	f002 fca8 	bl	800d260 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d105      	bne.n	800a922 <udp_input_local_match+0x32>
 800a916:	4b23      	ldr	r3, [pc, #140]	; (800a9a4 <udp_input_local_match+0xb4>)
 800a918:	2288      	movs	r2, #136	; 0x88
 800a91a:	4925      	ldr	r1, [pc, #148]	; (800a9b0 <udp_input_local_match+0xc0>)
 800a91c:	4823      	ldr	r0, [pc, #140]	; (800a9ac <udp_input_local_match+0xbc>)
 800a91e:	f002 fc9f 	bl	800d260 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	7a1b      	ldrb	r3, [r3, #8]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d00b      	beq.n	800a942 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	7a1a      	ldrb	r2, [r3, #8]
 800a92e:	4b21      	ldr	r3, [pc, #132]	; (800a9b4 <udp_input_local_match+0xc4>)
 800a930:	685b      	ldr	r3, [r3, #4]
 800a932:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a936:	3301      	adds	r3, #1
 800a938:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d001      	beq.n	800a942 <udp_input_local_match+0x52>
    return 0;
 800a93e:	2300      	movs	r3, #0
 800a940:	e02b      	b.n	800a99a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800a942:	79fb      	ldrb	r3, [r7, #7]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d018      	beq.n	800a97a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d013      	beq.n	800a976 <udp_input_local_match+0x86>
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d00f      	beq.n	800a976 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800a956:	4b17      	ldr	r3, [pc, #92]	; (800a9b4 <udp_input_local_match+0xc4>)
 800a958:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a95a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a95e:	d00a      	beq.n	800a976 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681a      	ldr	r2, [r3, #0]
 800a964:	4b13      	ldr	r3, [pc, #76]	; (800a9b4 <udp_input_local_match+0xc4>)
 800a966:	695b      	ldr	r3, [r3, #20]
 800a968:	405a      	eors	r2, r3
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	3308      	adds	r3, #8
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800a972:	2b00      	cmp	r3, #0
 800a974:	d110      	bne.n	800a998 <udp_input_local_match+0xa8>
          return 1;
 800a976:	2301      	movs	r3, #1
 800a978:	e00f      	b.n	800a99a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d009      	beq.n	800a994 <udp_input_local_match+0xa4>
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d005      	beq.n	800a994 <udp_input_local_match+0xa4>
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	681a      	ldr	r2, [r3, #0]
 800a98c:	4b09      	ldr	r3, [pc, #36]	; (800a9b4 <udp_input_local_match+0xc4>)
 800a98e:	695b      	ldr	r3, [r3, #20]
 800a990:	429a      	cmp	r2, r3
 800a992:	d101      	bne.n	800a998 <udp_input_local_match+0xa8>
        return 1;
 800a994:	2301      	movs	r3, #1
 800a996:	e000      	b.n	800a99a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800a998:	2300      	movs	r3, #0
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3710      	adds	r7, #16
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}
 800a9a2:	bf00      	nop
 800a9a4:	080102d0 	.word	0x080102d0
 800a9a8:	08010300 	.word	0x08010300
 800a9ac:	08010324 	.word	0x08010324
 800a9b0:	0801034c 	.word	0x0801034c
 800a9b4:	20004cd8 	.word	0x20004cd8

0800a9b8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800a9b8:	b590      	push	{r4, r7, lr}
 800a9ba:	b08d      	sub	sp, #52	; 0x34
 800a9bc:	af02      	add	r7, sp, #8
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d105      	bne.n	800a9d8 <udp_input+0x20>
 800a9cc:	4b7c      	ldr	r3, [pc, #496]	; (800abc0 <udp_input+0x208>)
 800a9ce:	22cf      	movs	r2, #207	; 0xcf
 800a9d0:	497c      	ldr	r1, [pc, #496]	; (800abc4 <udp_input+0x20c>)
 800a9d2:	487d      	ldr	r0, [pc, #500]	; (800abc8 <udp_input+0x210>)
 800a9d4:	f002 fc44 	bl	800d260 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d105      	bne.n	800a9ea <udp_input+0x32>
 800a9de:	4b78      	ldr	r3, [pc, #480]	; (800abc0 <udp_input+0x208>)
 800a9e0:	22d0      	movs	r2, #208	; 0xd0
 800a9e2:	497a      	ldr	r1, [pc, #488]	; (800abcc <udp_input+0x214>)
 800a9e4:	4878      	ldr	r0, [pc, #480]	; (800abc8 <udp_input+0x210>)
 800a9e6:	f002 fc3b 	bl	800d260 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	895b      	ldrh	r3, [r3, #10]
 800a9ee:	2b07      	cmp	r3, #7
 800a9f0:	d803      	bhi.n	800a9fa <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f7fa fa36 	bl	8004e64 <pbuf_free>
    goto end;
 800a9f8:	e0de      	b.n	800abb8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	685b      	ldr	r3, [r3, #4]
 800a9fe:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800aa00:	4b73      	ldr	r3, [pc, #460]	; (800abd0 <udp_input+0x218>)
 800aa02:	695b      	ldr	r3, [r3, #20]
 800aa04:	4a72      	ldr	r2, [pc, #456]	; (800abd0 <udp_input+0x218>)
 800aa06:	6812      	ldr	r2, [r2, #0]
 800aa08:	4611      	mov	r1, r2
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f001 fc88 	bl	800c320 <ip4_addr_isbroadcast_u32>
 800aa10:	4603      	mov	r3, r0
 800aa12:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	881b      	ldrh	r3, [r3, #0]
 800aa18:	b29b      	uxth	r3, r3
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f7f8 fec4 	bl	80037a8 <lwip_htons>
 800aa20:	4603      	mov	r3, r0
 800aa22:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	885b      	ldrh	r3, [r3, #2]
 800aa28:	b29b      	uxth	r3, r3
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f7f8 febc 	bl	80037a8 <lwip_htons>
 800aa30:	4603      	mov	r3, r0
 800aa32:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800aa34:	2300      	movs	r3, #0
 800aa36:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800aa40:	4b64      	ldr	r3, [pc, #400]	; (800abd4 <udp_input+0x21c>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	627b      	str	r3, [r7, #36]	; 0x24
 800aa46:	e054      	b.n	800aaf2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800aa48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4a:	8a5b      	ldrh	r3, [r3, #18]
 800aa4c:	89fa      	ldrh	r2, [r7, #14]
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d14a      	bne.n	800aae8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800aa52:	7cfb      	ldrb	r3, [r7, #19]
 800aa54:	461a      	mov	r2, r3
 800aa56:	6839      	ldr	r1, [r7, #0]
 800aa58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa5a:	f7ff ff49 	bl	800a8f0 <udp_input_local_match>
 800aa5e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d041      	beq.n	800aae8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800aa64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa66:	7c1b      	ldrb	r3, [r3, #16]
 800aa68:	f003 0304 	and.w	r3, r3, #4
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d11d      	bne.n	800aaac <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800aa70:	69fb      	ldr	r3, [r7, #28]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d102      	bne.n	800aa7c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800aa76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa78:	61fb      	str	r3, [r7, #28]
 800aa7a:	e017      	b.n	800aaac <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800aa7c:	7cfb      	ldrb	r3, [r7, #19]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d014      	beq.n	800aaac <udp_input+0xf4>
 800aa82:	4b53      	ldr	r3, [pc, #332]	; (800abd0 <udp_input+0x218>)
 800aa84:	695b      	ldr	r3, [r3, #20]
 800aa86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa8a:	d10f      	bne.n	800aaac <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800aa8c:	69fb      	ldr	r3, [r7, #28]
 800aa8e:	681a      	ldr	r2, [r3, #0]
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	3304      	adds	r3, #4
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	429a      	cmp	r2, r3
 800aa98:	d008      	beq.n	800aaac <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800aa9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa9c:	681a      	ldr	r2, [r3, #0]
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	3304      	adds	r3, #4
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	429a      	cmp	r2, r3
 800aaa6:	d101      	bne.n	800aaac <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800aaa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaaa:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800aaac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaae:	8a9b      	ldrh	r3, [r3, #20]
 800aab0:	8a3a      	ldrh	r2, [r7, #16]
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d118      	bne.n	800aae8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800aab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d005      	beq.n	800aaca <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800aabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac0:	685a      	ldr	r2, [r3, #4]
 800aac2:	4b43      	ldr	r3, [pc, #268]	; (800abd0 <udp_input+0x218>)
 800aac4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800aac6:	429a      	cmp	r2, r3
 800aac8:	d10e      	bne.n	800aae8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800aaca:	6a3b      	ldr	r3, [r7, #32]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d014      	beq.n	800aafa <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800aad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad2:	68da      	ldr	r2, [r3, #12]
 800aad4:	6a3b      	ldr	r3, [r7, #32]
 800aad6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800aad8:	4b3e      	ldr	r3, [pc, #248]	; (800abd4 <udp_input+0x21c>)
 800aada:	681a      	ldr	r2, [r3, #0]
 800aadc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aade:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800aae0:	4a3c      	ldr	r2, [pc, #240]	; (800abd4 <udp_input+0x21c>)
 800aae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800aae6:	e008      	b.n	800aafa <udp_input+0x142>
      }
    }

    prev = pcb;
 800aae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaea:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800aaec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaee:	68db      	ldr	r3, [r3, #12]
 800aaf0:	627b      	str	r3, [r7, #36]	; 0x24
 800aaf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d1a7      	bne.n	800aa48 <udp_input+0x90>
 800aaf8:	e000      	b.n	800aafc <udp_input+0x144>
        break;
 800aafa:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800aafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d101      	bne.n	800ab06 <udp_input+0x14e>
    pcb = uncon_pcb;
 800ab02:	69fb      	ldr	r3, [r7, #28]
 800ab04:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800ab06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d002      	beq.n	800ab12 <udp_input+0x15a>
    for_us = 1;
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	76fb      	strb	r3, [r7, #27]
 800ab10:	e00a      	b.n	800ab28 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	3304      	adds	r3, #4
 800ab16:	681a      	ldr	r2, [r3, #0]
 800ab18:	4b2d      	ldr	r3, [pc, #180]	; (800abd0 <udp_input+0x218>)
 800ab1a:	695b      	ldr	r3, [r3, #20]
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	bf0c      	ite	eq
 800ab20:	2301      	moveq	r3, #1
 800ab22:	2300      	movne	r3, #0
 800ab24:	b2db      	uxtb	r3, r3
 800ab26:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800ab28:	7efb      	ldrb	r3, [r7, #27]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d041      	beq.n	800abb2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800ab2e:	2108      	movs	r1, #8
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f7fa f911 	bl	8004d58 <pbuf_remove_header>
 800ab36:	4603      	mov	r3, r0
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d00a      	beq.n	800ab52 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800ab3c:	4b20      	ldr	r3, [pc, #128]	; (800abc0 <udp_input+0x208>)
 800ab3e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800ab42:	4925      	ldr	r1, [pc, #148]	; (800abd8 <udp_input+0x220>)
 800ab44:	4820      	ldr	r0, [pc, #128]	; (800abc8 <udp_input+0x210>)
 800ab46:	f002 fb8b 	bl	800d260 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f7fa f98a 	bl	8004e64 <pbuf_free>
      goto end;
 800ab50:	e032      	b.n	800abb8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800ab52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d012      	beq.n	800ab7e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800ab58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5a:	699b      	ldr	r3, [r3, #24]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d00a      	beq.n	800ab76 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800ab60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab62:	699c      	ldr	r4, [r3, #24]
 800ab64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab66:	69d8      	ldr	r0, [r3, #28]
 800ab68:	8a3b      	ldrh	r3, [r7, #16]
 800ab6a:	9300      	str	r3, [sp, #0]
 800ab6c:	4b1b      	ldr	r3, [pc, #108]	; (800abdc <udp_input+0x224>)
 800ab6e:	687a      	ldr	r2, [r7, #4]
 800ab70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ab72:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800ab74:	e021      	b.n	800abba <udp_input+0x202>
        pbuf_free(p);
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f7fa f974 	bl	8004e64 <pbuf_free>
        goto end;
 800ab7c:	e01c      	b.n	800abb8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800ab7e:	7cfb      	ldrb	r3, [r7, #19]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d112      	bne.n	800abaa <udp_input+0x1f2>
 800ab84:	4b12      	ldr	r3, [pc, #72]	; (800abd0 <udp_input+0x218>)
 800ab86:	695b      	ldr	r3, [r3, #20]
 800ab88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab8c:	2be0      	cmp	r3, #224	; 0xe0
 800ab8e:	d00c      	beq.n	800abaa <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800ab90:	4b0f      	ldr	r3, [pc, #60]	; (800abd0 <udp_input+0x218>)
 800ab92:	899b      	ldrh	r3, [r3, #12]
 800ab94:	3308      	adds	r3, #8
 800ab96:	b29b      	uxth	r3, r3
 800ab98:	b21b      	sxth	r3, r3
 800ab9a:	4619      	mov	r1, r3
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f7fa f94e 	bl	8004e3e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800aba2:	2103      	movs	r1, #3
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f001 f89b 	bl	800bce0 <icmp_dest_unreach>
      pbuf_free(p);
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f7fa f95a 	bl	8004e64 <pbuf_free>
  return;
 800abb0:	e003      	b.n	800abba <udp_input+0x202>
    pbuf_free(p);
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f7fa f956 	bl	8004e64 <pbuf_free>
  return;
 800abb8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800abba:	372c      	adds	r7, #44	; 0x2c
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd90      	pop	{r4, r7, pc}
 800abc0:	080102d0 	.word	0x080102d0
 800abc4:	08010374 	.word	0x08010374
 800abc8:	08010324 	.word	0x08010324
 800abcc:	0801038c 	.word	0x0801038c
 800abd0:	20004cd8 	.word	0x20004cd8
 800abd4:	200082a4 	.word	0x200082a4
 800abd8:	080103a8 	.word	0x080103a8
 800abdc:	20004ce8 	.word	0x20004ce8

0800abe0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b085      	sub	sp, #20
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d01e      	beq.n	800ac2e <udp_netif_ip_addr_changed+0x4e>
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d01a      	beq.n	800ac2e <udp_netif_ip_addr_changed+0x4e>
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d017      	beq.n	800ac2e <udp_netif_ip_addr_changed+0x4e>
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d013      	beq.n	800ac2e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ac06:	4b0d      	ldr	r3, [pc, #52]	; (800ac3c <udp_netif_ip_addr_changed+0x5c>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	60fb      	str	r3, [r7, #12]
 800ac0c:	e00c      	b.n	800ac28 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681a      	ldr	r2, [r3, #0]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d103      	bne.n	800ac22 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	681a      	ldr	r2, [r3, #0]
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	68db      	ldr	r3, [r3, #12]
 800ac26:	60fb      	str	r3, [r7, #12]
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d1ef      	bne.n	800ac0e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800ac2e:	bf00      	nop
 800ac30:	3714      	adds	r7, #20
 800ac32:	46bd      	mov	sp, r7
 800ac34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac38:	4770      	bx	lr
 800ac3a:	bf00      	nop
 800ac3c:	200082a4 	.word	0x200082a4

0800ac40 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b082      	sub	sp, #8
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800ac48:	4915      	ldr	r1, [pc, #84]	; (800aca0 <etharp_free_entry+0x60>)
 800ac4a:	687a      	ldr	r2, [r7, #4]
 800ac4c:	4613      	mov	r3, r2
 800ac4e:	005b      	lsls	r3, r3, #1
 800ac50:	4413      	add	r3, r2
 800ac52:	00db      	lsls	r3, r3, #3
 800ac54:	440b      	add	r3, r1
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d013      	beq.n	800ac84 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800ac5c:	4910      	ldr	r1, [pc, #64]	; (800aca0 <etharp_free_entry+0x60>)
 800ac5e:	687a      	ldr	r2, [r7, #4]
 800ac60:	4613      	mov	r3, r2
 800ac62:	005b      	lsls	r3, r3, #1
 800ac64:	4413      	add	r3, r2
 800ac66:	00db      	lsls	r3, r3, #3
 800ac68:	440b      	add	r3, r1
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f7fa f8f9 	bl	8004e64 <pbuf_free>
    arp_table[i].q = NULL;
 800ac72:	490b      	ldr	r1, [pc, #44]	; (800aca0 <etharp_free_entry+0x60>)
 800ac74:	687a      	ldr	r2, [r7, #4]
 800ac76:	4613      	mov	r3, r2
 800ac78:	005b      	lsls	r3, r3, #1
 800ac7a:	4413      	add	r3, r2
 800ac7c:	00db      	lsls	r3, r3, #3
 800ac7e:	440b      	add	r3, r1
 800ac80:	2200      	movs	r2, #0
 800ac82:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800ac84:	4906      	ldr	r1, [pc, #24]	; (800aca0 <etharp_free_entry+0x60>)
 800ac86:	687a      	ldr	r2, [r7, #4]
 800ac88:	4613      	mov	r3, r2
 800ac8a:	005b      	lsls	r3, r3, #1
 800ac8c:	4413      	add	r3, r2
 800ac8e:	00db      	lsls	r3, r3, #3
 800ac90:	440b      	add	r3, r1
 800ac92:	3314      	adds	r3, #20
 800ac94:	2200      	movs	r2, #0
 800ac96:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800ac98:	bf00      	nop
 800ac9a:	3708      	adds	r7, #8
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}
 800aca0:	200082a8 	.word	0x200082a8

0800aca4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b082      	sub	sp, #8
 800aca8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800acaa:	2300      	movs	r3, #0
 800acac:	607b      	str	r3, [r7, #4]
 800acae:	e096      	b.n	800adde <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800acb0:	494f      	ldr	r1, [pc, #316]	; (800adf0 <etharp_tmr+0x14c>)
 800acb2:	687a      	ldr	r2, [r7, #4]
 800acb4:	4613      	mov	r3, r2
 800acb6:	005b      	lsls	r3, r3, #1
 800acb8:	4413      	add	r3, r2
 800acba:	00db      	lsls	r3, r3, #3
 800acbc:	440b      	add	r3, r1
 800acbe:	3314      	adds	r3, #20
 800acc0:	781b      	ldrb	r3, [r3, #0]
 800acc2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800acc4:	78fb      	ldrb	r3, [r7, #3]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	f000 8086 	beq.w	800add8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800accc:	4948      	ldr	r1, [pc, #288]	; (800adf0 <etharp_tmr+0x14c>)
 800acce:	687a      	ldr	r2, [r7, #4]
 800acd0:	4613      	mov	r3, r2
 800acd2:	005b      	lsls	r3, r3, #1
 800acd4:	4413      	add	r3, r2
 800acd6:	00db      	lsls	r3, r3, #3
 800acd8:	440b      	add	r3, r1
 800acda:	3312      	adds	r3, #18
 800acdc:	881b      	ldrh	r3, [r3, #0]
 800acde:	3301      	adds	r3, #1
 800ace0:	b298      	uxth	r0, r3
 800ace2:	4943      	ldr	r1, [pc, #268]	; (800adf0 <etharp_tmr+0x14c>)
 800ace4:	687a      	ldr	r2, [r7, #4]
 800ace6:	4613      	mov	r3, r2
 800ace8:	005b      	lsls	r3, r3, #1
 800acea:	4413      	add	r3, r2
 800acec:	00db      	lsls	r3, r3, #3
 800acee:	440b      	add	r3, r1
 800acf0:	3312      	adds	r3, #18
 800acf2:	4602      	mov	r2, r0
 800acf4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800acf6:	493e      	ldr	r1, [pc, #248]	; (800adf0 <etharp_tmr+0x14c>)
 800acf8:	687a      	ldr	r2, [r7, #4]
 800acfa:	4613      	mov	r3, r2
 800acfc:	005b      	lsls	r3, r3, #1
 800acfe:	4413      	add	r3, r2
 800ad00:	00db      	lsls	r3, r3, #3
 800ad02:	440b      	add	r3, r1
 800ad04:	3312      	adds	r3, #18
 800ad06:	881b      	ldrh	r3, [r3, #0]
 800ad08:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800ad0c:	d215      	bcs.n	800ad3a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ad0e:	4938      	ldr	r1, [pc, #224]	; (800adf0 <etharp_tmr+0x14c>)
 800ad10:	687a      	ldr	r2, [r7, #4]
 800ad12:	4613      	mov	r3, r2
 800ad14:	005b      	lsls	r3, r3, #1
 800ad16:	4413      	add	r3, r2
 800ad18:	00db      	lsls	r3, r3, #3
 800ad1a:	440b      	add	r3, r1
 800ad1c:	3314      	adds	r3, #20
 800ad1e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ad20:	2b01      	cmp	r3, #1
 800ad22:	d10e      	bne.n	800ad42 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800ad24:	4932      	ldr	r1, [pc, #200]	; (800adf0 <etharp_tmr+0x14c>)
 800ad26:	687a      	ldr	r2, [r7, #4]
 800ad28:	4613      	mov	r3, r2
 800ad2a:	005b      	lsls	r3, r3, #1
 800ad2c:	4413      	add	r3, r2
 800ad2e:	00db      	lsls	r3, r3, #3
 800ad30:	440b      	add	r3, r1
 800ad32:	3312      	adds	r3, #18
 800ad34:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ad36:	2b04      	cmp	r3, #4
 800ad38:	d903      	bls.n	800ad42 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f7ff ff80 	bl	800ac40 <etharp_free_entry>
 800ad40:	e04a      	b.n	800add8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800ad42:	492b      	ldr	r1, [pc, #172]	; (800adf0 <etharp_tmr+0x14c>)
 800ad44:	687a      	ldr	r2, [r7, #4]
 800ad46:	4613      	mov	r3, r2
 800ad48:	005b      	lsls	r3, r3, #1
 800ad4a:	4413      	add	r3, r2
 800ad4c:	00db      	lsls	r3, r3, #3
 800ad4e:	440b      	add	r3, r1
 800ad50:	3314      	adds	r3, #20
 800ad52:	781b      	ldrb	r3, [r3, #0]
 800ad54:	2b03      	cmp	r3, #3
 800ad56:	d10a      	bne.n	800ad6e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800ad58:	4925      	ldr	r1, [pc, #148]	; (800adf0 <etharp_tmr+0x14c>)
 800ad5a:	687a      	ldr	r2, [r7, #4]
 800ad5c:	4613      	mov	r3, r2
 800ad5e:	005b      	lsls	r3, r3, #1
 800ad60:	4413      	add	r3, r2
 800ad62:	00db      	lsls	r3, r3, #3
 800ad64:	440b      	add	r3, r1
 800ad66:	3314      	adds	r3, #20
 800ad68:	2204      	movs	r2, #4
 800ad6a:	701a      	strb	r2, [r3, #0]
 800ad6c:	e034      	b.n	800add8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800ad6e:	4920      	ldr	r1, [pc, #128]	; (800adf0 <etharp_tmr+0x14c>)
 800ad70:	687a      	ldr	r2, [r7, #4]
 800ad72:	4613      	mov	r3, r2
 800ad74:	005b      	lsls	r3, r3, #1
 800ad76:	4413      	add	r3, r2
 800ad78:	00db      	lsls	r3, r3, #3
 800ad7a:	440b      	add	r3, r1
 800ad7c:	3314      	adds	r3, #20
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	2b04      	cmp	r3, #4
 800ad82:	d10a      	bne.n	800ad9a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800ad84:	491a      	ldr	r1, [pc, #104]	; (800adf0 <etharp_tmr+0x14c>)
 800ad86:	687a      	ldr	r2, [r7, #4]
 800ad88:	4613      	mov	r3, r2
 800ad8a:	005b      	lsls	r3, r3, #1
 800ad8c:	4413      	add	r3, r2
 800ad8e:	00db      	lsls	r3, r3, #3
 800ad90:	440b      	add	r3, r1
 800ad92:	3314      	adds	r3, #20
 800ad94:	2202      	movs	r2, #2
 800ad96:	701a      	strb	r2, [r3, #0]
 800ad98:	e01e      	b.n	800add8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ad9a:	4915      	ldr	r1, [pc, #84]	; (800adf0 <etharp_tmr+0x14c>)
 800ad9c:	687a      	ldr	r2, [r7, #4]
 800ad9e:	4613      	mov	r3, r2
 800ada0:	005b      	lsls	r3, r3, #1
 800ada2:	4413      	add	r3, r2
 800ada4:	00db      	lsls	r3, r3, #3
 800ada6:	440b      	add	r3, r1
 800ada8:	3314      	adds	r3, #20
 800adaa:	781b      	ldrb	r3, [r3, #0]
 800adac:	2b01      	cmp	r3, #1
 800adae:	d113      	bne.n	800add8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800adb0:	490f      	ldr	r1, [pc, #60]	; (800adf0 <etharp_tmr+0x14c>)
 800adb2:	687a      	ldr	r2, [r7, #4]
 800adb4:	4613      	mov	r3, r2
 800adb6:	005b      	lsls	r3, r3, #1
 800adb8:	4413      	add	r3, r2
 800adba:	00db      	lsls	r3, r3, #3
 800adbc:	440b      	add	r3, r1
 800adbe:	3308      	adds	r3, #8
 800adc0:	6818      	ldr	r0, [r3, #0]
 800adc2:	687a      	ldr	r2, [r7, #4]
 800adc4:	4613      	mov	r3, r2
 800adc6:	005b      	lsls	r3, r3, #1
 800adc8:	4413      	add	r3, r2
 800adca:	00db      	lsls	r3, r3, #3
 800adcc:	4a08      	ldr	r2, [pc, #32]	; (800adf0 <etharp_tmr+0x14c>)
 800adce:	4413      	add	r3, r2
 800add0:	3304      	adds	r3, #4
 800add2:	4619      	mov	r1, r3
 800add4:	f000 fe6e 	bl	800bab4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	3301      	adds	r3, #1
 800addc:	607b      	str	r3, [r7, #4]
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2b09      	cmp	r3, #9
 800ade2:	f77f af65 	ble.w	800acb0 <etharp_tmr+0xc>
      }
    }
  }
}
 800ade6:	bf00      	nop
 800ade8:	bf00      	nop
 800adea:	3708      	adds	r7, #8
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}
 800adf0:	200082a8 	.word	0x200082a8

0800adf4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b08a      	sub	sp, #40	; 0x28
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	60f8      	str	r0, [r7, #12]
 800adfc:	460b      	mov	r3, r1
 800adfe:	607a      	str	r2, [r7, #4]
 800ae00:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800ae02:	230a      	movs	r3, #10
 800ae04:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ae06:	230a      	movs	r3, #10
 800ae08:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800ae0a:	230a      	movs	r3, #10
 800ae0c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800ae12:	230a      	movs	r3, #10
 800ae14:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800ae16:	2300      	movs	r3, #0
 800ae18:	83bb      	strh	r3, [r7, #28]
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	837b      	strh	r3, [r7, #26]
 800ae1e:	2300      	movs	r3, #0
 800ae20:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ae22:	2300      	movs	r3, #0
 800ae24:	843b      	strh	r3, [r7, #32]
 800ae26:	e0ae      	b.n	800af86 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800ae28:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ae2c:	49a6      	ldr	r1, [pc, #664]	; (800b0c8 <etharp_find_entry+0x2d4>)
 800ae2e:	4613      	mov	r3, r2
 800ae30:	005b      	lsls	r3, r3, #1
 800ae32:	4413      	add	r3, r2
 800ae34:	00db      	lsls	r3, r3, #3
 800ae36:	440b      	add	r3, r1
 800ae38:	3314      	adds	r3, #20
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800ae3e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ae42:	2b0a      	cmp	r3, #10
 800ae44:	d105      	bne.n	800ae52 <etharp_find_entry+0x5e>
 800ae46:	7dfb      	ldrb	r3, [r7, #23]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d102      	bne.n	800ae52 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800ae4c:	8c3b      	ldrh	r3, [r7, #32]
 800ae4e:	847b      	strh	r3, [r7, #34]	; 0x22
 800ae50:	e095      	b.n	800af7e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800ae52:	7dfb      	ldrb	r3, [r7, #23]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	f000 8092 	beq.w	800af7e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800ae5a:	7dfb      	ldrb	r3, [r7, #23]
 800ae5c:	2b01      	cmp	r3, #1
 800ae5e:	d009      	beq.n	800ae74 <etharp_find_entry+0x80>
 800ae60:	7dfb      	ldrb	r3, [r7, #23]
 800ae62:	2b01      	cmp	r3, #1
 800ae64:	d806      	bhi.n	800ae74 <etharp_find_entry+0x80>
 800ae66:	4b99      	ldr	r3, [pc, #612]	; (800b0cc <etharp_find_entry+0x2d8>)
 800ae68:	f240 1223 	movw	r2, #291	; 0x123
 800ae6c:	4998      	ldr	r1, [pc, #608]	; (800b0d0 <etharp_find_entry+0x2dc>)
 800ae6e:	4899      	ldr	r0, [pc, #612]	; (800b0d4 <etharp_find_entry+0x2e0>)
 800ae70:	f002 f9f6 	bl	800d260 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d020      	beq.n	800aebc <etharp_find_entry+0xc8>
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	6819      	ldr	r1, [r3, #0]
 800ae7e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ae82:	4891      	ldr	r0, [pc, #580]	; (800b0c8 <etharp_find_entry+0x2d4>)
 800ae84:	4613      	mov	r3, r2
 800ae86:	005b      	lsls	r3, r3, #1
 800ae88:	4413      	add	r3, r2
 800ae8a:	00db      	lsls	r3, r3, #3
 800ae8c:	4403      	add	r3, r0
 800ae8e:	3304      	adds	r3, #4
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	4299      	cmp	r1, r3
 800ae94:	d112      	bne.n	800aebc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d00c      	beq.n	800aeb6 <etharp_find_entry+0xc2>
 800ae9c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800aea0:	4989      	ldr	r1, [pc, #548]	; (800b0c8 <etharp_find_entry+0x2d4>)
 800aea2:	4613      	mov	r3, r2
 800aea4:	005b      	lsls	r3, r3, #1
 800aea6:	4413      	add	r3, r2
 800aea8:	00db      	lsls	r3, r3, #3
 800aeaa:	440b      	add	r3, r1
 800aeac:	3308      	adds	r3, #8
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	687a      	ldr	r2, [r7, #4]
 800aeb2:	429a      	cmp	r2, r3
 800aeb4:	d102      	bne.n	800aebc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800aeb6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800aeba:	e100      	b.n	800b0be <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800aebc:	7dfb      	ldrb	r3, [r7, #23]
 800aebe:	2b01      	cmp	r3, #1
 800aec0:	d140      	bne.n	800af44 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800aec2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800aec6:	4980      	ldr	r1, [pc, #512]	; (800b0c8 <etharp_find_entry+0x2d4>)
 800aec8:	4613      	mov	r3, r2
 800aeca:	005b      	lsls	r3, r3, #1
 800aecc:	4413      	add	r3, r2
 800aece:	00db      	lsls	r3, r3, #3
 800aed0:	440b      	add	r3, r1
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d01a      	beq.n	800af0e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800aed8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800aedc:	497a      	ldr	r1, [pc, #488]	; (800b0c8 <etharp_find_entry+0x2d4>)
 800aede:	4613      	mov	r3, r2
 800aee0:	005b      	lsls	r3, r3, #1
 800aee2:	4413      	add	r3, r2
 800aee4:	00db      	lsls	r3, r3, #3
 800aee6:	440b      	add	r3, r1
 800aee8:	3312      	adds	r3, #18
 800aeea:	881b      	ldrh	r3, [r3, #0]
 800aeec:	8bba      	ldrh	r2, [r7, #28]
 800aeee:	429a      	cmp	r2, r3
 800aef0:	d845      	bhi.n	800af7e <etharp_find_entry+0x18a>
            old_queue = i;
 800aef2:	8c3b      	ldrh	r3, [r7, #32]
 800aef4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800aef6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800aefa:	4973      	ldr	r1, [pc, #460]	; (800b0c8 <etharp_find_entry+0x2d4>)
 800aefc:	4613      	mov	r3, r2
 800aefe:	005b      	lsls	r3, r3, #1
 800af00:	4413      	add	r3, r2
 800af02:	00db      	lsls	r3, r3, #3
 800af04:	440b      	add	r3, r1
 800af06:	3312      	adds	r3, #18
 800af08:	881b      	ldrh	r3, [r3, #0]
 800af0a:	83bb      	strh	r3, [r7, #28]
 800af0c:	e037      	b.n	800af7e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800af0e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800af12:	496d      	ldr	r1, [pc, #436]	; (800b0c8 <etharp_find_entry+0x2d4>)
 800af14:	4613      	mov	r3, r2
 800af16:	005b      	lsls	r3, r3, #1
 800af18:	4413      	add	r3, r2
 800af1a:	00db      	lsls	r3, r3, #3
 800af1c:	440b      	add	r3, r1
 800af1e:	3312      	adds	r3, #18
 800af20:	881b      	ldrh	r3, [r3, #0]
 800af22:	8b7a      	ldrh	r2, [r7, #26]
 800af24:	429a      	cmp	r2, r3
 800af26:	d82a      	bhi.n	800af7e <etharp_find_entry+0x18a>
            old_pending = i;
 800af28:	8c3b      	ldrh	r3, [r7, #32]
 800af2a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800af2c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800af30:	4965      	ldr	r1, [pc, #404]	; (800b0c8 <etharp_find_entry+0x2d4>)
 800af32:	4613      	mov	r3, r2
 800af34:	005b      	lsls	r3, r3, #1
 800af36:	4413      	add	r3, r2
 800af38:	00db      	lsls	r3, r3, #3
 800af3a:	440b      	add	r3, r1
 800af3c:	3312      	adds	r3, #18
 800af3e:	881b      	ldrh	r3, [r3, #0]
 800af40:	837b      	strh	r3, [r7, #26]
 800af42:	e01c      	b.n	800af7e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800af44:	7dfb      	ldrb	r3, [r7, #23]
 800af46:	2b01      	cmp	r3, #1
 800af48:	d919      	bls.n	800af7e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800af4a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800af4e:	495e      	ldr	r1, [pc, #376]	; (800b0c8 <etharp_find_entry+0x2d4>)
 800af50:	4613      	mov	r3, r2
 800af52:	005b      	lsls	r3, r3, #1
 800af54:	4413      	add	r3, r2
 800af56:	00db      	lsls	r3, r3, #3
 800af58:	440b      	add	r3, r1
 800af5a:	3312      	adds	r3, #18
 800af5c:	881b      	ldrh	r3, [r3, #0]
 800af5e:	8b3a      	ldrh	r2, [r7, #24]
 800af60:	429a      	cmp	r2, r3
 800af62:	d80c      	bhi.n	800af7e <etharp_find_entry+0x18a>
            old_stable = i;
 800af64:	8c3b      	ldrh	r3, [r7, #32]
 800af66:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800af68:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800af6c:	4956      	ldr	r1, [pc, #344]	; (800b0c8 <etharp_find_entry+0x2d4>)
 800af6e:	4613      	mov	r3, r2
 800af70:	005b      	lsls	r3, r3, #1
 800af72:	4413      	add	r3, r2
 800af74:	00db      	lsls	r3, r3, #3
 800af76:	440b      	add	r3, r1
 800af78:	3312      	adds	r3, #18
 800af7a:	881b      	ldrh	r3, [r3, #0]
 800af7c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800af7e:	8c3b      	ldrh	r3, [r7, #32]
 800af80:	3301      	adds	r3, #1
 800af82:	b29b      	uxth	r3, r3
 800af84:	843b      	strh	r3, [r7, #32]
 800af86:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800af8a:	2b09      	cmp	r3, #9
 800af8c:	f77f af4c 	ble.w	800ae28 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800af90:	7afb      	ldrb	r3, [r7, #11]
 800af92:	f003 0302 	and.w	r3, r3, #2
 800af96:	2b00      	cmp	r3, #0
 800af98:	d108      	bne.n	800afac <etharp_find_entry+0x1b8>
 800af9a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800af9e:	2b0a      	cmp	r3, #10
 800afa0:	d107      	bne.n	800afb2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800afa2:	7afb      	ldrb	r3, [r7, #11]
 800afa4:	f003 0301 	and.w	r3, r3, #1
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d102      	bne.n	800afb2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800afac:	f04f 33ff 	mov.w	r3, #4294967295
 800afb0:	e085      	b.n	800b0be <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800afb2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800afb6:	2b09      	cmp	r3, #9
 800afb8:	dc02      	bgt.n	800afc0 <etharp_find_entry+0x1cc>
    i = empty;
 800afba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800afbc:	843b      	strh	r3, [r7, #32]
 800afbe:	e039      	b.n	800b034 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800afc0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800afc4:	2b09      	cmp	r3, #9
 800afc6:	dc14      	bgt.n	800aff2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800afc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800afca:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800afcc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800afd0:	493d      	ldr	r1, [pc, #244]	; (800b0c8 <etharp_find_entry+0x2d4>)
 800afd2:	4613      	mov	r3, r2
 800afd4:	005b      	lsls	r3, r3, #1
 800afd6:	4413      	add	r3, r2
 800afd8:	00db      	lsls	r3, r3, #3
 800afda:	440b      	add	r3, r1
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d018      	beq.n	800b014 <etharp_find_entry+0x220>
 800afe2:	4b3a      	ldr	r3, [pc, #232]	; (800b0cc <etharp_find_entry+0x2d8>)
 800afe4:	f240 126d 	movw	r2, #365	; 0x16d
 800afe8:	493b      	ldr	r1, [pc, #236]	; (800b0d8 <etharp_find_entry+0x2e4>)
 800afea:	483a      	ldr	r0, [pc, #232]	; (800b0d4 <etharp_find_entry+0x2e0>)
 800afec:	f002 f938 	bl	800d260 <iprintf>
 800aff0:	e010      	b.n	800b014 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800aff2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800aff6:	2b09      	cmp	r3, #9
 800aff8:	dc02      	bgt.n	800b000 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800affa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800affc:	843b      	strh	r3, [r7, #32]
 800affe:	e009      	b.n	800b014 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800b000:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800b004:	2b09      	cmp	r3, #9
 800b006:	dc02      	bgt.n	800b00e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800b008:	8bfb      	ldrh	r3, [r7, #30]
 800b00a:	843b      	strh	r3, [r7, #32]
 800b00c:	e002      	b.n	800b014 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800b00e:	f04f 33ff 	mov.w	r3, #4294967295
 800b012:	e054      	b.n	800b0be <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800b014:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b018:	2b09      	cmp	r3, #9
 800b01a:	dd06      	ble.n	800b02a <etharp_find_entry+0x236>
 800b01c:	4b2b      	ldr	r3, [pc, #172]	; (800b0cc <etharp_find_entry+0x2d8>)
 800b01e:	f240 127f 	movw	r2, #383	; 0x17f
 800b022:	492e      	ldr	r1, [pc, #184]	; (800b0dc <etharp_find_entry+0x2e8>)
 800b024:	482b      	ldr	r0, [pc, #172]	; (800b0d4 <etharp_find_entry+0x2e0>)
 800b026:	f002 f91b 	bl	800d260 <iprintf>
    etharp_free_entry(i);
 800b02a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b02e:	4618      	mov	r0, r3
 800b030:	f7ff fe06 	bl	800ac40 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800b034:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b038:	2b09      	cmp	r3, #9
 800b03a:	dd06      	ble.n	800b04a <etharp_find_entry+0x256>
 800b03c:	4b23      	ldr	r3, [pc, #140]	; (800b0cc <etharp_find_entry+0x2d8>)
 800b03e:	f240 1283 	movw	r2, #387	; 0x183
 800b042:	4926      	ldr	r1, [pc, #152]	; (800b0dc <etharp_find_entry+0x2e8>)
 800b044:	4823      	ldr	r0, [pc, #140]	; (800b0d4 <etharp_find_entry+0x2e0>)
 800b046:	f002 f90b 	bl	800d260 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800b04a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b04e:	491e      	ldr	r1, [pc, #120]	; (800b0c8 <etharp_find_entry+0x2d4>)
 800b050:	4613      	mov	r3, r2
 800b052:	005b      	lsls	r3, r3, #1
 800b054:	4413      	add	r3, r2
 800b056:	00db      	lsls	r3, r3, #3
 800b058:	440b      	add	r3, r1
 800b05a:	3314      	adds	r3, #20
 800b05c:	781b      	ldrb	r3, [r3, #0]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d006      	beq.n	800b070 <etharp_find_entry+0x27c>
 800b062:	4b1a      	ldr	r3, [pc, #104]	; (800b0cc <etharp_find_entry+0x2d8>)
 800b064:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800b068:	491d      	ldr	r1, [pc, #116]	; (800b0e0 <etharp_find_entry+0x2ec>)
 800b06a:	481a      	ldr	r0, [pc, #104]	; (800b0d4 <etharp_find_entry+0x2e0>)
 800b06c:	f002 f8f8 	bl	800d260 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d00b      	beq.n	800b08e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800b076:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	6819      	ldr	r1, [r3, #0]
 800b07e:	4812      	ldr	r0, [pc, #72]	; (800b0c8 <etharp_find_entry+0x2d4>)
 800b080:	4613      	mov	r3, r2
 800b082:	005b      	lsls	r3, r3, #1
 800b084:	4413      	add	r3, r2
 800b086:	00db      	lsls	r3, r3, #3
 800b088:	4403      	add	r3, r0
 800b08a:	3304      	adds	r3, #4
 800b08c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800b08e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b092:	490d      	ldr	r1, [pc, #52]	; (800b0c8 <etharp_find_entry+0x2d4>)
 800b094:	4613      	mov	r3, r2
 800b096:	005b      	lsls	r3, r3, #1
 800b098:	4413      	add	r3, r2
 800b09a:	00db      	lsls	r3, r3, #3
 800b09c:	440b      	add	r3, r1
 800b09e:	3312      	adds	r3, #18
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800b0a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b0a8:	4907      	ldr	r1, [pc, #28]	; (800b0c8 <etharp_find_entry+0x2d4>)
 800b0aa:	4613      	mov	r3, r2
 800b0ac:	005b      	lsls	r3, r3, #1
 800b0ae:	4413      	add	r3, r2
 800b0b0:	00db      	lsls	r3, r3, #3
 800b0b2:	440b      	add	r3, r1
 800b0b4:	3308      	adds	r3, #8
 800b0b6:	687a      	ldr	r2, [r7, #4]
 800b0b8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800b0ba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3728      	adds	r7, #40	; 0x28
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}
 800b0c6:	bf00      	nop
 800b0c8:	200082a8 	.word	0x200082a8
 800b0cc:	08010634 	.word	0x08010634
 800b0d0:	0801066c 	.word	0x0801066c
 800b0d4:	080106ac 	.word	0x080106ac
 800b0d8:	080106d4 	.word	0x080106d4
 800b0dc:	080106ec 	.word	0x080106ec
 800b0e0:	08010700 	.word	0x08010700

0800b0e4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b088      	sub	sp, #32
 800b0e8:	af02      	add	r7, sp, #8
 800b0ea:	60f8      	str	r0, [r7, #12]
 800b0ec:	60b9      	str	r1, [r7, #8]
 800b0ee:	607a      	str	r2, [r7, #4]
 800b0f0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b0f8:	2b06      	cmp	r3, #6
 800b0fa:	d006      	beq.n	800b10a <etharp_update_arp_entry+0x26>
 800b0fc:	4b48      	ldr	r3, [pc, #288]	; (800b220 <etharp_update_arp_entry+0x13c>)
 800b0fe:	f240 12a9 	movw	r2, #425	; 0x1a9
 800b102:	4948      	ldr	r1, [pc, #288]	; (800b224 <etharp_update_arp_entry+0x140>)
 800b104:	4848      	ldr	r0, [pc, #288]	; (800b228 <etharp_update_arp_entry+0x144>)
 800b106:	f002 f8ab 	bl	800d260 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d012      	beq.n	800b136 <etharp_update_arp_entry+0x52>
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d00e      	beq.n	800b136 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	68f9      	ldr	r1, [r7, #12]
 800b11e:	4618      	mov	r0, r3
 800b120:	f001 f8fe 	bl	800c320 <ip4_addr_isbroadcast_u32>
 800b124:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800b126:	2b00      	cmp	r3, #0
 800b128:	d105      	bne.n	800b136 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800b132:	2be0      	cmp	r3, #224	; 0xe0
 800b134:	d102      	bne.n	800b13c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800b136:	f06f 030f 	mvn.w	r3, #15
 800b13a:	e06c      	b.n	800b216 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800b13c:	78fb      	ldrb	r3, [r7, #3]
 800b13e:	68fa      	ldr	r2, [r7, #12]
 800b140:	4619      	mov	r1, r3
 800b142:	68b8      	ldr	r0, [r7, #8]
 800b144:	f7ff fe56 	bl	800adf4 <etharp_find_entry>
 800b148:	4603      	mov	r3, r0
 800b14a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800b14c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b150:	2b00      	cmp	r3, #0
 800b152:	da02      	bge.n	800b15a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800b154:	8afb      	ldrh	r3, [r7, #22]
 800b156:	b25b      	sxtb	r3, r3
 800b158:	e05d      	b.n	800b216 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800b15a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b15e:	4933      	ldr	r1, [pc, #204]	; (800b22c <etharp_update_arp_entry+0x148>)
 800b160:	4613      	mov	r3, r2
 800b162:	005b      	lsls	r3, r3, #1
 800b164:	4413      	add	r3, r2
 800b166:	00db      	lsls	r3, r3, #3
 800b168:	440b      	add	r3, r1
 800b16a:	3314      	adds	r3, #20
 800b16c:	2202      	movs	r2, #2
 800b16e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800b170:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b174:	492d      	ldr	r1, [pc, #180]	; (800b22c <etharp_update_arp_entry+0x148>)
 800b176:	4613      	mov	r3, r2
 800b178:	005b      	lsls	r3, r3, #1
 800b17a:	4413      	add	r3, r2
 800b17c:	00db      	lsls	r3, r3, #3
 800b17e:	440b      	add	r3, r1
 800b180:	3308      	adds	r3, #8
 800b182:	68fa      	ldr	r2, [r7, #12]
 800b184:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800b186:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b18a:	4613      	mov	r3, r2
 800b18c:	005b      	lsls	r3, r3, #1
 800b18e:	4413      	add	r3, r2
 800b190:	00db      	lsls	r3, r3, #3
 800b192:	3308      	adds	r3, #8
 800b194:	4a25      	ldr	r2, [pc, #148]	; (800b22c <etharp_update_arp_entry+0x148>)
 800b196:	4413      	add	r3, r2
 800b198:	3304      	adds	r3, #4
 800b19a:	2206      	movs	r2, #6
 800b19c:	6879      	ldr	r1, [r7, #4]
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f002 f848 	bl	800d234 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800b1a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b1a8:	4920      	ldr	r1, [pc, #128]	; (800b22c <etharp_update_arp_entry+0x148>)
 800b1aa:	4613      	mov	r3, r2
 800b1ac:	005b      	lsls	r3, r3, #1
 800b1ae:	4413      	add	r3, r2
 800b1b0:	00db      	lsls	r3, r3, #3
 800b1b2:	440b      	add	r3, r1
 800b1b4:	3312      	adds	r3, #18
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800b1ba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b1be:	491b      	ldr	r1, [pc, #108]	; (800b22c <etharp_update_arp_entry+0x148>)
 800b1c0:	4613      	mov	r3, r2
 800b1c2:	005b      	lsls	r3, r3, #1
 800b1c4:	4413      	add	r3, r2
 800b1c6:	00db      	lsls	r3, r3, #3
 800b1c8:	440b      	add	r3, r1
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d021      	beq.n	800b214 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800b1d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b1d4:	4915      	ldr	r1, [pc, #84]	; (800b22c <etharp_update_arp_entry+0x148>)
 800b1d6:	4613      	mov	r3, r2
 800b1d8:	005b      	lsls	r3, r3, #1
 800b1da:	4413      	add	r3, r2
 800b1dc:	00db      	lsls	r3, r3, #3
 800b1de:	440b      	add	r3, r1
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800b1e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b1e8:	4910      	ldr	r1, [pc, #64]	; (800b22c <etharp_update_arp_entry+0x148>)
 800b1ea:	4613      	mov	r3, r2
 800b1ec:	005b      	lsls	r3, r3, #1
 800b1ee:	4413      	add	r3, r2
 800b1f0:	00db      	lsls	r3, r3, #3
 800b1f2:	440b      	add	r3, r1
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800b1fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b202:	9300      	str	r3, [sp, #0]
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6939      	ldr	r1, [r7, #16]
 800b208:	68f8      	ldr	r0, [r7, #12]
 800b20a:	f001 ff97 	bl	800d13c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800b20e:	6938      	ldr	r0, [r7, #16]
 800b210:	f7f9 fe28 	bl	8004e64 <pbuf_free>
  }
  return ERR_OK;
 800b214:	2300      	movs	r3, #0
}
 800b216:	4618      	mov	r0, r3
 800b218:	3718      	adds	r7, #24
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}
 800b21e:	bf00      	nop
 800b220:	08010634 	.word	0x08010634
 800b224:	0801072c 	.word	0x0801072c
 800b228:	080106ac 	.word	0x080106ac
 800b22c:	200082a8 	.word	0x200082a8

0800b230 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b084      	sub	sp, #16
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b238:	2300      	movs	r3, #0
 800b23a:	60fb      	str	r3, [r7, #12]
 800b23c:	e01e      	b.n	800b27c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800b23e:	4913      	ldr	r1, [pc, #76]	; (800b28c <etharp_cleanup_netif+0x5c>)
 800b240:	68fa      	ldr	r2, [r7, #12]
 800b242:	4613      	mov	r3, r2
 800b244:	005b      	lsls	r3, r3, #1
 800b246:	4413      	add	r3, r2
 800b248:	00db      	lsls	r3, r3, #3
 800b24a:	440b      	add	r3, r1
 800b24c:	3314      	adds	r3, #20
 800b24e:	781b      	ldrb	r3, [r3, #0]
 800b250:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800b252:	7afb      	ldrb	r3, [r7, #11]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d00e      	beq.n	800b276 <etharp_cleanup_netif+0x46>
 800b258:	490c      	ldr	r1, [pc, #48]	; (800b28c <etharp_cleanup_netif+0x5c>)
 800b25a:	68fa      	ldr	r2, [r7, #12]
 800b25c:	4613      	mov	r3, r2
 800b25e:	005b      	lsls	r3, r3, #1
 800b260:	4413      	add	r3, r2
 800b262:	00db      	lsls	r3, r3, #3
 800b264:	440b      	add	r3, r1
 800b266:	3308      	adds	r3, #8
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	687a      	ldr	r2, [r7, #4]
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d102      	bne.n	800b276 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800b270:	68f8      	ldr	r0, [r7, #12]
 800b272:	f7ff fce5 	bl	800ac40 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	3301      	adds	r3, #1
 800b27a:	60fb      	str	r3, [r7, #12]
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	2b09      	cmp	r3, #9
 800b280:	dddd      	ble.n	800b23e <etharp_cleanup_netif+0xe>
    }
  }
}
 800b282:	bf00      	nop
 800b284:	bf00      	nop
 800b286:	3710      	adds	r7, #16
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}
 800b28c:	200082a8 	.word	0x200082a8

0800b290 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800b290:	b5b0      	push	{r4, r5, r7, lr}
 800b292:	b08a      	sub	sp, #40	; 0x28
 800b294:	af04      	add	r7, sp, #16
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d107      	bne.n	800b2b0 <etharp_input+0x20>
 800b2a0:	4b3d      	ldr	r3, [pc, #244]	; (800b398 <etharp_input+0x108>)
 800b2a2:	f240 228a 	movw	r2, #650	; 0x28a
 800b2a6:	493d      	ldr	r1, [pc, #244]	; (800b39c <etharp_input+0x10c>)
 800b2a8:	483d      	ldr	r0, [pc, #244]	; (800b3a0 <etharp_input+0x110>)
 800b2aa:	f001 ffd9 	bl	800d260 <iprintf>
 800b2ae:	e06f      	b.n	800b390 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	881b      	ldrh	r3, [r3, #0]
 800b2ba:	b29b      	uxth	r3, r3
 800b2bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2c0:	d10c      	bne.n	800b2dc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800b2c6:	2b06      	cmp	r3, #6
 800b2c8:	d108      	bne.n	800b2dc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800b2ca:	693b      	ldr	r3, [r7, #16]
 800b2cc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800b2ce:	2b04      	cmp	r3, #4
 800b2d0:	d104      	bne.n	800b2dc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	885b      	ldrh	r3, [r3, #2]
 800b2d6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800b2d8:	2b08      	cmp	r3, #8
 800b2da:	d003      	beq.n	800b2e4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f7f9 fdc1 	bl	8004e64 <pbuf_free>
    return;
 800b2e2:	e055      	b.n	800b390 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	330e      	adds	r3, #14
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	3318      	adds	r3, #24
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	3304      	adds	r3, #4
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d102      	bne.n	800b304 <etharp_input+0x74>
    for_us = 0;
 800b2fe:	2300      	movs	r3, #0
 800b300:	75fb      	strb	r3, [r7, #23]
 800b302:	e009      	b.n	800b318 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800b304:	68ba      	ldr	r2, [r7, #8]
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	3304      	adds	r3, #4
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	429a      	cmp	r2, r3
 800b30e:	bf0c      	ite	eq
 800b310:	2301      	moveq	r3, #1
 800b312:	2300      	movne	r3, #0
 800b314:	b2db      	uxtb	r3, r3
 800b316:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	f103 0208 	add.w	r2, r3, #8
 800b31e:	7dfb      	ldrb	r3, [r7, #23]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d001      	beq.n	800b328 <etharp_input+0x98>
 800b324:	2301      	movs	r3, #1
 800b326:	e000      	b.n	800b32a <etharp_input+0x9a>
 800b328:	2302      	movs	r3, #2
 800b32a:	f107 010c 	add.w	r1, r7, #12
 800b32e:	6838      	ldr	r0, [r7, #0]
 800b330:	f7ff fed8 	bl	800b0e4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	88db      	ldrh	r3, [r3, #6]
 800b338:	b29b      	uxth	r3, r3
 800b33a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b33e:	d003      	beq.n	800b348 <etharp_input+0xb8>
 800b340:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b344:	d01e      	beq.n	800b384 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800b346:	e020      	b.n	800b38a <etharp_input+0xfa>
      if (for_us) {
 800b348:	7dfb      	ldrb	r3, [r7, #23]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d01c      	beq.n	800b388 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800b364:	693a      	ldr	r2, [r7, #16]
 800b366:	3208      	adds	r2, #8
        etharp_raw(netif,
 800b368:	2102      	movs	r1, #2
 800b36a:	9103      	str	r1, [sp, #12]
 800b36c:	f107 010c 	add.w	r1, r7, #12
 800b370:	9102      	str	r1, [sp, #8]
 800b372:	9201      	str	r2, [sp, #4]
 800b374:	9300      	str	r3, [sp, #0]
 800b376:	462b      	mov	r3, r5
 800b378:	4622      	mov	r2, r4
 800b37a:	4601      	mov	r1, r0
 800b37c:	6838      	ldr	r0, [r7, #0]
 800b37e:	f000 faeb 	bl	800b958 <etharp_raw>
      break;
 800b382:	e001      	b.n	800b388 <etharp_input+0xf8>
      break;
 800b384:	bf00      	nop
 800b386:	e000      	b.n	800b38a <etharp_input+0xfa>
      break;
 800b388:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f7f9 fd6a 	bl	8004e64 <pbuf_free>
}
 800b390:	3718      	adds	r7, #24
 800b392:	46bd      	mov	sp, r7
 800b394:	bdb0      	pop	{r4, r5, r7, pc}
 800b396:	bf00      	nop
 800b398:	08010634 	.word	0x08010634
 800b39c:	08010784 	.word	0x08010784
 800b3a0:	080106ac 	.word	0x080106ac

0800b3a4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b086      	sub	sp, #24
 800b3a8:	af02      	add	r7, sp, #8
 800b3aa:	60f8      	str	r0, [r7, #12]
 800b3ac:	60b9      	str	r1, [r7, #8]
 800b3ae:	4613      	mov	r3, r2
 800b3b0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800b3b2:	79fa      	ldrb	r2, [r7, #7]
 800b3b4:	4944      	ldr	r1, [pc, #272]	; (800b4c8 <etharp_output_to_arp_index+0x124>)
 800b3b6:	4613      	mov	r3, r2
 800b3b8:	005b      	lsls	r3, r3, #1
 800b3ba:	4413      	add	r3, r2
 800b3bc:	00db      	lsls	r3, r3, #3
 800b3be:	440b      	add	r3, r1
 800b3c0:	3314      	adds	r3, #20
 800b3c2:	781b      	ldrb	r3, [r3, #0]
 800b3c4:	2b01      	cmp	r3, #1
 800b3c6:	d806      	bhi.n	800b3d6 <etharp_output_to_arp_index+0x32>
 800b3c8:	4b40      	ldr	r3, [pc, #256]	; (800b4cc <etharp_output_to_arp_index+0x128>)
 800b3ca:	f240 22ee 	movw	r2, #750	; 0x2ee
 800b3ce:	4940      	ldr	r1, [pc, #256]	; (800b4d0 <etharp_output_to_arp_index+0x12c>)
 800b3d0:	4840      	ldr	r0, [pc, #256]	; (800b4d4 <etharp_output_to_arp_index+0x130>)
 800b3d2:	f001 ff45 	bl	800d260 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800b3d6:	79fa      	ldrb	r2, [r7, #7]
 800b3d8:	493b      	ldr	r1, [pc, #236]	; (800b4c8 <etharp_output_to_arp_index+0x124>)
 800b3da:	4613      	mov	r3, r2
 800b3dc:	005b      	lsls	r3, r3, #1
 800b3de:	4413      	add	r3, r2
 800b3e0:	00db      	lsls	r3, r3, #3
 800b3e2:	440b      	add	r3, r1
 800b3e4:	3314      	adds	r3, #20
 800b3e6:	781b      	ldrb	r3, [r3, #0]
 800b3e8:	2b02      	cmp	r3, #2
 800b3ea:	d153      	bne.n	800b494 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800b3ec:	79fa      	ldrb	r2, [r7, #7]
 800b3ee:	4936      	ldr	r1, [pc, #216]	; (800b4c8 <etharp_output_to_arp_index+0x124>)
 800b3f0:	4613      	mov	r3, r2
 800b3f2:	005b      	lsls	r3, r3, #1
 800b3f4:	4413      	add	r3, r2
 800b3f6:	00db      	lsls	r3, r3, #3
 800b3f8:	440b      	add	r3, r1
 800b3fa:	3312      	adds	r3, #18
 800b3fc:	881b      	ldrh	r3, [r3, #0]
 800b3fe:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800b402:	d919      	bls.n	800b438 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800b404:	79fa      	ldrb	r2, [r7, #7]
 800b406:	4613      	mov	r3, r2
 800b408:	005b      	lsls	r3, r3, #1
 800b40a:	4413      	add	r3, r2
 800b40c:	00db      	lsls	r3, r3, #3
 800b40e:	4a2e      	ldr	r2, [pc, #184]	; (800b4c8 <etharp_output_to_arp_index+0x124>)
 800b410:	4413      	add	r3, r2
 800b412:	3304      	adds	r3, #4
 800b414:	4619      	mov	r1, r3
 800b416:	68f8      	ldr	r0, [r7, #12]
 800b418:	f000 fb4c 	bl	800bab4 <etharp_request>
 800b41c:	4603      	mov	r3, r0
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d138      	bne.n	800b494 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800b422:	79fa      	ldrb	r2, [r7, #7]
 800b424:	4928      	ldr	r1, [pc, #160]	; (800b4c8 <etharp_output_to_arp_index+0x124>)
 800b426:	4613      	mov	r3, r2
 800b428:	005b      	lsls	r3, r3, #1
 800b42a:	4413      	add	r3, r2
 800b42c:	00db      	lsls	r3, r3, #3
 800b42e:	440b      	add	r3, r1
 800b430:	3314      	adds	r3, #20
 800b432:	2203      	movs	r2, #3
 800b434:	701a      	strb	r2, [r3, #0]
 800b436:	e02d      	b.n	800b494 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800b438:	79fa      	ldrb	r2, [r7, #7]
 800b43a:	4923      	ldr	r1, [pc, #140]	; (800b4c8 <etharp_output_to_arp_index+0x124>)
 800b43c:	4613      	mov	r3, r2
 800b43e:	005b      	lsls	r3, r3, #1
 800b440:	4413      	add	r3, r2
 800b442:	00db      	lsls	r3, r3, #3
 800b444:	440b      	add	r3, r1
 800b446:	3312      	adds	r3, #18
 800b448:	881b      	ldrh	r3, [r3, #0]
 800b44a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800b44e:	d321      	bcc.n	800b494 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800b450:	79fa      	ldrb	r2, [r7, #7]
 800b452:	4613      	mov	r3, r2
 800b454:	005b      	lsls	r3, r3, #1
 800b456:	4413      	add	r3, r2
 800b458:	00db      	lsls	r3, r3, #3
 800b45a:	4a1b      	ldr	r2, [pc, #108]	; (800b4c8 <etharp_output_to_arp_index+0x124>)
 800b45c:	4413      	add	r3, r2
 800b45e:	1d19      	adds	r1, r3, #4
 800b460:	79fa      	ldrb	r2, [r7, #7]
 800b462:	4613      	mov	r3, r2
 800b464:	005b      	lsls	r3, r3, #1
 800b466:	4413      	add	r3, r2
 800b468:	00db      	lsls	r3, r3, #3
 800b46a:	3308      	adds	r3, #8
 800b46c:	4a16      	ldr	r2, [pc, #88]	; (800b4c8 <etharp_output_to_arp_index+0x124>)
 800b46e:	4413      	add	r3, r2
 800b470:	3304      	adds	r3, #4
 800b472:	461a      	mov	r2, r3
 800b474:	68f8      	ldr	r0, [r7, #12]
 800b476:	f000 fafb 	bl	800ba70 <etharp_request_dst>
 800b47a:	4603      	mov	r3, r0
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d109      	bne.n	800b494 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800b480:	79fa      	ldrb	r2, [r7, #7]
 800b482:	4911      	ldr	r1, [pc, #68]	; (800b4c8 <etharp_output_to_arp_index+0x124>)
 800b484:	4613      	mov	r3, r2
 800b486:	005b      	lsls	r3, r3, #1
 800b488:	4413      	add	r3, r2
 800b48a:	00db      	lsls	r3, r3, #3
 800b48c:	440b      	add	r3, r1
 800b48e:	3314      	adds	r3, #20
 800b490:	2203      	movs	r2, #3
 800b492:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800b49a:	79fa      	ldrb	r2, [r7, #7]
 800b49c:	4613      	mov	r3, r2
 800b49e:	005b      	lsls	r3, r3, #1
 800b4a0:	4413      	add	r3, r2
 800b4a2:	00db      	lsls	r3, r3, #3
 800b4a4:	3308      	adds	r3, #8
 800b4a6:	4a08      	ldr	r2, [pc, #32]	; (800b4c8 <etharp_output_to_arp_index+0x124>)
 800b4a8:	4413      	add	r3, r2
 800b4aa:	3304      	adds	r3, #4
 800b4ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b4b0:	9200      	str	r2, [sp, #0]
 800b4b2:	460a      	mov	r2, r1
 800b4b4:	68b9      	ldr	r1, [r7, #8]
 800b4b6:	68f8      	ldr	r0, [r7, #12]
 800b4b8:	f001 fe40 	bl	800d13c <ethernet_output>
 800b4bc:	4603      	mov	r3, r0
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3710      	adds	r7, #16
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}
 800b4c6:	bf00      	nop
 800b4c8:	200082a8 	.word	0x200082a8
 800b4cc:	08010634 	.word	0x08010634
 800b4d0:	080107a4 	.word	0x080107a4
 800b4d4:	080106ac 	.word	0x080106ac

0800b4d8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b08a      	sub	sp, #40	; 0x28
 800b4dc:	af02      	add	r7, sp, #8
 800b4de:	60f8      	str	r0, [r7, #12]
 800b4e0:	60b9      	str	r1, [r7, #8]
 800b4e2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d106      	bne.n	800b4fc <etharp_output+0x24>
 800b4ee:	4b73      	ldr	r3, [pc, #460]	; (800b6bc <etharp_output+0x1e4>)
 800b4f0:	f240 321e 	movw	r2, #798	; 0x31e
 800b4f4:	4972      	ldr	r1, [pc, #456]	; (800b6c0 <etharp_output+0x1e8>)
 800b4f6:	4873      	ldr	r0, [pc, #460]	; (800b6c4 <etharp_output+0x1ec>)
 800b4f8:	f001 feb2 	bl	800d260 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d106      	bne.n	800b510 <etharp_output+0x38>
 800b502:	4b6e      	ldr	r3, [pc, #440]	; (800b6bc <etharp_output+0x1e4>)
 800b504:	f240 321f 	movw	r2, #799	; 0x31f
 800b508:	496f      	ldr	r1, [pc, #444]	; (800b6c8 <etharp_output+0x1f0>)
 800b50a:	486e      	ldr	r0, [pc, #440]	; (800b6c4 <etharp_output+0x1ec>)
 800b50c:	f001 fea8 	bl	800d260 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d106      	bne.n	800b524 <etharp_output+0x4c>
 800b516:	4b69      	ldr	r3, [pc, #420]	; (800b6bc <etharp_output+0x1e4>)
 800b518:	f44f 7248 	mov.w	r2, #800	; 0x320
 800b51c:	496b      	ldr	r1, [pc, #428]	; (800b6cc <etharp_output+0x1f4>)
 800b51e:	4869      	ldr	r0, [pc, #420]	; (800b6c4 <etharp_output+0x1ec>)
 800b520:	f001 fe9e 	bl	800d260 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	68f9      	ldr	r1, [r7, #12]
 800b52a:	4618      	mov	r0, r3
 800b52c:	f000 fef8 	bl	800c320 <ip4_addr_isbroadcast_u32>
 800b530:	4603      	mov	r3, r0
 800b532:	2b00      	cmp	r3, #0
 800b534:	d002      	beq.n	800b53c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800b536:	4b66      	ldr	r3, [pc, #408]	; (800b6d0 <etharp_output+0x1f8>)
 800b538:	61fb      	str	r3, [r7, #28]
 800b53a:	e0af      	b.n	800b69c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b544:	2be0      	cmp	r3, #224	; 0xe0
 800b546:	d118      	bne.n	800b57a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800b548:	2301      	movs	r3, #1
 800b54a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800b54c:	2300      	movs	r3, #0
 800b54e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800b550:	235e      	movs	r3, #94	; 0x5e
 800b552:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	3301      	adds	r3, #1
 800b558:	781b      	ldrb	r3, [r3, #0]
 800b55a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b55e:	b2db      	uxtb	r3, r3
 800b560:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	3302      	adds	r3, #2
 800b566:	781b      	ldrb	r3, [r3, #0]
 800b568:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	3303      	adds	r3, #3
 800b56e:	781b      	ldrb	r3, [r3, #0]
 800b570:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800b572:	f107 0310 	add.w	r3, r7, #16
 800b576:	61fb      	str	r3, [r7, #28]
 800b578:	e090      	b.n	800b69c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681a      	ldr	r2, [r3, #0]
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	3304      	adds	r3, #4
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	405a      	eors	r2, r3
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	3308      	adds	r3, #8
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	4013      	ands	r3, r2
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d012      	beq.n	800b5b8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800b598:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800b59c:	4293      	cmp	r3, r2
 800b59e:	d00b      	beq.n	800b5b8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	330c      	adds	r3, #12
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d003      	beq.n	800b5b2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	330c      	adds	r3, #12
 800b5ae:	61bb      	str	r3, [r7, #24]
 800b5b0:	e002      	b.n	800b5b8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800b5b2:	f06f 0303 	mvn.w	r3, #3
 800b5b6:	e07d      	b.n	800b6b4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800b5b8:	4b46      	ldr	r3, [pc, #280]	; (800b6d4 <etharp_output+0x1fc>)
 800b5ba:	781b      	ldrb	r3, [r3, #0]
 800b5bc:	4619      	mov	r1, r3
 800b5be:	4a46      	ldr	r2, [pc, #280]	; (800b6d8 <etharp_output+0x200>)
 800b5c0:	460b      	mov	r3, r1
 800b5c2:	005b      	lsls	r3, r3, #1
 800b5c4:	440b      	add	r3, r1
 800b5c6:	00db      	lsls	r3, r3, #3
 800b5c8:	4413      	add	r3, r2
 800b5ca:	3314      	adds	r3, #20
 800b5cc:	781b      	ldrb	r3, [r3, #0]
 800b5ce:	2b01      	cmp	r3, #1
 800b5d0:	d925      	bls.n	800b61e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800b5d2:	4b40      	ldr	r3, [pc, #256]	; (800b6d4 <etharp_output+0x1fc>)
 800b5d4:	781b      	ldrb	r3, [r3, #0]
 800b5d6:	4619      	mov	r1, r3
 800b5d8:	4a3f      	ldr	r2, [pc, #252]	; (800b6d8 <etharp_output+0x200>)
 800b5da:	460b      	mov	r3, r1
 800b5dc:	005b      	lsls	r3, r3, #1
 800b5de:	440b      	add	r3, r1
 800b5e0:	00db      	lsls	r3, r3, #3
 800b5e2:	4413      	add	r3, r2
 800b5e4:	3308      	adds	r3, #8
 800b5e6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800b5e8:	68fa      	ldr	r2, [r7, #12]
 800b5ea:	429a      	cmp	r2, r3
 800b5ec:	d117      	bne.n	800b61e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800b5ee:	69bb      	ldr	r3, [r7, #24]
 800b5f0:	681a      	ldr	r2, [r3, #0]
 800b5f2:	4b38      	ldr	r3, [pc, #224]	; (800b6d4 <etharp_output+0x1fc>)
 800b5f4:	781b      	ldrb	r3, [r3, #0]
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	4937      	ldr	r1, [pc, #220]	; (800b6d8 <etharp_output+0x200>)
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	005b      	lsls	r3, r3, #1
 800b5fe:	4403      	add	r3, r0
 800b600:	00db      	lsls	r3, r3, #3
 800b602:	440b      	add	r3, r1
 800b604:	3304      	adds	r3, #4
 800b606:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800b608:	429a      	cmp	r2, r3
 800b60a:	d108      	bne.n	800b61e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800b60c:	4b31      	ldr	r3, [pc, #196]	; (800b6d4 <etharp_output+0x1fc>)
 800b60e:	781b      	ldrb	r3, [r3, #0]
 800b610:	461a      	mov	r2, r3
 800b612:	68b9      	ldr	r1, [r7, #8]
 800b614:	68f8      	ldr	r0, [r7, #12]
 800b616:	f7ff fec5 	bl	800b3a4 <etharp_output_to_arp_index>
 800b61a:	4603      	mov	r3, r0
 800b61c:	e04a      	b.n	800b6b4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800b61e:	2300      	movs	r3, #0
 800b620:	75fb      	strb	r3, [r7, #23]
 800b622:	e031      	b.n	800b688 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800b624:	7dfa      	ldrb	r2, [r7, #23]
 800b626:	492c      	ldr	r1, [pc, #176]	; (800b6d8 <etharp_output+0x200>)
 800b628:	4613      	mov	r3, r2
 800b62a:	005b      	lsls	r3, r3, #1
 800b62c:	4413      	add	r3, r2
 800b62e:	00db      	lsls	r3, r3, #3
 800b630:	440b      	add	r3, r1
 800b632:	3314      	adds	r3, #20
 800b634:	781b      	ldrb	r3, [r3, #0]
 800b636:	2b01      	cmp	r3, #1
 800b638:	d923      	bls.n	800b682 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800b63a:	7dfa      	ldrb	r2, [r7, #23]
 800b63c:	4926      	ldr	r1, [pc, #152]	; (800b6d8 <etharp_output+0x200>)
 800b63e:	4613      	mov	r3, r2
 800b640:	005b      	lsls	r3, r3, #1
 800b642:	4413      	add	r3, r2
 800b644:	00db      	lsls	r3, r3, #3
 800b646:	440b      	add	r3, r1
 800b648:	3308      	adds	r3, #8
 800b64a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800b64c:	68fa      	ldr	r2, [r7, #12]
 800b64e:	429a      	cmp	r2, r3
 800b650:	d117      	bne.n	800b682 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800b652:	69bb      	ldr	r3, [r7, #24]
 800b654:	6819      	ldr	r1, [r3, #0]
 800b656:	7dfa      	ldrb	r2, [r7, #23]
 800b658:	481f      	ldr	r0, [pc, #124]	; (800b6d8 <etharp_output+0x200>)
 800b65a:	4613      	mov	r3, r2
 800b65c:	005b      	lsls	r3, r3, #1
 800b65e:	4413      	add	r3, r2
 800b660:	00db      	lsls	r3, r3, #3
 800b662:	4403      	add	r3, r0
 800b664:	3304      	adds	r3, #4
 800b666:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800b668:	4299      	cmp	r1, r3
 800b66a:	d10a      	bne.n	800b682 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800b66c:	4a19      	ldr	r2, [pc, #100]	; (800b6d4 <etharp_output+0x1fc>)
 800b66e:	7dfb      	ldrb	r3, [r7, #23]
 800b670:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800b672:	7dfb      	ldrb	r3, [r7, #23]
 800b674:	461a      	mov	r2, r3
 800b676:	68b9      	ldr	r1, [r7, #8]
 800b678:	68f8      	ldr	r0, [r7, #12]
 800b67a:	f7ff fe93 	bl	800b3a4 <etharp_output_to_arp_index>
 800b67e:	4603      	mov	r3, r0
 800b680:	e018      	b.n	800b6b4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800b682:	7dfb      	ldrb	r3, [r7, #23]
 800b684:	3301      	adds	r3, #1
 800b686:	75fb      	strb	r3, [r7, #23]
 800b688:	7dfb      	ldrb	r3, [r7, #23]
 800b68a:	2b09      	cmp	r3, #9
 800b68c:	d9ca      	bls.n	800b624 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800b68e:	68ba      	ldr	r2, [r7, #8]
 800b690:	69b9      	ldr	r1, [r7, #24]
 800b692:	68f8      	ldr	r0, [r7, #12]
 800b694:	f000 f822 	bl	800b6dc <etharp_query>
 800b698:	4603      	mov	r3, r0
 800b69a:	e00b      	b.n	800b6b4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800b6a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b6a6:	9300      	str	r3, [sp, #0]
 800b6a8:	69fb      	ldr	r3, [r7, #28]
 800b6aa:	68b9      	ldr	r1, [r7, #8]
 800b6ac:	68f8      	ldr	r0, [r7, #12]
 800b6ae:	f001 fd45 	bl	800d13c <ethernet_output>
 800b6b2:	4603      	mov	r3, r0
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	3720      	adds	r7, #32
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}
 800b6bc:	08010634 	.word	0x08010634
 800b6c0:	08010784 	.word	0x08010784
 800b6c4:	080106ac 	.word	0x080106ac
 800b6c8:	080107d4 	.word	0x080107d4
 800b6cc:	08010774 	.word	0x08010774
 800b6d0:	08010de8 	.word	0x08010de8
 800b6d4:	20008398 	.word	0x20008398
 800b6d8:	200082a8 	.word	0x200082a8

0800b6dc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b08c      	sub	sp, #48	; 0x30
 800b6e0:	af02      	add	r7, sp, #8
 800b6e2:	60f8      	str	r0, [r7, #12]
 800b6e4:	60b9      	str	r1, [r7, #8]
 800b6e6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	3326      	adds	r3, #38	; 0x26
 800b6ec:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800b6ee:	23ff      	movs	r3, #255	; 0xff
 800b6f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	68f9      	ldr	r1, [r7, #12]
 800b6fe:	4618      	mov	r0, r3
 800b700:	f000 fe0e 	bl	800c320 <ip4_addr_isbroadcast_u32>
 800b704:	4603      	mov	r3, r0
 800b706:	2b00      	cmp	r3, #0
 800b708:	d10c      	bne.n	800b724 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800b712:	2be0      	cmp	r3, #224	; 0xe0
 800b714:	d006      	beq.n	800b724 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d003      	beq.n	800b724 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d102      	bne.n	800b72a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800b724:	f06f 030f 	mvn.w	r3, #15
 800b728:	e101      	b.n	800b92e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800b72a:	68fa      	ldr	r2, [r7, #12]
 800b72c:	2101      	movs	r1, #1
 800b72e:	68b8      	ldr	r0, [r7, #8]
 800b730:	f7ff fb60 	bl	800adf4 <etharp_find_entry>
 800b734:	4603      	mov	r3, r0
 800b736:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800b738:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	da02      	bge.n	800b746 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800b740:	8a7b      	ldrh	r3, [r7, #18]
 800b742:	b25b      	sxtb	r3, r3
 800b744:	e0f3      	b.n	800b92e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800b746:	8a7b      	ldrh	r3, [r7, #18]
 800b748:	2b7e      	cmp	r3, #126	; 0x7e
 800b74a:	d906      	bls.n	800b75a <etharp_query+0x7e>
 800b74c:	4b7a      	ldr	r3, [pc, #488]	; (800b938 <etharp_query+0x25c>)
 800b74e:	f240 32c1 	movw	r2, #961	; 0x3c1
 800b752:	497a      	ldr	r1, [pc, #488]	; (800b93c <etharp_query+0x260>)
 800b754:	487a      	ldr	r0, [pc, #488]	; (800b940 <etharp_query+0x264>)
 800b756:	f001 fd83 	bl	800d260 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800b75a:	8a7b      	ldrh	r3, [r7, #18]
 800b75c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800b75e:	7c7a      	ldrb	r2, [r7, #17]
 800b760:	4978      	ldr	r1, [pc, #480]	; (800b944 <etharp_query+0x268>)
 800b762:	4613      	mov	r3, r2
 800b764:	005b      	lsls	r3, r3, #1
 800b766:	4413      	add	r3, r2
 800b768:	00db      	lsls	r3, r3, #3
 800b76a:	440b      	add	r3, r1
 800b76c:	3314      	adds	r3, #20
 800b76e:	781b      	ldrb	r3, [r3, #0]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d115      	bne.n	800b7a0 <etharp_query+0xc4>
    is_new_entry = 1;
 800b774:	2301      	movs	r3, #1
 800b776:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800b778:	7c7a      	ldrb	r2, [r7, #17]
 800b77a:	4972      	ldr	r1, [pc, #456]	; (800b944 <etharp_query+0x268>)
 800b77c:	4613      	mov	r3, r2
 800b77e:	005b      	lsls	r3, r3, #1
 800b780:	4413      	add	r3, r2
 800b782:	00db      	lsls	r3, r3, #3
 800b784:	440b      	add	r3, r1
 800b786:	3314      	adds	r3, #20
 800b788:	2201      	movs	r2, #1
 800b78a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800b78c:	7c7a      	ldrb	r2, [r7, #17]
 800b78e:	496d      	ldr	r1, [pc, #436]	; (800b944 <etharp_query+0x268>)
 800b790:	4613      	mov	r3, r2
 800b792:	005b      	lsls	r3, r3, #1
 800b794:	4413      	add	r3, r2
 800b796:	00db      	lsls	r3, r3, #3
 800b798:	440b      	add	r3, r1
 800b79a:	3308      	adds	r3, #8
 800b79c:	68fa      	ldr	r2, [r7, #12]
 800b79e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800b7a0:	7c7a      	ldrb	r2, [r7, #17]
 800b7a2:	4968      	ldr	r1, [pc, #416]	; (800b944 <etharp_query+0x268>)
 800b7a4:	4613      	mov	r3, r2
 800b7a6:	005b      	lsls	r3, r3, #1
 800b7a8:	4413      	add	r3, r2
 800b7aa:	00db      	lsls	r3, r3, #3
 800b7ac:	440b      	add	r3, r1
 800b7ae:	3314      	adds	r3, #20
 800b7b0:	781b      	ldrb	r3, [r3, #0]
 800b7b2:	2b01      	cmp	r3, #1
 800b7b4:	d011      	beq.n	800b7da <etharp_query+0xfe>
 800b7b6:	7c7a      	ldrb	r2, [r7, #17]
 800b7b8:	4962      	ldr	r1, [pc, #392]	; (800b944 <etharp_query+0x268>)
 800b7ba:	4613      	mov	r3, r2
 800b7bc:	005b      	lsls	r3, r3, #1
 800b7be:	4413      	add	r3, r2
 800b7c0:	00db      	lsls	r3, r3, #3
 800b7c2:	440b      	add	r3, r1
 800b7c4:	3314      	adds	r3, #20
 800b7c6:	781b      	ldrb	r3, [r3, #0]
 800b7c8:	2b01      	cmp	r3, #1
 800b7ca:	d806      	bhi.n	800b7da <etharp_query+0xfe>
 800b7cc:	4b5a      	ldr	r3, [pc, #360]	; (800b938 <etharp_query+0x25c>)
 800b7ce:	f240 32cd 	movw	r2, #973	; 0x3cd
 800b7d2:	495d      	ldr	r1, [pc, #372]	; (800b948 <etharp_query+0x26c>)
 800b7d4:	485a      	ldr	r0, [pc, #360]	; (800b940 <etharp_query+0x264>)
 800b7d6:	f001 fd43 	bl	800d260 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800b7da:	6a3b      	ldr	r3, [r7, #32]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d102      	bne.n	800b7e6 <etharp_query+0x10a>
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d10c      	bne.n	800b800 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800b7e6:	68b9      	ldr	r1, [r7, #8]
 800b7e8:	68f8      	ldr	r0, [r7, #12]
 800b7ea:	f000 f963 	bl	800bab4 <etharp_request>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d102      	bne.n	800b800 <etharp_query+0x124>
      return result;
 800b7fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b7fe:	e096      	b.n	800b92e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d106      	bne.n	800b814 <etharp_query+0x138>
 800b806:	4b4c      	ldr	r3, [pc, #304]	; (800b938 <etharp_query+0x25c>)
 800b808:	f240 32e1 	movw	r2, #993	; 0x3e1
 800b80c:	494f      	ldr	r1, [pc, #316]	; (800b94c <etharp_query+0x270>)
 800b80e:	484c      	ldr	r0, [pc, #304]	; (800b940 <etharp_query+0x264>)
 800b810:	f001 fd26 	bl	800d260 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800b814:	7c7a      	ldrb	r2, [r7, #17]
 800b816:	494b      	ldr	r1, [pc, #300]	; (800b944 <etharp_query+0x268>)
 800b818:	4613      	mov	r3, r2
 800b81a:	005b      	lsls	r3, r3, #1
 800b81c:	4413      	add	r3, r2
 800b81e:	00db      	lsls	r3, r3, #3
 800b820:	440b      	add	r3, r1
 800b822:	3314      	adds	r3, #20
 800b824:	781b      	ldrb	r3, [r3, #0]
 800b826:	2b01      	cmp	r3, #1
 800b828:	d917      	bls.n	800b85a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800b82a:	4a49      	ldr	r2, [pc, #292]	; (800b950 <etharp_query+0x274>)
 800b82c:	7c7b      	ldrb	r3, [r7, #17]
 800b82e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800b830:	7c7a      	ldrb	r2, [r7, #17]
 800b832:	4613      	mov	r3, r2
 800b834:	005b      	lsls	r3, r3, #1
 800b836:	4413      	add	r3, r2
 800b838:	00db      	lsls	r3, r3, #3
 800b83a:	3308      	adds	r3, #8
 800b83c:	4a41      	ldr	r2, [pc, #260]	; (800b944 <etharp_query+0x268>)
 800b83e:	4413      	add	r3, r2
 800b840:	3304      	adds	r3, #4
 800b842:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b846:	9200      	str	r2, [sp, #0]
 800b848:	697a      	ldr	r2, [r7, #20]
 800b84a:	6879      	ldr	r1, [r7, #4]
 800b84c:	68f8      	ldr	r0, [r7, #12]
 800b84e:	f001 fc75 	bl	800d13c <ethernet_output>
 800b852:	4603      	mov	r3, r0
 800b854:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b858:	e067      	b.n	800b92a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800b85a:	7c7a      	ldrb	r2, [r7, #17]
 800b85c:	4939      	ldr	r1, [pc, #228]	; (800b944 <etharp_query+0x268>)
 800b85e:	4613      	mov	r3, r2
 800b860:	005b      	lsls	r3, r3, #1
 800b862:	4413      	add	r3, r2
 800b864:	00db      	lsls	r3, r3, #3
 800b866:	440b      	add	r3, r1
 800b868:	3314      	adds	r3, #20
 800b86a:	781b      	ldrb	r3, [r3, #0]
 800b86c:	2b01      	cmp	r3, #1
 800b86e:	d15c      	bne.n	800b92a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800b870:	2300      	movs	r3, #0
 800b872:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	61fb      	str	r3, [r7, #28]
    while (p) {
 800b878:	e01c      	b.n	800b8b4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800b87a:	69fb      	ldr	r3, [r7, #28]
 800b87c:	895a      	ldrh	r2, [r3, #10]
 800b87e:	69fb      	ldr	r3, [r7, #28]
 800b880:	891b      	ldrh	r3, [r3, #8]
 800b882:	429a      	cmp	r2, r3
 800b884:	d10a      	bne.n	800b89c <etharp_query+0x1c0>
 800b886:	69fb      	ldr	r3, [r7, #28]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d006      	beq.n	800b89c <etharp_query+0x1c0>
 800b88e:	4b2a      	ldr	r3, [pc, #168]	; (800b938 <etharp_query+0x25c>)
 800b890:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800b894:	492f      	ldr	r1, [pc, #188]	; (800b954 <etharp_query+0x278>)
 800b896:	482a      	ldr	r0, [pc, #168]	; (800b940 <etharp_query+0x264>)
 800b898:	f001 fce2 	bl	800d260 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800b89c:	69fb      	ldr	r3, [r7, #28]
 800b89e:	7b1b      	ldrb	r3, [r3, #12]
 800b8a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d002      	beq.n	800b8ae <etharp_query+0x1d2>
        copy_needed = 1;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	61bb      	str	r3, [r7, #24]
        break;
 800b8ac:	e005      	b.n	800b8ba <etharp_query+0x1de>
      }
      p = p->next;
 800b8ae:	69fb      	ldr	r3, [r7, #28]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	61fb      	str	r3, [r7, #28]
    while (p) {
 800b8b4:	69fb      	ldr	r3, [r7, #28]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d1df      	bne.n	800b87a <etharp_query+0x19e>
    }
    if (copy_needed) {
 800b8ba:	69bb      	ldr	r3, [r7, #24]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d007      	beq.n	800b8d0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800b8c0:	687a      	ldr	r2, [r7, #4]
 800b8c2:	f44f 7120 	mov.w	r1, #640	; 0x280
 800b8c6:	200e      	movs	r0, #14
 800b8c8:	f7f9 fd28 	bl	800531c <pbuf_clone>
 800b8cc:	61f8      	str	r0, [r7, #28]
 800b8ce:	e004      	b.n	800b8da <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800b8d4:	69f8      	ldr	r0, [r7, #28]
 800b8d6:	f7f9 fb65 	bl	8004fa4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800b8da:	69fb      	ldr	r3, [r7, #28]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d021      	beq.n	800b924 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800b8e0:	7c7a      	ldrb	r2, [r7, #17]
 800b8e2:	4918      	ldr	r1, [pc, #96]	; (800b944 <etharp_query+0x268>)
 800b8e4:	4613      	mov	r3, r2
 800b8e6:	005b      	lsls	r3, r3, #1
 800b8e8:	4413      	add	r3, r2
 800b8ea:	00db      	lsls	r3, r3, #3
 800b8ec:	440b      	add	r3, r1
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d00a      	beq.n	800b90a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800b8f4:	7c7a      	ldrb	r2, [r7, #17]
 800b8f6:	4913      	ldr	r1, [pc, #76]	; (800b944 <etharp_query+0x268>)
 800b8f8:	4613      	mov	r3, r2
 800b8fa:	005b      	lsls	r3, r3, #1
 800b8fc:	4413      	add	r3, r2
 800b8fe:	00db      	lsls	r3, r3, #3
 800b900:	440b      	add	r3, r1
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	4618      	mov	r0, r3
 800b906:	f7f9 faad 	bl	8004e64 <pbuf_free>
      }
      arp_table[i].q = p;
 800b90a:	7c7a      	ldrb	r2, [r7, #17]
 800b90c:	490d      	ldr	r1, [pc, #52]	; (800b944 <etharp_query+0x268>)
 800b90e:	4613      	mov	r3, r2
 800b910:	005b      	lsls	r3, r3, #1
 800b912:	4413      	add	r3, r2
 800b914:	00db      	lsls	r3, r3, #3
 800b916:	440b      	add	r3, r1
 800b918:	69fa      	ldr	r2, [r7, #28]
 800b91a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800b91c:	2300      	movs	r3, #0
 800b91e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b922:	e002      	b.n	800b92a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800b924:	23ff      	movs	r3, #255	; 0xff
 800b926:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800b92a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b92e:	4618      	mov	r0, r3
 800b930:	3728      	adds	r7, #40	; 0x28
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}
 800b936:	bf00      	nop
 800b938:	08010634 	.word	0x08010634
 800b93c:	080107e0 	.word	0x080107e0
 800b940:	080106ac 	.word	0x080106ac
 800b944:	200082a8 	.word	0x200082a8
 800b948:	080107f0 	.word	0x080107f0
 800b94c:	080107d4 	.word	0x080107d4
 800b950:	20008398 	.word	0x20008398
 800b954:	08010818 	.word	0x08010818

0800b958 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b08a      	sub	sp, #40	; 0x28
 800b95c:	af02      	add	r7, sp, #8
 800b95e:	60f8      	str	r0, [r7, #12]
 800b960:	60b9      	str	r1, [r7, #8]
 800b962:	607a      	str	r2, [r7, #4]
 800b964:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800b966:	2300      	movs	r3, #0
 800b968:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d106      	bne.n	800b97e <etharp_raw+0x26>
 800b970:	4b3a      	ldr	r3, [pc, #232]	; (800ba5c <etharp_raw+0x104>)
 800b972:	f240 4257 	movw	r2, #1111	; 0x457
 800b976:	493a      	ldr	r1, [pc, #232]	; (800ba60 <etharp_raw+0x108>)
 800b978:	483a      	ldr	r0, [pc, #232]	; (800ba64 <etharp_raw+0x10c>)
 800b97a:	f001 fc71 	bl	800d260 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800b97e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b982:	211c      	movs	r1, #28
 800b984:	200e      	movs	r0, #14
 800b986:	f7f8 ff89 	bl	800489c <pbuf_alloc>
 800b98a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800b98c:	69bb      	ldr	r3, [r7, #24]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d102      	bne.n	800b998 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800b992:	f04f 33ff 	mov.w	r3, #4294967295
 800b996:	e05d      	b.n	800ba54 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800b998:	69bb      	ldr	r3, [r7, #24]
 800b99a:	895b      	ldrh	r3, [r3, #10]
 800b99c:	2b1b      	cmp	r3, #27
 800b99e:	d806      	bhi.n	800b9ae <etharp_raw+0x56>
 800b9a0:	4b2e      	ldr	r3, [pc, #184]	; (800ba5c <etharp_raw+0x104>)
 800b9a2:	f240 4262 	movw	r2, #1122	; 0x462
 800b9a6:	4930      	ldr	r1, [pc, #192]	; (800ba68 <etharp_raw+0x110>)
 800b9a8:	482e      	ldr	r0, [pc, #184]	; (800ba64 <etharp_raw+0x10c>)
 800b9aa:	f001 fc59 	bl	800d260 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800b9ae:	69bb      	ldr	r3, [r7, #24]
 800b9b0:	685b      	ldr	r3, [r3, #4]
 800b9b2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800b9b4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f7f7 fef6 	bl	80037a8 <lwip_htons>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	461a      	mov	r2, r3
 800b9c0:	697b      	ldr	r3, [r7, #20]
 800b9c2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b9ca:	2b06      	cmp	r3, #6
 800b9cc:	d006      	beq.n	800b9dc <etharp_raw+0x84>
 800b9ce:	4b23      	ldr	r3, [pc, #140]	; (800ba5c <etharp_raw+0x104>)
 800b9d0:	f240 4269 	movw	r2, #1129	; 0x469
 800b9d4:	4925      	ldr	r1, [pc, #148]	; (800ba6c <etharp_raw+0x114>)
 800b9d6:	4823      	ldr	r0, [pc, #140]	; (800ba64 <etharp_raw+0x10c>)
 800b9d8:	f001 fc42 	bl	800d260 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	3308      	adds	r3, #8
 800b9e0:	2206      	movs	r2, #6
 800b9e2:	6839      	ldr	r1, [r7, #0]
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f001 fc25 	bl	800d234 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800b9ea:	697b      	ldr	r3, [r7, #20]
 800b9ec:	3312      	adds	r3, #18
 800b9ee:	2206      	movs	r2, #6
 800b9f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f001 fc1e 	bl	800d234 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	330e      	adds	r3, #14
 800b9fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b9fe:	6812      	ldr	r2, [r2, #0]
 800ba00:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800ba02:	697b      	ldr	r3, [r7, #20]
 800ba04:	3318      	adds	r3, #24
 800ba06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba08:	6812      	ldr	r2, [r2, #0]
 800ba0a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	701a      	strb	r2, [r3, #0]
 800ba12:	2200      	movs	r2, #0
 800ba14:	f042 0201 	orr.w	r2, r2, #1
 800ba18:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800ba1a:	697b      	ldr	r3, [r7, #20]
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	f042 0208 	orr.w	r2, r2, #8
 800ba22:	709a      	strb	r2, [r3, #2]
 800ba24:	2200      	movs	r2, #0
 800ba26:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800ba28:	697b      	ldr	r3, [r7, #20]
 800ba2a:	2206      	movs	r2, #6
 800ba2c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	2204      	movs	r2, #4
 800ba32:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800ba34:	f640 0306 	movw	r3, #2054	; 0x806
 800ba38:	9300      	str	r3, [sp, #0]
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	68ba      	ldr	r2, [r7, #8]
 800ba3e:	69b9      	ldr	r1, [r7, #24]
 800ba40:	68f8      	ldr	r0, [r7, #12]
 800ba42:	f001 fb7b 	bl	800d13c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800ba46:	69b8      	ldr	r0, [r7, #24]
 800ba48:	f7f9 fa0c 	bl	8004e64 <pbuf_free>
  p = NULL;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800ba50:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ba54:	4618      	mov	r0, r3
 800ba56:	3720      	adds	r7, #32
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}
 800ba5c:	08010634 	.word	0x08010634
 800ba60:	08010784 	.word	0x08010784
 800ba64:	080106ac 	.word	0x080106ac
 800ba68:	08010834 	.word	0x08010834
 800ba6c:	08010868 	.word	0x08010868

0800ba70 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b088      	sub	sp, #32
 800ba74:	af04      	add	r7, sp, #16
 800ba76:	60f8      	str	r0, [r7, #12]
 800ba78:	60b9      	str	r1, [r7, #8]
 800ba7a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ba8c:	2201      	movs	r2, #1
 800ba8e:	9203      	str	r2, [sp, #12]
 800ba90:	68ba      	ldr	r2, [r7, #8]
 800ba92:	9202      	str	r2, [sp, #8]
 800ba94:	4a06      	ldr	r2, [pc, #24]	; (800bab0 <etharp_request_dst+0x40>)
 800ba96:	9201      	str	r2, [sp, #4]
 800ba98:	9300      	str	r3, [sp, #0]
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	687a      	ldr	r2, [r7, #4]
 800ba9e:	68f8      	ldr	r0, [r7, #12]
 800baa0:	f7ff ff5a 	bl	800b958 <etharp_raw>
 800baa4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3710      	adds	r7, #16
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}
 800baae:	bf00      	nop
 800bab0:	08010df0 	.word	0x08010df0

0800bab4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b082      	sub	sp, #8
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800babe:	4a05      	ldr	r2, [pc, #20]	; (800bad4 <etharp_request+0x20>)
 800bac0:	6839      	ldr	r1, [r7, #0]
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f7ff ffd4 	bl	800ba70 <etharp_request_dst>
 800bac8:	4603      	mov	r3, r0
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3708      	adds	r7, #8
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}
 800bad2:	bf00      	nop
 800bad4:	08010de8 	.word	0x08010de8

0800bad8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b08e      	sub	sp, #56	; 0x38
 800badc:	af04      	add	r7, sp, #16
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800bae2:	4b79      	ldr	r3, [pc, #484]	; (800bcc8 <icmp_input+0x1f0>)
 800bae4:	689b      	ldr	r3, [r3, #8]
 800bae6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800bae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baea:	781b      	ldrb	r3, [r3, #0]
 800baec:	f003 030f 	and.w	r3, r3, #15
 800baf0:	b2db      	uxtb	r3, r3
 800baf2:	009b      	lsls	r3, r3, #2
 800baf4:	b2db      	uxtb	r3, r3
 800baf6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800baf8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bafa:	2b13      	cmp	r3, #19
 800bafc:	f240 80cd 	bls.w	800bc9a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	895b      	ldrh	r3, [r3, #10]
 800bb04:	2b03      	cmp	r3, #3
 800bb06:	f240 80ca 	bls.w	800bc9e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	685b      	ldr	r3, [r3, #4]
 800bb0e:	781b      	ldrb	r3, [r3, #0]
 800bb10:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800bb14:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	f000 80b7 	beq.w	800bc8c <icmp_input+0x1b4>
 800bb1e:	2b08      	cmp	r3, #8
 800bb20:	f040 80b7 	bne.w	800bc92 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800bb24:	4b69      	ldr	r3, [pc, #420]	; (800bccc <icmp_input+0x1f4>)
 800bb26:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800bb28:	4b67      	ldr	r3, [pc, #412]	; (800bcc8 <icmp_input+0x1f0>)
 800bb2a:	695b      	ldr	r3, [r3, #20]
 800bb2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bb30:	2be0      	cmp	r3, #224	; 0xe0
 800bb32:	f000 80bb 	beq.w	800bcac <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800bb36:	4b64      	ldr	r3, [pc, #400]	; (800bcc8 <icmp_input+0x1f0>)
 800bb38:	695b      	ldr	r3, [r3, #20]
 800bb3a:	4a63      	ldr	r2, [pc, #396]	; (800bcc8 <icmp_input+0x1f0>)
 800bb3c:	6812      	ldr	r2, [r2, #0]
 800bb3e:	4611      	mov	r1, r2
 800bb40:	4618      	mov	r0, r3
 800bb42:	f000 fbed 	bl	800c320 <ip4_addr_isbroadcast_u32>
 800bb46:	4603      	mov	r3, r0
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	f040 80b1 	bne.w	800bcb0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	891b      	ldrh	r3, [r3, #8]
 800bb52:	2b07      	cmp	r3, #7
 800bb54:	f240 80a5 	bls.w	800bca2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800bb58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bb5a:	330e      	adds	r3, #14
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f7f9 f8ea 	bl	8004d38 <pbuf_add_header>
 800bb64:	4603      	mov	r3, r0
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d04b      	beq.n	800bc02 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	891a      	ldrh	r2, [r3, #8]
 800bb6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bb70:	4413      	add	r3, r2
 800bb72:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	891b      	ldrh	r3, [r3, #8]
 800bb78:	8b7a      	ldrh	r2, [r7, #26]
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	f0c0 809a 	bcc.w	800bcb4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800bb80:	8b7b      	ldrh	r3, [r7, #26]
 800bb82:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bb86:	4619      	mov	r1, r3
 800bb88:	200e      	movs	r0, #14
 800bb8a:	f7f8 fe87 	bl	800489c <pbuf_alloc>
 800bb8e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	f000 8090 	beq.w	800bcb8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	895b      	ldrh	r3, [r3, #10]
 800bb9c:	461a      	mov	r2, r3
 800bb9e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bba0:	3308      	adds	r3, #8
 800bba2:	429a      	cmp	r2, r3
 800bba4:	d203      	bcs.n	800bbae <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800bba6:	6978      	ldr	r0, [r7, #20]
 800bba8:	f7f9 f95c 	bl	8004e64 <pbuf_free>
          goto icmperr;
 800bbac:	e085      	b.n	800bcba <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800bbae:	697b      	ldr	r3, [r7, #20]
 800bbb0:	685b      	ldr	r3, [r3, #4]
 800bbb2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800bbb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f001 fb3c 	bl	800d234 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800bbbc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bbbe:	4619      	mov	r1, r3
 800bbc0:	6978      	ldr	r0, [r7, #20]
 800bbc2:	f7f9 f8c9 	bl	8004d58 <pbuf_remove_header>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d009      	beq.n	800bbe0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800bbcc:	4b40      	ldr	r3, [pc, #256]	; (800bcd0 <icmp_input+0x1f8>)
 800bbce:	22b6      	movs	r2, #182	; 0xb6
 800bbd0:	4940      	ldr	r1, [pc, #256]	; (800bcd4 <icmp_input+0x1fc>)
 800bbd2:	4841      	ldr	r0, [pc, #260]	; (800bcd8 <icmp_input+0x200>)
 800bbd4:	f001 fb44 	bl	800d260 <iprintf>
          pbuf_free(r);
 800bbd8:	6978      	ldr	r0, [r7, #20]
 800bbda:	f7f9 f943 	bl	8004e64 <pbuf_free>
          goto icmperr;
 800bbde:	e06c      	b.n	800bcba <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800bbe0:	6879      	ldr	r1, [r7, #4]
 800bbe2:	6978      	ldr	r0, [r7, #20]
 800bbe4:	f7f9 fa56 	bl	8005094 <pbuf_copy>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d003      	beq.n	800bbf6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800bbee:	6978      	ldr	r0, [r7, #20]
 800bbf0:	f7f9 f938 	bl	8004e64 <pbuf_free>
          goto icmperr;
 800bbf4:	e061      	b.n	800bcba <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f7f9 f934 	bl	8004e64 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	607b      	str	r3, [r7, #4]
 800bc00:	e00f      	b.n	800bc22 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800bc02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bc04:	330e      	adds	r3, #14
 800bc06:	4619      	mov	r1, r3
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f7f9 f8a5 	bl	8004d58 <pbuf_remove_header>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d006      	beq.n	800bc22 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800bc14:	4b2e      	ldr	r3, [pc, #184]	; (800bcd0 <icmp_input+0x1f8>)
 800bc16:	22c7      	movs	r2, #199	; 0xc7
 800bc18:	4930      	ldr	r1, [pc, #192]	; (800bcdc <icmp_input+0x204>)
 800bc1a:	482f      	ldr	r0, [pc, #188]	; (800bcd8 <icmp_input+0x200>)
 800bc1c:	f001 fb20 	bl	800d260 <iprintf>
          goto icmperr;
 800bc20:	e04b      	b.n	800bcba <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	685b      	ldr	r3, [r3, #4]
 800bc26:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800bc28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bc2a:	4619      	mov	r1, r3
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f7f9 f883 	bl	8004d38 <pbuf_add_header>
 800bc32:	4603      	mov	r3, r0
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d12b      	bne.n	800bc90 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	685b      	ldr	r3, [r3, #4]
 800bc3c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800bc3e:	69fb      	ldr	r3, [r7, #28]
 800bc40:	681a      	ldr	r2, [r3, #0]
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800bc46:	4b20      	ldr	r3, [pc, #128]	; (800bcc8 <icmp_input+0x1f0>)
 800bc48:	691a      	ldr	r2, [r3, #16]
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	2200      	movs	r2, #0
 800bc52:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	2200      	movs	r2, #0
 800bc58:	709a      	strb	r2, [r3, #2]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	22ff      	movs	r2, #255	; 0xff
 800bc62:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2200      	movs	r2, #0
 800bc68:	729a      	strb	r2, [r3, #10]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	9302      	str	r3, [sp, #8]
 800bc72:	2301      	movs	r3, #1
 800bc74:	9301      	str	r3, [sp, #4]
 800bc76:	2300      	movs	r3, #0
 800bc78:	9300      	str	r3, [sp, #0]
 800bc7a:	23ff      	movs	r3, #255	; 0xff
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	69f9      	ldr	r1, [r7, #28]
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f000 fa75 	bl	800c170 <ip4_output_if>
 800bc86:	4603      	mov	r3, r0
 800bc88:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800bc8a:	e001      	b.n	800bc90 <icmp_input+0x1b8>
      break;
 800bc8c:	bf00      	nop
 800bc8e:	e000      	b.n	800bc92 <icmp_input+0x1ba>
      break;
 800bc90:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	f7f9 f8e6 	bl	8004e64 <pbuf_free>
  return;
 800bc98:	e013      	b.n	800bcc2 <icmp_input+0x1ea>
    goto lenerr;
 800bc9a:	bf00      	nop
 800bc9c:	e002      	b.n	800bca4 <icmp_input+0x1cc>
    goto lenerr;
 800bc9e:	bf00      	nop
 800bca0:	e000      	b.n	800bca4 <icmp_input+0x1cc>
        goto lenerr;
 800bca2:	bf00      	nop
lenerr:
  pbuf_free(p);
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f7f9 f8dd 	bl	8004e64 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800bcaa:	e00a      	b.n	800bcc2 <icmp_input+0x1ea>
        goto icmperr;
 800bcac:	bf00      	nop
 800bcae:	e004      	b.n	800bcba <icmp_input+0x1e2>
        goto icmperr;
 800bcb0:	bf00      	nop
 800bcb2:	e002      	b.n	800bcba <icmp_input+0x1e2>
          goto icmperr;
 800bcb4:	bf00      	nop
 800bcb6:	e000      	b.n	800bcba <icmp_input+0x1e2>
          goto icmperr;
 800bcb8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800bcba:	6878      	ldr	r0, [r7, #4]
 800bcbc:	f7f9 f8d2 	bl	8004e64 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800bcc0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800bcc2:	3728      	adds	r7, #40	; 0x28
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}
 800bcc8:	20004cd8 	.word	0x20004cd8
 800bccc:	20004cec 	.word	0x20004cec
 800bcd0:	080108ac 	.word	0x080108ac
 800bcd4:	080108e4 	.word	0x080108e4
 800bcd8:	0801091c 	.word	0x0801091c
 800bcdc:	08010944 	.word	0x08010944

0800bce0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b082      	sub	sp, #8
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
 800bce8:	460b      	mov	r3, r1
 800bcea:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800bcec:	78fb      	ldrb	r3, [r7, #3]
 800bcee:	461a      	mov	r2, r3
 800bcf0:	2103      	movs	r1, #3
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	f000 f814 	bl	800bd20 <icmp_send_response>
}
 800bcf8:	bf00      	nop
 800bcfa:	3708      	adds	r7, #8
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bd80      	pop	{r7, pc}

0800bd00 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b082      	sub	sp, #8
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
 800bd08:	460b      	mov	r3, r1
 800bd0a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800bd0c:	78fb      	ldrb	r3, [r7, #3]
 800bd0e:	461a      	mov	r2, r3
 800bd10:	210b      	movs	r1, #11
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f000 f804 	bl	800bd20 <icmp_send_response>
}
 800bd18:	bf00      	nop
 800bd1a:	3708      	adds	r7, #8
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}

0800bd20 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b08c      	sub	sp, #48	; 0x30
 800bd24:	af04      	add	r7, sp, #16
 800bd26:	6078      	str	r0, [r7, #4]
 800bd28:	460b      	mov	r3, r1
 800bd2a:	70fb      	strb	r3, [r7, #3]
 800bd2c:	4613      	mov	r3, r2
 800bd2e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800bd30:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bd34:	2124      	movs	r1, #36	; 0x24
 800bd36:	2022      	movs	r0, #34	; 0x22
 800bd38:	f7f8 fdb0 	bl	800489c <pbuf_alloc>
 800bd3c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800bd3e:	69fb      	ldr	r3, [r7, #28]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d04c      	beq.n	800bdde <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800bd44:	69fb      	ldr	r3, [r7, #28]
 800bd46:	895b      	ldrh	r3, [r3, #10]
 800bd48:	2b23      	cmp	r3, #35	; 0x23
 800bd4a:	d806      	bhi.n	800bd5a <icmp_send_response+0x3a>
 800bd4c:	4b26      	ldr	r3, [pc, #152]	; (800bde8 <icmp_send_response+0xc8>)
 800bd4e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800bd52:	4926      	ldr	r1, [pc, #152]	; (800bdec <icmp_send_response+0xcc>)
 800bd54:	4826      	ldr	r0, [pc, #152]	; (800bdf0 <icmp_send_response+0xd0>)
 800bd56:	f001 fa83 	bl	800d260 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	685b      	ldr	r3, [r3, #4]
 800bd5e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800bd60:	69fb      	ldr	r3, [r7, #28]
 800bd62:	685b      	ldr	r3, [r3, #4]
 800bd64:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800bd66:	697b      	ldr	r3, [r7, #20]
 800bd68:	78fa      	ldrb	r2, [r7, #3]
 800bd6a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800bd6c:	697b      	ldr	r3, [r7, #20]
 800bd6e:	78ba      	ldrb	r2, [r7, #2]
 800bd70:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	2200      	movs	r2, #0
 800bd76:	711a      	strb	r2, [r3, #4]
 800bd78:	2200      	movs	r2, #0
 800bd7a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800bd7c:	697b      	ldr	r3, [r7, #20]
 800bd7e:	2200      	movs	r2, #0
 800bd80:	719a      	strb	r2, [r3, #6]
 800bd82:	2200      	movs	r2, #0
 800bd84:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800bd86:	69fb      	ldr	r3, [r7, #28]
 800bd88:	685b      	ldr	r3, [r3, #4]
 800bd8a:	f103 0008 	add.w	r0, r3, #8
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	685b      	ldr	r3, [r3, #4]
 800bd92:	221c      	movs	r2, #28
 800bd94:	4619      	mov	r1, r3
 800bd96:	f001 fa4d 	bl	800d234 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800bd9a:	69bb      	ldr	r3, [r7, #24]
 800bd9c:	68db      	ldr	r3, [r3, #12]
 800bd9e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800bda0:	f107 030c 	add.w	r3, r7, #12
 800bda4:	4618      	mov	r0, r3
 800bda6:	f000 f825 	bl	800bdf4 <ip4_route>
 800bdaa:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d011      	beq.n	800bdd6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800bdb2:	697b      	ldr	r3, [r7, #20]
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	709a      	strb	r2, [r3, #2]
 800bdb8:	2200      	movs	r2, #0
 800bdba:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800bdbc:	f107 020c 	add.w	r2, r7, #12
 800bdc0:	693b      	ldr	r3, [r7, #16]
 800bdc2:	9302      	str	r3, [sp, #8]
 800bdc4:	2301      	movs	r3, #1
 800bdc6:	9301      	str	r3, [sp, #4]
 800bdc8:	2300      	movs	r3, #0
 800bdca:	9300      	str	r3, [sp, #0]
 800bdcc:	23ff      	movs	r3, #255	; 0xff
 800bdce:	2100      	movs	r1, #0
 800bdd0:	69f8      	ldr	r0, [r7, #28]
 800bdd2:	f000 f9cd 	bl	800c170 <ip4_output_if>
  }
  pbuf_free(q);
 800bdd6:	69f8      	ldr	r0, [r7, #28]
 800bdd8:	f7f9 f844 	bl	8004e64 <pbuf_free>
 800bddc:	e000      	b.n	800bde0 <icmp_send_response+0xc0>
    return;
 800bdde:	bf00      	nop
}
 800bde0:	3720      	adds	r7, #32
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}
 800bde6:	bf00      	nop
 800bde8:	080108ac 	.word	0x080108ac
 800bdec:	08010978 	.word	0x08010978
 800bdf0:	0801091c 	.word	0x0801091c

0800bdf4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800bdf4:	b480      	push	{r7}
 800bdf6:	b085      	sub	sp, #20
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800bdfc:	4b33      	ldr	r3, [pc, #204]	; (800becc <ip4_route+0xd8>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	60fb      	str	r3, [r7, #12]
 800be02:	e036      	b.n	800be72 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800be0a:	f003 0301 	and.w	r3, r3, #1
 800be0e:	b2db      	uxtb	r3, r3
 800be10:	2b00      	cmp	r3, #0
 800be12:	d02b      	beq.n	800be6c <ip4_route+0x78>
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800be1a:	089b      	lsrs	r3, r3, #2
 800be1c:	f003 0301 	and.w	r3, r3, #1
 800be20:	b2db      	uxtb	r3, r3
 800be22:	2b00      	cmp	r3, #0
 800be24:	d022      	beq.n	800be6c <ip4_route+0x78>
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	3304      	adds	r3, #4
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d01d      	beq.n	800be6c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681a      	ldr	r2, [r3, #0]
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	3304      	adds	r3, #4
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	405a      	eors	r2, r3
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	3308      	adds	r3, #8
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	4013      	ands	r3, r2
 800be44:	2b00      	cmp	r3, #0
 800be46:	d101      	bne.n	800be4c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	e038      	b.n	800bebe <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800be52:	f003 0302 	and.w	r3, r3, #2
 800be56:	2b00      	cmp	r3, #0
 800be58:	d108      	bne.n	800be6c <ip4_route+0x78>
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681a      	ldr	r2, [r3, #0]
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	330c      	adds	r3, #12
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	429a      	cmp	r2, r3
 800be66:	d101      	bne.n	800be6c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	e028      	b.n	800bebe <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	60fb      	str	r3, [r7, #12]
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d1c5      	bne.n	800be04 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800be78:	4b15      	ldr	r3, [pc, #84]	; (800bed0 <ip4_route+0xdc>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d01a      	beq.n	800beb6 <ip4_route+0xc2>
 800be80:	4b13      	ldr	r3, [pc, #76]	; (800bed0 <ip4_route+0xdc>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800be88:	f003 0301 	and.w	r3, r3, #1
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d012      	beq.n	800beb6 <ip4_route+0xc2>
 800be90:	4b0f      	ldr	r3, [pc, #60]	; (800bed0 <ip4_route+0xdc>)
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800be98:	f003 0304 	and.w	r3, r3, #4
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d00a      	beq.n	800beb6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800bea0:	4b0b      	ldr	r3, [pc, #44]	; (800bed0 <ip4_route+0xdc>)
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	3304      	adds	r3, #4
 800bea6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d004      	beq.n	800beb6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	b2db      	uxtb	r3, r3
 800beb2:	2b7f      	cmp	r3, #127	; 0x7f
 800beb4:	d101      	bne.n	800beba <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800beb6:	2300      	movs	r3, #0
 800beb8:	e001      	b.n	800bebe <ip4_route+0xca>
  }

  return netif_default;
 800beba:	4b05      	ldr	r3, [pc, #20]	; (800bed0 <ip4_route+0xdc>)
 800bebc:	681b      	ldr	r3, [r3, #0]
}
 800bebe:	4618      	mov	r0, r3
 800bec0:	3714      	adds	r7, #20
 800bec2:	46bd      	mov	sp, r7
 800bec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec8:	4770      	bx	lr
 800beca:	bf00      	nop
 800becc:	2000823c 	.word	0x2000823c
 800bed0:	20008240 	.word	0x20008240

0800bed4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b082      	sub	sp, #8
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bee2:	f003 0301 	and.w	r3, r3, #1
 800bee6:	b2db      	uxtb	r3, r3
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d016      	beq.n	800bf1a <ip4_input_accept+0x46>
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	3304      	adds	r3, #4
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d011      	beq.n	800bf1a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800bef6:	4b0b      	ldr	r3, [pc, #44]	; (800bf24 <ip4_input_accept+0x50>)
 800bef8:	695a      	ldr	r2, [r3, #20]
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	3304      	adds	r3, #4
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	429a      	cmp	r2, r3
 800bf02:	d008      	beq.n	800bf16 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800bf04:	4b07      	ldr	r3, [pc, #28]	; (800bf24 <ip4_input_accept+0x50>)
 800bf06:	695b      	ldr	r3, [r3, #20]
 800bf08:	6879      	ldr	r1, [r7, #4]
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f000 fa08 	bl	800c320 <ip4_addr_isbroadcast_u32>
 800bf10:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d001      	beq.n	800bf1a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800bf16:	2301      	movs	r3, #1
 800bf18:	e000      	b.n	800bf1c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800bf1a:	2300      	movs	r3, #0
}
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	3708      	adds	r7, #8
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd80      	pop	{r7, pc}
 800bf24:	20004cd8 	.word	0x20004cd8

0800bf28 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b086      	sub	sp, #24
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
 800bf30:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	685b      	ldr	r3, [r3, #4]
 800bf36:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800bf38:	697b      	ldr	r3, [r7, #20]
 800bf3a:	781b      	ldrb	r3, [r3, #0]
 800bf3c:	091b      	lsrs	r3, r3, #4
 800bf3e:	b2db      	uxtb	r3, r3
 800bf40:	2b04      	cmp	r3, #4
 800bf42:	d004      	beq.n	800bf4e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f7f8 ff8d 	bl	8004e64 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	e107      	b.n	800c15e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800bf4e:	697b      	ldr	r3, [r7, #20]
 800bf50:	781b      	ldrb	r3, [r3, #0]
 800bf52:	f003 030f 	and.w	r3, r3, #15
 800bf56:	b2db      	uxtb	r3, r3
 800bf58:	009b      	lsls	r3, r3, #2
 800bf5a:	b2db      	uxtb	r3, r3
 800bf5c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800bf5e:	697b      	ldr	r3, [r7, #20]
 800bf60:	885b      	ldrh	r3, [r3, #2]
 800bf62:	b29b      	uxth	r3, r3
 800bf64:	4618      	mov	r0, r3
 800bf66:	f7f7 fc1f 	bl	80037a8 <lwip_htons>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	891b      	ldrh	r3, [r3, #8]
 800bf72:	89ba      	ldrh	r2, [r7, #12]
 800bf74:	429a      	cmp	r2, r3
 800bf76:	d204      	bcs.n	800bf82 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800bf78:	89bb      	ldrh	r3, [r7, #12]
 800bf7a:	4619      	mov	r1, r3
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	f7f8 fdeb 	bl	8004b58 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	895b      	ldrh	r3, [r3, #10]
 800bf86:	89fa      	ldrh	r2, [r7, #14]
 800bf88:	429a      	cmp	r2, r3
 800bf8a:	d807      	bhi.n	800bf9c <ip4_input+0x74>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	891b      	ldrh	r3, [r3, #8]
 800bf90:	89ba      	ldrh	r2, [r7, #12]
 800bf92:	429a      	cmp	r2, r3
 800bf94:	d802      	bhi.n	800bf9c <ip4_input+0x74>
 800bf96:	89fb      	ldrh	r3, [r7, #14]
 800bf98:	2b13      	cmp	r3, #19
 800bf9a:	d804      	bhi.n	800bfa6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800bf9c:	6878      	ldr	r0, [r7, #4]
 800bf9e:	f7f8 ff61 	bl	8004e64 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	e0db      	b.n	800c15e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800bfa6:	697b      	ldr	r3, [r7, #20]
 800bfa8:	691b      	ldr	r3, [r3, #16]
 800bfaa:	4a6f      	ldr	r2, [pc, #444]	; (800c168 <ip4_input+0x240>)
 800bfac:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800bfae:	697b      	ldr	r3, [r7, #20]
 800bfb0:	68db      	ldr	r3, [r3, #12]
 800bfb2:	4a6d      	ldr	r2, [pc, #436]	; (800c168 <ip4_input+0x240>)
 800bfb4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800bfb6:	4b6c      	ldr	r3, [pc, #432]	; (800c168 <ip4_input+0x240>)
 800bfb8:	695b      	ldr	r3, [r3, #20]
 800bfba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bfbe:	2be0      	cmp	r3, #224	; 0xe0
 800bfc0:	d112      	bne.n	800bfe8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bfc8:	f003 0301 	and.w	r3, r3, #1
 800bfcc:	b2db      	uxtb	r3, r3
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d007      	beq.n	800bfe2 <ip4_input+0xba>
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	3304      	adds	r3, #4
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d002      	beq.n	800bfe2 <ip4_input+0xba>
      netif = inp;
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	613b      	str	r3, [r7, #16]
 800bfe0:	e02a      	b.n	800c038 <ip4_input+0x110>
    } else {
      netif = NULL;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	613b      	str	r3, [r7, #16]
 800bfe6:	e027      	b.n	800c038 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800bfe8:	6838      	ldr	r0, [r7, #0]
 800bfea:	f7ff ff73 	bl	800bed4 <ip4_input_accept>
 800bfee:	4603      	mov	r3, r0
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d002      	beq.n	800bffa <ip4_input+0xd2>
      netif = inp;
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	613b      	str	r3, [r7, #16]
 800bff8:	e01e      	b.n	800c038 <ip4_input+0x110>
    } else {
      netif = NULL;
 800bffa:	2300      	movs	r3, #0
 800bffc:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800bffe:	4b5a      	ldr	r3, [pc, #360]	; (800c168 <ip4_input+0x240>)
 800c000:	695b      	ldr	r3, [r3, #20]
 800c002:	b2db      	uxtb	r3, r3
 800c004:	2b7f      	cmp	r3, #127	; 0x7f
 800c006:	d017      	beq.n	800c038 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800c008:	4b58      	ldr	r3, [pc, #352]	; (800c16c <ip4_input+0x244>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	613b      	str	r3, [r7, #16]
 800c00e:	e00e      	b.n	800c02e <ip4_input+0x106>
          if (netif == inp) {
 800c010:	693a      	ldr	r2, [r7, #16]
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	429a      	cmp	r2, r3
 800c016:	d006      	beq.n	800c026 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800c018:	6938      	ldr	r0, [r7, #16]
 800c01a:	f7ff ff5b 	bl	800bed4 <ip4_input_accept>
 800c01e:	4603      	mov	r3, r0
 800c020:	2b00      	cmp	r3, #0
 800c022:	d108      	bne.n	800c036 <ip4_input+0x10e>
 800c024:	e000      	b.n	800c028 <ip4_input+0x100>
            continue;
 800c026:	bf00      	nop
        NETIF_FOREACH(netif) {
 800c028:	693b      	ldr	r3, [r7, #16]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	613b      	str	r3, [r7, #16]
 800c02e:	693b      	ldr	r3, [r7, #16]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d1ed      	bne.n	800c010 <ip4_input+0xe8>
 800c034:	e000      	b.n	800c038 <ip4_input+0x110>
            break;
 800c036:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800c038:	4b4b      	ldr	r3, [pc, #300]	; (800c168 <ip4_input+0x240>)
 800c03a:	691b      	ldr	r3, [r3, #16]
 800c03c:	6839      	ldr	r1, [r7, #0]
 800c03e:	4618      	mov	r0, r3
 800c040:	f000 f96e 	bl	800c320 <ip4_addr_isbroadcast_u32>
 800c044:	4603      	mov	r3, r0
 800c046:	2b00      	cmp	r3, #0
 800c048:	d105      	bne.n	800c056 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800c04a:	4b47      	ldr	r3, [pc, #284]	; (800c168 <ip4_input+0x240>)
 800c04c:	691b      	ldr	r3, [r3, #16]
 800c04e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800c052:	2be0      	cmp	r3, #224	; 0xe0
 800c054:	d104      	bne.n	800c060 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f7f8 ff04 	bl	8004e64 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800c05c:	2300      	movs	r3, #0
 800c05e:	e07e      	b.n	800c15e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d104      	bne.n	800c070 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f7f8 fefc 	bl	8004e64 <pbuf_free>
    return ERR_OK;
 800c06c:	2300      	movs	r3, #0
 800c06e:	e076      	b.n	800c15e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800c070:	697b      	ldr	r3, [r7, #20]
 800c072:	88db      	ldrh	r3, [r3, #6]
 800c074:	b29b      	uxth	r3, r3
 800c076:	461a      	mov	r2, r3
 800c078:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800c07c:	4013      	ands	r3, r2
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d00b      	beq.n	800c09a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800c082:	6878      	ldr	r0, [r7, #4]
 800c084:	f000 fc92 	bl	800c9ac <ip4_reass>
 800c088:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d101      	bne.n	800c094 <ip4_input+0x16c>
      return ERR_OK;
 800c090:	2300      	movs	r3, #0
 800c092:	e064      	b.n	800c15e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	685b      	ldr	r3, [r3, #4]
 800c098:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800c09a:	4a33      	ldr	r2, [pc, #204]	; (800c168 <ip4_input+0x240>)
 800c09c:	693b      	ldr	r3, [r7, #16]
 800c09e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800c0a0:	4a31      	ldr	r2, [pc, #196]	; (800c168 <ip4_input+0x240>)
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800c0a6:	4a30      	ldr	r2, [pc, #192]	; (800c168 <ip4_input+0x240>)
 800c0a8:	697b      	ldr	r3, [r7, #20]
 800c0aa:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800c0ac:	697b      	ldr	r3, [r7, #20]
 800c0ae:	781b      	ldrb	r3, [r3, #0]
 800c0b0:	f003 030f 	and.w	r3, r3, #15
 800c0b4:	b2db      	uxtb	r3, r3
 800c0b6:	009b      	lsls	r3, r3, #2
 800c0b8:	b2db      	uxtb	r3, r3
 800c0ba:	b29a      	uxth	r2, r3
 800c0bc:	4b2a      	ldr	r3, [pc, #168]	; (800c168 <ip4_input+0x240>)
 800c0be:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800c0c0:	89fb      	ldrh	r3, [r7, #14]
 800c0c2:	4619      	mov	r1, r3
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f7f8 fe47 	bl	8004d58 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800c0ca:	697b      	ldr	r3, [r7, #20]
 800c0cc:	7a5b      	ldrb	r3, [r3, #9]
 800c0ce:	2b11      	cmp	r3, #17
 800c0d0:	d006      	beq.n	800c0e0 <ip4_input+0x1b8>
 800c0d2:	2b11      	cmp	r3, #17
 800c0d4:	dc13      	bgt.n	800c0fe <ip4_input+0x1d6>
 800c0d6:	2b01      	cmp	r3, #1
 800c0d8:	d00c      	beq.n	800c0f4 <ip4_input+0x1cc>
 800c0da:	2b06      	cmp	r3, #6
 800c0dc:	d005      	beq.n	800c0ea <ip4_input+0x1c2>
 800c0de:	e00e      	b.n	800c0fe <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800c0e0:	6839      	ldr	r1, [r7, #0]
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f7fe fc68 	bl	800a9b8 <udp_input>
        break;
 800c0e8:	e026      	b.n	800c138 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800c0ea:	6839      	ldr	r1, [r7, #0]
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f7fa fce1 	bl	8006ab4 <tcp_input>
        break;
 800c0f2:	e021      	b.n	800c138 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800c0f4:	6839      	ldr	r1, [r7, #0]
 800c0f6:	6878      	ldr	r0, [r7, #4]
 800c0f8:	f7ff fcee 	bl	800bad8 <icmp_input>
        break;
 800c0fc:	e01c      	b.n	800c138 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800c0fe:	4b1a      	ldr	r3, [pc, #104]	; (800c168 <ip4_input+0x240>)
 800c100:	695b      	ldr	r3, [r3, #20]
 800c102:	6939      	ldr	r1, [r7, #16]
 800c104:	4618      	mov	r0, r3
 800c106:	f000 f90b 	bl	800c320 <ip4_addr_isbroadcast_u32>
 800c10a:	4603      	mov	r3, r0
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d10f      	bne.n	800c130 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c110:	4b15      	ldr	r3, [pc, #84]	; (800c168 <ip4_input+0x240>)
 800c112:	695b      	ldr	r3, [r3, #20]
 800c114:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800c118:	2be0      	cmp	r3, #224	; 0xe0
 800c11a:	d009      	beq.n	800c130 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800c11c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c120:	4619      	mov	r1, r3
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f7f8 fe8b 	bl	8004e3e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800c128:	2102      	movs	r1, #2
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f7ff fdd8 	bl	800bce0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f7f8 fe97 	bl	8004e64 <pbuf_free>
        break;
 800c136:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800c138:	4b0b      	ldr	r3, [pc, #44]	; (800c168 <ip4_input+0x240>)
 800c13a:	2200      	movs	r2, #0
 800c13c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800c13e:	4b0a      	ldr	r3, [pc, #40]	; (800c168 <ip4_input+0x240>)
 800c140:	2200      	movs	r2, #0
 800c142:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800c144:	4b08      	ldr	r3, [pc, #32]	; (800c168 <ip4_input+0x240>)
 800c146:	2200      	movs	r2, #0
 800c148:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800c14a:	4b07      	ldr	r3, [pc, #28]	; (800c168 <ip4_input+0x240>)
 800c14c:	2200      	movs	r2, #0
 800c14e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800c150:	4b05      	ldr	r3, [pc, #20]	; (800c168 <ip4_input+0x240>)
 800c152:	2200      	movs	r2, #0
 800c154:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800c156:	4b04      	ldr	r3, [pc, #16]	; (800c168 <ip4_input+0x240>)
 800c158:	2200      	movs	r2, #0
 800c15a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800c15c:	2300      	movs	r3, #0
}
 800c15e:	4618      	mov	r0, r3
 800c160:	3718      	adds	r7, #24
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}
 800c166:	bf00      	nop
 800c168:	20004cd8 	.word	0x20004cd8
 800c16c:	2000823c 	.word	0x2000823c

0800c170 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b08a      	sub	sp, #40	; 0x28
 800c174:	af04      	add	r7, sp, #16
 800c176:	60f8      	str	r0, [r7, #12]
 800c178:	60b9      	str	r1, [r7, #8]
 800c17a:	607a      	str	r2, [r7, #4]
 800c17c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800c17e:	68bb      	ldr	r3, [r7, #8]
 800c180:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d009      	beq.n	800c19c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d003      	beq.n	800c196 <ip4_output_if+0x26>
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d102      	bne.n	800c19c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800c196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c198:	3304      	adds	r3, #4
 800c19a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800c19c:	78fa      	ldrb	r2, [r7, #3]
 800c19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1a0:	9302      	str	r3, [sp, #8]
 800c1a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c1a6:	9301      	str	r3, [sp, #4]
 800c1a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c1ac:	9300      	str	r3, [sp, #0]
 800c1ae:	4613      	mov	r3, r2
 800c1b0:	687a      	ldr	r2, [r7, #4]
 800c1b2:	6979      	ldr	r1, [r7, #20]
 800c1b4:	68f8      	ldr	r0, [r7, #12]
 800c1b6:	f000 f805 	bl	800c1c4 <ip4_output_if_src>
 800c1ba:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800c1bc:	4618      	mov	r0, r3
 800c1be:	3718      	adds	r7, #24
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}

0800c1c4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b088      	sub	sp, #32
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	60f8      	str	r0, [r7, #12]
 800c1cc:	60b9      	str	r1, [r7, #8]
 800c1ce:	607a      	str	r2, [r7, #4]
 800c1d0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	7b9b      	ldrb	r3, [r3, #14]
 800c1d6:	2b01      	cmp	r3, #1
 800c1d8:	d006      	beq.n	800c1e8 <ip4_output_if_src+0x24>
 800c1da:	4b4b      	ldr	r3, [pc, #300]	; (800c308 <ip4_output_if_src+0x144>)
 800c1dc:	f44f 7255 	mov.w	r2, #852	; 0x354
 800c1e0:	494a      	ldr	r1, [pc, #296]	; (800c30c <ip4_output_if_src+0x148>)
 800c1e2:	484b      	ldr	r0, [pc, #300]	; (800c310 <ip4_output_if_src+0x14c>)
 800c1e4:	f001 f83c 	bl	800d260 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d060      	beq.n	800c2b0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800c1ee:	2314      	movs	r3, #20
 800c1f0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800c1f2:	2114      	movs	r1, #20
 800c1f4:	68f8      	ldr	r0, [r7, #12]
 800c1f6:	f7f8 fd9f 	bl	8004d38 <pbuf_add_header>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d002      	beq.n	800c206 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800c200:	f06f 0301 	mvn.w	r3, #1
 800c204:	e07c      	b.n	800c300 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	685b      	ldr	r3, [r3, #4]
 800c20a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	895b      	ldrh	r3, [r3, #10]
 800c210:	2b13      	cmp	r3, #19
 800c212:	d806      	bhi.n	800c222 <ip4_output_if_src+0x5e>
 800c214:	4b3c      	ldr	r3, [pc, #240]	; (800c308 <ip4_output_if_src+0x144>)
 800c216:	f44f 7262 	mov.w	r2, #904	; 0x388
 800c21a:	493e      	ldr	r1, [pc, #248]	; (800c314 <ip4_output_if_src+0x150>)
 800c21c:	483c      	ldr	r0, [pc, #240]	; (800c310 <ip4_output_if_src+0x14c>)
 800c21e:	f001 f81f 	bl	800d260 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800c222:	69fb      	ldr	r3, [r7, #28]
 800c224:	78fa      	ldrb	r2, [r7, #3]
 800c226:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800c228:	69fb      	ldr	r3, [r7, #28]
 800c22a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800c22e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681a      	ldr	r2, [r3, #0]
 800c234:	69fb      	ldr	r3, [r7, #28]
 800c236:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800c238:	8b7b      	ldrh	r3, [r7, #26]
 800c23a:	089b      	lsrs	r3, r3, #2
 800c23c:	b29b      	uxth	r3, r3
 800c23e:	b2db      	uxtb	r3, r3
 800c240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c244:	b2da      	uxtb	r2, r3
 800c246:	69fb      	ldr	r3, [r7, #28]
 800c248:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800c24a:	69fb      	ldr	r3, [r7, #28]
 800c24c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800c250:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	891b      	ldrh	r3, [r3, #8]
 800c256:	4618      	mov	r0, r3
 800c258:	f7f7 faa6 	bl	80037a8 <lwip_htons>
 800c25c:	4603      	mov	r3, r0
 800c25e:	461a      	mov	r2, r3
 800c260:	69fb      	ldr	r3, [r7, #28]
 800c262:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800c264:	69fb      	ldr	r3, [r7, #28]
 800c266:	2200      	movs	r2, #0
 800c268:	719a      	strb	r2, [r3, #6]
 800c26a:	2200      	movs	r2, #0
 800c26c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800c26e:	4b2a      	ldr	r3, [pc, #168]	; (800c318 <ip4_output_if_src+0x154>)
 800c270:	881b      	ldrh	r3, [r3, #0]
 800c272:	4618      	mov	r0, r3
 800c274:	f7f7 fa98 	bl	80037a8 <lwip_htons>
 800c278:	4603      	mov	r3, r0
 800c27a:	461a      	mov	r2, r3
 800c27c:	69fb      	ldr	r3, [r7, #28]
 800c27e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800c280:	4b25      	ldr	r3, [pc, #148]	; (800c318 <ip4_output_if_src+0x154>)
 800c282:	881b      	ldrh	r3, [r3, #0]
 800c284:	3301      	adds	r3, #1
 800c286:	b29a      	uxth	r2, r3
 800c288:	4b23      	ldr	r3, [pc, #140]	; (800c318 <ip4_output_if_src+0x154>)
 800c28a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d104      	bne.n	800c29c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800c292:	4b22      	ldr	r3, [pc, #136]	; (800c31c <ip4_output_if_src+0x158>)
 800c294:	681a      	ldr	r2, [r3, #0]
 800c296:	69fb      	ldr	r3, [r7, #28]
 800c298:	60da      	str	r2, [r3, #12]
 800c29a:	e003      	b.n	800c2a4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	681a      	ldr	r2, [r3, #0]
 800c2a0:	69fb      	ldr	r3, [r7, #28]
 800c2a2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800c2a4:	69fb      	ldr	r3, [r7, #28]
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	729a      	strb	r2, [r3, #10]
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	72da      	strb	r2, [r3, #11]
 800c2ae:	e00f      	b.n	800c2d0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	895b      	ldrh	r3, [r3, #10]
 800c2b4:	2b13      	cmp	r3, #19
 800c2b6:	d802      	bhi.n	800c2be <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800c2b8:	f06f 0301 	mvn.w	r3, #1
 800c2bc:	e020      	b.n	800c300 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	685b      	ldr	r3, [r3, #4]
 800c2c2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800c2c4:	69fb      	ldr	r3, [r7, #28]
 800c2c6:	691b      	ldr	r3, [r3, #16]
 800c2c8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800c2ca:	f107 0314 	add.w	r3, r7, #20
 800c2ce:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800c2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d00c      	beq.n	800c2f2 <ip4_output_if_src+0x12e>
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	891a      	ldrh	r2, [r3, #8]
 800c2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c2e0:	429a      	cmp	r2, r3
 800c2e2:	d906      	bls.n	800c2f2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800c2e4:	687a      	ldr	r2, [r7, #4]
 800c2e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c2e8:	68f8      	ldr	r0, [r7, #12]
 800c2ea:	f000 fd53 	bl	800cd94 <ip4_frag>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	e006      	b.n	800c300 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800c2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2f4:	695b      	ldr	r3, [r3, #20]
 800c2f6:	687a      	ldr	r2, [r7, #4]
 800c2f8:	68f9      	ldr	r1, [r7, #12]
 800c2fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c2fc:	4798      	blx	r3
 800c2fe:	4603      	mov	r3, r0
}
 800c300:	4618      	mov	r0, r3
 800c302:	3720      	adds	r7, #32
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}
 800c308:	080109a4 	.word	0x080109a4
 800c30c:	080109d8 	.word	0x080109d8
 800c310:	080109e4 	.word	0x080109e4
 800c314:	08010a0c 	.word	0x08010a0c
 800c318:	2000839a 	.word	0x2000839a
 800c31c:	08010de4 	.word	0x08010de4

0800c320 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800c320:	b480      	push	{r7}
 800c322:	b085      	sub	sp, #20
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
 800c328:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c334:	d002      	beq.n	800c33c <ip4_addr_isbroadcast_u32+0x1c>
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d101      	bne.n	800c340 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800c33c:	2301      	movs	r3, #1
 800c33e:	e02a      	b.n	800c396 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c346:	f003 0302 	and.w	r3, r3, #2
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d101      	bne.n	800c352 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800c34e:	2300      	movs	r3, #0
 800c350:	e021      	b.n	800c396 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	3304      	adds	r3, #4
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	687a      	ldr	r2, [r7, #4]
 800c35a:	429a      	cmp	r2, r3
 800c35c:	d101      	bne.n	800c362 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800c35e:	2300      	movs	r3, #0
 800c360:	e019      	b.n	800c396 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800c362:	68fa      	ldr	r2, [r7, #12]
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	3304      	adds	r3, #4
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	405a      	eors	r2, r3
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	3308      	adds	r3, #8
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	4013      	ands	r3, r2
 800c374:	2b00      	cmp	r3, #0
 800c376:	d10d      	bne.n	800c394 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	3308      	adds	r3, #8
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	43da      	mvns	r2, r3
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	3308      	adds	r3, #8
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800c38c:	429a      	cmp	r2, r3
 800c38e:	d101      	bne.n	800c394 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800c390:	2301      	movs	r3, #1
 800c392:	e000      	b.n	800c396 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800c394:	2300      	movs	r3, #0
  }
}
 800c396:	4618      	mov	r0, r3
 800c398:	3714      	adds	r7, #20
 800c39a:	46bd      	mov	sp, r7
 800c39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a0:	4770      	bx	lr
	...

0800c3a4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b084      	sub	sp, #16
 800c3a8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800c3ae:	4b12      	ldr	r3, [pc, #72]	; (800c3f8 <ip_reass_tmr+0x54>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800c3b4:	e018      	b.n	800c3e8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	7fdb      	ldrb	r3, [r3, #31]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d00b      	beq.n	800c3d6 <ip_reass_tmr+0x32>
      r->timer--;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	7fdb      	ldrb	r3, [r3, #31]
 800c3c2:	3b01      	subs	r3, #1
 800c3c4:	b2da      	uxtb	r2, r3
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	60fb      	str	r3, [r7, #12]
 800c3d4:	e008      	b.n	800c3e8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800c3e0:	68b9      	ldr	r1, [r7, #8]
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	f000 f80a 	bl	800c3fc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d1e3      	bne.n	800c3b6 <ip_reass_tmr+0x12>
    }
  }
}
 800c3ee:	bf00      	nop
 800c3f0:	bf00      	nop
 800c3f2:	3710      	adds	r7, #16
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}
 800c3f8:	2000839c 	.word	0x2000839c

0800c3fc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b088      	sub	sp, #32
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
 800c404:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800c406:	2300      	movs	r3, #0
 800c408:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800c40a:	683a      	ldr	r2, [r7, #0]
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	429a      	cmp	r2, r3
 800c410:	d105      	bne.n	800c41e <ip_reass_free_complete_datagram+0x22>
 800c412:	4b45      	ldr	r3, [pc, #276]	; (800c528 <ip_reass_free_complete_datagram+0x12c>)
 800c414:	22ab      	movs	r2, #171	; 0xab
 800c416:	4945      	ldr	r1, [pc, #276]	; (800c52c <ip_reass_free_complete_datagram+0x130>)
 800c418:	4845      	ldr	r0, [pc, #276]	; (800c530 <ip_reass_free_complete_datagram+0x134>)
 800c41a:	f000 ff21 	bl	800d260 <iprintf>
  if (prev != NULL) {
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d00a      	beq.n	800c43a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	687a      	ldr	r2, [r7, #4]
 800c42a:	429a      	cmp	r2, r3
 800c42c:	d005      	beq.n	800c43a <ip_reass_free_complete_datagram+0x3e>
 800c42e:	4b3e      	ldr	r3, [pc, #248]	; (800c528 <ip_reass_free_complete_datagram+0x12c>)
 800c430:	22ad      	movs	r2, #173	; 0xad
 800c432:	4940      	ldr	r1, [pc, #256]	; (800c534 <ip_reass_free_complete_datagram+0x138>)
 800c434:	483e      	ldr	r0, [pc, #248]	; (800c530 <ip_reass_free_complete_datagram+0x134>)
 800c436:	f000 ff13 	bl	800d260 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	685b      	ldr	r3, [r3, #4]
 800c43e:	685b      	ldr	r3, [r3, #4]
 800c440:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800c442:	697b      	ldr	r3, [r7, #20]
 800c444:	889b      	ldrh	r3, [r3, #4]
 800c446:	b29b      	uxth	r3, r3
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d12a      	bne.n	800c4a2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	685b      	ldr	r3, [r3, #4]
 800c450:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	681a      	ldr	r2, [r3, #0]
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800c45a:	69bb      	ldr	r3, [r7, #24]
 800c45c:	6858      	ldr	r0, [r3, #4]
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	3308      	adds	r3, #8
 800c462:	2214      	movs	r2, #20
 800c464:	4619      	mov	r1, r3
 800c466:	f000 fee5 	bl	800d234 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800c46a:	2101      	movs	r1, #1
 800c46c:	69b8      	ldr	r0, [r7, #24]
 800c46e:	f7ff fc47 	bl	800bd00 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800c472:	69b8      	ldr	r0, [r7, #24]
 800c474:	f7f8 fd7e 	bl	8004f74 <pbuf_clen>
 800c478:	4603      	mov	r3, r0
 800c47a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800c47c:	8bfa      	ldrh	r2, [r7, #30]
 800c47e:	8a7b      	ldrh	r3, [r7, #18]
 800c480:	4413      	add	r3, r2
 800c482:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c486:	db05      	blt.n	800c494 <ip_reass_free_complete_datagram+0x98>
 800c488:	4b27      	ldr	r3, [pc, #156]	; (800c528 <ip_reass_free_complete_datagram+0x12c>)
 800c48a:	22bc      	movs	r2, #188	; 0xbc
 800c48c:	492a      	ldr	r1, [pc, #168]	; (800c538 <ip_reass_free_complete_datagram+0x13c>)
 800c48e:	4828      	ldr	r0, [pc, #160]	; (800c530 <ip_reass_free_complete_datagram+0x134>)
 800c490:	f000 fee6 	bl	800d260 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800c494:	8bfa      	ldrh	r2, [r7, #30]
 800c496:	8a7b      	ldrh	r3, [r7, #18]
 800c498:	4413      	add	r3, r2
 800c49a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800c49c:	69b8      	ldr	r0, [r7, #24]
 800c49e:	f7f8 fce1 	bl	8004e64 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	685b      	ldr	r3, [r3, #4]
 800c4a6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800c4a8:	e01f      	b.n	800c4ea <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800c4aa:	69bb      	ldr	r3, [r7, #24]
 800c4ac:	685b      	ldr	r3, [r3, #4]
 800c4ae:	617b      	str	r3, [r7, #20]
    pcur = p;
 800c4b0:	69bb      	ldr	r3, [r7, #24]
 800c4b2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800c4b4:	697b      	ldr	r3, [r7, #20]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800c4ba:	68f8      	ldr	r0, [r7, #12]
 800c4bc:	f7f8 fd5a 	bl	8004f74 <pbuf_clen>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800c4c4:	8bfa      	ldrh	r2, [r7, #30]
 800c4c6:	8a7b      	ldrh	r3, [r7, #18]
 800c4c8:	4413      	add	r3, r2
 800c4ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4ce:	db05      	blt.n	800c4dc <ip_reass_free_complete_datagram+0xe0>
 800c4d0:	4b15      	ldr	r3, [pc, #84]	; (800c528 <ip_reass_free_complete_datagram+0x12c>)
 800c4d2:	22cc      	movs	r2, #204	; 0xcc
 800c4d4:	4918      	ldr	r1, [pc, #96]	; (800c538 <ip_reass_free_complete_datagram+0x13c>)
 800c4d6:	4816      	ldr	r0, [pc, #88]	; (800c530 <ip_reass_free_complete_datagram+0x134>)
 800c4d8:	f000 fec2 	bl	800d260 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800c4dc:	8bfa      	ldrh	r2, [r7, #30]
 800c4de:	8a7b      	ldrh	r3, [r7, #18]
 800c4e0:	4413      	add	r3, r2
 800c4e2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800c4e4:	68f8      	ldr	r0, [r7, #12]
 800c4e6:	f7f8 fcbd 	bl	8004e64 <pbuf_free>
  while (p != NULL) {
 800c4ea:	69bb      	ldr	r3, [r7, #24]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d1dc      	bne.n	800c4aa <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800c4f0:	6839      	ldr	r1, [r7, #0]
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f000 f8c2 	bl	800c67c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800c4f8:	4b10      	ldr	r3, [pc, #64]	; (800c53c <ip_reass_free_complete_datagram+0x140>)
 800c4fa:	881b      	ldrh	r3, [r3, #0]
 800c4fc:	8bfa      	ldrh	r2, [r7, #30]
 800c4fe:	429a      	cmp	r2, r3
 800c500:	d905      	bls.n	800c50e <ip_reass_free_complete_datagram+0x112>
 800c502:	4b09      	ldr	r3, [pc, #36]	; (800c528 <ip_reass_free_complete_datagram+0x12c>)
 800c504:	22d2      	movs	r2, #210	; 0xd2
 800c506:	490e      	ldr	r1, [pc, #56]	; (800c540 <ip_reass_free_complete_datagram+0x144>)
 800c508:	4809      	ldr	r0, [pc, #36]	; (800c530 <ip_reass_free_complete_datagram+0x134>)
 800c50a:	f000 fea9 	bl	800d260 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800c50e:	4b0b      	ldr	r3, [pc, #44]	; (800c53c <ip_reass_free_complete_datagram+0x140>)
 800c510:	881a      	ldrh	r2, [r3, #0]
 800c512:	8bfb      	ldrh	r3, [r7, #30]
 800c514:	1ad3      	subs	r3, r2, r3
 800c516:	b29a      	uxth	r2, r3
 800c518:	4b08      	ldr	r3, [pc, #32]	; (800c53c <ip_reass_free_complete_datagram+0x140>)
 800c51a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800c51c:	8bfb      	ldrh	r3, [r7, #30]
}
 800c51e:	4618      	mov	r0, r3
 800c520:	3720      	adds	r7, #32
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}
 800c526:	bf00      	nop
 800c528:	08010a3c 	.word	0x08010a3c
 800c52c:	08010a78 	.word	0x08010a78
 800c530:	08010a84 	.word	0x08010a84
 800c534:	08010aac 	.word	0x08010aac
 800c538:	08010ac0 	.word	0x08010ac0
 800c53c:	200083a0 	.word	0x200083a0
 800c540:	08010ae0 	.word	0x08010ae0

0800c544 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b08a      	sub	sp, #40	; 0x28
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
 800c54c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800c54e:	2300      	movs	r3, #0
 800c550:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800c552:	2300      	movs	r3, #0
 800c554:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800c556:	2300      	movs	r3, #0
 800c558:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800c55a:	2300      	movs	r3, #0
 800c55c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800c55e:	2300      	movs	r3, #0
 800c560:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800c562:	4b28      	ldr	r3, [pc, #160]	; (800c604 <ip_reass_remove_oldest_datagram+0xc0>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800c568:	e030      	b.n	800c5cc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800c56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c56c:	695a      	ldr	r2, [r3, #20]
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	68db      	ldr	r3, [r3, #12]
 800c572:	429a      	cmp	r2, r3
 800c574:	d10c      	bne.n	800c590 <ip_reass_remove_oldest_datagram+0x4c>
 800c576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c578:	699a      	ldr	r2, [r3, #24]
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	691b      	ldr	r3, [r3, #16]
 800c57e:	429a      	cmp	r2, r3
 800c580:	d106      	bne.n	800c590 <ip_reass_remove_oldest_datagram+0x4c>
 800c582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c584:	899a      	ldrh	r2, [r3, #12]
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	889b      	ldrh	r3, [r3, #4]
 800c58a:	b29b      	uxth	r3, r3
 800c58c:	429a      	cmp	r2, r3
 800c58e:	d014      	beq.n	800c5ba <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800c590:	693b      	ldr	r3, [r7, #16]
 800c592:	3301      	adds	r3, #1
 800c594:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800c596:	6a3b      	ldr	r3, [r7, #32]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d104      	bne.n	800c5a6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800c59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c59e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800c5a0:	69fb      	ldr	r3, [r7, #28]
 800c5a2:	61bb      	str	r3, [r7, #24]
 800c5a4:	e009      	b.n	800c5ba <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800c5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a8:	7fda      	ldrb	r2, [r3, #31]
 800c5aa:	6a3b      	ldr	r3, [r7, #32]
 800c5ac:	7fdb      	ldrb	r3, [r3, #31]
 800c5ae:	429a      	cmp	r2, r3
 800c5b0:	d803      	bhi.n	800c5ba <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800c5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800c5b6:	69fb      	ldr	r3, [r7, #28]
 800c5b8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800c5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d001      	beq.n	800c5c6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800c5c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5c4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800c5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800c5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d1cb      	bne.n	800c56a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800c5d2:	6a3b      	ldr	r3, [r7, #32]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d008      	beq.n	800c5ea <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800c5d8:	69b9      	ldr	r1, [r7, #24]
 800c5da:	6a38      	ldr	r0, [r7, #32]
 800c5dc:	f7ff ff0e 	bl	800c3fc <ip_reass_free_complete_datagram>
 800c5e0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800c5e2:	697a      	ldr	r2, [r7, #20]
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	4413      	add	r3, r2
 800c5e8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800c5ea:	697a      	ldr	r2, [r7, #20]
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	429a      	cmp	r2, r3
 800c5f0:	da02      	bge.n	800c5f8 <ip_reass_remove_oldest_datagram+0xb4>
 800c5f2:	693b      	ldr	r3, [r7, #16]
 800c5f4:	2b01      	cmp	r3, #1
 800c5f6:	dcac      	bgt.n	800c552 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800c5f8:	697b      	ldr	r3, [r7, #20]
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	3728      	adds	r7, #40	; 0x28
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}
 800c602:	bf00      	nop
 800c604:	2000839c 	.word	0x2000839c

0800c608 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b084      	sub	sp, #16
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
 800c610:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800c612:	2004      	movs	r0, #4
 800c614:	f7f7 fd40 	bl	8004098 <memp_malloc>
 800c618:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d110      	bne.n	800c642 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800c620:	6839      	ldr	r1, [r7, #0]
 800c622:	6878      	ldr	r0, [r7, #4]
 800c624:	f7ff ff8e 	bl	800c544 <ip_reass_remove_oldest_datagram>
 800c628:	4602      	mov	r2, r0
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	4293      	cmp	r3, r2
 800c62e:	dc03      	bgt.n	800c638 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800c630:	2004      	movs	r0, #4
 800c632:	f7f7 fd31 	bl	8004098 <memp_malloc>
 800c636:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d101      	bne.n	800c642 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800c63e:	2300      	movs	r3, #0
 800c640:	e016      	b.n	800c670 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800c642:	2220      	movs	r2, #32
 800c644:	2100      	movs	r1, #0
 800c646:	68f8      	ldr	r0, [r7, #12]
 800c648:	f000 fe02 	bl	800d250 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	220f      	movs	r2, #15
 800c650:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800c652:	4b09      	ldr	r3, [pc, #36]	; (800c678 <ip_reass_enqueue_new_datagram+0x70>)
 800c654:	681a      	ldr	r2, [r3, #0]
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800c65a:	4a07      	ldr	r2, [pc, #28]	; (800c678 <ip_reass_enqueue_new_datagram+0x70>)
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	3308      	adds	r3, #8
 800c664:	2214      	movs	r2, #20
 800c666:	6879      	ldr	r1, [r7, #4]
 800c668:	4618      	mov	r0, r3
 800c66a:	f000 fde3 	bl	800d234 <memcpy>
  return ipr;
 800c66e:	68fb      	ldr	r3, [r7, #12]
}
 800c670:	4618      	mov	r0, r3
 800c672:	3710      	adds	r7, #16
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}
 800c678:	2000839c 	.word	0x2000839c

0800c67c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b082      	sub	sp, #8
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
 800c684:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800c686:	4b10      	ldr	r3, [pc, #64]	; (800c6c8 <ip_reass_dequeue_datagram+0x4c>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	687a      	ldr	r2, [r7, #4]
 800c68c:	429a      	cmp	r2, r3
 800c68e:	d104      	bne.n	800c69a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	4a0c      	ldr	r2, [pc, #48]	; (800c6c8 <ip_reass_dequeue_datagram+0x4c>)
 800c696:	6013      	str	r3, [r2, #0]
 800c698:	e00d      	b.n	800c6b6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d106      	bne.n	800c6ae <ip_reass_dequeue_datagram+0x32>
 800c6a0:	4b0a      	ldr	r3, [pc, #40]	; (800c6cc <ip_reass_dequeue_datagram+0x50>)
 800c6a2:	f240 1245 	movw	r2, #325	; 0x145
 800c6a6:	490a      	ldr	r1, [pc, #40]	; (800c6d0 <ip_reass_dequeue_datagram+0x54>)
 800c6a8:	480a      	ldr	r0, [pc, #40]	; (800c6d4 <ip_reass_dequeue_datagram+0x58>)
 800c6aa:	f000 fdd9 	bl	800d260 <iprintf>
    prev->next = ipr->next;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681a      	ldr	r2, [r3, #0]
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800c6b6:	6879      	ldr	r1, [r7, #4]
 800c6b8:	2004      	movs	r0, #4
 800c6ba:	f7f7 fd5d 	bl	8004178 <memp_free>
}
 800c6be:	bf00      	nop
 800c6c0:	3708      	adds	r7, #8
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}
 800c6c6:	bf00      	nop
 800c6c8:	2000839c 	.word	0x2000839c
 800c6cc:	08010a3c 	.word	0x08010a3c
 800c6d0:	08010b04 	.word	0x08010b04
 800c6d4:	08010a84 	.word	0x08010a84

0800c6d8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b08c      	sub	sp, #48	; 0x30
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	60f8      	str	r0, [r7, #12]
 800c6e0:	60b9      	str	r1, [r7, #8]
 800c6e2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800c6e8:	2301      	movs	r3, #1
 800c6ea:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	685b      	ldr	r3, [r3, #4]
 800c6f0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800c6f2:	69fb      	ldr	r3, [r7, #28]
 800c6f4:	885b      	ldrh	r3, [r3, #2]
 800c6f6:	b29b      	uxth	r3, r3
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f7f7 f855 	bl	80037a8 <lwip_htons>
 800c6fe:	4603      	mov	r3, r0
 800c700:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800c702:	69fb      	ldr	r3, [r7, #28]
 800c704:	781b      	ldrb	r3, [r3, #0]
 800c706:	f003 030f 	and.w	r3, r3, #15
 800c70a:	b2db      	uxtb	r3, r3
 800c70c:	009b      	lsls	r3, r3, #2
 800c70e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800c710:	7e7b      	ldrb	r3, [r7, #25]
 800c712:	b29b      	uxth	r3, r3
 800c714:	8b7a      	ldrh	r2, [r7, #26]
 800c716:	429a      	cmp	r2, r3
 800c718:	d202      	bcs.n	800c720 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c71a:	f04f 33ff 	mov.w	r3, #4294967295
 800c71e:	e135      	b.n	800c98c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800c720:	7e7b      	ldrb	r3, [r7, #25]
 800c722:	b29b      	uxth	r3, r3
 800c724:	8b7a      	ldrh	r2, [r7, #26]
 800c726:	1ad3      	subs	r3, r2, r3
 800c728:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800c72a:	69fb      	ldr	r3, [r7, #28]
 800c72c:	88db      	ldrh	r3, [r3, #6]
 800c72e:	b29b      	uxth	r3, r3
 800c730:	4618      	mov	r0, r3
 800c732:	f7f7 f839 	bl	80037a8 <lwip_htons>
 800c736:	4603      	mov	r3, r0
 800c738:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c73c:	b29b      	uxth	r3, r3
 800c73e:	00db      	lsls	r3, r3, #3
 800c740:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	685b      	ldr	r3, [r3, #4]
 800c746:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800c748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c74a:	2200      	movs	r2, #0
 800c74c:	701a      	strb	r2, [r3, #0]
 800c74e:	2200      	movs	r2, #0
 800c750:	705a      	strb	r2, [r3, #1]
 800c752:	2200      	movs	r2, #0
 800c754:	709a      	strb	r2, [r3, #2]
 800c756:	2200      	movs	r2, #0
 800c758:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800c75a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c75c:	8afa      	ldrh	r2, [r7, #22]
 800c75e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800c760:	8afa      	ldrh	r2, [r7, #22]
 800c762:	8b7b      	ldrh	r3, [r7, #26]
 800c764:	4413      	add	r3, r2
 800c766:	b29a      	uxth	r2, r3
 800c768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c76a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800c76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c76e:	88db      	ldrh	r3, [r3, #6]
 800c770:	b29b      	uxth	r3, r3
 800c772:	8afa      	ldrh	r2, [r7, #22]
 800c774:	429a      	cmp	r2, r3
 800c776:	d902      	bls.n	800c77e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c778:	f04f 33ff 	mov.w	r3, #4294967295
 800c77c:	e106      	b.n	800c98c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	685b      	ldr	r3, [r3, #4]
 800c782:	627b      	str	r3, [r7, #36]	; 0x24
 800c784:	e068      	b.n	800c858 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800c786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c788:	685b      	ldr	r3, [r3, #4]
 800c78a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800c78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c78e:	889b      	ldrh	r3, [r3, #4]
 800c790:	b29a      	uxth	r2, r3
 800c792:	693b      	ldr	r3, [r7, #16]
 800c794:	889b      	ldrh	r3, [r3, #4]
 800c796:	b29b      	uxth	r3, r3
 800c798:	429a      	cmp	r2, r3
 800c79a:	d235      	bcs.n	800c808 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800c79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c79e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7a0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800c7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d020      	beq.n	800c7ea <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800c7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7aa:	889b      	ldrh	r3, [r3, #4]
 800c7ac:	b29a      	uxth	r2, r3
 800c7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b0:	88db      	ldrh	r3, [r3, #6]
 800c7b2:	b29b      	uxth	r3, r3
 800c7b4:	429a      	cmp	r2, r3
 800c7b6:	d307      	bcc.n	800c7c8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800c7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ba:	88db      	ldrh	r3, [r3, #6]
 800c7bc:	b29a      	uxth	r2, r3
 800c7be:	693b      	ldr	r3, [r7, #16]
 800c7c0:	889b      	ldrh	r3, [r3, #4]
 800c7c2:	b29b      	uxth	r3, r3
 800c7c4:	429a      	cmp	r2, r3
 800c7c6:	d902      	bls.n	800c7ce <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c7c8:	f04f 33ff 	mov.w	r3, #4294967295
 800c7cc:	e0de      	b.n	800c98c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800c7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7d0:	68ba      	ldr	r2, [r7, #8]
 800c7d2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800c7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7d6:	88db      	ldrh	r3, [r3, #6]
 800c7d8:	b29a      	uxth	r2, r3
 800c7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7dc:	889b      	ldrh	r3, [r3, #4]
 800c7de:	b29b      	uxth	r3, r3
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	d03d      	beq.n	800c860 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800c7e8:	e03a      	b.n	800c860 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800c7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ec:	88db      	ldrh	r3, [r3, #6]
 800c7ee:	b29a      	uxth	r2, r3
 800c7f0:	693b      	ldr	r3, [r7, #16]
 800c7f2:	889b      	ldrh	r3, [r3, #4]
 800c7f4:	b29b      	uxth	r3, r3
 800c7f6:	429a      	cmp	r2, r3
 800c7f8:	d902      	bls.n	800c800 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c7fa:	f04f 33ff 	mov.w	r3, #4294967295
 800c7fe:	e0c5      	b.n	800c98c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	68ba      	ldr	r2, [r7, #8]
 800c804:	605a      	str	r2, [r3, #4]
      break;
 800c806:	e02b      	b.n	800c860 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800c808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c80a:	889b      	ldrh	r3, [r3, #4]
 800c80c:	b29a      	uxth	r2, r3
 800c80e:	693b      	ldr	r3, [r7, #16]
 800c810:	889b      	ldrh	r3, [r3, #4]
 800c812:	b29b      	uxth	r3, r3
 800c814:	429a      	cmp	r2, r3
 800c816:	d102      	bne.n	800c81e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c818:	f04f 33ff 	mov.w	r3, #4294967295
 800c81c:	e0b6      	b.n	800c98c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800c81e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c820:	889b      	ldrh	r3, [r3, #4]
 800c822:	b29a      	uxth	r2, r3
 800c824:	693b      	ldr	r3, [r7, #16]
 800c826:	88db      	ldrh	r3, [r3, #6]
 800c828:	b29b      	uxth	r3, r3
 800c82a:	429a      	cmp	r2, r3
 800c82c:	d202      	bcs.n	800c834 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c82e:	f04f 33ff 	mov.w	r3, #4294967295
 800c832:	e0ab      	b.n	800c98c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800c834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c836:	2b00      	cmp	r3, #0
 800c838:	d009      	beq.n	800c84e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800c83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c83c:	88db      	ldrh	r3, [r3, #6]
 800c83e:	b29a      	uxth	r2, r3
 800c840:	693b      	ldr	r3, [r7, #16]
 800c842:	889b      	ldrh	r3, [r3, #4]
 800c844:	b29b      	uxth	r3, r3
 800c846:	429a      	cmp	r2, r3
 800c848:	d001      	beq.n	800c84e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800c84a:	2300      	movs	r3, #0
 800c84c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800c84e:	693b      	ldr	r3, [r7, #16]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800c854:	693b      	ldr	r3, [r7, #16]
 800c856:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800c858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d193      	bne.n	800c786 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800c85e:	e000      	b.n	800c862 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800c860:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800c862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c864:	2b00      	cmp	r3, #0
 800c866:	d12d      	bne.n	800c8c4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800c868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d01c      	beq.n	800c8a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800c86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c870:	88db      	ldrh	r3, [r3, #6]
 800c872:	b29a      	uxth	r2, r3
 800c874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c876:	889b      	ldrh	r3, [r3, #4]
 800c878:	b29b      	uxth	r3, r3
 800c87a:	429a      	cmp	r2, r3
 800c87c:	d906      	bls.n	800c88c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800c87e:	4b45      	ldr	r3, [pc, #276]	; (800c994 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c880:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800c884:	4944      	ldr	r1, [pc, #272]	; (800c998 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800c886:	4845      	ldr	r0, [pc, #276]	; (800c99c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c888:	f000 fcea 	bl	800d260 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800c88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c88e:	68ba      	ldr	r2, [r7, #8]
 800c890:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800c892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c894:	88db      	ldrh	r3, [r3, #6]
 800c896:	b29a      	uxth	r2, r3
 800c898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c89a:	889b      	ldrh	r3, [r3, #4]
 800c89c:	b29b      	uxth	r3, r3
 800c89e:	429a      	cmp	r2, r3
 800c8a0:	d010      	beq.n	800c8c4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	623b      	str	r3, [r7, #32]
 800c8a6:	e00d      	b.n	800c8c4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	685b      	ldr	r3, [r3, #4]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d006      	beq.n	800c8be <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800c8b0:	4b38      	ldr	r3, [pc, #224]	; (800c994 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c8b2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800c8b6:	493a      	ldr	r1, [pc, #232]	; (800c9a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800c8b8:	4838      	ldr	r0, [pc, #224]	; (800c99c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c8ba:	f000 fcd1 	bl	800d260 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	68ba      	ldr	r2, [r7, #8]
 800c8c2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d105      	bne.n	800c8d6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	7f9b      	ldrb	r3, [r3, #30]
 800c8ce:	f003 0301 	and.w	r3, r3, #1
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d059      	beq.n	800c98a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800c8d6:	6a3b      	ldr	r3, [r7, #32]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d04f      	beq.n	800c97c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	685b      	ldr	r3, [r3, #4]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d006      	beq.n	800c8f2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	685b      	ldr	r3, [r3, #4]
 800c8e8:	685b      	ldr	r3, [r3, #4]
 800c8ea:	889b      	ldrh	r3, [r3, #4]
 800c8ec:	b29b      	uxth	r3, r3
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d002      	beq.n	800c8f8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	623b      	str	r3, [r7, #32]
 800c8f6:	e041      	b.n	800c97c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800c8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8fa:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800c8fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800c902:	e012      	b.n	800c92a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800c904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c906:	685b      	ldr	r3, [r3, #4]
 800c908:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800c90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c90c:	88db      	ldrh	r3, [r3, #6]
 800c90e:	b29a      	uxth	r2, r3
 800c910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c912:	889b      	ldrh	r3, [r3, #4]
 800c914:	b29b      	uxth	r3, r3
 800c916:	429a      	cmp	r2, r3
 800c918:	d002      	beq.n	800c920 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800c91a:	2300      	movs	r3, #0
 800c91c:	623b      	str	r3, [r7, #32]
            break;
 800c91e:	e007      	b.n	800c930 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800c920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c922:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800c924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800c92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d1e9      	bne.n	800c904 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800c930:	6a3b      	ldr	r3, [r7, #32]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d022      	beq.n	800c97c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	685b      	ldr	r3, [r3, #4]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d106      	bne.n	800c94c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800c93e:	4b15      	ldr	r3, [pc, #84]	; (800c994 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c940:	f240 12df 	movw	r2, #479	; 0x1df
 800c944:	4917      	ldr	r1, [pc, #92]	; (800c9a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800c946:	4815      	ldr	r0, [pc, #84]	; (800c99c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c948:	f000 fc8a 	bl	800d260 <iprintf>
          LWIP_ASSERT("sanity check",
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	685b      	ldr	r3, [r3, #4]
 800c950:	685b      	ldr	r3, [r3, #4]
 800c952:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c954:	429a      	cmp	r2, r3
 800c956:	d106      	bne.n	800c966 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800c958:	4b0e      	ldr	r3, [pc, #56]	; (800c994 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c95a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c95e:	4911      	ldr	r1, [pc, #68]	; (800c9a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800c960:	480e      	ldr	r0, [pc, #56]	; (800c99c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c962:	f000 fc7d 	bl	800d260 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800c966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d006      	beq.n	800c97c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800c96e:	4b09      	ldr	r3, [pc, #36]	; (800c994 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c970:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800c974:	490c      	ldr	r1, [pc, #48]	; (800c9a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800c976:	4809      	ldr	r0, [pc, #36]	; (800c99c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c978:	f000 fc72 	bl	800d260 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800c97c:	6a3b      	ldr	r3, [r7, #32]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	bf14      	ite	ne
 800c982:	2301      	movne	r3, #1
 800c984:	2300      	moveq	r3, #0
 800c986:	b2db      	uxtb	r3, r3
 800c988:	e000      	b.n	800c98c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800c98a:	2300      	movs	r3, #0
}
 800c98c:	4618      	mov	r0, r3
 800c98e:	3730      	adds	r7, #48	; 0x30
 800c990:	46bd      	mov	sp, r7
 800c992:	bd80      	pop	{r7, pc}
 800c994:	08010a3c 	.word	0x08010a3c
 800c998:	08010b20 	.word	0x08010b20
 800c99c:	08010a84 	.word	0x08010a84
 800c9a0:	08010b40 	.word	0x08010b40
 800c9a4:	08010b78 	.word	0x08010b78
 800c9a8:	08010b88 	.word	0x08010b88

0800c9ac <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b08e      	sub	sp, #56	; 0x38
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	685b      	ldr	r3, [r3, #4]
 800c9b8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800c9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9bc:	781b      	ldrb	r3, [r3, #0]
 800c9be:	f003 030f 	and.w	r3, r3, #15
 800c9c2:	b2db      	uxtb	r3, r3
 800c9c4:	009b      	lsls	r3, r3, #2
 800c9c6:	b2db      	uxtb	r3, r3
 800c9c8:	2b14      	cmp	r3, #20
 800c9ca:	f040 8171 	bne.w	800ccb0 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800c9ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9d0:	88db      	ldrh	r3, [r3, #6]
 800c9d2:	b29b      	uxth	r3, r3
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f7f6 fee7 	bl	80037a8 <lwip_htons>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c9e0:	b29b      	uxth	r3, r3
 800c9e2:	00db      	lsls	r3, r3, #3
 800c9e4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800c9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e8:	885b      	ldrh	r3, [r3, #2]
 800c9ea:	b29b      	uxth	r3, r3
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f7f6 fedb 	bl	80037a8 <lwip_htons>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800c9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9f8:	781b      	ldrb	r3, [r3, #0]
 800c9fa:	f003 030f 	and.w	r3, r3, #15
 800c9fe:	b2db      	uxtb	r3, r3
 800ca00:	009b      	lsls	r3, r3, #2
 800ca02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800ca06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ca0a:	b29b      	uxth	r3, r3
 800ca0c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ca0e:	429a      	cmp	r2, r3
 800ca10:	f0c0 8150 	bcc.w	800ccb4 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800ca14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ca18:	b29b      	uxth	r3, r3
 800ca1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ca1c:	1ad3      	subs	r3, r2, r3
 800ca1e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800ca20:	6878      	ldr	r0, [r7, #4]
 800ca22:	f7f8 faa7 	bl	8004f74 <pbuf_clen>
 800ca26:	4603      	mov	r3, r0
 800ca28:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800ca2a:	4b8c      	ldr	r3, [pc, #560]	; (800cc5c <ip4_reass+0x2b0>)
 800ca2c:	881b      	ldrh	r3, [r3, #0]
 800ca2e:	461a      	mov	r2, r3
 800ca30:	8c3b      	ldrh	r3, [r7, #32]
 800ca32:	4413      	add	r3, r2
 800ca34:	2b0a      	cmp	r3, #10
 800ca36:	dd10      	ble.n	800ca5a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ca38:	8c3b      	ldrh	r3, [r7, #32]
 800ca3a:	4619      	mov	r1, r3
 800ca3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca3e:	f7ff fd81 	bl	800c544 <ip_reass_remove_oldest_datagram>
 800ca42:	4603      	mov	r3, r0
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	f000 8137 	beq.w	800ccb8 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800ca4a:	4b84      	ldr	r3, [pc, #528]	; (800cc5c <ip4_reass+0x2b0>)
 800ca4c:	881b      	ldrh	r3, [r3, #0]
 800ca4e:	461a      	mov	r2, r3
 800ca50:	8c3b      	ldrh	r3, [r7, #32]
 800ca52:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ca54:	2b0a      	cmp	r3, #10
 800ca56:	f300 812f 	bgt.w	800ccb8 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ca5a:	4b81      	ldr	r3, [pc, #516]	; (800cc60 <ip4_reass+0x2b4>)
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	633b      	str	r3, [r7, #48]	; 0x30
 800ca60:	e015      	b.n	800ca8e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800ca62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca64:	695a      	ldr	r2, [r3, #20]
 800ca66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca68:	68db      	ldr	r3, [r3, #12]
 800ca6a:	429a      	cmp	r2, r3
 800ca6c:	d10c      	bne.n	800ca88 <ip4_reass+0xdc>
 800ca6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca70:	699a      	ldr	r2, [r3, #24]
 800ca72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca74:	691b      	ldr	r3, [r3, #16]
 800ca76:	429a      	cmp	r2, r3
 800ca78:	d106      	bne.n	800ca88 <ip4_reass+0xdc>
 800ca7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca7c:	899a      	ldrh	r2, [r3, #12]
 800ca7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca80:	889b      	ldrh	r3, [r3, #4]
 800ca82:	b29b      	uxth	r3, r3
 800ca84:	429a      	cmp	r2, r3
 800ca86:	d006      	beq.n	800ca96 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ca88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	633b      	str	r3, [r7, #48]	; 0x30
 800ca8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d1e6      	bne.n	800ca62 <ip4_reass+0xb6>
 800ca94:	e000      	b.n	800ca98 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800ca96:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800ca98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d109      	bne.n	800cab2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800ca9e:	8c3b      	ldrh	r3, [r7, #32]
 800caa0:	4619      	mov	r1, r3
 800caa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800caa4:	f7ff fdb0 	bl	800c608 <ip_reass_enqueue_new_datagram>
 800caa8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800caaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caac:	2b00      	cmp	r3, #0
 800caae:	d11c      	bne.n	800caea <ip4_reass+0x13e>
      goto nullreturn;
 800cab0:	e105      	b.n	800ccbe <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800cab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cab4:	88db      	ldrh	r3, [r3, #6]
 800cab6:	b29b      	uxth	r3, r3
 800cab8:	4618      	mov	r0, r3
 800caba:	f7f6 fe75 	bl	80037a8 <lwip_htons>
 800cabe:	4603      	mov	r3, r0
 800cac0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d110      	bne.n	800caea <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800cac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caca:	89db      	ldrh	r3, [r3, #14]
 800cacc:	4618      	mov	r0, r3
 800cace:	f7f6 fe6b 	bl	80037a8 <lwip_htons>
 800cad2:	4603      	mov	r3, r0
 800cad4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d006      	beq.n	800caea <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800cadc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cade:	3308      	adds	r3, #8
 800cae0:	2214      	movs	r2, #20
 800cae2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cae4:	4618      	mov	r0, r3
 800cae6:	f000 fba5 	bl	800d234 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800caea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caec:	88db      	ldrh	r3, [r3, #6]
 800caee:	b29b      	uxth	r3, r3
 800caf0:	f003 0320 	and.w	r3, r3, #32
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	bf0c      	ite	eq
 800caf8:	2301      	moveq	r3, #1
 800cafa:	2300      	movne	r3, #0
 800cafc:	b2db      	uxtb	r3, r3
 800cafe:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800cb00:	69fb      	ldr	r3, [r7, #28]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d00e      	beq.n	800cb24 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800cb06:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cb08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb0a:	4413      	add	r3, r2
 800cb0c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800cb0e:	8b7a      	ldrh	r2, [r7, #26]
 800cb10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cb12:	429a      	cmp	r2, r3
 800cb14:	f0c0 80a0 	bcc.w	800cc58 <ip4_reass+0x2ac>
 800cb18:	8b7b      	ldrh	r3, [r7, #26]
 800cb1a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800cb1e:	4293      	cmp	r3, r2
 800cb20:	f200 809a 	bhi.w	800cc58 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800cb24:	69fa      	ldr	r2, [r7, #28]
 800cb26:	6879      	ldr	r1, [r7, #4]
 800cb28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb2a:	f7ff fdd5 	bl	800c6d8 <ip_reass_chain_frag_into_datagram_and_validate>
 800cb2e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800cb30:	697b      	ldr	r3, [r7, #20]
 800cb32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb36:	f000 809b 	beq.w	800cc70 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800cb3a:	4b48      	ldr	r3, [pc, #288]	; (800cc5c <ip4_reass+0x2b0>)
 800cb3c:	881a      	ldrh	r2, [r3, #0]
 800cb3e:	8c3b      	ldrh	r3, [r7, #32]
 800cb40:	4413      	add	r3, r2
 800cb42:	b29a      	uxth	r2, r3
 800cb44:	4b45      	ldr	r3, [pc, #276]	; (800cc5c <ip4_reass+0x2b0>)
 800cb46:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800cb48:	69fb      	ldr	r3, [r7, #28]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d00d      	beq.n	800cb6a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800cb4e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cb50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb52:	4413      	add	r3, r2
 800cb54:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800cb56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb58:	8a7a      	ldrh	r2, [r7, #18]
 800cb5a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800cb5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb5e:	7f9b      	ldrb	r3, [r3, #30]
 800cb60:	f043 0301 	orr.w	r3, r3, #1
 800cb64:	b2da      	uxtb	r2, r3
 800cb66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb68:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800cb6a:	697b      	ldr	r3, [r7, #20]
 800cb6c:	2b01      	cmp	r3, #1
 800cb6e:	d171      	bne.n	800cc54 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800cb70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb72:	8b9b      	ldrh	r3, [r3, #28]
 800cb74:	3314      	adds	r3, #20
 800cb76:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800cb78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb7a:	685b      	ldr	r3, [r3, #4]
 800cb7c:	685b      	ldr	r3, [r3, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800cb82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb84:	685b      	ldr	r3, [r3, #4]
 800cb86:	685b      	ldr	r3, [r3, #4]
 800cb88:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800cb8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb8c:	3308      	adds	r3, #8
 800cb8e:	2214      	movs	r2, #20
 800cb90:	4619      	mov	r1, r3
 800cb92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb94:	f000 fb4e 	bl	800d234 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800cb98:	8a3b      	ldrh	r3, [r7, #16]
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f7f6 fe04 	bl	80037a8 <lwip_htons>
 800cba0:	4603      	mov	r3, r0
 800cba2:	461a      	mov	r2, r3
 800cba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cba6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800cba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbaa:	2200      	movs	r2, #0
 800cbac:	719a      	strb	r2, [r3, #6]
 800cbae:	2200      	movs	r2, #0
 800cbb0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800cbb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	729a      	strb	r2, [r3, #10]
 800cbb8:	2200      	movs	r2, #0
 800cbba:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800cbbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbbe:	685b      	ldr	r3, [r3, #4]
 800cbc0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800cbc2:	e00d      	b.n	800cbe0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800cbc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbc6:	685b      	ldr	r3, [r3, #4]
 800cbc8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800cbca:	2114      	movs	r1, #20
 800cbcc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800cbce:	f7f8 f8c3 	bl	8004d58 <pbuf_remove_header>
      pbuf_cat(p, r);
 800cbd2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cbd4:	6878      	ldr	r0, [r7, #4]
 800cbd6:	f7f8 fa07 	bl	8004fe8 <pbuf_cat>
      r = iprh->next_pbuf;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800cbe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d1ee      	bne.n	800cbc4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800cbe6:	4b1e      	ldr	r3, [pc, #120]	; (800cc60 <ip4_reass+0x2b4>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbec:	429a      	cmp	r2, r3
 800cbee:	d102      	bne.n	800cbf6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cbf4:	e010      	b.n	800cc18 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800cbf6:	4b1a      	ldr	r3, [pc, #104]	; (800cc60 <ip4_reass+0x2b4>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cbfc:	e007      	b.n	800cc0e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800cbfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc04:	429a      	cmp	r2, r3
 800cc06:	d006      	beq.n	800cc16 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800cc08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d1f4      	bne.n	800cbfe <ip4_reass+0x252>
 800cc14:	e000      	b.n	800cc18 <ip4_reass+0x26c>
          break;
 800cc16:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800cc18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cc1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc1c:	f7ff fd2e 	bl	800c67c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800cc20:	6878      	ldr	r0, [r7, #4]
 800cc22:	f7f8 f9a7 	bl	8004f74 <pbuf_clen>
 800cc26:	4603      	mov	r3, r0
 800cc28:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800cc2a:	4b0c      	ldr	r3, [pc, #48]	; (800cc5c <ip4_reass+0x2b0>)
 800cc2c:	881b      	ldrh	r3, [r3, #0]
 800cc2e:	8c3a      	ldrh	r2, [r7, #32]
 800cc30:	429a      	cmp	r2, r3
 800cc32:	d906      	bls.n	800cc42 <ip4_reass+0x296>
 800cc34:	4b0b      	ldr	r3, [pc, #44]	; (800cc64 <ip4_reass+0x2b8>)
 800cc36:	f240 229b 	movw	r2, #667	; 0x29b
 800cc3a:	490b      	ldr	r1, [pc, #44]	; (800cc68 <ip4_reass+0x2bc>)
 800cc3c:	480b      	ldr	r0, [pc, #44]	; (800cc6c <ip4_reass+0x2c0>)
 800cc3e:	f000 fb0f 	bl	800d260 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800cc42:	4b06      	ldr	r3, [pc, #24]	; (800cc5c <ip4_reass+0x2b0>)
 800cc44:	881a      	ldrh	r2, [r3, #0]
 800cc46:	8c3b      	ldrh	r3, [r7, #32]
 800cc48:	1ad3      	subs	r3, r2, r3
 800cc4a:	b29a      	uxth	r2, r3
 800cc4c:	4b03      	ldr	r3, [pc, #12]	; (800cc5c <ip4_reass+0x2b0>)
 800cc4e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	e038      	b.n	800ccc6 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800cc54:	2300      	movs	r3, #0
 800cc56:	e036      	b.n	800ccc6 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800cc58:	bf00      	nop
 800cc5a:	e00a      	b.n	800cc72 <ip4_reass+0x2c6>
 800cc5c:	200083a0 	.word	0x200083a0
 800cc60:	2000839c 	.word	0x2000839c
 800cc64:	08010a3c 	.word	0x08010a3c
 800cc68:	08010bac 	.word	0x08010bac
 800cc6c:	08010a84 	.word	0x08010a84
    goto nullreturn_ipr;
 800cc70:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800cc72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d106      	bne.n	800cc86 <ip4_reass+0x2da>
 800cc78:	4b15      	ldr	r3, [pc, #84]	; (800ccd0 <ip4_reass+0x324>)
 800cc7a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800cc7e:	4915      	ldr	r1, [pc, #84]	; (800ccd4 <ip4_reass+0x328>)
 800cc80:	4815      	ldr	r0, [pc, #84]	; (800ccd8 <ip4_reass+0x32c>)
 800cc82:	f000 faed 	bl	800d260 <iprintf>
  if (ipr->p == NULL) {
 800cc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc88:	685b      	ldr	r3, [r3, #4]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d116      	bne.n	800ccbc <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800cc8e:	4b13      	ldr	r3, [pc, #76]	; (800ccdc <ip4_reass+0x330>)
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc94:	429a      	cmp	r2, r3
 800cc96:	d006      	beq.n	800cca6 <ip4_reass+0x2fa>
 800cc98:	4b0d      	ldr	r3, [pc, #52]	; (800ccd0 <ip4_reass+0x324>)
 800cc9a:	f240 22ab 	movw	r2, #683	; 0x2ab
 800cc9e:	4910      	ldr	r1, [pc, #64]	; (800cce0 <ip4_reass+0x334>)
 800cca0:	480d      	ldr	r0, [pc, #52]	; (800ccd8 <ip4_reass+0x32c>)
 800cca2:	f000 fadd 	bl	800d260 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800cca6:	2100      	movs	r1, #0
 800cca8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ccaa:	f7ff fce7 	bl	800c67c <ip_reass_dequeue_datagram>
 800ccae:	e006      	b.n	800ccbe <ip4_reass+0x312>
    goto nullreturn;
 800ccb0:	bf00      	nop
 800ccb2:	e004      	b.n	800ccbe <ip4_reass+0x312>
    goto nullreturn;
 800ccb4:	bf00      	nop
 800ccb6:	e002      	b.n	800ccbe <ip4_reass+0x312>
      goto nullreturn;
 800ccb8:	bf00      	nop
 800ccba:	e000      	b.n	800ccbe <ip4_reass+0x312>
  }

nullreturn:
 800ccbc:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f7f8 f8d0 	bl	8004e64 <pbuf_free>
  return NULL;
 800ccc4:	2300      	movs	r3, #0
}
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	3738      	adds	r7, #56	; 0x38
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}
 800ccce:	bf00      	nop
 800ccd0:	08010a3c 	.word	0x08010a3c
 800ccd4:	08010bc8 	.word	0x08010bc8
 800ccd8:	08010a84 	.word	0x08010a84
 800ccdc:	2000839c 	.word	0x2000839c
 800cce0:	08010bd4 	.word	0x08010bd4

0800cce4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800cce8:	2005      	movs	r0, #5
 800ccea:	f7f7 f9d5 	bl	8004098 <memp_malloc>
 800ccee:	4603      	mov	r3, r0
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	bd80      	pop	{r7, pc}

0800ccf4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b082      	sub	sp, #8
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d106      	bne.n	800cd10 <ip_frag_free_pbuf_custom_ref+0x1c>
 800cd02:	4b07      	ldr	r3, [pc, #28]	; (800cd20 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800cd04:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800cd08:	4906      	ldr	r1, [pc, #24]	; (800cd24 <ip_frag_free_pbuf_custom_ref+0x30>)
 800cd0a:	4807      	ldr	r0, [pc, #28]	; (800cd28 <ip_frag_free_pbuf_custom_ref+0x34>)
 800cd0c:	f000 faa8 	bl	800d260 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800cd10:	6879      	ldr	r1, [r7, #4]
 800cd12:	2005      	movs	r0, #5
 800cd14:	f7f7 fa30 	bl	8004178 <memp_free>
}
 800cd18:	bf00      	nop
 800cd1a:	3708      	adds	r7, #8
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}
 800cd20:	08010a3c 	.word	0x08010a3c
 800cd24:	08010bf4 	.word	0x08010bf4
 800cd28:	08010a84 	.word	0x08010a84

0800cd2c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b084      	sub	sp, #16
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d106      	bne.n	800cd4c <ipfrag_free_pbuf_custom+0x20>
 800cd3e:	4b11      	ldr	r3, [pc, #68]	; (800cd84 <ipfrag_free_pbuf_custom+0x58>)
 800cd40:	f240 22ce 	movw	r2, #718	; 0x2ce
 800cd44:	4910      	ldr	r1, [pc, #64]	; (800cd88 <ipfrag_free_pbuf_custom+0x5c>)
 800cd46:	4811      	ldr	r0, [pc, #68]	; (800cd8c <ipfrag_free_pbuf_custom+0x60>)
 800cd48:	f000 fa8a 	bl	800d260 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800cd4c:	68fa      	ldr	r2, [r7, #12]
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	429a      	cmp	r2, r3
 800cd52:	d006      	beq.n	800cd62 <ipfrag_free_pbuf_custom+0x36>
 800cd54:	4b0b      	ldr	r3, [pc, #44]	; (800cd84 <ipfrag_free_pbuf_custom+0x58>)
 800cd56:	f240 22cf 	movw	r2, #719	; 0x2cf
 800cd5a:	490d      	ldr	r1, [pc, #52]	; (800cd90 <ipfrag_free_pbuf_custom+0x64>)
 800cd5c:	480b      	ldr	r0, [pc, #44]	; (800cd8c <ipfrag_free_pbuf_custom+0x60>)
 800cd5e:	f000 fa7f 	bl	800d260 <iprintf>
  if (pcr->original != NULL) {
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	695b      	ldr	r3, [r3, #20]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d004      	beq.n	800cd74 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	695b      	ldr	r3, [r3, #20]
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f7f8 f878 	bl	8004e64 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800cd74:	68f8      	ldr	r0, [r7, #12]
 800cd76:	f7ff ffbd 	bl	800ccf4 <ip_frag_free_pbuf_custom_ref>
}
 800cd7a:	bf00      	nop
 800cd7c:	3710      	adds	r7, #16
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}
 800cd82:	bf00      	nop
 800cd84:	08010a3c 	.word	0x08010a3c
 800cd88:	08010c00 	.word	0x08010c00
 800cd8c:	08010a84 	.word	0x08010a84
 800cd90:	08010c0c 	.word	0x08010c0c

0800cd94 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b094      	sub	sp, #80	; 0x50
 800cd98:	af02      	add	r7, sp, #8
 800cd9a:	60f8      	str	r0, [r7, #12]
 800cd9c:	60b9      	str	r1, [r7, #8]
 800cd9e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800cda0:	2300      	movs	r3, #0
 800cda2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800cda6:	68bb      	ldr	r3, [r7, #8]
 800cda8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cdaa:	3b14      	subs	r3, #20
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	da00      	bge.n	800cdb2 <ip4_frag+0x1e>
 800cdb0:	3307      	adds	r3, #7
 800cdb2:	10db      	asrs	r3, r3, #3
 800cdb4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800cdb6:	2314      	movs	r3, #20
 800cdb8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	685b      	ldr	r3, [r3, #4]
 800cdbe:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800cdc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdc2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800cdc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdc6:	781b      	ldrb	r3, [r3, #0]
 800cdc8:	f003 030f 	and.w	r3, r3, #15
 800cdcc:	b2db      	uxtb	r3, r3
 800cdce:	009b      	lsls	r3, r3, #2
 800cdd0:	b2db      	uxtb	r3, r3
 800cdd2:	2b14      	cmp	r3, #20
 800cdd4:	d002      	beq.n	800cddc <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800cdd6:	f06f 0305 	mvn.w	r3, #5
 800cdda:	e110      	b.n	800cffe <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	895b      	ldrh	r3, [r3, #10]
 800cde0:	2b13      	cmp	r3, #19
 800cde2:	d809      	bhi.n	800cdf8 <ip4_frag+0x64>
 800cde4:	4b88      	ldr	r3, [pc, #544]	; (800d008 <ip4_frag+0x274>)
 800cde6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800cdea:	4988      	ldr	r1, [pc, #544]	; (800d00c <ip4_frag+0x278>)
 800cdec:	4888      	ldr	r0, [pc, #544]	; (800d010 <ip4_frag+0x27c>)
 800cdee:	f000 fa37 	bl	800d260 <iprintf>
 800cdf2:	f06f 0305 	mvn.w	r3, #5
 800cdf6:	e102      	b.n	800cffe <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800cdf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdfa:	88db      	ldrh	r3, [r3, #6]
 800cdfc:	b29b      	uxth	r3, r3
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f7f6 fcd2 	bl	80037a8 <lwip_htons>
 800ce04:	4603      	mov	r3, r0
 800ce06:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800ce08:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ce0a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ce0e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800ce12:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ce14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ce18:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	891b      	ldrh	r3, [r3, #8]
 800ce1e:	3b14      	subs	r3, #20
 800ce20:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800ce24:	e0e1      	b.n	800cfea <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800ce26:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ce28:	00db      	lsls	r3, r3, #3
 800ce2a:	b29b      	uxth	r3, r3
 800ce2c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ce30:	4293      	cmp	r3, r2
 800ce32:	bf28      	it	cs
 800ce34:	4613      	movcs	r3, r2
 800ce36:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800ce38:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ce3c:	2114      	movs	r1, #20
 800ce3e:	200e      	movs	r0, #14
 800ce40:	f7f7 fd2c 	bl	800489c <pbuf_alloc>
 800ce44:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800ce46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	f000 80d5 	beq.w	800cff8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800ce4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce50:	895b      	ldrh	r3, [r3, #10]
 800ce52:	2b13      	cmp	r3, #19
 800ce54:	d806      	bhi.n	800ce64 <ip4_frag+0xd0>
 800ce56:	4b6c      	ldr	r3, [pc, #432]	; (800d008 <ip4_frag+0x274>)
 800ce58:	f44f 7249 	mov.w	r2, #804	; 0x324
 800ce5c:	496d      	ldr	r1, [pc, #436]	; (800d014 <ip4_frag+0x280>)
 800ce5e:	486c      	ldr	r0, [pc, #432]	; (800d010 <ip4_frag+0x27c>)
 800ce60:	f000 f9fe 	bl	800d260 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800ce64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce66:	685b      	ldr	r3, [r3, #4]
 800ce68:	2214      	movs	r2, #20
 800ce6a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f000 f9e1 	bl	800d234 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800ce72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce74:	685b      	ldr	r3, [r3, #4]
 800ce76:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800ce78:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ce7a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800ce7e:	e064      	b.n	800cf4a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	895a      	ldrh	r2, [r3, #10]
 800ce84:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ce86:	1ad3      	subs	r3, r2, r3
 800ce88:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	895b      	ldrh	r3, [r3, #10]
 800ce8e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800ce90:	429a      	cmp	r2, r3
 800ce92:	d906      	bls.n	800cea2 <ip4_frag+0x10e>
 800ce94:	4b5c      	ldr	r3, [pc, #368]	; (800d008 <ip4_frag+0x274>)
 800ce96:	f240 322d 	movw	r2, #813	; 0x32d
 800ce9a:	495f      	ldr	r1, [pc, #380]	; (800d018 <ip4_frag+0x284>)
 800ce9c:	485c      	ldr	r0, [pc, #368]	; (800d010 <ip4_frag+0x27c>)
 800ce9e:	f000 f9df 	bl	800d260 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800cea2:	8bfa      	ldrh	r2, [r7, #30]
 800cea4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800cea8:	4293      	cmp	r3, r2
 800ceaa:	bf28      	it	cs
 800ceac:	4613      	movcs	r3, r2
 800ceae:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800ceb2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d105      	bne.n	800cec6 <ip4_frag+0x132>
        poff = 0;
 800ceba:	2300      	movs	r3, #0
 800cebc:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	60fb      	str	r3, [r7, #12]
        continue;
 800cec4:	e041      	b.n	800cf4a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800cec6:	f7ff ff0d 	bl	800cce4 <ip_frag_alloc_pbuf_custom_ref>
 800ceca:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800cecc:	69bb      	ldr	r3, [r7, #24]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d103      	bne.n	800ceda <ip4_frag+0x146>
        pbuf_free(rambuf);
 800ced2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ced4:	f7f7 ffc6 	bl	8004e64 <pbuf_free>
        goto memerr;
 800ced8:	e08f      	b.n	800cffa <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800ceda:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800cee0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cee2:	4413      	add	r3, r2
 800cee4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800cee8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800ceec:	9201      	str	r2, [sp, #4]
 800ceee:	9300      	str	r3, [sp, #0]
 800cef0:	4603      	mov	r3, r0
 800cef2:	2241      	movs	r2, #65	; 0x41
 800cef4:	2000      	movs	r0, #0
 800cef6:	f7f7 fdfb 	bl	8004af0 <pbuf_alloced_custom>
 800cefa:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800cefc:	697b      	ldr	r3, [r7, #20]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d106      	bne.n	800cf10 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800cf02:	69b8      	ldr	r0, [r7, #24]
 800cf04:	f7ff fef6 	bl	800ccf4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800cf08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cf0a:	f7f7 ffab 	bl	8004e64 <pbuf_free>
        goto memerr;
 800cf0e:	e074      	b.n	800cffa <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800cf10:	68f8      	ldr	r0, [r7, #12]
 800cf12:	f7f8 f847 	bl	8004fa4 <pbuf_ref>
      pcr->original = p;
 800cf16:	69bb      	ldr	r3, [r7, #24]
 800cf18:	68fa      	ldr	r2, [r7, #12]
 800cf1a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800cf1c:	69bb      	ldr	r3, [r7, #24]
 800cf1e:	4a3f      	ldr	r2, [pc, #252]	; (800d01c <ip4_frag+0x288>)
 800cf20:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800cf22:	6979      	ldr	r1, [r7, #20]
 800cf24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cf26:	f7f8 f85f 	bl	8004fe8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800cf2a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800cf2e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800cf32:	1ad3      	subs	r3, r2, r3
 800cf34:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800cf38:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d004      	beq.n	800cf4a <ip4_frag+0x1b6>
        poff = 0;
 800cf40:	2300      	movs	r3, #0
 800cf42:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800cf4a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d196      	bne.n	800ce80 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800cf52:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800cf54:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800cf58:	4413      	add	r3, r2
 800cf5a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cf60:	f1a3 0213 	sub.w	r2, r3, #19
 800cf64:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cf68:	429a      	cmp	r2, r3
 800cf6a:	bfcc      	ite	gt
 800cf6c:	2301      	movgt	r3, #1
 800cf6e:	2300      	movle	r3, #0
 800cf70:	b2db      	uxtb	r3, r3
 800cf72:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800cf74:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cf78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cf7c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800cf7e:	6a3b      	ldr	r3, [r7, #32]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d002      	beq.n	800cf8a <ip4_frag+0x1f6>
 800cf84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d003      	beq.n	800cf92 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800cf8a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cf8c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cf90:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800cf92:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cf94:	4618      	mov	r0, r3
 800cf96:	f7f6 fc07 	bl	80037a8 <lwip_htons>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	461a      	mov	r2, r3
 800cf9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfa0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800cfa2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800cfa4:	3314      	adds	r3, #20
 800cfa6:	b29b      	uxth	r3, r3
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	f7f6 fbfd 	bl	80037a8 <lwip_htons>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	461a      	mov	r2, r3
 800cfb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfb4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800cfb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfb8:	2200      	movs	r2, #0
 800cfba:	729a      	strb	r2, [r3, #10]
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800cfc0:	68bb      	ldr	r3, [r7, #8]
 800cfc2:	695b      	ldr	r3, [r3, #20]
 800cfc4:	687a      	ldr	r2, [r7, #4]
 800cfc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cfc8:	68b8      	ldr	r0, [r7, #8]
 800cfca:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800cfcc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cfce:	f7f7 ff49 	bl	8004e64 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800cfd2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cfd6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800cfd8:	1ad3      	subs	r3, r2, r3
 800cfda:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800cfde:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800cfe2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cfe4:	4413      	add	r3, r2
 800cfe6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800cfea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	f47f af19 	bne.w	800ce26 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800cff4:	2300      	movs	r3, #0
 800cff6:	e002      	b.n	800cffe <ip4_frag+0x26a>
      goto memerr;
 800cff8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800cffa:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cffe:	4618      	mov	r0, r3
 800d000:	3748      	adds	r7, #72	; 0x48
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}
 800d006:	bf00      	nop
 800d008:	08010a3c 	.word	0x08010a3c
 800d00c:	08010c18 	.word	0x08010c18
 800d010:	08010a84 	.word	0x08010a84
 800d014:	08010c34 	.word	0x08010c34
 800d018:	08010c54 	.word	0x08010c54
 800d01c:	0800cd2d 	.word	0x0800cd2d

0800d020 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b086      	sub	sp, #24
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
 800d028:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800d02a:	230e      	movs	r3, #14
 800d02c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	895b      	ldrh	r3, [r3, #10]
 800d032:	2b0e      	cmp	r3, #14
 800d034:	d96e      	bls.n	800d114 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	7bdb      	ldrb	r3, [r3, #15]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d106      	bne.n	800d04c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d044:	3301      	adds	r3, #1
 800d046:	b2da      	uxtb	r2, r3
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	685b      	ldr	r3, [r3, #4]
 800d050:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800d052:	693b      	ldr	r3, [r7, #16]
 800d054:	7b1a      	ldrb	r2, [r3, #12]
 800d056:	7b5b      	ldrb	r3, [r3, #13]
 800d058:	021b      	lsls	r3, r3, #8
 800d05a:	4313      	orrs	r3, r2
 800d05c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800d05e:	693b      	ldr	r3, [r7, #16]
 800d060:	781b      	ldrb	r3, [r3, #0]
 800d062:	f003 0301 	and.w	r3, r3, #1
 800d066:	2b00      	cmp	r3, #0
 800d068:	d023      	beq.n	800d0b2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800d06a:	693b      	ldr	r3, [r7, #16]
 800d06c:	781b      	ldrb	r3, [r3, #0]
 800d06e:	2b01      	cmp	r3, #1
 800d070:	d10f      	bne.n	800d092 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d072:	693b      	ldr	r3, [r7, #16]
 800d074:	785b      	ldrb	r3, [r3, #1]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d11b      	bne.n	800d0b2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800d07a:	693b      	ldr	r3, [r7, #16]
 800d07c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d07e:	2b5e      	cmp	r3, #94	; 0x5e
 800d080:	d117      	bne.n	800d0b2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	7b5b      	ldrb	r3, [r3, #13]
 800d086:	f043 0310 	orr.w	r3, r3, #16
 800d08a:	b2da      	uxtb	r2, r3
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	735a      	strb	r2, [r3, #13]
 800d090:	e00f      	b.n	800d0b2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800d092:	693b      	ldr	r3, [r7, #16]
 800d094:	2206      	movs	r2, #6
 800d096:	4928      	ldr	r1, [pc, #160]	; (800d138 <ethernet_input+0x118>)
 800d098:	4618      	mov	r0, r3
 800d09a:	f000 f8bb 	bl	800d214 <memcmp>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d106      	bne.n	800d0b2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	7b5b      	ldrb	r3, [r3, #13]
 800d0a8:	f043 0308 	orr.w	r3, r3, #8
 800d0ac:	b2da      	uxtb	r2, r3
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800d0b2:	89fb      	ldrh	r3, [r7, #14]
 800d0b4:	2b08      	cmp	r3, #8
 800d0b6:	d003      	beq.n	800d0c0 <ethernet_input+0xa0>
 800d0b8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800d0bc:	d014      	beq.n	800d0e8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800d0be:	e032      	b.n	800d126 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d0c6:	f003 0308 	and.w	r3, r3, #8
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d024      	beq.n	800d118 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800d0ce:	8afb      	ldrh	r3, [r7, #22]
 800d0d0:	4619      	mov	r1, r3
 800d0d2:	6878      	ldr	r0, [r7, #4]
 800d0d4:	f7f7 fe40 	bl	8004d58 <pbuf_remove_header>
 800d0d8:	4603      	mov	r3, r0
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d11e      	bne.n	800d11c <ethernet_input+0xfc>
        ip4_input(p, netif);
 800d0de:	6839      	ldr	r1, [r7, #0]
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f7fe ff21 	bl	800bf28 <ip4_input>
      break;
 800d0e6:	e013      	b.n	800d110 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d0ee:	f003 0308 	and.w	r3, r3, #8
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d014      	beq.n	800d120 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800d0f6:	8afb      	ldrh	r3, [r7, #22]
 800d0f8:	4619      	mov	r1, r3
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f7f7 fe2c 	bl	8004d58 <pbuf_remove_header>
 800d100:	4603      	mov	r3, r0
 800d102:	2b00      	cmp	r3, #0
 800d104:	d10e      	bne.n	800d124 <ethernet_input+0x104>
        etharp_input(p, netif);
 800d106:	6839      	ldr	r1, [r7, #0]
 800d108:	6878      	ldr	r0, [r7, #4]
 800d10a:	f7fe f8c1 	bl	800b290 <etharp_input>
      break;
 800d10e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800d110:	2300      	movs	r3, #0
 800d112:	e00c      	b.n	800d12e <ethernet_input+0x10e>
    goto free_and_return;
 800d114:	bf00      	nop
 800d116:	e006      	b.n	800d126 <ethernet_input+0x106>
        goto free_and_return;
 800d118:	bf00      	nop
 800d11a:	e004      	b.n	800d126 <ethernet_input+0x106>
        goto free_and_return;
 800d11c:	bf00      	nop
 800d11e:	e002      	b.n	800d126 <ethernet_input+0x106>
        goto free_and_return;
 800d120:	bf00      	nop
 800d122:	e000      	b.n	800d126 <ethernet_input+0x106>
        goto free_and_return;
 800d124:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f7f7 fe9c 	bl	8004e64 <pbuf_free>
  return ERR_OK;
 800d12c:	2300      	movs	r3, #0
}
 800d12e:	4618      	mov	r0, r3
 800d130:	3718      	adds	r7, #24
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}
 800d136:	bf00      	nop
 800d138:	08010de8 	.word	0x08010de8

0800d13c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b086      	sub	sp, #24
 800d140:	af00      	add	r7, sp, #0
 800d142:	60f8      	str	r0, [r7, #12]
 800d144:	60b9      	str	r1, [r7, #8]
 800d146:	607a      	str	r2, [r7, #4]
 800d148:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800d14a:	8c3b      	ldrh	r3, [r7, #32]
 800d14c:	4618      	mov	r0, r3
 800d14e:	f7f6 fb2b 	bl	80037a8 <lwip_htons>
 800d152:	4603      	mov	r3, r0
 800d154:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800d156:	210e      	movs	r1, #14
 800d158:	68b8      	ldr	r0, [r7, #8]
 800d15a:	f7f7 fded 	bl	8004d38 <pbuf_add_header>
 800d15e:	4603      	mov	r3, r0
 800d160:	2b00      	cmp	r3, #0
 800d162:	d125      	bne.n	800d1b0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800d164:	68bb      	ldr	r3, [r7, #8]
 800d166:	685b      	ldr	r3, [r3, #4]
 800d168:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800d16a:	693b      	ldr	r3, [r7, #16]
 800d16c:	8afa      	ldrh	r2, [r7, #22]
 800d16e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800d170:	693b      	ldr	r3, [r7, #16]
 800d172:	2206      	movs	r2, #6
 800d174:	6839      	ldr	r1, [r7, #0]
 800d176:	4618      	mov	r0, r3
 800d178:	f000 f85c 	bl	800d234 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800d17c:	693b      	ldr	r3, [r7, #16]
 800d17e:	3306      	adds	r3, #6
 800d180:	2206      	movs	r2, #6
 800d182:	6879      	ldr	r1, [r7, #4]
 800d184:	4618      	mov	r0, r3
 800d186:	f000 f855 	bl	800d234 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d190:	2b06      	cmp	r3, #6
 800d192:	d006      	beq.n	800d1a2 <ethernet_output+0x66>
 800d194:	4b0a      	ldr	r3, [pc, #40]	; (800d1c0 <ethernet_output+0x84>)
 800d196:	f44f 7299 	mov.w	r2, #306	; 0x132
 800d19a:	490a      	ldr	r1, [pc, #40]	; (800d1c4 <ethernet_output+0x88>)
 800d19c:	480a      	ldr	r0, [pc, #40]	; (800d1c8 <ethernet_output+0x8c>)
 800d19e:	f000 f85f 	bl	800d260 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	699b      	ldr	r3, [r3, #24]
 800d1a6:	68b9      	ldr	r1, [r7, #8]
 800d1a8:	68f8      	ldr	r0, [r7, #12]
 800d1aa:	4798      	blx	r3
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	e002      	b.n	800d1b6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800d1b0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800d1b2:	f06f 0301 	mvn.w	r3, #1
}
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	3718      	adds	r7, #24
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bd80      	pop	{r7, pc}
 800d1be:	bf00      	nop
 800d1c0:	08010c64 	.word	0x08010c64
 800d1c4:	08010c9c 	.word	0x08010c9c
 800d1c8:	08010cd0 	.word	0x08010cd0

0800d1cc <__libc_init_array>:
 800d1cc:	b570      	push	{r4, r5, r6, lr}
 800d1ce:	4d0d      	ldr	r5, [pc, #52]	; (800d204 <__libc_init_array+0x38>)
 800d1d0:	4c0d      	ldr	r4, [pc, #52]	; (800d208 <__libc_init_array+0x3c>)
 800d1d2:	1b64      	subs	r4, r4, r5
 800d1d4:	10a4      	asrs	r4, r4, #2
 800d1d6:	2600      	movs	r6, #0
 800d1d8:	42a6      	cmp	r6, r4
 800d1da:	d109      	bne.n	800d1f0 <__libc_init_array+0x24>
 800d1dc:	4d0b      	ldr	r5, [pc, #44]	; (800d20c <__libc_init_array+0x40>)
 800d1de:	4c0c      	ldr	r4, [pc, #48]	; (800d210 <__libc_init_array+0x44>)
 800d1e0:	f001 f88e 	bl	800e300 <_init>
 800d1e4:	1b64      	subs	r4, r4, r5
 800d1e6:	10a4      	asrs	r4, r4, #2
 800d1e8:	2600      	movs	r6, #0
 800d1ea:	42a6      	cmp	r6, r4
 800d1ec:	d105      	bne.n	800d1fa <__libc_init_array+0x2e>
 800d1ee:	bd70      	pop	{r4, r5, r6, pc}
 800d1f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1f4:	4798      	blx	r3
 800d1f6:	3601      	adds	r6, #1
 800d1f8:	e7ee      	b.n	800d1d8 <__libc_init_array+0xc>
 800d1fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1fe:	4798      	blx	r3
 800d200:	3601      	adds	r6, #1
 800d202:	e7f2      	b.n	800d1ea <__libc_init_array+0x1e>
 800d204:	08010f48 	.word	0x08010f48
 800d208:	08010f48 	.word	0x08010f48
 800d20c:	08010f48 	.word	0x08010f48
 800d210:	08010f4c 	.word	0x08010f4c

0800d214 <memcmp>:
 800d214:	b510      	push	{r4, lr}
 800d216:	3901      	subs	r1, #1
 800d218:	4402      	add	r2, r0
 800d21a:	4290      	cmp	r0, r2
 800d21c:	d101      	bne.n	800d222 <memcmp+0xe>
 800d21e:	2000      	movs	r0, #0
 800d220:	e005      	b.n	800d22e <memcmp+0x1a>
 800d222:	7803      	ldrb	r3, [r0, #0]
 800d224:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d228:	42a3      	cmp	r3, r4
 800d22a:	d001      	beq.n	800d230 <memcmp+0x1c>
 800d22c:	1b18      	subs	r0, r3, r4
 800d22e:	bd10      	pop	{r4, pc}
 800d230:	3001      	adds	r0, #1
 800d232:	e7f2      	b.n	800d21a <memcmp+0x6>

0800d234 <memcpy>:
 800d234:	440a      	add	r2, r1
 800d236:	4291      	cmp	r1, r2
 800d238:	f100 33ff 	add.w	r3, r0, #4294967295
 800d23c:	d100      	bne.n	800d240 <memcpy+0xc>
 800d23e:	4770      	bx	lr
 800d240:	b510      	push	{r4, lr}
 800d242:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d246:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d24a:	4291      	cmp	r1, r2
 800d24c:	d1f9      	bne.n	800d242 <memcpy+0xe>
 800d24e:	bd10      	pop	{r4, pc}

0800d250 <memset>:
 800d250:	4402      	add	r2, r0
 800d252:	4603      	mov	r3, r0
 800d254:	4293      	cmp	r3, r2
 800d256:	d100      	bne.n	800d25a <memset+0xa>
 800d258:	4770      	bx	lr
 800d25a:	f803 1b01 	strb.w	r1, [r3], #1
 800d25e:	e7f9      	b.n	800d254 <memset+0x4>

0800d260 <iprintf>:
 800d260:	b40f      	push	{r0, r1, r2, r3}
 800d262:	4b0a      	ldr	r3, [pc, #40]	; (800d28c <iprintf+0x2c>)
 800d264:	b513      	push	{r0, r1, r4, lr}
 800d266:	681c      	ldr	r4, [r3, #0]
 800d268:	b124      	cbz	r4, 800d274 <iprintf+0x14>
 800d26a:	69a3      	ldr	r3, [r4, #24]
 800d26c:	b913      	cbnz	r3, 800d274 <iprintf+0x14>
 800d26e:	4620      	mov	r0, r4
 800d270:	f000 f8c2 	bl	800d3f8 <__sinit>
 800d274:	ab05      	add	r3, sp, #20
 800d276:	9a04      	ldr	r2, [sp, #16]
 800d278:	68a1      	ldr	r1, [r4, #8]
 800d27a:	9301      	str	r3, [sp, #4]
 800d27c:	4620      	mov	r0, r4
 800d27e:	f000 fa7f 	bl	800d780 <_vfiprintf_r>
 800d282:	b002      	add	sp, #8
 800d284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d288:	b004      	add	sp, #16
 800d28a:	4770      	bx	lr
 800d28c:	2000002c 	.word	0x2000002c

0800d290 <rand>:
 800d290:	4b16      	ldr	r3, [pc, #88]	; (800d2ec <rand+0x5c>)
 800d292:	b510      	push	{r4, lr}
 800d294:	681c      	ldr	r4, [r3, #0]
 800d296:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d298:	b9b3      	cbnz	r3, 800d2c8 <rand+0x38>
 800d29a:	2018      	movs	r0, #24
 800d29c:	f000 f95e 	bl	800d55c <malloc>
 800d2a0:	63a0      	str	r0, [r4, #56]	; 0x38
 800d2a2:	b928      	cbnz	r0, 800d2b0 <rand+0x20>
 800d2a4:	4602      	mov	r2, r0
 800d2a6:	4b12      	ldr	r3, [pc, #72]	; (800d2f0 <rand+0x60>)
 800d2a8:	4812      	ldr	r0, [pc, #72]	; (800d2f4 <rand+0x64>)
 800d2aa:	214e      	movs	r1, #78	; 0x4e
 800d2ac:	f000 f82e 	bl	800d30c <__assert_func>
 800d2b0:	4a11      	ldr	r2, [pc, #68]	; (800d2f8 <rand+0x68>)
 800d2b2:	4b12      	ldr	r3, [pc, #72]	; (800d2fc <rand+0x6c>)
 800d2b4:	e9c0 2300 	strd	r2, r3, [r0]
 800d2b8:	4b11      	ldr	r3, [pc, #68]	; (800d300 <rand+0x70>)
 800d2ba:	6083      	str	r3, [r0, #8]
 800d2bc:	230b      	movs	r3, #11
 800d2be:	8183      	strh	r3, [r0, #12]
 800d2c0:	2201      	movs	r2, #1
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800d2c8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800d2ca:	4a0e      	ldr	r2, [pc, #56]	; (800d304 <rand+0x74>)
 800d2cc:	6920      	ldr	r0, [r4, #16]
 800d2ce:	6963      	ldr	r3, [r4, #20]
 800d2d0:	490d      	ldr	r1, [pc, #52]	; (800d308 <rand+0x78>)
 800d2d2:	4342      	muls	r2, r0
 800d2d4:	fb01 2203 	mla	r2, r1, r3, r2
 800d2d8:	fba0 0101 	umull	r0, r1, r0, r1
 800d2dc:	1c43      	adds	r3, r0, #1
 800d2de:	eb42 0001 	adc.w	r0, r2, r1
 800d2e2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800d2e6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800d2ea:	bd10      	pop	{r4, pc}
 800d2ec:	2000002c 	.word	0x2000002c
 800d2f0:	08010dfc 	.word	0x08010dfc
 800d2f4:	08010e13 	.word	0x08010e13
 800d2f8:	abcd330e 	.word	0xabcd330e
 800d2fc:	e66d1234 	.word	0xe66d1234
 800d300:	0005deec 	.word	0x0005deec
 800d304:	5851f42d 	.word	0x5851f42d
 800d308:	4c957f2d 	.word	0x4c957f2d

0800d30c <__assert_func>:
 800d30c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d30e:	4614      	mov	r4, r2
 800d310:	461a      	mov	r2, r3
 800d312:	4b09      	ldr	r3, [pc, #36]	; (800d338 <__assert_func+0x2c>)
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	4605      	mov	r5, r0
 800d318:	68d8      	ldr	r0, [r3, #12]
 800d31a:	b14c      	cbz	r4, 800d330 <__assert_func+0x24>
 800d31c:	4b07      	ldr	r3, [pc, #28]	; (800d33c <__assert_func+0x30>)
 800d31e:	9100      	str	r1, [sp, #0]
 800d320:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d324:	4906      	ldr	r1, [pc, #24]	; (800d340 <__assert_func+0x34>)
 800d326:	462b      	mov	r3, r5
 800d328:	f000 f8e4 	bl	800d4f4 <fiprintf>
 800d32c:	f000 fe12 	bl	800df54 <abort>
 800d330:	4b04      	ldr	r3, [pc, #16]	; (800d344 <__assert_func+0x38>)
 800d332:	461c      	mov	r4, r3
 800d334:	e7f3      	b.n	800d31e <__assert_func+0x12>
 800d336:	bf00      	nop
 800d338:	2000002c 	.word	0x2000002c
 800d33c:	08010e6e 	.word	0x08010e6e
 800d340:	08010e7b 	.word	0x08010e7b
 800d344:	08010ea9 	.word	0x08010ea9

0800d348 <std>:
 800d348:	2300      	movs	r3, #0
 800d34a:	b510      	push	{r4, lr}
 800d34c:	4604      	mov	r4, r0
 800d34e:	e9c0 3300 	strd	r3, r3, [r0]
 800d352:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d356:	6083      	str	r3, [r0, #8]
 800d358:	8181      	strh	r1, [r0, #12]
 800d35a:	6643      	str	r3, [r0, #100]	; 0x64
 800d35c:	81c2      	strh	r2, [r0, #14]
 800d35e:	6183      	str	r3, [r0, #24]
 800d360:	4619      	mov	r1, r3
 800d362:	2208      	movs	r2, #8
 800d364:	305c      	adds	r0, #92	; 0x5c
 800d366:	f7ff ff73 	bl	800d250 <memset>
 800d36a:	4b05      	ldr	r3, [pc, #20]	; (800d380 <std+0x38>)
 800d36c:	6263      	str	r3, [r4, #36]	; 0x24
 800d36e:	4b05      	ldr	r3, [pc, #20]	; (800d384 <std+0x3c>)
 800d370:	62a3      	str	r3, [r4, #40]	; 0x28
 800d372:	4b05      	ldr	r3, [pc, #20]	; (800d388 <std+0x40>)
 800d374:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d376:	4b05      	ldr	r3, [pc, #20]	; (800d38c <std+0x44>)
 800d378:	6224      	str	r4, [r4, #32]
 800d37a:	6323      	str	r3, [r4, #48]	; 0x30
 800d37c:	bd10      	pop	{r4, pc}
 800d37e:	bf00      	nop
 800d380:	0800dd29 	.word	0x0800dd29
 800d384:	0800dd4b 	.word	0x0800dd4b
 800d388:	0800dd83 	.word	0x0800dd83
 800d38c:	0800dda7 	.word	0x0800dda7

0800d390 <_cleanup_r>:
 800d390:	4901      	ldr	r1, [pc, #4]	; (800d398 <_cleanup_r+0x8>)
 800d392:	f000 b8c1 	b.w	800d518 <_fwalk_reent>
 800d396:	bf00      	nop
 800d398:	0800e091 	.word	0x0800e091

0800d39c <__sfmoreglue>:
 800d39c:	b570      	push	{r4, r5, r6, lr}
 800d39e:	2268      	movs	r2, #104	; 0x68
 800d3a0:	1e4d      	subs	r5, r1, #1
 800d3a2:	4355      	muls	r5, r2
 800d3a4:	460e      	mov	r6, r1
 800d3a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d3aa:	f000 f94b 	bl	800d644 <_malloc_r>
 800d3ae:	4604      	mov	r4, r0
 800d3b0:	b140      	cbz	r0, 800d3c4 <__sfmoreglue+0x28>
 800d3b2:	2100      	movs	r1, #0
 800d3b4:	e9c0 1600 	strd	r1, r6, [r0]
 800d3b8:	300c      	adds	r0, #12
 800d3ba:	60a0      	str	r0, [r4, #8]
 800d3bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d3c0:	f7ff ff46 	bl	800d250 <memset>
 800d3c4:	4620      	mov	r0, r4
 800d3c6:	bd70      	pop	{r4, r5, r6, pc}

0800d3c8 <__sfp_lock_acquire>:
 800d3c8:	4801      	ldr	r0, [pc, #4]	; (800d3d0 <__sfp_lock_acquire+0x8>)
 800d3ca:	f000 b8c5 	b.w	800d558 <__retarget_lock_acquire_recursive>
 800d3ce:	bf00      	nop
 800d3d0:	200083a9 	.word	0x200083a9

0800d3d4 <__sfp_lock_release>:
 800d3d4:	4801      	ldr	r0, [pc, #4]	; (800d3dc <__sfp_lock_release+0x8>)
 800d3d6:	f000 b8c0 	b.w	800d55a <__retarget_lock_release_recursive>
 800d3da:	bf00      	nop
 800d3dc:	200083a9 	.word	0x200083a9

0800d3e0 <__sinit_lock_acquire>:
 800d3e0:	4801      	ldr	r0, [pc, #4]	; (800d3e8 <__sinit_lock_acquire+0x8>)
 800d3e2:	f000 b8b9 	b.w	800d558 <__retarget_lock_acquire_recursive>
 800d3e6:	bf00      	nop
 800d3e8:	200083aa 	.word	0x200083aa

0800d3ec <__sinit_lock_release>:
 800d3ec:	4801      	ldr	r0, [pc, #4]	; (800d3f4 <__sinit_lock_release+0x8>)
 800d3ee:	f000 b8b4 	b.w	800d55a <__retarget_lock_release_recursive>
 800d3f2:	bf00      	nop
 800d3f4:	200083aa 	.word	0x200083aa

0800d3f8 <__sinit>:
 800d3f8:	b510      	push	{r4, lr}
 800d3fa:	4604      	mov	r4, r0
 800d3fc:	f7ff fff0 	bl	800d3e0 <__sinit_lock_acquire>
 800d400:	69a3      	ldr	r3, [r4, #24]
 800d402:	b11b      	cbz	r3, 800d40c <__sinit+0x14>
 800d404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d408:	f7ff bff0 	b.w	800d3ec <__sinit_lock_release>
 800d40c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d410:	6523      	str	r3, [r4, #80]	; 0x50
 800d412:	4b13      	ldr	r3, [pc, #76]	; (800d460 <__sinit+0x68>)
 800d414:	4a13      	ldr	r2, [pc, #76]	; (800d464 <__sinit+0x6c>)
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	62a2      	str	r2, [r4, #40]	; 0x28
 800d41a:	42a3      	cmp	r3, r4
 800d41c:	bf04      	itt	eq
 800d41e:	2301      	moveq	r3, #1
 800d420:	61a3      	streq	r3, [r4, #24]
 800d422:	4620      	mov	r0, r4
 800d424:	f000 f820 	bl	800d468 <__sfp>
 800d428:	6060      	str	r0, [r4, #4]
 800d42a:	4620      	mov	r0, r4
 800d42c:	f000 f81c 	bl	800d468 <__sfp>
 800d430:	60a0      	str	r0, [r4, #8]
 800d432:	4620      	mov	r0, r4
 800d434:	f000 f818 	bl	800d468 <__sfp>
 800d438:	2200      	movs	r2, #0
 800d43a:	60e0      	str	r0, [r4, #12]
 800d43c:	2104      	movs	r1, #4
 800d43e:	6860      	ldr	r0, [r4, #4]
 800d440:	f7ff ff82 	bl	800d348 <std>
 800d444:	68a0      	ldr	r0, [r4, #8]
 800d446:	2201      	movs	r2, #1
 800d448:	2109      	movs	r1, #9
 800d44a:	f7ff ff7d 	bl	800d348 <std>
 800d44e:	68e0      	ldr	r0, [r4, #12]
 800d450:	2202      	movs	r2, #2
 800d452:	2112      	movs	r1, #18
 800d454:	f7ff ff78 	bl	800d348 <std>
 800d458:	2301      	movs	r3, #1
 800d45a:	61a3      	str	r3, [r4, #24]
 800d45c:	e7d2      	b.n	800d404 <__sinit+0xc>
 800d45e:	bf00      	nop
 800d460:	08010df8 	.word	0x08010df8
 800d464:	0800d391 	.word	0x0800d391

0800d468 <__sfp>:
 800d468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d46a:	4607      	mov	r7, r0
 800d46c:	f7ff ffac 	bl	800d3c8 <__sfp_lock_acquire>
 800d470:	4b1e      	ldr	r3, [pc, #120]	; (800d4ec <__sfp+0x84>)
 800d472:	681e      	ldr	r6, [r3, #0]
 800d474:	69b3      	ldr	r3, [r6, #24]
 800d476:	b913      	cbnz	r3, 800d47e <__sfp+0x16>
 800d478:	4630      	mov	r0, r6
 800d47a:	f7ff ffbd 	bl	800d3f8 <__sinit>
 800d47e:	3648      	adds	r6, #72	; 0x48
 800d480:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d484:	3b01      	subs	r3, #1
 800d486:	d503      	bpl.n	800d490 <__sfp+0x28>
 800d488:	6833      	ldr	r3, [r6, #0]
 800d48a:	b30b      	cbz	r3, 800d4d0 <__sfp+0x68>
 800d48c:	6836      	ldr	r6, [r6, #0]
 800d48e:	e7f7      	b.n	800d480 <__sfp+0x18>
 800d490:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d494:	b9d5      	cbnz	r5, 800d4cc <__sfp+0x64>
 800d496:	4b16      	ldr	r3, [pc, #88]	; (800d4f0 <__sfp+0x88>)
 800d498:	60e3      	str	r3, [r4, #12]
 800d49a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d49e:	6665      	str	r5, [r4, #100]	; 0x64
 800d4a0:	f000 f859 	bl	800d556 <__retarget_lock_init_recursive>
 800d4a4:	f7ff ff96 	bl	800d3d4 <__sfp_lock_release>
 800d4a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d4ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d4b0:	6025      	str	r5, [r4, #0]
 800d4b2:	61a5      	str	r5, [r4, #24]
 800d4b4:	2208      	movs	r2, #8
 800d4b6:	4629      	mov	r1, r5
 800d4b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d4bc:	f7ff fec8 	bl	800d250 <memset>
 800d4c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d4c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d4c8:	4620      	mov	r0, r4
 800d4ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4cc:	3468      	adds	r4, #104	; 0x68
 800d4ce:	e7d9      	b.n	800d484 <__sfp+0x1c>
 800d4d0:	2104      	movs	r1, #4
 800d4d2:	4638      	mov	r0, r7
 800d4d4:	f7ff ff62 	bl	800d39c <__sfmoreglue>
 800d4d8:	4604      	mov	r4, r0
 800d4da:	6030      	str	r0, [r6, #0]
 800d4dc:	2800      	cmp	r0, #0
 800d4de:	d1d5      	bne.n	800d48c <__sfp+0x24>
 800d4e0:	f7ff ff78 	bl	800d3d4 <__sfp_lock_release>
 800d4e4:	230c      	movs	r3, #12
 800d4e6:	603b      	str	r3, [r7, #0]
 800d4e8:	e7ee      	b.n	800d4c8 <__sfp+0x60>
 800d4ea:	bf00      	nop
 800d4ec:	08010df8 	.word	0x08010df8
 800d4f0:	ffff0001 	.word	0xffff0001

0800d4f4 <fiprintf>:
 800d4f4:	b40e      	push	{r1, r2, r3}
 800d4f6:	b503      	push	{r0, r1, lr}
 800d4f8:	4601      	mov	r1, r0
 800d4fa:	ab03      	add	r3, sp, #12
 800d4fc:	4805      	ldr	r0, [pc, #20]	; (800d514 <fiprintf+0x20>)
 800d4fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800d502:	6800      	ldr	r0, [r0, #0]
 800d504:	9301      	str	r3, [sp, #4]
 800d506:	f000 f93b 	bl	800d780 <_vfiprintf_r>
 800d50a:	b002      	add	sp, #8
 800d50c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d510:	b003      	add	sp, #12
 800d512:	4770      	bx	lr
 800d514:	2000002c 	.word	0x2000002c

0800d518 <_fwalk_reent>:
 800d518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d51c:	4606      	mov	r6, r0
 800d51e:	4688      	mov	r8, r1
 800d520:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d524:	2700      	movs	r7, #0
 800d526:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d52a:	f1b9 0901 	subs.w	r9, r9, #1
 800d52e:	d505      	bpl.n	800d53c <_fwalk_reent+0x24>
 800d530:	6824      	ldr	r4, [r4, #0]
 800d532:	2c00      	cmp	r4, #0
 800d534:	d1f7      	bne.n	800d526 <_fwalk_reent+0xe>
 800d536:	4638      	mov	r0, r7
 800d538:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d53c:	89ab      	ldrh	r3, [r5, #12]
 800d53e:	2b01      	cmp	r3, #1
 800d540:	d907      	bls.n	800d552 <_fwalk_reent+0x3a>
 800d542:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d546:	3301      	adds	r3, #1
 800d548:	d003      	beq.n	800d552 <_fwalk_reent+0x3a>
 800d54a:	4629      	mov	r1, r5
 800d54c:	4630      	mov	r0, r6
 800d54e:	47c0      	blx	r8
 800d550:	4307      	orrs	r7, r0
 800d552:	3568      	adds	r5, #104	; 0x68
 800d554:	e7e9      	b.n	800d52a <_fwalk_reent+0x12>

0800d556 <__retarget_lock_init_recursive>:
 800d556:	4770      	bx	lr

0800d558 <__retarget_lock_acquire_recursive>:
 800d558:	4770      	bx	lr

0800d55a <__retarget_lock_release_recursive>:
 800d55a:	4770      	bx	lr

0800d55c <malloc>:
 800d55c:	4b02      	ldr	r3, [pc, #8]	; (800d568 <malloc+0xc>)
 800d55e:	4601      	mov	r1, r0
 800d560:	6818      	ldr	r0, [r3, #0]
 800d562:	f000 b86f 	b.w	800d644 <_malloc_r>
 800d566:	bf00      	nop
 800d568:	2000002c 	.word	0x2000002c

0800d56c <_free_r>:
 800d56c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d56e:	2900      	cmp	r1, #0
 800d570:	d044      	beq.n	800d5fc <_free_r+0x90>
 800d572:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d576:	9001      	str	r0, [sp, #4]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	f1a1 0404 	sub.w	r4, r1, #4
 800d57e:	bfb8      	it	lt
 800d580:	18e4      	addlt	r4, r4, r3
 800d582:	f000 fe39 	bl	800e1f8 <__malloc_lock>
 800d586:	4a1e      	ldr	r2, [pc, #120]	; (800d600 <_free_r+0x94>)
 800d588:	9801      	ldr	r0, [sp, #4]
 800d58a:	6813      	ldr	r3, [r2, #0]
 800d58c:	b933      	cbnz	r3, 800d59c <_free_r+0x30>
 800d58e:	6063      	str	r3, [r4, #4]
 800d590:	6014      	str	r4, [r2, #0]
 800d592:	b003      	add	sp, #12
 800d594:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d598:	f000 be34 	b.w	800e204 <__malloc_unlock>
 800d59c:	42a3      	cmp	r3, r4
 800d59e:	d908      	bls.n	800d5b2 <_free_r+0x46>
 800d5a0:	6825      	ldr	r5, [r4, #0]
 800d5a2:	1961      	adds	r1, r4, r5
 800d5a4:	428b      	cmp	r3, r1
 800d5a6:	bf01      	itttt	eq
 800d5a8:	6819      	ldreq	r1, [r3, #0]
 800d5aa:	685b      	ldreq	r3, [r3, #4]
 800d5ac:	1949      	addeq	r1, r1, r5
 800d5ae:	6021      	streq	r1, [r4, #0]
 800d5b0:	e7ed      	b.n	800d58e <_free_r+0x22>
 800d5b2:	461a      	mov	r2, r3
 800d5b4:	685b      	ldr	r3, [r3, #4]
 800d5b6:	b10b      	cbz	r3, 800d5bc <_free_r+0x50>
 800d5b8:	42a3      	cmp	r3, r4
 800d5ba:	d9fa      	bls.n	800d5b2 <_free_r+0x46>
 800d5bc:	6811      	ldr	r1, [r2, #0]
 800d5be:	1855      	adds	r5, r2, r1
 800d5c0:	42a5      	cmp	r5, r4
 800d5c2:	d10b      	bne.n	800d5dc <_free_r+0x70>
 800d5c4:	6824      	ldr	r4, [r4, #0]
 800d5c6:	4421      	add	r1, r4
 800d5c8:	1854      	adds	r4, r2, r1
 800d5ca:	42a3      	cmp	r3, r4
 800d5cc:	6011      	str	r1, [r2, #0]
 800d5ce:	d1e0      	bne.n	800d592 <_free_r+0x26>
 800d5d0:	681c      	ldr	r4, [r3, #0]
 800d5d2:	685b      	ldr	r3, [r3, #4]
 800d5d4:	6053      	str	r3, [r2, #4]
 800d5d6:	4421      	add	r1, r4
 800d5d8:	6011      	str	r1, [r2, #0]
 800d5da:	e7da      	b.n	800d592 <_free_r+0x26>
 800d5dc:	d902      	bls.n	800d5e4 <_free_r+0x78>
 800d5de:	230c      	movs	r3, #12
 800d5e0:	6003      	str	r3, [r0, #0]
 800d5e2:	e7d6      	b.n	800d592 <_free_r+0x26>
 800d5e4:	6825      	ldr	r5, [r4, #0]
 800d5e6:	1961      	adds	r1, r4, r5
 800d5e8:	428b      	cmp	r3, r1
 800d5ea:	bf04      	itt	eq
 800d5ec:	6819      	ldreq	r1, [r3, #0]
 800d5ee:	685b      	ldreq	r3, [r3, #4]
 800d5f0:	6063      	str	r3, [r4, #4]
 800d5f2:	bf04      	itt	eq
 800d5f4:	1949      	addeq	r1, r1, r5
 800d5f6:	6021      	streq	r1, [r4, #0]
 800d5f8:	6054      	str	r4, [r2, #4]
 800d5fa:	e7ca      	b.n	800d592 <_free_r+0x26>
 800d5fc:	b003      	add	sp, #12
 800d5fe:	bd30      	pop	{r4, r5, pc}
 800d600:	200083ac 	.word	0x200083ac

0800d604 <sbrk_aligned>:
 800d604:	b570      	push	{r4, r5, r6, lr}
 800d606:	4e0e      	ldr	r6, [pc, #56]	; (800d640 <sbrk_aligned+0x3c>)
 800d608:	460c      	mov	r4, r1
 800d60a:	6831      	ldr	r1, [r6, #0]
 800d60c:	4605      	mov	r5, r0
 800d60e:	b911      	cbnz	r1, 800d616 <sbrk_aligned+0x12>
 800d610:	f000 fb7a 	bl	800dd08 <_sbrk_r>
 800d614:	6030      	str	r0, [r6, #0]
 800d616:	4621      	mov	r1, r4
 800d618:	4628      	mov	r0, r5
 800d61a:	f000 fb75 	bl	800dd08 <_sbrk_r>
 800d61e:	1c43      	adds	r3, r0, #1
 800d620:	d00a      	beq.n	800d638 <sbrk_aligned+0x34>
 800d622:	1cc4      	adds	r4, r0, #3
 800d624:	f024 0403 	bic.w	r4, r4, #3
 800d628:	42a0      	cmp	r0, r4
 800d62a:	d007      	beq.n	800d63c <sbrk_aligned+0x38>
 800d62c:	1a21      	subs	r1, r4, r0
 800d62e:	4628      	mov	r0, r5
 800d630:	f000 fb6a 	bl	800dd08 <_sbrk_r>
 800d634:	3001      	adds	r0, #1
 800d636:	d101      	bne.n	800d63c <sbrk_aligned+0x38>
 800d638:	f04f 34ff 	mov.w	r4, #4294967295
 800d63c:	4620      	mov	r0, r4
 800d63e:	bd70      	pop	{r4, r5, r6, pc}
 800d640:	200083b0 	.word	0x200083b0

0800d644 <_malloc_r>:
 800d644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d648:	1ccd      	adds	r5, r1, #3
 800d64a:	f025 0503 	bic.w	r5, r5, #3
 800d64e:	3508      	adds	r5, #8
 800d650:	2d0c      	cmp	r5, #12
 800d652:	bf38      	it	cc
 800d654:	250c      	movcc	r5, #12
 800d656:	2d00      	cmp	r5, #0
 800d658:	4607      	mov	r7, r0
 800d65a:	db01      	blt.n	800d660 <_malloc_r+0x1c>
 800d65c:	42a9      	cmp	r1, r5
 800d65e:	d905      	bls.n	800d66c <_malloc_r+0x28>
 800d660:	230c      	movs	r3, #12
 800d662:	603b      	str	r3, [r7, #0]
 800d664:	2600      	movs	r6, #0
 800d666:	4630      	mov	r0, r6
 800d668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d66c:	4e2e      	ldr	r6, [pc, #184]	; (800d728 <_malloc_r+0xe4>)
 800d66e:	f000 fdc3 	bl	800e1f8 <__malloc_lock>
 800d672:	6833      	ldr	r3, [r6, #0]
 800d674:	461c      	mov	r4, r3
 800d676:	bb34      	cbnz	r4, 800d6c6 <_malloc_r+0x82>
 800d678:	4629      	mov	r1, r5
 800d67a:	4638      	mov	r0, r7
 800d67c:	f7ff ffc2 	bl	800d604 <sbrk_aligned>
 800d680:	1c43      	adds	r3, r0, #1
 800d682:	4604      	mov	r4, r0
 800d684:	d14d      	bne.n	800d722 <_malloc_r+0xde>
 800d686:	6834      	ldr	r4, [r6, #0]
 800d688:	4626      	mov	r6, r4
 800d68a:	2e00      	cmp	r6, #0
 800d68c:	d140      	bne.n	800d710 <_malloc_r+0xcc>
 800d68e:	6823      	ldr	r3, [r4, #0]
 800d690:	4631      	mov	r1, r6
 800d692:	4638      	mov	r0, r7
 800d694:	eb04 0803 	add.w	r8, r4, r3
 800d698:	f000 fb36 	bl	800dd08 <_sbrk_r>
 800d69c:	4580      	cmp	r8, r0
 800d69e:	d13a      	bne.n	800d716 <_malloc_r+0xd2>
 800d6a0:	6821      	ldr	r1, [r4, #0]
 800d6a2:	3503      	adds	r5, #3
 800d6a4:	1a6d      	subs	r5, r5, r1
 800d6a6:	f025 0503 	bic.w	r5, r5, #3
 800d6aa:	3508      	adds	r5, #8
 800d6ac:	2d0c      	cmp	r5, #12
 800d6ae:	bf38      	it	cc
 800d6b0:	250c      	movcc	r5, #12
 800d6b2:	4629      	mov	r1, r5
 800d6b4:	4638      	mov	r0, r7
 800d6b6:	f7ff ffa5 	bl	800d604 <sbrk_aligned>
 800d6ba:	3001      	adds	r0, #1
 800d6bc:	d02b      	beq.n	800d716 <_malloc_r+0xd2>
 800d6be:	6823      	ldr	r3, [r4, #0]
 800d6c0:	442b      	add	r3, r5
 800d6c2:	6023      	str	r3, [r4, #0]
 800d6c4:	e00e      	b.n	800d6e4 <_malloc_r+0xa0>
 800d6c6:	6822      	ldr	r2, [r4, #0]
 800d6c8:	1b52      	subs	r2, r2, r5
 800d6ca:	d41e      	bmi.n	800d70a <_malloc_r+0xc6>
 800d6cc:	2a0b      	cmp	r2, #11
 800d6ce:	d916      	bls.n	800d6fe <_malloc_r+0xba>
 800d6d0:	1961      	adds	r1, r4, r5
 800d6d2:	42a3      	cmp	r3, r4
 800d6d4:	6025      	str	r5, [r4, #0]
 800d6d6:	bf18      	it	ne
 800d6d8:	6059      	strne	r1, [r3, #4]
 800d6da:	6863      	ldr	r3, [r4, #4]
 800d6dc:	bf08      	it	eq
 800d6de:	6031      	streq	r1, [r6, #0]
 800d6e0:	5162      	str	r2, [r4, r5]
 800d6e2:	604b      	str	r3, [r1, #4]
 800d6e4:	4638      	mov	r0, r7
 800d6e6:	f104 060b 	add.w	r6, r4, #11
 800d6ea:	f000 fd8b 	bl	800e204 <__malloc_unlock>
 800d6ee:	f026 0607 	bic.w	r6, r6, #7
 800d6f2:	1d23      	adds	r3, r4, #4
 800d6f4:	1af2      	subs	r2, r6, r3
 800d6f6:	d0b6      	beq.n	800d666 <_malloc_r+0x22>
 800d6f8:	1b9b      	subs	r3, r3, r6
 800d6fa:	50a3      	str	r3, [r4, r2]
 800d6fc:	e7b3      	b.n	800d666 <_malloc_r+0x22>
 800d6fe:	6862      	ldr	r2, [r4, #4]
 800d700:	42a3      	cmp	r3, r4
 800d702:	bf0c      	ite	eq
 800d704:	6032      	streq	r2, [r6, #0]
 800d706:	605a      	strne	r2, [r3, #4]
 800d708:	e7ec      	b.n	800d6e4 <_malloc_r+0xa0>
 800d70a:	4623      	mov	r3, r4
 800d70c:	6864      	ldr	r4, [r4, #4]
 800d70e:	e7b2      	b.n	800d676 <_malloc_r+0x32>
 800d710:	4634      	mov	r4, r6
 800d712:	6876      	ldr	r6, [r6, #4]
 800d714:	e7b9      	b.n	800d68a <_malloc_r+0x46>
 800d716:	230c      	movs	r3, #12
 800d718:	603b      	str	r3, [r7, #0]
 800d71a:	4638      	mov	r0, r7
 800d71c:	f000 fd72 	bl	800e204 <__malloc_unlock>
 800d720:	e7a1      	b.n	800d666 <_malloc_r+0x22>
 800d722:	6025      	str	r5, [r4, #0]
 800d724:	e7de      	b.n	800d6e4 <_malloc_r+0xa0>
 800d726:	bf00      	nop
 800d728:	200083ac 	.word	0x200083ac

0800d72c <__sfputc_r>:
 800d72c:	6893      	ldr	r3, [r2, #8]
 800d72e:	3b01      	subs	r3, #1
 800d730:	2b00      	cmp	r3, #0
 800d732:	b410      	push	{r4}
 800d734:	6093      	str	r3, [r2, #8]
 800d736:	da08      	bge.n	800d74a <__sfputc_r+0x1e>
 800d738:	6994      	ldr	r4, [r2, #24]
 800d73a:	42a3      	cmp	r3, r4
 800d73c:	db01      	blt.n	800d742 <__sfputc_r+0x16>
 800d73e:	290a      	cmp	r1, #10
 800d740:	d103      	bne.n	800d74a <__sfputc_r+0x1e>
 800d742:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d746:	f000 bb33 	b.w	800ddb0 <__swbuf_r>
 800d74a:	6813      	ldr	r3, [r2, #0]
 800d74c:	1c58      	adds	r0, r3, #1
 800d74e:	6010      	str	r0, [r2, #0]
 800d750:	7019      	strb	r1, [r3, #0]
 800d752:	4608      	mov	r0, r1
 800d754:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d758:	4770      	bx	lr

0800d75a <__sfputs_r>:
 800d75a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d75c:	4606      	mov	r6, r0
 800d75e:	460f      	mov	r7, r1
 800d760:	4614      	mov	r4, r2
 800d762:	18d5      	adds	r5, r2, r3
 800d764:	42ac      	cmp	r4, r5
 800d766:	d101      	bne.n	800d76c <__sfputs_r+0x12>
 800d768:	2000      	movs	r0, #0
 800d76a:	e007      	b.n	800d77c <__sfputs_r+0x22>
 800d76c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d770:	463a      	mov	r2, r7
 800d772:	4630      	mov	r0, r6
 800d774:	f7ff ffda 	bl	800d72c <__sfputc_r>
 800d778:	1c43      	adds	r3, r0, #1
 800d77a:	d1f3      	bne.n	800d764 <__sfputs_r+0xa>
 800d77c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d780 <_vfiprintf_r>:
 800d780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d784:	460d      	mov	r5, r1
 800d786:	b09d      	sub	sp, #116	; 0x74
 800d788:	4614      	mov	r4, r2
 800d78a:	4698      	mov	r8, r3
 800d78c:	4606      	mov	r6, r0
 800d78e:	b118      	cbz	r0, 800d798 <_vfiprintf_r+0x18>
 800d790:	6983      	ldr	r3, [r0, #24]
 800d792:	b90b      	cbnz	r3, 800d798 <_vfiprintf_r+0x18>
 800d794:	f7ff fe30 	bl	800d3f8 <__sinit>
 800d798:	4b89      	ldr	r3, [pc, #548]	; (800d9c0 <_vfiprintf_r+0x240>)
 800d79a:	429d      	cmp	r5, r3
 800d79c:	d11b      	bne.n	800d7d6 <_vfiprintf_r+0x56>
 800d79e:	6875      	ldr	r5, [r6, #4]
 800d7a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d7a2:	07d9      	lsls	r1, r3, #31
 800d7a4:	d405      	bmi.n	800d7b2 <_vfiprintf_r+0x32>
 800d7a6:	89ab      	ldrh	r3, [r5, #12]
 800d7a8:	059a      	lsls	r2, r3, #22
 800d7aa:	d402      	bmi.n	800d7b2 <_vfiprintf_r+0x32>
 800d7ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d7ae:	f7ff fed3 	bl	800d558 <__retarget_lock_acquire_recursive>
 800d7b2:	89ab      	ldrh	r3, [r5, #12]
 800d7b4:	071b      	lsls	r3, r3, #28
 800d7b6:	d501      	bpl.n	800d7bc <_vfiprintf_r+0x3c>
 800d7b8:	692b      	ldr	r3, [r5, #16]
 800d7ba:	b9eb      	cbnz	r3, 800d7f8 <_vfiprintf_r+0x78>
 800d7bc:	4629      	mov	r1, r5
 800d7be:	4630      	mov	r0, r6
 800d7c0:	f000 fb5a 	bl	800de78 <__swsetup_r>
 800d7c4:	b1c0      	cbz	r0, 800d7f8 <_vfiprintf_r+0x78>
 800d7c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d7c8:	07dc      	lsls	r4, r3, #31
 800d7ca:	d50e      	bpl.n	800d7ea <_vfiprintf_r+0x6a>
 800d7cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d7d0:	b01d      	add	sp, #116	; 0x74
 800d7d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7d6:	4b7b      	ldr	r3, [pc, #492]	; (800d9c4 <_vfiprintf_r+0x244>)
 800d7d8:	429d      	cmp	r5, r3
 800d7da:	d101      	bne.n	800d7e0 <_vfiprintf_r+0x60>
 800d7dc:	68b5      	ldr	r5, [r6, #8]
 800d7de:	e7df      	b.n	800d7a0 <_vfiprintf_r+0x20>
 800d7e0:	4b79      	ldr	r3, [pc, #484]	; (800d9c8 <_vfiprintf_r+0x248>)
 800d7e2:	429d      	cmp	r5, r3
 800d7e4:	bf08      	it	eq
 800d7e6:	68f5      	ldreq	r5, [r6, #12]
 800d7e8:	e7da      	b.n	800d7a0 <_vfiprintf_r+0x20>
 800d7ea:	89ab      	ldrh	r3, [r5, #12]
 800d7ec:	0598      	lsls	r0, r3, #22
 800d7ee:	d4ed      	bmi.n	800d7cc <_vfiprintf_r+0x4c>
 800d7f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d7f2:	f7ff feb2 	bl	800d55a <__retarget_lock_release_recursive>
 800d7f6:	e7e9      	b.n	800d7cc <_vfiprintf_r+0x4c>
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	9309      	str	r3, [sp, #36]	; 0x24
 800d7fc:	2320      	movs	r3, #32
 800d7fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d802:	f8cd 800c 	str.w	r8, [sp, #12]
 800d806:	2330      	movs	r3, #48	; 0x30
 800d808:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d9cc <_vfiprintf_r+0x24c>
 800d80c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d810:	f04f 0901 	mov.w	r9, #1
 800d814:	4623      	mov	r3, r4
 800d816:	469a      	mov	sl, r3
 800d818:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d81c:	b10a      	cbz	r2, 800d822 <_vfiprintf_r+0xa2>
 800d81e:	2a25      	cmp	r2, #37	; 0x25
 800d820:	d1f9      	bne.n	800d816 <_vfiprintf_r+0x96>
 800d822:	ebba 0b04 	subs.w	fp, sl, r4
 800d826:	d00b      	beq.n	800d840 <_vfiprintf_r+0xc0>
 800d828:	465b      	mov	r3, fp
 800d82a:	4622      	mov	r2, r4
 800d82c:	4629      	mov	r1, r5
 800d82e:	4630      	mov	r0, r6
 800d830:	f7ff ff93 	bl	800d75a <__sfputs_r>
 800d834:	3001      	adds	r0, #1
 800d836:	f000 80aa 	beq.w	800d98e <_vfiprintf_r+0x20e>
 800d83a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d83c:	445a      	add	r2, fp
 800d83e:	9209      	str	r2, [sp, #36]	; 0x24
 800d840:	f89a 3000 	ldrb.w	r3, [sl]
 800d844:	2b00      	cmp	r3, #0
 800d846:	f000 80a2 	beq.w	800d98e <_vfiprintf_r+0x20e>
 800d84a:	2300      	movs	r3, #0
 800d84c:	f04f 32ff 	mov.w	r2, #4294967295
 800d850:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d854:	f10a 0a01 	add.w	sl, sl, #1
 800d858:	9304      	str	r3, [sp, #16]
 800d85a:	9307      	str	r3, [sp, #28]
 800d85c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d860:	931a      	str	r3, [sp, #104]	; 0x68
 800d862:	4654      	mov	r4, sl
 800d864:	2205      	movs	r2, #5
 800d866:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d86a:	4858      	ldr	r0, [pc, #352]	; (800d9cc <_vfiprintf_r+0x24c>)
 800d86c:	f7f2 fcb0 	bl	80001d0 <memchr>
 800d870:	9a04      	ldr	r2, [sp, #16]
 800d872:	b9d8      	cbnz	r0, 800d8ac <_vfiprintf_r+0x12c>
 800d874:	06d1      	lsls	r1, r2, #27
 800d876:	bf44      	itt	mi
 800d878:	2320      	movmi	r3, #32
 800d87a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d87e:	0713      	lsls	r3, r2, #28
 800d880:	bf44      	itt	mi
 800d882:	232b      	movmi	r3, #43	; 0x2b
 800d884:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d888:	f89a 3000 	ldrb.w	r3, [sl]
 800d88c:	2b2a      	cmp	r3, #42	; 0x2a
 800d88e:	d015      	beq.n	800d8bc <_vfiprintf_r+0x13c>
 800d890:	9a07      	ldr	r2, [sp, #28]
 800d892:	4654      	mov	r4, sl
 800d894:	2000      	movs	r0, #0
 800d896:	f04f 0c0a 	mov.w	ip, #10
 800d89a:	4621      	mov	r1, r4
 800d89c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d8a0:	3b30      	subs	r3, #48	; 0x30
 800d8a2:	2b09      	cmp	r3, #9
 800d8a4:	d94e      	bls.n	800d944 <_vfiprintf_r+0x1c4>
 800d8a6:	b1b0      	cbz	r0, 800d8d6 <_vfiprintf_r+0x156>
 800d8a8:	9207      	str	r2, [sp, #28]
 800d8aa:	e014      	b.n	800d8d6 <_vfiprintf_r+0x156>
 800d8ac:	eba0 0308 	sub.w	r3, r0, r8
 800d8b0:	fa09 f303 	lsl.w	r3, r9, r3
 800d8b4:	4313      	orrs	r3, r2
 800d8b6:	9304      	str	r3, [sp, #16]
 800d8b8:	46a2      	mov	sl, r4
 800d8ba:	e7d2      	b.n	800d862 <_vfiprintf_r+0xe2>
 800d8bc:	9b03      	ldr	r3, [sp, #12]
 800d8be:	1d19      	adds	r1, r3, #4
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	9103      	str	r1, [sp, #12]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	bfbb      	ittet	lt
 800d8c8:	425b      	neglt	r3, r3
 800d8ca:	f042 0202 	orrlt.w	r2, r2, #2
 800d8ce:	9307      	strge	r3, [sp, #28]
 800d8d0:	9307      	strlt	r3, [sp, #28]
 800d8d2:	bfb8      	it	lt
 800d8d4:	9204      	strlt	r2, [sp, #16]
 800d8d6:	7823      	ldrb	r3, [r4, #0]
 800d8d8:	2b2e      	cmp	r3, #46	; 0x2e
 800d8da:	d10c      	bne.n	800d8f6 <_vfiprintf_r+0x176>
 800d8dc:	7863      	ldrb	r3, [r4, #1]
 800d8de:	2b2a      	cmp	r3, #42	; 0x2a
 800d8e0:	d135      	bne.n	800d94e <_vfiprintf_r+0x1ce>
 800d8e2:	9b03      	ldr	r3, [sp, #12]
 800d8e4:	1d1a      	adds	r2, r3, #4
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	9203      	str	r2, [sp, #12]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	bfb8      	it	lt
 800d8ee:	f04f 33ff 	movlt.w	r3, #4294967295
 800d8f2:	3402      	adds	r4, #2
 800d8f4:	9305      	str	r3, [sp, #20]
 800d8f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d9dc <_vfiprintf_r+0x25c>
 800d8fa:	7821      	ldrb	r1, [r4, #0]
 800d8fc:	2203      	movs	r2, #3
 800d8fe:	4650      	mov	r0, sl
 800d900:	f7f2 fc66 	bl	80001d0 <memchr>
 800d904:	b140      	cbz	r0, 800d918 <_vfiprintf_r+0x198>
 800d906:	2340      	movs	r3, #64	; 0x40
 800d908:	eba0 000a 	sub.w	r0, r0, sl
 800d90c:	fa03 f000 	lsl.w	r0, r3, r0
 800d910:	9b04      	ldr	r3, [sp, #16]
 800d912:	4303      	orrs	r3, r0
 800d914:	3401      	adds	r4, #1
 800d916:	9304      	str	r3, [sp, #16]
 800d918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d91c:	482c      	ldr	r0, [pc, #176]	; (800d9d0 <_vfiprintf_r+0x250>)
 800d91e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d922:	2206      	movs	r2, #6
 800d924:	f7f2 fc54 	bl	80001d0 <memchr>
 800d928:	2800      	cmp	r0, #0
 800d92a:	d03f      	beq.n	800d9ac <_vfiprintf_r+0x22c>
 800d92c:	4b29      	ldr	r3, [pc, #164]	; (800d9d4 <_vfiprintf_r+0x254>)
 800d92e:	bb1b      	cbnz	r3, 800d978 <_vfiprintf_r+0x1f8>
 800d930:	9b03      	ldr	r3, [sp, #12]
 800d932:	3307      	adds	r3, #7
 800d934:	f023 0307 	bic.w	r3, r3, #7
 800d938:	3308      	adds	r3, #8
 800d93a:	9303      	str	r3, [sp, #12]
 800d93c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d93e:	443b      	add	r3, r7
 800d940:	9309      	str	r3, [sp, #36]	; 0x24
 800d942:	e767      	b.n	800d814 <_vfiprintf_r+0x94>
 800d944:	fb0c 3202 	mla	r2, ip, r2, r3
 800d948:	460c      	mov	r4, r1
 800d94a:	2001      	movs	r0, #1
 800d94c:	e7a5      	b.n	800d89a <_vfiprintf_r+0x11a>
 800d94e:	2300      	movs	r3, #0
 800d950:	3401      	adds	r4, #1
 800d952:	9305      	str	r3, [sp, #20]
 800d954:	4619      	mov	r1, r3
 800d956:	f04f 0c0a 	mov.w	ip, #10
 800d95a:	4620      	mov	r0, r4
 800d95c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d960:	3a30      	subs	r2, #48	; 0x30
 800d962:	2a09      	cmp	r2, #9
 800d964:	d903      	bls.n	800d96e <_vfiprintf_r+0x1ee>
 800d966:	2b00      	cmp	r3, #0
 800d968:	d0c5      	beq.n	800d8f6 <_vfiprintf_r+0x176>
 800d96a:	9105      	str	r1, [sp, #20]
 800d96c:	e7c3      	b.n	800d8f6 <_vfiprintf_r+0x176>
 800d96e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d972:	4604      	mov	r4, r0
 800d974:	2301      	movs	r3, #1
 800d976:	e7f0      	b.n	800d95a <_vfiprintf_r+0x1da>
 800d978:	ab03      	add	r3, sp, #12
 800d97a:	9300      	str	r3, [sp, #0]
 800d97c:	462a      	mov	r2, r5
 800d97e:	4b16      	ldr	r3, [pc, #88]	; (800d9d8 <_vfiprintf_r+0x258>)
 800d980:	a904      	add	r1, sp, #16
 800d982:	4630      	mov	r0, r6
 800d984:	f3af 8000 	nop.w
 800d988:	4607      	mov	r7, r0
 800d98a:	1c78      	adds	r0, r7, #1
 800d98c:	d1d6      	bne.n	800d93c <_vfiprintf_r+0x1bc>
 800d98e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d990:	07d9      	lsls	r1, r3, #31
 800d992:	d405      	bmi.n	800d9a0 <_vfiprintf_r+0x220>
 800d994:	89ab      	ldrh	r3, [r5, #12]
 800d996:	059a      	lsls	r2, r3, #22
 800d998:	d402      	bmi.n	800d9a0 <_vfiprintf_r+0x220>
 800d99a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d99c:	f7ff fddd 	bl	800d55a <__retarget_lock_release_recursive>
 800d9a0:	89ab      	ldrh	r3, [r5, #12]
 800d9a2:	065b      	lsls	r3, r3, #25
 800d9a4:	f53f af12 	bmi.w	800d7cc <_vfiprintf_r+0x4c>
 800d9a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d9aa:	e711      	b.n	800d7d0 <_vfiprintf_r+0x50>
 800d9ac:	ab03      	add	r3, sp, #12
 800d9ae:	9300      	str	r3, [sp, #0]
 800d9b0:	462a      	mov	r2, r5
 800d9b2:	4b09      	ldr	r3, [pc, #36]	; (800d9d8 <_vfiprintf_r+0x258>)
 800d9b4:	a904      	add	r1, sp, #16
 800d9b6:	4630      	mov	r0, r6
 800d9b8:	f000 f880 	bl	800dabc <_printf_i>
 800d9bc:	e7e4      	b.n	800d988 <_vfiprintf_r+0x208>
 800d9be:	bf00      	nop
 800d9c0:	08010ecc 	.word	0x08010ecc
 800d9c4:	08010eec 	.word	0x08010eec
 800d9c8:	08010eac 	.word	0x08010eac
 800d9cc:	08010f0c 	.word	0x08010f0c
 800d9d0:	08010f16 	.word	0x08010f16
 800d9d4:	00000000 	.word	0x00000000
 800d9d8:	0800d75b 	.word	0x0800d75b
 800d9dc:	08010f12 	.word	0x08010f12

0800d9e0 <_printf_common>:
 800d9e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9e4:	4616      	mov	r6, r2
 800d9e6:	4699      	mov	r9, r3
 800d9e8:	688a      	ldr	r2, [r1, #8]
 800d9ea:	690b      	ldr	r3, [r1, #16]
 800d9ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d9f0:	4293      	cmp	r3, r2
 800d9f2:	bfb8      	it	lt
 800d9f4:	4613      	movlt	r3, r2
 800d9f6:	6033      	str	r3, [r6, #0]
 800d9f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d9fc:	4607      	mov	r7, r0
 800d9fe:	460c      	mov	r4, r1
 800da00:	b10a      	cbz	r2, 800da06 <_printf_common+0x26>
 800da02:	3301      	adds	r3, #1
 800da04:	6033      	str	r3, [r6, #0]
 800da06:	6823      	ldr	r3, [r4, #0]
 800da08:	0699      	lsls	r1, r3, #26
 800da0a:	bf42      	ittt	mi
 800da0c:	6833      	ldrmi	r3, [r6, #0]
 800da0e:	3302      	addmi	r3, #2
 800da10:	6033      	strmi	r3, [r6, #0]
 800da12:	6825      	ldr	r5, [r4, #0]
 800da14:	f015 0506 	ands.w	r5, r5, #6
 800da18:	d106      	bne.n	800da28 <_printf_common+0x48>
 800da1a:	f104 0a19 	add.w	sl, r4, #25
 800da1e:	68e3      	ldr	r3, [r4, #12]
 800da20:	6832      	ldr	r2, [r6, #0]
 800da22:	1a9b      	subs	r3, r3, r2
 800da24:	42ab      	cmp	r3, r5
 800da26:	dc26      	bgt.n	800da76 <_printf_common+0x96>
 800da28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800da2c:	1e13      	subs	r3, r2, #0
 800da2e:	6822      	ldr	r2, [r4, #0]
 800da30:	bf18      	it	ne
 800da32:	2301      	movne	r3, #1
 800da34:	0692      	lsls	r2, r2, #26
 800da36:	d42b      	bmi.n	800da90 <_printf_common+0xb0>
 800da38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800da3c:	4649      	mov	r1, r9
 800da3e:	4638      	mov	r0, r7
 800da40:	47c0      	blx	r8
 800da42:	3001      	adds	r0, #1
 800da44:	d01e      	beq.n	800da84 <_printf_common+0xa4>
 800da46:	6823      	ldr	r3, [r4, #0]
 800da48:	68e5      	ldr	r5, [r4, #12]
 800da4a:	6832      	ldr	r2, [r6, #0]
 800da4c:	f003 0306 	and.w	r3, r3, #6
 800da50:	2b04      	cmp	r3, #4
 800da52:	bf08      	it	eq
 800da54:	1aad      	subeq	r5, r5, r2
 800da56:	68a3      	ldr	r3, [r4, #8]
 800da58:	6922      	ldr	r2, [r4, #16]
 800da5a:	bf0c      	ite	eq
 800da5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800da60:	2500      	movne	r5, #0
 800da62:	4293      	cmp	r3, r2
 800da64:	bfc4      	itt	gt
 800da66:	1a9b      	subgt	r3, r3, r2
 800da68:	18ed      	addgt	r5, r5, r3
 800da6a:	2600      	movs	r6, #0
 800da6c:	341a      	adds	r4, #26
 800da6e:	42b5      	cmp	r5, r6
 800da70:	d11a      	bne.n	800daa8 <_printf_common+0xc8>
 800da72:	2000      	movs	r0, #0
 800da74:	e008      	b.n	800da88 <_printf_common+0xa8>
 800da76:	2301      	movs	r3, #1
 800da78:	4652      	mov	r2, sl
 800da7a:	4649      	mov	r1, r9
 800da7c:	4638      	mov	r0, r7
 800da7e:	47c0      	blx	r8
 800da80:	3001      	adds	r0, #1
 800da82:	d103      	bne.n	800da8c <_printf_common+0xac>
 800da84:	f04f 30ff 	mov.w	r0, #4294967295
 800da88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da8c:	3501      	adds	r5, #1
 800da8e:	e7c6      	b.n	800da1e <_printf_common+0x3e>
 800da90:	18e1      	adds	r1, r4, r3
 800da92:	1c5a      	adds	r2, r3, #1
 800da94:	2030      	movs	r0, #48	; 0x30
 800da96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800da9a:	4422      	add	r2, r4
 800da9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800daa0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800daa4:	3302      	adds	r3, #2
 800daa6:	e7c7      	b.n	800da38 <_printf_common+0x58>
 800daa8:	2301      	movs	r3, #1
 800daaa:	4622      	mov	r2, r4
 800daac:	4649      	mov	r1, r9
 800daae:	4638      	mov	r0, r7
 800dab0:	47c0      	blx	r8
 800dab2:	3001      	adds	r0, #1
 800dab4:	d0e6      	beq.n	800da84 <_printf_common+0xa4>
 800dab6:	3601      	adds	r6, #1
 800dab8:	e7d9      	b.n	800da6e <_printf_common+0x8e>
	...

0800dabc <_printf_i>:
 800dabc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dac0:	7e0f      	ldrb	r7, [r1, #24]
 800dac2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dac4:	2f78      	cmp	r7, #120	; 0x78
 800dac6:	4691      	mov	r9, r2
 800dac8:	4680      	mov	r8, r0
 800daca:	460c      	mov	r4, r1
 800dacc:	469a      	mov	sl, r3
 800dace:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dad2:	d807      	bhi.n	800dae4 <_printf_i+0x28>
 800dad4:	2f62      	cmp	r7, #98	; 0x62
 800dad6:	d80a      	bhi.n	800daee <_printf_i+0x32>
 800dad8:	2f00      	cmp	r7, #0
 800dada:	f000 80d8 	beq.w	800dc8e <_printf_i+0x1d2>
 800dade:	2f58      	cmp	r7, #88	; 0x58
 800dae0:	f000 80a3 	beq.w	800dc2a <_printf_i+0x16e>
 800dae4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dae8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800daec:	e03a      	b.n	800db64 <_printf_i+0xa8>
 800daee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800daf2:	2b15      	cmp	r3, #21
 800daf4:	d8f6      	bhi.n	800dae4 <_printf_i+0x28>
 800daf6:	a101      	add	r1, pc, #4	; (adr r1, 800dafc <_printf_i+0x40>)
 800daf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dafc:	0800db55 	.word	0x0800db55
 800db00:	0800db69 	.word	0x0800db69
 800db04:	0800dae5 	.word	0x0800dae5
 800db08:	0800dae5 	.word	0x0800dae5
 800db0c:	0800dae5 	.word	0x0800dae5
 800db10:	0800dae5 	.word	0x0800dae5
 800db14:	0800db69 	.word	0x0800db69
 800db18:	0800dae5 	.word	0x0800dae5
 800db1c:	0800dae5 	.word	0x0800dae5
 800db20:	0800dae5 	.word	0x0800dae5
 800db24:	0800dae5 	.word	0x0800dae5
 800db28:	0800dc75 	.word	0x0800dc75
 800db2c:	0800db99 	.word	0x0800db99
 800db30:	0800dc57 	.word	0x0800dc57
 800db34:	0800dae5 	.word	0x0800dae5
 800db38:	0800dae5 	.word	0x0800dae5
 800db3c:	0800dc97 	.word	0x0800dc97
 800db40:	0800dae5 	.word	0x0800dae5
 800db44:	0800db99 	.word	0x0800db99
 800db48:	0800dae5 	.word	0x0800dae5
 800db4c:	0800dae5 	.word	0x0800dae5
 800db50:	0800dc5f 	.word	0x0800dc5f
 800db54:	682b      	ldr	r3, [r5, #0]
 800db56:	1d1a      	adds	r2, r3, #4
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	602a      	str	r2, [r5, #0]
 800db5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800db60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800db64:	2301      	movs	r3, #1
 800db66:	e0a3      	b.n	800dcb0 <_printf_i+0x1f4>
 800db68:	6820      	ldr	r0, [r4, #0]
 800db6a:	6829      	ldr	r1, [r5, #0]
 800db6c:	0606      	lsls	r6, r0, #24
 800db6e:	f101 0304 	add.w	r3, r1, #4
 800db72:	d50a      	bpl.n	800db8a <_printf_i+0xce>
 800db74:	680e      	ldr	r6, [r1, #0]
 800db76:	602b      	str	r3, [r5, #0]
 800db78:	2e00      	cmp	r6, #0
 800db7a:	da03      	bge.n	800db84 <_printf_i+0xc8>
 800db7c:	232d      	movs	r3, #45	; 0x2d
 800db7e:	4276      	negs	r6, r6
 800db80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db84:	485e      	ldr	r0, [pc, #376]	; (800dd00 <_printf_i+0x244>)
 800db86:	230a      	movs	r3, #10
 800db88:	e019      	b.n	800dbbe <_printf_i+0x102>
 800db8a:	680e      	ldr	r6, [r1, #0]
 800db8c:	602b      	str	r3, [r5, #0]
 800db8e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800db92:	bf18      	it	ne
 800db94:	b236      	sxthne	r6, r6
 800db96:	e7ef      	b.n	800db78 <_printf_i+0xbc>
 800db98:	682b      	ldr	r3, [r5, #0]
 800db9a:	6820      	ldr	r0, [r4, #0]
 800db9c:	1d19      	adds	r1, r3, #4
 800db9e:	6029      	str	r1, [r5, #0]
 800dba0:	0601      	lsls	r1, r0, #24
 800dba2:	d501      	bpl.n	800dba8 <_printf_i+0xec>
 800dba4:	681e      	ldr	r6, [r3, #0]
 800dba6:	e002      	b.n	800dbae <_printf_i+0xf2>
 800dba8:	0646      	lsls	r6, r0, #25
 800dbaa:	d5fb      	bpl.n	800dba4 <_printf_i+0xe8>
 800dbac:	881e      	ldrh	r6, [r3, #0]
 800dbae:	4854      	ldr	r0, [pc, #336]	; (800dd00 <_printf_i+0x244>)
 800dbb0:	2f6f      	cmp	r7, #111	; 0x6f
 800dbb2:	bf0c      	ite	eq
 800dbb4:	2308      	moveq	r3, #8
 800dbb6:	230a      	movne	r3, #10
 800dbb8:	2100      	movs	r1, #0
 800dbba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dbbe:	6865      	ldr	r5, [r4, #4]
 800dbc0:	60a5      	str	r5, [r4, #8]
 800dbc2:	2d00      	cmp	r5, #0
 800dbc4:	bfa2      	ittt	ge
 800dbc6:	6821      	ldrge	r1, [r4, #0]
 800dbc8:	f021 0104 	bicge.w	r1, r1, #4
 800dbcc:	6021      	strge	r1, [r4, #0]
 800dbce:	b90e      	cbnz	r6, 800dbd4 <_printf_i+0x118>
 800dbd0:	2d00      	cmp	r5, #0
 800dbd2:	d04d      	beq.n	800dc70 <_printf_i+0x1b4>
 800dbd4:	4615      	mov	r5, r2
 800dbd6:	fbb6 f1f3 	udiv	r1, r6, r3
 800dbda:	fb03 6711 	mls	r7, r3, r1, r6
 800dbde:	5dc7      	ldrb	r7, [r0, r7]
 800dbe0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dbe4:	4637      	mov	r7, r6
 800dbe6:	42bb      	cmp	r3, r7
 800dbe8:	460e      	mov	r6, r1
 800dbea:	d9f4      	bls.n	800dbd6 <_printf_i+0x11a>
 800dbec:	2b08      	cmp	r3, #8
 800dbee:	d10b      	bne.n	800dc08 <_printf_i+0x14c>
 800dbf0:	6823      	ldr	r3, [r4, #0]
 800dbf2:	07de      	lsls	r6, r3, #31
 800dbf4:	d508      	bpl.n	800dc08 <_printf_i+0x14c>
 800dbf6:	6923      	ldr	r3, [r4, #16]
 800dbf8:	6861      	ldr	r1, [r4, #4]
 800dbfa:	4299      	cmp	r1, r3
 800dbfc:	bfde      	ittt	le
 800dbfe:	2330      	movle	r3, #48	; 0x30
 800dc00:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dc04:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dc08:	1b52      	subs	r2, r2, r5
 800dc0a:	6122      	str	r2, [r4, #16]
 800dc0c:	f8cd a000 	str.w	sl, [sp]
 800dc10:	464b      	mov	r3, r9
 800dc12:	aa03      	add	r2, sp, #12
 800dc14:	4621      	mov	r1, r4
 800dc16:	4640      	mov	r0, r8
 800dc18:	f7ff fee2 	bl	800d9e0 <_printf_common>
 800dc1c:	3001      	adds	r0, #1
 800dc1e:	d14c      	bne.n	800dcba <_printf_i+0x1fe>
 800dc20:	f04f 30ff 	mov.w	r0, #4294967295
 800dc24:	b004      	add	sp, #16
 800dc26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc2a:	4835      	ldr	r0, [pc, #212]	; (800dd00 <_printf_i+0x244>)
 800dc2c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800dc30:	6829      	ldr	r1, [r5, #0]
 800dc32:	6823      	ldr	r3, [r4, #0]
 800dc34:	f851 6b04 	ldr.w	r6, [r1], #4
 800dc38:	6029      	str	r1, [r5, #0]
 800dc3a:	061d      	lsls	r5, r3, #24
 800dc3c:	d514      	bpl.n	800dc68 <_printf_i+0x1ac>
 800dc3e:	07df      	lsls	r7, r3, #31
 800dc40:	bf44      	itt	mi
 800dc42:	f043 0320 	orrmi.w	r3, r3, #32
 800dc46:	6023      	strmi	r3, [r4, #0]
 800dc48:	b91e      	cbnz	r6, 800dc52 <_printf_i+0x196>
 800dc4a:	6823      	ldr	r3, [r4, #0]
 800dc4c:	f023 0320 	bic.w	r3, r3, #32
 800dc50:	6023      	str	r3, [r4, #0]
 800dc52:	2310      	movs	r3, #16
 800dc54:	e7b0      	b.n	800dbb8 <_printf_i+0xfc>
 800dc56:	6823      	ldr	r3, [r4, #0]
 800dc58:	f043 0320 	orr.w	r3, r3, #32
 800dc5c:	6023      	str	r3, [r4, #0]
 800dc5e:	2378      	movs	r3, #120	; 0x78
 800dc60:	4828      	ldr	r0, [pc, #160]	; (800dd04 <_printf_i+0x248>)
 800dc62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dc66:	e7e3      	b.n	800dc30 <_printf_i+0x174>
 800dc68:	0659      	lsls	r1, r3, #25
 800dc6a:	bf48      	it	mi
 800dc6c:	b2b6      	uxthmi	r6, r6
 800dc6e:	e7e6      	b.n	800dc3e <_printf_i+0x182>
 800dc70:	4615      	mov	r5, r2
 800dc72:	e7bb      	b.n	800dbec <_printf_i+0x130>
 800dc74:	682b      	ldr	r3, [r5, #0]
 800dc76:	6826      	ldr	r6, [r4, #0]
 800dc78:	6961      	ldr	r1, [r4, #20]
 800dc7a:	1d18      	adds	r0, r3, #4
 800dc7c:	6028      	str	r0, [r5, #0]
 800dc7e:	0635      	lsls	r5, r6, #24
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	d501      	bpl.n	800dc88 <_printf_i+0x1cc>
 800dc84:	6019      	str	r1, [r3, #0]
 800dc86:	e002      	b.n	800dc8e <_printf_i+0x1d2>
 800dc88:	0670      	lsls	r0, r6, #25
 800dc8a:	d5fb      	bpl.n	800dc84 <_printf_i+0x1c8>
 800dc8c:	8019      	strh	r1, [r3, #0]
 800dc8e:	2300      	movs	r3, #0
 800dc90:	6123      	str	r3, [r4, #16]
 800dc92:	4615      	mov	r5, r2
 800dc94:	e7ba      	b.n	800dc0c <_printf_i+0x150>
 800dc96:	682b      	ldr	r3, [r5, #0]
 800dc98:	1d1a      	adds	r2, r3, #4
 800dc9a:	602a      	str	r2, [r5, #0]
 800dc9c:	681d      	ldr	r5, [r3, #0]
 800dc9e:	6862      	ldr	r2, [r4, #4]
 800dca0:	2100      	movs	r1, #0
 800dca2:	4628      	mov	r0, r5
 800dca4:	f7f2 fa94 	bl	80001d0 <memchr>
 800dca8:	b108      	cbz	r0, 800dcae <_printf_i+0x1f2>
 800dcaa:	1b40      	subs	r0, r0, r5
 800dcac:	6060      	str	r0, [r4, #4]
 800dcae:	6863      	ldr	r3, [r4, #4]
 800dcb0:	6123      	str	r3, [r4, #16]
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dcb8:	e7a8      	b.n	800dc0c <_printf_i+0x150>
 800dcba:	6923      	ldr	r3, [r4, #16]
 800dcbc:	462a      	mov	r2, r5
 800dcbe:	4649      	mov	r1, r9
 800dcc0:	4640      	mov	r0, r8
 800dcc2:	47d0      	blx	sl
 800dcc4:	3001      	adds	r0, #1
 800dcc6:	d0ab      	beq.n	800dc20 <_printf_i+0x164>
 800dcc8:	6823      	ldr	r3, [r4, #0]
 800dcca:	079b      	lsls	r3, r3, #30
 800dccc:	d413      	bmi.n	800dcf6 <_printf_i+0x23a>
 800dcce:	68e0      	ldr	r0, [r4, #12]
 800dcd0:	9b03      	ldr	r3, [sp, #12]
 800dcd2:	4298      	cmp	r0, r3
 800dcd4:	bfb8      	it	lt
 800dcd6:	4618      	movlt	r0, r3
 800dcd8:	e7a4      	b.n	800dc24 <_printf_i+0x168>
 800dcda:	2301      	movs	r3, #1
 800dcdc:	4632      	mov	r2, r6
 800dcde:	4649      	mov	r1, r9
 800dce0:	4640      	mov	r0, r8
 800dce2:	47d0      	blx	sl
 800dce4:	3001      	adds	r0, #1
 800dce6:	d09b      	beq.n	800dc20 <_printf_i+0x164>
 800dce8:	3501      	adds	r5, #1
 800dcea:	68e3      	ldr	r3, [r4, #12]
 800dcec:	9903      	ldr	r1, [sp, #12]
 800dcee:	1a5b      	subs	r3, r3, r1
 800dcf0:	42ab      	cmp	r3, r5
 800dcf2:	dcf2      	bgt.n	800dcda <_printf_i+0x21e>
 800dcf4:	e7eb      	b.n	800dcce <_printf_i+0x212>
 800dcf6:	2500      	movs	r5, #0
 800dcf8:	f104 0619 	add.w	r6, r4, #25
 800dcfc:	e7f5      	b.n	800dcea <_printf_i+0x22e>
 800dcfe:	bf00      	nop
 800dd00:	08010f1d 	.word	0x08010f1d
 800dd04:	08010f2e 	.word	0x08010f2e

0800dd08 <_sbrk_r>:
 800dd08:	b538      	push	{r3, r4, r5, lr}
 800dd0a:	4d06      	ldr	r5, [pc, #24]	; (800dd24 <_sbrk_r+0x1c>)
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	4604      	mov	r4, r0
 800dd10:	4608      	mov	r0, r1
 800dd12:	602b      	str	r3, [r5, #0]
 800dd14:	f7f2 fe0a 	bl	800092c <_sbrk>
 800dd18:	1c43      	adds	r3, r0, #1
 800dd1a:	d102      	bne.n	800dd22 <_sbrk_r+0x1a>
 800dd1c:	682b      	ldr	r3, [r5, #0]
 800dd1e:	b103      	cbz	r3, 800dd22 <_sbrk_r+0x1a>
 800dd20:	6023      	str	r3, [r4, #0]
 800dd22:	bd38      	pop	{r3, r4, r5, pc}
 800dd24:	200083a4 	.word	0x200083a4

0800dd28 <__sread>:
 800dd28:	b510      	push	{r4, lr}
 800dd2a:	460c      	mov	r4, r1
 800dd2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd30:	f000 fa6e 	bl	800e210 <_read_r>
 800dd34:	2800      	cmp	r0, #0
 800dd36:	bfab      	itete	ge
 800dd38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dd3a:	89a3      	ldrhlt	r3, [r4, #12]
 800dd3c:	181b      	addge	r3, r3, r0
 800dd3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dd42:	bfac      	ite	ge
 800dd44:	6563      	strge	r3, [r4, #84]	; 0x54
 800dd46:	81a3      	strhlt	r3, [r4, #12]
 800dd48:	bd10      	pop	{r4, pc}

0800dd4a <__swrite>:
 800dd4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd4e:	461f      	mov	r7, r3
 800dd50:	898b      	ldrh	r3, [r1, #12]
 800dd52:	05db      	lsls	r3, r3, #23
 800dd54:	4605      	mov	r5, r0
 800dd56:	460c      	mov	r4, r1
 800dd58:	4616      	mov	r6, r2
 800dd5a:	d505      	bpl.n	800dd68 <__swrite+0x1e>
 800dd5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd60:	2302      	movs	r3, #2
 800dd62:	2200      	movs	r2, #0
 800dd64:	f000 f9d0 	bl	800e108 <_lseek_r>
 800dd68:	89a3      	ldrh	r3, [r4, #12]
 800dd6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dd72:	81a3      	strh	r3, [r4, #12]
 800dd74:	4632      	mov	r2, r6
 800dd76:	463b      	mov	r3, r7
 800dd78:	4628      	mov	r0, r5
 800dd7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd7e:	f000 b869 	b.w	800de54 <_write_r>

0800dd82 <__sseek>:
 800dd82:	b510      	push	{r4, lr}
 800dd84:	460c      	mov	r4, r1
 800dd86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd8a:	f000 f9bd 	bl	800e108 <_lseek_r>
 800dd8e:	1c43      	adds	r3, r0, #1
 800dd90:	89a3      	ldrh	r3, [r4, #12]
 800dd92:	bf15      	itete	ne
 800dd94:	6560      	strne	r0, [r4, #84]	; 0x54
 800dd96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dd9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dd9e:	81a3      	strheq	r3, [r4, #12]
 800dda0:	bf18      	it	ne
 800dda2:	81a3      	strhne	r3, [r4, #12]
 800dda4:	bd10      	pop	{r4, pc}

0800dda6 <__sclose>:
 800dda6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddaa:	f000 b8db 	b.w	800df64 <_close_r>
	...

0800ddb0 <__swbuf_r>:
 800ddb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddb2:	460e      	mov	r6, r1
 800ddb4:	4614      	mov	r4, r2
 800ddb6:	4605      	mov	r5, r0
 800ddb8:	b118      	cbz	r0, 800ddc2 <__swbuf_r+0x12>
 800ddba:	6983      	ldr	r3, [r0, #24]
 800ddbc:	b90b      	cbnz	r3, 800ddc2 <__swbuf_r+0x12>
 800ddbe:	f7ff fb1b 	bl	800d3f8 <__sinit>
 800ddc2:	4b21      	ldr	r3, [pc, #132]	; (800de48 <__swbuf_r+0x98>)
 800ddc4:	429c      	cmp	r4, r3
 800ddc6:	d12b      	bne.n	800de20 <__swbuf_r+0x70>
 800ddc8:	686c      	ldr	r4, [r5, #4]
 800ddca:	69a3      	ldr	r3, [r4, #24]
 800ddcc:	60a3      	str	r3, [r4, #8]
 800ddce:	89a3      	ldrh	r3, [r4, #12]
 800ddd0:	071a      	lsls	r2, r3, #28
 800ddd2:	d52f      	bpl.n	800de34 <__swbuf_r+0x84>
 800ddd4:	6923      	ldr	r3, [r4, #16]
 800ddd6:	b36b      	cbz	r3, 800de34 <__swbuf_r+0x84>
 800ddd8:	6923      	ldr	r3, [r4, #16]
 800ddda:	6820      	ldr	r0, [r4, #0]
 800dddc:	1ac0      	subs	r0, r0, r3
 800ddde:	6963      	ldr	r3, [r4, #20]
 800dde0:	b2f6      	uxtb	r6, r6
 800dde2:	4283      	cmp	r3, r0
 800dde4:	4637      	mov	r7, r6
 800dde6:	dc04      	bgt.n	800ddf2 <__swbuf_r+0x42>
 800dde8:	4621      	mov	r1, r4
 800ddea:	4628      	mov	r0, r5
 800ddec:	f000 f950 	bl	800e090 <_fflush_r>
 800ddf0:	bb30      	cbnz	r0, 800de40 <__swbuf_r+0x90>
 800ddf2:	68a3      	ldr	r3, [r4, #8]
 800ddf4:	3b01      	subs	r3, #1
 800ddf6:	60a3      	str	r3, [r4, #8]
 800ddf8:	6823      	ldr	r3, [r4, #0]
 800ddfa:	1c5a      	adds	r2, r3, #1
 800ddfc:	6022      	str	r2, [r4, #0]
 800ddfe:	701e      	strb	r6, [r3, #0]
 800de00:	6963      	ldr	r3, [r4, #20]
 800de02:	3001      	adds	r0, #1
 800de04:	4283      	cmp	r3, r0
 800de06:	d004      	beq.n	800de12 <__swbuf_r+0x62>
 800de08:	89a3      	ldrh	r3, [r4, #12]
 800de0a:	07db      	lsls	r3, r3, #31
 800de0c:	d506      	bpl.n	800de1c <__swbuf_r+0x6c>
 800de0e:	2e0a      	cmp	r6, #10
 800de10:	d104      	bne.n	800de1c <__swbuf_r+0x6c>
 800de12:	4621      	mov	r1, r4
 800de14:	4628      	mov	r0, r5
 800de16:	f000 f93b 	bl	800e090 <_fflush_r>
 800de1a:	b988      	cbnz	r0, 800de40 <__swbuf_r+0x90>
 800de1c:	4638      	mov	r0, r7
 800de1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de20:	4b0a      	ldr	r3, [pc, #40]	; (800de4c <__swbuf_r+0x9c>)
 800de22:	429c      	cmp	r4, r3
 800de24:	d101      	bne.n	800de2a <__swbuf_r+0x7a>
 800de26:	68ac      	ldr	r4, [r5, #8]
 800de28:	e7cf      	b.n	800ddca <__swbuf_r+0x1a>
 800de2a:	4b09      	ldr	r3, [pc, #36]	; (800de50 <__swbuf_r+0xa0>)
 800de2c:	429c      	cmp	r4, r3
 800de2e:	bf08      	it	eq
 800de30:	68ec      	ldreq	r4, [r5, #12]
 800de32:	e7ca      	b.n	800ddca <__swbuf_r+0x1a>
 800de34:	4621      	mov	r1, r4
 800de36:	4628      	mov	r0, r5
 800de38:	f000 f81e 	bl	800de78 <__swsetup_r>
 800de3c:	2800      	cmp	r0, #0
 800de3e:	d0cb      	beq.n	800ddd8 <__swbuf_r+0x28>
 800de40:	f04f 37ff 	mov.w	r7, #4294967295
 800de44:	e7ea      	b.n	800de1c <__swbuf_r+0x6c>
 800de46:	bf00      	nop
 800de48:	08010ecc 	.word	0x08010ecc
 800de4c:	08010eec 	.word	0x08010eec
 800de50:	08010eac 	.word	0x08010eac

0800de54 <_write_r>:
 800de54:	b538      	push	{r3, r4, r5, lr}
 800de56:	4d07      	ldr	r5, [pc, #28]	; (800de74 <_write_r+0x20>)
 800de58:	4604      	mov	r4, r0
 800de5a:	4608      	mov	r0, r1
 800de5c:	4611      	mov	r1, r2
 800de5e:	2200      	movs	r2, #0
 800de60:	602a      	str	r2, [r5, #0]
 800de62:	461a      	mov	r2, r3
 800de64:	f7f2 fd11 	bl	800088a <_write>
 800de68:	1c43      	adds	r3, r0, #1
 800de6a:	d102      	bne.n	800de72 <_write_r+0x1e>
 800de6c:	682b      	ldr	r3, [r5, #0]
 800de6e:	b103      	cbz	r3, 800de72 <_write_r+0x1e>
 800de70:	6023      	str	r3, [r4, #0]
 800de72:	bd38      	pop	{r3, r4, r5, pc}
 800de74:	200083a4 	.word	0x200083a4

0800de78 <__swsetup_r>:
 800de78:	4b32      	ldr	r3, [pc, #200]	; (800df44 <__swsetup_r+0xcc>)
 800de7a:	b570      	push	{r4, r5, r6, lr}
 800de7c:	681d      	ldr	r5, [r3, #0]
 800de7e:	4606      	mov	r6, r0
 800de80:	460c      	mov	r4, r1
 800de82:	b125      	cbz	r5, 800de8e <__swsetup_r+0x16>
 800de84:	69ab      	ldr	r3, [r5, #24]
 800de86:	b913      	cbnz	r3, 800de8e <__swsetup_r+0x16>
 800de88:	4628      	mov	r0, r5
 800de8a:	f7ff fab5 	bl	800d3f8 <__sinit>
 800de8e:	4b2e      	ldr	r3, [pc, #184]	; (800df48 <__swsetup_r+0xd0>)
 800de90:	429c      	cmp	r4, r3
 800de92:	d10f      	bne.n	800deb4 <__swsetup_r+0x3c>
 800de94:	686c      	ldr	r4, [r5, #4]
 800de96:	89a3      	ldrh	r3, [r4, #12]
 800de98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800de9c:	0719      	lsls	r1, r3, #28
 800de9e:	d42c      	bmi.n	800defa <__swsetup_r+0x82>
 800dea0:	06dd      	lsls	r5, r3, #27
 800dea2:	d411      	bmi.n	800dec8 <__swsetup_r+0x50>
 800dea4:	2309      	movs	r3, #9
 800dea6:	6033      	str	r3, [r6, #0]
 800dea8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800deac:	81a3      	strh	r3, [r4, #12]
 800deae:	f04f 30ff 	mov.w	r0, #4294967295
 800deb2:	e03e      	b.n	800df32 <__swsetup_r+0xba>
 800deb4:	4b25      	ldr	r3, [pc, #148]	; (800df4c <__swsetup_r+0xd4>)
 800deb6:	429c      	cmp	r4, r3
 800deb8:	d101      	bne.n	800debe <__swsetup_r+0x46>
 800deba:	68ac      	ldr	r4, [r5, #8]
 800debc:	e7eb      	b.n	800de96 <__swsetup_r+0x1e>
 800debe:	4b24      	ldr	r3, [pc, #144]	; (800df50 <__swsetup_r+0xd8>)
 800dec0:	429c      	cmp	r4, r3
 800dec2:	bf08      	it	eq
 800dec4:	68ec      	ldreq	r4, [r5, #12]
 800dec6:	e7e6      	b.n	800de96 <__swsetup_r+0x1e>
 800dec8:	0758      	lsls	r0, r3, #29
 800deca:	d512      	bpl.n	800def2 <__swsetup_r+0x7a>
 800decc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dece:	b141      	cbz	r1, 800dee2 <__swsetup_r+0x6a>
 800ded0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ded4:	4299      	cmp	r1, r3
 800ded6:	d002      	beq.n	800dede <__swsetup_r+0x66>
 800ded8:	4630      	mov	r0, r6
 800deda:	f7ff fb47 	bl	800d56c <_free_r>
 800dede:	2300      	movs	r3, #0
 800dee0:	6363      	str	r3, [r4, #52]	; 0x34
 800dee2:	89a3      	ldrh	r3, [r4, #12]
 800dee4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dee8:	81a3      	strh	r3, [r4, #12]
 800deea:	2300      	movs	r3, #0
 800deec:	6063      	str	r3, [r4, #4]
 800deee:	6923      	ldr	r3, [r4, #16]
 800def0:	6023      	str	r3, [r4, #0]
 800def2:	89a3      	ldrh	r3, [r4, #12]
 800def4:	f043 0308 	orr.w	r3, r3, #8
 800def8:	81a3      	strh	r3, [r4, #12]
 800defa:	6923      	ldr	r3, [r4, #16]
 800defc:	b94b      	cbnz	r3, 800df12 <__swsetup_r+0x9a>
 800defe:	89a3      	ldrh	r3, [r4, #12]
 800df00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800df04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df08:	d003      	beq.n	800df12 <__swsetup_r+0x9a>
 800df0a:	4621      	mov	r1, r4
 800df0c:	4630      	mov	r0, r6
 800df0e:	f000 f933 	bl	800e178 <__smakebuf_r>
 800df12:	89a0      	ldrh	r0, [r4, #12]
 800df14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800df18:	f010 0301 	ands.w	r3, r0, #1
 800df1c:	d00a      	beq.n	800df34 <__swsetup_r+0xbc>
 800df1e:	2300      	movs	r3, #0
 800df20:	60a3      	str	r3, [r4, #8]
 800df22:	6963      	ldr	r3, [r4, #20]
 800df24:	425b      	negs	r3, r3
 800df26:	61a3      	str	r3, [r4, #24]
 800df28:	6923      	ldr	r3, [r4, #16]
 800df2a:	b943      	cbnz	r3, 800df3e <__swsetup_r+0xc6>
 800df2c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800df30:	d1ba      	bne.n	800dea8 <__swsetup_r+0x30>
 800df32:	bd70      	pop	{r4, r5, r6, pc}
 800df34:	0781      	lsls	r1, r0, #30
 800df36:	bf58      	it	pl
 800df38:	6963      	ldrpl	r3, [r4, #20]
 800df3a:	60a3      	str	r3, [r4, #8]
 800df3c:	e7f4      	b.n	800df28 <__swsetup_r+0xb0>
 800df3e:	2000      	movs	r0, #0
 800df40:	e7f7      	b.n	800df32 <__swsetup_r+0xba>
 800df42:	bf00      	nop
 800df44:	2000002c 	.word	0x2000002c
 800df48:	08010ecc 	.word	0x08010ecc
 800df4c:	08010eec 	.word	0x08010eec
 800df50:	08010eac 	.word	0x08010eac

0800df54 <abort>:
 800df54:	b508      	push	{r3, lr}
 800df56:	2006      	movs	r0, #6
 800df58:	f000 f994 	bl	800e284 <raise>
 800df5c:	2001      	movs	r0, #1
 800df5e:	f7f2 fc6d 	bl	800083c <_exit>
	...

0800df64 <_close_r>:
 800df64:	b538      	push	{r3, r4, r5, lr}
 800df66:	4d06      	ldr	r5, [pc, #24]	; (800df80 <_close_r+0x1c>)
 800df68:	2300      	movs	r3, #0
 800df6a:	4604      	mov	r4, r0
 800df6c:	4608      	mov	r0, r1
 800df6e:	602b      	str	r3, [r5, #0]
 800df70:	f7f2 fca7 	bl	80008c2 <_close>
 800df74:	1c43      	adds	r3, r0, #1
 800df76:	d102      	bne.n	800df7e <_close_r+0x1a>
 800df78:	682b      	ldr	r3, [r5, #0]
 800df7a:	b103      	cbz	r3, 800df7e <_close_r+0x1a>
 800df7c:	6023      	str	r3, [r4, #0]
 800df7e:	bd38      	pop	{r3, r4, r5, pc}
 800df80:	200083a4 	.word	0x200083a4

0800df84 <__sflush_r>:
 800df84:	898a      	ldrh	r2, [r1, #12]
 800df86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df8a:	4605      	mov	r5, r0
 800df8c:	0710      	lsls	r0, r2, #28
 800df8e:	460c      	mov	r4, r1
 800df90:	d458      	bmi.n	800e044 <__sflush_r+0xc0>
 800df92:	684b      	ldr	r3, [r1, #4]
 800df94:	2b00      	cmp	r3, #0
 800df96:	dc05      	bgt.n	800dfa4 <__sflush_r+0x20>
 800df98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	dc02      	bgt.n	800dfa4 <__sflush_r+0x20>
 800df9e:	2000      	movs	r0, #0
 800dfa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dfa6:	2e00      	cmp	r6, #0
 800dfa8:	d0f9      	beq.n	800df9e <__sflush_r+0x1a>
 800dfaa:	2300      	movs	r3, #0
 800dfac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dfb0:	682f      	ldr	r7, [r5, #0]
 800dfb2:	602b      	str	r3, [r5, #0]
 800dfb4:	d032      	beq.n	800e01c <__sflush_r+0x98>
 800dfb6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dfb8:	89a3      	ldrh	r3, [r4, #12]
 800dfba:	075a      	lsls	r2, r3, #29
 800dfbc:	d505      	bpl.n	800dfca <__sflush_r+0x46>
 800dfbe:	6863      	ldr	r3, [r4, #4]
 800dfc0:	1ac0      	subs	r0, r0, r3
 800dfc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dfc4:	b10b      	cbz	r3, 800dfca <__sflush_r+0x46>
 800dfc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dfc8:	1ac0      	subs	r0, r0, r3
 800dfca:	2300      	movs	r3, #0
 800dfcc:	4602      	mov	r2, r0
 800dfce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dfd0:	6a21      	ldr	r1, [r4, #32]
 800dfd2:	4628      	mov	r0, r5
 800dfd4:	47b0      	blx	r6
 800dfd6:	1c43      	adds	r3, r0, #1
 800dfd8:	89a3      	ldrh	r3, [r4, #12]
 800dfda:	d106      	bne.n	800dfea <__sflush_r+0x66>
 800dfdc:	6829      	ldr	r1, [r5, #0]
 800dfde:	291d      	cmp	r1, #29
 800dfe0:	d82c      	bhi.n	800e03c <__sflush_r+0xb8>
 800dfe2:	4a2a      	ldr	r2, [pc, #168]	; (800e08c <__sflush_r+0x108>)
 800dfe4:	40ca      	lsrs	r2, r1
 800dfe6:	07d6      	lsls	r6, r2, #31
 800dfe8:	d528      	bpl.n	800e03c <__sflush_r+0xb8>
 800dfea:	2200      	movs	r2, #0
 800dfec:	6062      	str	r2, [r4, #4]
 800dfee:	04d9      	lsls	r1, r3, #19
 800dff0:	6922      	ldr	r2, [r4, #16]
 800dff2:	6022      	str	r2, [r4, #0]
 800dff4:	d504      	bpl.n	800e000 <__sflush_r+0x7c>
 800dff6:	1c42      	adds	r2, r0, #1
 800dff8:	d101      	bne.n	800dffe <__sflush_r+0x7a>
 800dffa:	682b      	ldr	r3, [r5, #0]
 800dffc:	b903      	cbnz	r3, 800e000 <__sflush_r+0x7c>
 800dffe:	6560      	str	r0, [r4, #84]	; 0x54
 800e000:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e002:	602f      	str	r7, [r5, #0]
 800e004:	2900      	cmp	r1, #0
 800e006:	d0ca      	beq.n	800df9e <__sflush_r+0x1a>
 800e008:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e00c:	4299      	cmp	r1, r3
 800e00e:	d002      	beq.n	800e016 <__sflush_r+0x92>
 800e010:	4628      	mov	r0, r5
 800e012:	f7ff faab 	bl	800d56c <_free_r>
 800e016:	2000      	movs	r0, #0
 800e018:	6360      	str	r0, [r4, #52]	; 0x34
 800e01a:	e7c1      	b.n	800dfa0 <__sflush_r+0x1c>
 800e01c:	6a21      	ldr	r1, [r4, #32]
 800e01e:	2301      	movs	r3, #1
 800e020:	4628      	mov	r0, r5
 800e022:	47b0      	blx	r6
 800e024:	1c41      	adds	r1, r0, #1
 800e026:	d1c7      	bne.n	800dfb8 <__sflush_r+0x34>
 800e028:	682b      	ldr	r3, [r5, #0]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d0c4      	beq.n	800dfb8 <__sflush_r+0x34>
 800e02e:	2b1d      	cmp	r3, #29
 800e030:	d001      	beq.n	800e036 <__sflush_r+0xb2>
 800e032:	2b16      	cmp	r3, #22
 800e034:	d101      	bne.n	800e03a <__sflush_r+0xb6>
 800e036:	602f      	str	r7, [r5, #0]
 800e038:	e7b1      	b.n	800df9e <__sflush_r+0x1a>
 800e03a:	89a3      	ldrh	r3, [r4, #12]
 800e03c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e040:	81a3      	strh	r3, [r4, #12]
 800e042:	e7ad      	b.n	800dfa0 <__sflush_r+0x1c>
 800e044:	690f      	ldr	r7, [r1, #16]
 800e046:	2f00      	cmp	r7, #0
 800e048:	d0a9      	beq.n	800df9e <__sflush_r+0x1a>
 800e04a:	0793      	lsls	r3, r2, #30
 800e04c:	680e      	ldr	r6, [r1, #0]
 800e04e:	bf08      	it	eq
 800e050:	694b      	ldreq	r3, [r1, #20]
 800e052:	600f      	str	r7, [r1, #0]
 800e054:	bf18      	it	ne
 800e056:	2300      	movne	r3, #0
 800e058:	eba6 0807 	sub.w	r8, r6, r7
 800e05c:	608b      	str	r3, [r1, #8]
 800e05e:	f1b8 0f00 	cmp.w	r8, #0
 800e062:	dd9c      	ble.n	800df9e <__sflush_r+0x1a>
 800e064:	6a21      	ldr	r1, [r4, #32]
 800e066:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e068:	4643      	mov	r3, r8
 800e06a:	463a      	mov	r2, r7
 800e06c:	4628      	mov	r0, r5
 800e06e:	47b0      	blx	r6
 800e070:	2800      	cmp	r0, #0
 800e072:	dc06      	bgt.n	800e082 <__sflush_r+0xfe>
 800e074:	89a3      	ldrh	r3, [r4, #12]
 800e076:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e07a:	81a3      	strh	r3, [r4, #12]
 800e07c:	f04f 30ff 	mov.w	r0, #4294967295
 800e080:	e78e      	b.n	800dfa0 <__sflush_r+0x1c>
 800e082:	4407      	add	r7, r0
 800e084:	eba8 0800 	sub.w	r8, r8, r0
 800e088:	e7e9      	b.n	800e05e <__sflush_r+0xda>
 800e08a:	bf00      	nop
 800e08c:	20400001 	.word	0x20400001

0800e090 <_fflush_r>:
 800e090:	b538      	push	{r3, r4, r5, lr}
 800e092:	690b      	ldr	r3, [r1, #16]
 800e094:	4605      	mov	r5, r0
 800e096:	460c      	mov	r4, r1
 800e098:	b913      	cbnz	r3, 800e0a0 <_fflush_r+0x10>
 800e09a:	2500      	movs	r5, #0
 800e09c:	4628      	mov	r0, r5
 800e09e:	bd38      	pop	{r3, r4, r5, pc}
 800e0a0:	b118      	cbz	r0, 800e0aa <_fflush_r+0x1a>
 800e0a2:	6983      	ldr	r3, [r0, #24]
 800e0a4:	b90b      	cbnz	r3, 800e0aa <_fflush_r+0x1a>
 800e0a6:	f7ff f9a7 	bl	800d3f8 <__sinit>
 800e0aa:	4b14      	ldr	r3, [pc, #80]	; (800e0fc <_fflush_r+0x6c>)
 800e0ac:	429c      	cmp	r4, r3
 800e0ae:	d11b      	bne.n	800e0e8 <_fflush_r+0x58>
 800e0b0:	686c      	ldr	r4, [r5, #4]
 800e0b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d0ef      	beq.n	800e09a <_fflush_r+0xa>
 800e0ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e0bc:	07d0      	lsls	r0, r2, #31
 800e0be:	d404      	bmi.n	800e0ca <_fflush_r+0x3a>
 800e0c0:	0599      	lsls	r1, r3, #22
 800e0c2:	d402      	bmi.n	800e0ca <_fflush_r+0x3a>
 800e0c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e0c6:	f7ff fa47 	bl	800d558 <__retarget_lock_acquire_recursive>
 800e0ca:	4628      	mov	r0, r5
 800e0cc:	4621      	mov	r1, r4
 800e0ce:	f7ff ff59 	bl	800df84 <__sflush_r>
 800e0d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e0d4:	07da      	lsls	r2, r3, #31
 800e0d6:	4605      	mov	r5, r0
 800e0d8:	d4e0      	bmi.n	800e09c <_fflush_r+0xc>
 800e0da:	89a3      	ldrh	r3, [r4, #12]
 800e0dc:	059b      	lsls	r3, r3, #22
 800e0de:	d4dd      	bmi.n	800e09c <_fflush_r+0xc>
 800e0e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e0e2:	f7ff fa3a 	bl	800d55a <__retarget_lock_release_recursive>
 800e0e6:	e7d9      	b.n	800e09c <_fflush_r+0xc>
 800e0e8:	4b05      	ldr	r3, [pc, #20]	; (800e100 <_fflush_r+0x70>)
 800e0ea:	429c      	cmp	r4, r3
 800e0ec:	d101      	bne.n	800e0f2 <_fflush_r+0x62>
 800e0ee:	68ac      	ldr	r4, [r5, #8]
 800e0f0:	e7df      	b.n	800e0b2 <_fflush_r+0x22>
 800e0f2:	4b04      	ldr	r3, [pc, #16]	; (800e104 <_fflush_r+0x74>)
 800e0f4:	429c      	cmp	r4, r3
 800e0f6:	bf08      	it	eq
 800e0f8:	68ec      	ldreq	r4, [r5, #12]
 800e0fa:	e7da      	b.n	800e0b2 <_fflush_r+0x22>
 800e0fc:	08010ecc 	.word	0x08010ecc
 800e100:	08010eec 	.word	0x08010eec
 800e104:	08010eac 	.word	0x08010eac

0800e108 <_lseek_r>:
 800e108:	b538      	push	{r3, r4, r5, lr}
 800e10a:	4d07      	ldr	r5, [pc, #28]	; (800e128 <_lseek_r+0x20>)
 800e10c:	4604      	mov	r4, r0
 800e10e:	4608      	mov	r0, r1
 800e110:	4611      	mov	r1, r2
 800e112:	2200      	movs	r2, #0
 800e114:	602a      	str	r2, [r5, #0]
 800e116:	461a      	mov	r2, r3
 800e118:	f7f2 fbfa 	bl	8000910 <_lseek>
 800e11c:	1c43      	adds	r3, r0, #1
 800e11e:	d102      	bne.n	800e126 <_lseek_r+0x1e>
 800e120:	682b      	ldr	r3, [r5, #0]
 800e122:	b103      	cbz	r3, 800e126 <_lseek_r+0x1e>
 800e124:	6023      	str	r3, [r4, #0]
 800e126:	bd38      	pop	{r3, r4, r5, pc}
 800e128:	200083a4 	.word	0x200083a4

0800e12c <__swhatbuf_r>:
 800e12c:	b570      	push	{r4, r5, r6, lr}
 800e12e:	460e      	mov	r6, r1
 800e130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e134:	2900      	cmp	r1, #0
 800e136:	b096      	sub	sp, #88	; 0x58
 800e138:	4614      	mov	r4, r2
 800e13a:	461d      	mov	r5, r3
 800e13c:	da08      	bge.n	800e150 <__swhatbuf_r+0x24>
 800e13e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e142:	2200      	movs	r2, #0
 800e144:	602a      	str	r2, [r5, #0]
 800e146:	061a      	lsls	r2, r3, #24
 800e148:	d410      	bmi.n	800e16c <__swhatbuf_r+0x40>
 800e14a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e14e:	e00e      	b.n	800e16e <__swhatbuf_r+0x42>
 800e150:	466a      	mov	r2, sp
 800e152:	f000 f8b3 	bl	800e2bc <_fstat_r>
 800e156:	2800      	cmp	r0, #0
 800e158:	dbf1      	blt.n	800e13e <__swhatbuf_r+0x12>
 800e15a:	9a01      	ldr	r2, [sp, #4]
 800e15c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e160:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e164:	425a      	negs	r2, r3
 800e166:	415a      	adcs	r2, r3
 800e168:	602a      	str	r2, [r5, #0]
 800e16a:	e7ee      	b.n	800e14a <__swhatbuf_r+0x1e>
 800e16c:	2340      	movs	r3, #64	; 0x40
 800e16e:	2000      	movs	r0, #0
 800e170:	6023      	str	r3, [r4, #0]
 800e172:	b016      	add	sp, #88	; 0x58
 800e174:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e178 <__smakebuf_r>:
 800e178:	898b      	ldrh	r3, [r1, #12]
 800e17a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e17c:	079d      	lsls	r5, r3, #30
 800e17e:	4606      	mov	r6, r0
 800e180:	460c      	mov	r4, r1
 800e182:	d507      	bpl.n	800e194 <__smakebuf_r+0x1c>
 800e184:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e188:	6023      	str	r3, [r4, #0]
 800e18a:	6123      	str	r3, [r4, #16]
 800e18c:	2301      	movs	r3, #1
 800e18e:	6163      	str	r3, [r4, #20]
 800e190:	b002      	add	sp, #8
 800e192:	bd70      	pop	{r4, r5, r6, pc}
 800e194:	ab01      	add	r3, sp, #4
 800e196:	466a      	mov	r2, sp
 800e198:	f7ff ffc8 	bl	800e12c <__swhatbuf_r>
 800e19c:	9900      	ldr	r1, [sp, #0]
 800e19e:	4605      	mov	r5, r0
 800e1a0:	4630      	mov	r0, r6
 800e1a2:	f7ff fa4f 	bl	800d644 <_malloc_r>
 800e1a6:	b948      	cbnz	r0, 800e1bc <__smakebuf_r+0x44>
 800e1a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1ac:	059a      	lsls	r2, r3, #22
 800e1ae:	d4ef      	bmi.n	800e190 <__smakebuf_r+0x18>
 800e1b0:	f023 0303 	bic.w	r3, r3, #3
 800e1b4:	f043 0302 	orr.w	r3, r3, #2
 800e1b8:	81a3      	strh	r3, [r4, #12]
 800e1ba:	e7e3      	b.n	800e184 <__smakebuf_r+0xc>
 800e1bc:	4b0d      	ldr	r3, [pc, #52]	; (800e1f4 <__smakebuf_r+0x7c>)
 800e1be:	62b3      	str	r3, [r6, #40]	; 0x28
 800e1c0:	89a3      	ldrh	r3, [r4, #12]
 800e1c2:	6020      	str	r0, [r4, #0]
 800e1c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1c8:	81a3      	strh	r3, [r4, #12]
 800e1ca:	9b00      	ldr	r3, [sp, #0]
 800e1cc:	6163      	str	r3, [r4, #20]
 800e1ce:	9b01      	ldr	r3, [sp, #4]
 800e1d0:	6120      	str	r0, [r4, #16]
 800e1d2:	b15b      	cbz	r3, 800e1ec <__smakebuf_r+0x74>
 800e1d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e1d8:	4630      	mov	r0, r6
 800e1da:	f000 f881 	bl	800e2e0 <_isatty_r>
 800e1de:	b128      	cbz	r0, 800e1ec <__smakebuf_r+0x74>
 800e1e0:	89a3      	ldrh	r3, [r4, #12]
 800e1e2:	f023 0303 	bic.w	r3, r3, #3
 800e1e6:	f043 0301 	orr.w	r3, r3, #1
 800e1ea:	81a3      	strh	r3, [r4, #12]
 800e1ec:	89a0      	ldrh	r0, [r4, #12]
 800e1ee:	4305      	orrs	r5, r0
 800e1f0:	81a5      	strh	r5, [r4, #12]
 800e1f2:	e7cd      	b.n	800e190 <__smakebuf_r+0x18>
 800e1f4:	0800d391 	.word	0x0800d391

0800e1f8 <__malloc_lock>:
 800e1f8:	4801      	ldr	r0, [pc, #4]	; (800e200 <__malloc_lock+0x8>)
 800e1fa:	f7ff b9ad 	b.w	800d558 <__retarget_lock_acquire_recursive>
 800e1fe:	bf00      	nop
 800e200:	200083a8 	.word	0x200083a8

0800e204 <__malloc_unlock>:
 800e204:	4801      	ldr	r0, [pc, #4]	; (800e20c <__malloc_unlock+0x8>)
 800e206:	f7ff b9a8 	b.w	800d55a <__retarget_lock_release_recursive>
 800e20a:	bf00      	nop
 800e20c:	200083a8 	.word	0x200083a8

0800e210 <_read_r>:
 800e210:	b538      	push	{r3, r4, r5, lr}
 800e212:	4d07      	ldr	r5, [pc, #28]	; (800e230 <_read_r+0x20>)
 800e214:	4604      	mov	r4, r0
 800e216:	4608      	mov	r0, r1
 800e218:	4611      	mov	r1, r2
 800e21a:	2200      	movs	r2, #0
 800e21c:	602a      	str	r2, [r5, #0]
 800e21e:	461a      	mov	r2, r3
 800e220:	f7f2 fb16 	bl	8000850 <_read>
 800e224:	1c43      	adds	r3, r0, #1
 800e226:	d102      	bne.n	800e22e <_read_r+0x1e>
 800e228:	682b      	ldr	r3, [r5, #0]
 800e22a:	b103      	cbz	r3, 800e22e <_read_r+0x1e>
 800e22c:	6023      	str	r3, [r4, #0]
 800e22e:	bd38      	pop	{r3, r4, r5, pc}
 800e230:	200083a4 	.word	0x200083a4

0800e234 <_raise_r>:
 800e234:	291f      	cmp	r1, #31
 800e236:	b538      	push	{r3, r4, r5, lr}
 800e238:	4604      	mov	r4, r0
 800e23a:	460d      	mov	r5, r1
 800e23c:	d904      	bls.n	800e248 <_raise_r+0x14>
 800e23e:	2316      	movs	r3, #22
 800e240:	6003      	str	r3, [r0, #0]
 800e242:	f04f 30ff 	mov.w	r0, #4294967295
 800e246:	bd38      	pop	{r3, r4, r5, pc}
 800e248:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e24a:	b112      	cbz	r2, 800e252 <_raise_r+0x1e>
 800e24c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e250:	b94b      	cbnz	r3, 800e266 <_raise_r+0x32>
 800e252:	4620      	mov	r0, r4
 800e254:	f000 f830 	bl	800e2b8 <_getpid_r>
 800e258:	462a      	mov	r2, r5
 800e25a:	4601      	mov	r1, r0
 800e25c:	4620      	mov	r0, r4
 800e25e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e262:	f000 b817 	b.w	800e294 <_kill_r>
 800e266:	2b01      	cmp	r3, #1
 800e268:	d00a      	beq.n	800e280 <_raise_r+0x4c>
 800e26a:	1c59      	adds	r1, r3, #1
 800e26c:	d103      	bne.n	800e276 <_raise_r+0x42>
 800e26e:	2316      	movs	r3, #22
 800e270:	6003      	str	r3, [r0, #0]
 800e272:	2001      	movs	r0, #1
 800e274:	e7e7      	b.n	800e246 <_raise_r+0x12>
 800e276:	2400      	movs	r4, #0
 800e278:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e27c:	4628      	mov	r0, r5
 800e27e:	4798      	blx	r3
 800e280:	2000      	movs	r0, #0
 800e282:	e7e0      	b.n	800e246 <_raise_r+0x12>

0800e284 <raise>:
 800e284:	4b02      	ldr	r3, [pc, #8]	; (800e290 <raise+0xc>)
 800e286:	4601      	mov	r1, r0
 800e288:	6818      	ldr	r0, [r3, #0]
 800e28a:	f7ff bfd3 	b.w	800e234 <_raise_r>
 800e28e:	bf00      	nop
 800e290:	2000002c 	.word	0x2000002c

0800e294 <_kill_r>:
 800e294:	b538      	push	{r3, r4, r5, lr}
 800e296:	4d07      	ldr	r5, [pc, #28]	; (800e2b4 <_kill_r+0x20>)
 800e298:	2300      	movs	r3, #0
 800e29a:	4604      	mov	r4, r0
 800e29c:	4608      	mov	r0, r1
 800e29e:	4611      	mov	r1, r2
 800e2a0:	602b      	str	r3, [r5, #0]
 800e2a2:	f7f2 fab9 	bl	8000818 <_kill>
 800e2a6:	1c43      	adds	r3, r0, #1
 800e2a8:	d102      	bne.n	800e2b0 <_kill_r+0x1c>
 800e2aa:	682b      	ldr	r3, [r5, #0]
 800e2ac:	b103      	cbz	r3, 800e2b0 <_kill_r+0x1c>
 800e2ae:	6023      	str	r3, [r4, #0]
 800e2b0:	bd38      	pop	{r3, r4, r5, pc}
 800e2b2:	bf00      	nop
 800e2b4:	200083a4 	.word	0x200083a4

0800e2b8 <_getpid_r>:
 800e2b8:	f7f2 baa6 	b.w	8000808 <_getpid>

0800e2bc <_fstat_r>:
 800e2bc:	b538      	push	{r3, r4, r5, lr}
 800e2be:	4d07      	ldr	r5, [pc, #28]	; (800e2dc <_fstat_r+0x20>)
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	4604      	mov	r4, r0
 800e2c4:	4608      	mov	r0, r1
 800e2c6:	4611      	mov	r1, r2
 800e2c8:	602b      	str	r3, [r5, #0]
 800e2ca:	f7f2 fb06 	bl	80008da <_fstat>
 800e2ce:	1c43      	adds	r3, r0, #1
 800e2d0:	d102      	bne.n	800e2d8 <_fstat_r+0x1c>
 800e2d2:	682b      	ldr	r3, [r5, #0]
 800e2d4:	b103      	cbz	r3, 800e2d8 <_fstat_r+0x1c>
 800e2d6:	6023      	str	r3, [r4, #0]
 800e2d8:	bd38      	pop	{r3, r4, r5, pc}
 800e2da:	bf00      	nop
 800e2dc:	200083a4 	.word	0x200083a4

0800e2e0 <_isatty_r>:
 800e2e0:	b538      	push	{r3, r4, r5, lr}
 800e2e2:	4d06      	ldr	r5, [pc, #24]	; (800e2fc <_isatty_r+0x1c>)
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	4604      	mov	r4, r0
 800e2e8:	4608      	mov	r0, r1
 800e2ea:	602b      	str	r3, [r5, #0]
 800e2ec:	f7f2 fb05 	bl	80008fa <_isatty>
 800e2f0:	1c43      	adds	r3, r0, #1
 800e2f2:	d102      	bne.n	800e2fa <_isatty_r+0x1a>
 800e2f4:	682b      	ldr	r3, [r5, #0]
 800e2f6:	b103      	cbz	r3, 800e2fa <_isatty_r+0x1a>
 800e2f8:	6023      	str	r3, [r4, #0]
 800e2fa:	bd38      	pop	{r3, r4, r5, pc}
 800e2fc:	200083a4 	.word	0x200083a4

0800e300 <_init>:
 800e300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e302:	bf00      	nop
 800e304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e306:	bc08      	pop	{r3}
 800e308:	469e      	mov	lr, r3
 800e30a:	4770      	bx	lr

0800e30c <_fini>:
 800e30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e30e:	bf00      	nop
 800e310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e312:	bc08      	pop	{r3}
 800e314:	469e      	mov	lr, r3
 800e316:	4770      	bx	lr
