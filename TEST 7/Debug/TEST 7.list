
TEST 7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004050  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080041dc  080041dc  000141dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004224  08004224  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004224  08004224  00014224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800422c  0800422c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800422c  0800422c  0001422c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004230  08004230  00014230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004234  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  2000000c  08004240  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08004240  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e6fa  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c6b  00000000  00000000  0002e736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c58  00000000  00000000  000303a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb0  00000000  00000000  00031000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a8c8  00000000  00000000  00031bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d6a3  00000000  00000000  0004c478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000af17d  00000000  00000000  00059b1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00108c98  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033c4  00000000  00000000  00108ce8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080041c4 	.word	0x080041c4

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080041c4 	.word	0x080041c4

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fac6 	bl	8000a64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f81c 	bl	8000514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f910 	bl	8000700 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e0:	f000 f8de 	bl	80006a0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80004e4:	f000 f866 	bl	80005b4 <MX_ADC1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc1);
 80004e8:	4808      	ldr	r0, [pc, #32]	; (800050c <main+0x3c>)
 80004ea:	f000 fecb 	bl	8001284 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 80004ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004f2:	4806      	ldr	r0, [pc, #24]	; (800050c <main+0x3c>)
 80004f4:	f000 ffb4 	bl	8001460 <HAL_ADC_PollForConversion>
	  x=HAL_ADC_GetValue(&hadc1);
 80004f8:	4804      	ldr	r0, [pc, #16]	; (800050c <main+0x3c>)
 80004fa:	f001 f889 	bl	8001610 <HAL_ADC_GetValue>
 80004fe:	4603      	mov	r3, r0
 8000500:	4a03      	ldr	r2, [pc, #12]	; (8000510 <main+0x40>)
 8000502:	6013      	str	r3, [r2, #0]
	  HAL_ADC_Stop(&hadc1);
 8000504:	4801      	ldr	r0, [pc, #4]	; (800050c <main+0x3c>)
 8000506:	f000 ff77 	bl	80013f8 <HAL_ADC_Stop>
	  HAL_ADC_Start(&hadc1);
 800050a:	e7ed      	b.n	80004e8 <main+0x18>
 800050c:	20000028 	.word	0x20000028
 8000510:	20000110 	.word	0x20000110

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b096      	sub	sp, #88	; 0x58
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	f107 0314 	add.w	r3, r7, #20
 800051e:	2244      	movs	r2, #68	; 0x44
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f003 fe46 	bl	80041b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000528:	463b      	mov	r3, r7
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	605a      	str	r2, [r3, #4]
 8000530:	609a      	str	r2, [r3, #8]
 8000532:	60da      	str	r2, [r3, #12]
 8000534:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000536:	f44f 7000 	mov.w	r0, #512	; 0x200
 800053a:	f002 f95d 	bl	80027f8 <HAL_PWREx_ControlVoltageScaling>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000544:	f000 f966 	bl	8000814 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000548:	2310      	movs	r3, #16
 800054a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800054c:	2301      	movs	r3, #1
 800054e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000554:	2360      	movs	r3, #96	; 0x60
 8000556:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000558:	2302      	movs	r3, #2
 800055a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800055c:	2301      	movs	r3, #1
 800055e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000560:	2301      	movs	r3, #1
 8000562:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000564:	2328      	movs	r3, #40	; 0x28
 8000566:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000568:	2302      	movs	r3, #2
 800056a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800056c:	2302      	movs	r3, #2
 800056e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000570:	f107 0314 	add.w	r3, r7, #20
 8000574:	4618      	mov	r0, r3
 8000576:	f002 f995 	bl	80028a4 <HAL_RCC_OscConfig>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000580:	f000 f948 	bl	8000814 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000584:	230f      	movs	r3, #15
 8000586:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000588:	2303      	movs	r3, #3
 800058a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000598:	463b      	mov	r3, r7
 800059a:	2104      	movs	r1, #4
 800059c:	4618      	mov	r0, r3
 800059e:	f002 fde3 	bl	8003168 <HAL_RCC_ClockConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005a8:	f000 f934 	bl	8000814 <Error_Handler>
  }
}
 80005ac:	bf00      	nop
 80005ae:	3758      	adds	r7, #88	; 0x58
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	; 0x28
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ba:	f107 031c 	add.w	r3, r7, #28
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]
 80005d4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005d6:	4b2f      	ldr	r3, [pc, #188]	; (8000694 <MX_ADC1_Init+0xe0>)
 80005d8:	4a2f      	ldr	r2, [pc, #188]	; (8000698 <MX_ADC1_Init+0xe4>)
 80005da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005dc:	4b2d      	ldr	r3, [pc, #180]	; (8000694 <MX_ADC1_Init+0xe0>)
 80005de:	2200      	movs	r2, #0
 80005e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005e2:	4b2c      	ldr	r3, [pc, #176]	; (8000694 <MX_ADC1_Init+0xe0>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005e8:	4b2a      	ldr	r3, [pc, #168]	; (8000694 <MX_ADC1_Init+0xe0>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005ee:	4b29      	ldr	r3, [pc, #164]	; (8000694 <MX_ADC1_Init+0xe0>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005f4:	4b27      	ldr	r3, [pc, #156]	; (8000694 <MX_ADC1_Init+0xe0>)
 80005f6:	2204      	movs	r2, #4
 80005f8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005fa:	4b26      	ldr	r3, [pc, #152]	; (8000694 <MX_ADC1_Init+0xe0>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000600:	4b24      	ldr	r3, [pc, #144]	; (8000694 <MX_ADC1_Init+0xe0>)
 8000602:	2201      	movs	r2, #1
 8000604:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000606:	4b23      	ldr	r3, [pc, #140]	; (8000694 <MX_ADC1_Init+0xe0>)
 8000608:	2201      	movs	r2, #1
 800060a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800060c:	4b21      	ldr	r3, [pc, #132]	; (8000694 <MX_ADC1_Init+0xe0>)
 800060e:	2200      	movs	r2, #0
 8000610:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000614:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <MX_ADC1_Init+0xe0>)
 8000616:	2200      	movs	r2, #0
 8000618:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800061a:	4b1e      	ldr	r3, [pc, #120]	; (8000694 <MX_ADC1_Init+0xe0>)
 800061c:	2200      	movs	r2, #0
 800061e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000620:	4b1c      	ldr	r3, [pc, #112]	; (8000694 <MX_ADC1_Init+0xe0>)
 8000622:	2200      	movs	r2, #0
 8000624:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000628:	4b1a      	ldr	r3, [pc, #104]	; (8000694 <MX_ADC1_Init+0xe0>)
 800062a:	2200      	movs	r2, #0
 800062c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800062e:	4b19      	ldr	r3, [pc, #100]	; (8000694 <MX_ADC1_Init+0xe0>)
 8000630:	2200      	movs	r2, #0
 8000632:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000636:	4817      	ldr	r0, [pc, #92]	; (8000694 <MX_ADC1_Init+0xe0>)
 8000638:	f000 fcd4 	bl	8000fe4 <HAL_ADC_Init>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000642:	f000 f8e7 	bl	8000814 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000646:	2300      	movs	r3, #0
 8000648:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800064a:	f107 031c 	add.w	r3, r7, #28
 800064e:	4619      	mov	r1, r3
 8000650:	4810      	ldr	r0, [pc, #64]	; (8000694 <MX_ADC1_Init+0xe0>)
 8000652:	f001 fdaf 	bl	80021b4 <HAL_ADCEx_MultiModeConfigChannel>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800065c:	f000 f8da 	bl	8000814 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000660:	4b0e      	ldr	r3, [pc, #56]	; (800069c <MX_ADC1_Init+0xe8>)
 8000662:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000664:	2306      	movs	r3, #6
 8000666:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000668:	2300      	movs	r3, #0
 800066a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800066c:	237f      	movs	r3, #127	; 0x7f
 800066e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000670:	2304      	movs	r3, #4
 8000672:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	4619      	mov	r1, r3
 800067c:	4805      	ldr	r0, [pc, #20]	; (8000694 <MX_ADC1_Init+0xe0>)
 800067e:	f000 ffd5 	bl	800162c <HAL_ADC_ConfigChannel>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000688:	f000 f8c4 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800068c:	bf00      	nop
 800068e:	3728      	adds	r7, #40	; 0x28
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000028 	.word	0x20000028
 8000698:	50040000 	.word	0x50040000
 800069c:	04300002 	.word	0x04300002

080006a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a4:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006a6:	4a15      	ldr	r2, [pc, #84]	; (80006fc <MX_USART2_UART_Init+0x5c>)
 80006a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006c6:	220c      	movs	r2, #12
 80006c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006de:	2200      	movs	r2, #0
 80006e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006e4:	f003 f8ea 	bl	80038bc <HAL_UART_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006ee:	f000 f891 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	2000008c 	.word	0x2000008c
 80006fc:	40004400 	.word	0x40004400

08000700 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08a      	sub	sp, #40	; 0x28
 8000704:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000716:	4b3c      	ldr	r3, [pc, #240]	; (8000808 <MX_GPIO_Init+0x108>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071a:	4a3b      	ldr	r2, [pc, #236]	; (8000808 <MX_GPIO_Init+0x108>)
 800071c:	f043 0304 	orr.w	r3, r3, #4
 8000720:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000722:	4b39      	ldr	r3, [pc, #228]	; (8000808 <MX_GPIO_Init+0x108>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000726:	f003 0304 	and.w	r3, r3, #4
 800072a:	613b      	str	r3, [r7, #16]
 800072c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072e:	4b36      	ldr	r3, [pc, #216]	; (8000808 <MX_GPIO_Init+0x108>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000732:	4a35      	ldr	r2, [pc, #212]	; (8000808 <MX_GPIO_Init+0x108>)
 8000734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000738:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073a:	4b33      	ldr	r3, [pc, #204]	; (8000808 <MX_GPIO_Init+0x108>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	4b30      	ldr	r3, [pc, #192]	; (8000808 <MX_GPIO_Init+0x108>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	4a2f      	ldr	r2, [pc, #188]	; (8000808 <MX_GPIO_Init+0x108>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000752:	4b2d      	ldr	r3, [pc, #180]	; (8000808 <MX_GPIO_Init+0x108>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075e:	4b2a      	ldr	r3, [pc, #168]	; (8000808 <MX_GPIO_Init+0x108>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	4a29      	ldr	r2, [pc, #164]	; (8000808 <MX_GPIO_Init+0x108>)
 8000764:	f043 0302 	orr.w	r3, r3, #2
 8000768:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076a:	4b27      	ldr	r3, [pc, #156]	; (8000808 <MX_GPIO_Init+0x108>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	f003 0302 	and.w	r3, r3, #2
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	21b0      	movs	r1, #176	; 0xb0
 800077a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800077e:	f002 f815 	bl	80027ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000788:	4820      	ldr	r0, [pc, #128]	; (800080c <MX_GPIO_Init+0x10c>)
 800078a:	f002 f80f 	bl	80027ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800078e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000794:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000798:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800079e:	f107 0314 	add.w	r3, r7, #20
 80007a2:	4619      	mov	r1, r3
 80007a4:	481a      	ldr	r0, [pc, #104]	; (8000810 <MX_GPIO_Init+0x110>)
 80007a6:	f001 fe8f 	bl	80024c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 80007aa:	23b0      	movs	r3, #176	; 0xb0
 80007ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ae:	2301      	movs	r3, #1
 80007b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b6:	2300      	movs	r3, #0
 80007b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	4619      	mov	r1, r3
 80007c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c4:	f001 fe80 	bl	80024c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 80007c8:	2340      	movs	r3, #64	; 0x40
 80007ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007d0:	2301      	movs	r3, #1
 80007d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	4619      	mov	r1, r3
 80007da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007de:	f001 fe73 	bl	80024c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 80007e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e8:	2301      	movs	r3, #1
 80007ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2300      	movs	r3, #0
 80007f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	4619      	mov	r1, r3
 80007fa:	4804      	ldr	r0, [pc, #16]	; (800080c <MX_GPIO_Init+0x10c>)
 80007fc:	f001 fe64 	bl	80024c8 <HAL_GPIO_Init>

}
 8000800:	bf00      	nop
 8000802:	3728      	adds	r7, #40	; 0x28
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40021000 	.word	0x40021000
 800080c:	48000400 	.word	0x48000400
 8000810:	48000800 	.word	0x48000800

08000814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000818:	b672      	cpsid	i
}
 800081a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800081c:	e7fe      	b.n	800081c <Error_Handler+0x8>
	...

08000820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000826:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <HAL_MspInit+0x44>)
 8000828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800082a:	4a0e      	ldr	r2, [pc, #56]	; (8000864 <HAL_MspInit+0x44>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	6613      	str	r3, [r2, #96]	; 0x60
 8000832:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <HAL_MspInit+0x44>)
 8000834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <HAL_MspInit+0x44>)
 8000840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000842:	4a08      	ldr	r2, [pc, #32]	; (8000864 <HAL_MspInit+0x44>)
 8000844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000848:	6593      	str	r3, [r2, #88]	; 0x58
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <HAL_MspInit+0x44>)
 800084c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800084e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000856:	bf00      	nop
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	40021000 	.word	0x40021000

08000868 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08a      	sub	sp, #40	; 0x28
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a15      	ldr	r2, [pc, #84]	; (80008dc <HAL_ADC_MspInit+0x74>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d123      	bne.n	80008d2 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800088a:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <HAL_ADC_MspInit+0x78>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	4a14      	ldr	r2, [pc, #80]	; (80008e0 <HAL_ADC_MspInit+0x78>)
 8000890:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000894:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000896:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <HAL_ADC_MspInit+0x78>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a2:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <HAL_ADC_MspInit+0x78>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a6:	4a0e      	ldr	r2, [pc, #56]	; (80008e0 <HAL_ADC_MspInit+0x78>)
 80008a8:	f043 0304 	orr.w	r3, r3, #4
 80008ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <HAL_ADC_MspInit+0x78>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b2:	f003 0304 	and.w	r3, r3, #4
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008ba:	2301      	movs	r3, #1
 80008bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80008be:	230b      	movs	r3, #11
 80008c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	4619      	mov	r1, r3
 80008cc:	4805      	ldr	r0, [pc, #20]	; (80008e4 <HAL_ADC_MspInit+0x7c>)
 80008ce:	f001 fdfb 	bl	80024c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008d2:	bf00      	nop
 80008d4:	3728      	adds	r7, #40	; 0x28
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	50040000 	.word	0x50040000
 80008e0:	40021000 	.word	0x40021000
 80008e4:	48000800 	.word	0x48000800

080008e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b096      	sub	sp, #88	; 0x58
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000900:	f107 0310 	add.w	r3, r7, #16
 8000904:	2234      	movs	r2, #52	; 0x34
 8000906:	2100      	movs	r1, #0
 8000908:	4618      	mov	r0, r3
 800090a:	f003 fc53 	bl	80041b4 <memset>
  if(huart->Instance==USART2)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a1f      	ldr	r2, [pc, #124]	; (8000990 <HAL_UART_MspInit+0xa8>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d136      	bne.n	8000986 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000918:	2302      	movs	r3, #2
 800091a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800091c:	2300      	movs	r3, #0
 800091e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000920:	f107 0310 	add.w	r3, r7, #16
 8000924:	4618      	mov	r0, r3
 8000926:	f002 fe43 	bl	80035b0 <HAL_RCCEx_PeriphCLKConfig>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000930:	f7ff ff70 	bl	8000814 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000934:	4b17      	ldr	r3, [pc, #92]	; (8000994 <HAL_UART_MspInit+0xac>)
 8000936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000938:	4a16      	ldr	r2, [pc, #88]	; (8000994 <HAL_UART_MspInit+0xac>)
 800093a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800093e:	6593      	str	r3, [r2, #88]	; 0x58
 8000940:	4b14      	ldr	r3, [pc, #80]	; (8000994 <HAL_UART_MspInit+0xac>)
 8000942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094c:	4b11      	ldr	r3, [pc, #68]	; (8000994 <HAL_UART_MspInit+0xac>)
 800094e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000950:	4a10      	ldr	r2, [pc, #64]	; (8000994 <HAL_UART_MspInit+0xac>)
 8000952:	f043 0301 	orr.w	r3, r3, #1
 8000956:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000958:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <HAL_UART_MspInit+0xac>)
 800095a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095c:	f003 0301 	and.w	r3, r3, #1
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000964:	230c      	movs	r3, #12
 8000966:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000968:	2302      	movs	r3, #2
 800096a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000970:	2303      	movs	r3, #3
 8000972:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000974:	2307      	movs	r3, #7
 8000976:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000978:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800097c:	4619      	mov	r1, r3
 800097e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000982:	f001 fda1 	bl	80024c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000986:	bf00      	nop
 8000988:	3758      	adds	r7, #88	; 0x58
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40004400 	.word	0x40004400
 8000994:	40021000 	.word	0x40021000

08000998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800099c:	e7fe      	b.n	800099c <NMI_Handler+0x4>

0800099e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <HardFault_Handler+0x4>

080009a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <MemManage_Handler+0x4>

080009aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ae:	e7fe      	b.n	80009ae <BusFault_Handler+0x4>

080009b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <UsageFault_Handler+0x4>

080009b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr

080009d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e4:	f000 f89a 	bl	8000b1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}

080009ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <SystemInit+0x20>)
 80009f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009f6:	4a05      	ldr	r2, [pc, #20]	; (8000a0c <SystemInit+0x20>)
 80009f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a48 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a14:	f7ff ffea 	bl	80009ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a18:	480c      	ldr	r0, [pc, #48]	; (8000a4c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a1a:	490d      	ldr	r1, [pc, #52]	; (8000a50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a1c:	4a0d      	ldr	r2, [pc, #52]	; (8000a54 <LoopForever+0xe>)
  movs r3, #0
 8000a1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a20:	e002      	b.n	8000a28 <LoopCopyDataInit>

08000a22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a26:	3304      	adds	r3, #4

08000a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a2c:	d3f9      	bcc.n	8000a22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a2e:	4a0a      	ldr	r2, [pc, #40]	; (8000a58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a30:	4c0a      	ldr	r4, [pc, #40]	; (8000a5c <LoopForever+0x16>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a34:	e001      	b.n	8000a3a <LoopFillZerobss>

08000a36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a38:	3204      	adds	r2, #4

08000a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a3c:	d3fb      	bcc.n	8000a36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a3e:	f003 fb95 	bl	800416c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a42:	f7ff fd45 	bl	80004d0 <main>

08000a46 <LoopForever>:

LoopForever:
    b LoopForever
 8000a46:	e7fe      	b.n	8000a46 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a48:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000a4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a50:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a54:	08004234 	.word	0x08004234
  ldr r2, =_sbss
 8000a58:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a5c:	20000118 	.word	0x20000118

08000a60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a60:	e7fe      	b.n	8000a60 <ADC1_2_IRQHandler>
	...

08000a64 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <HAL_Init+0x3c>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a0b      	ldr	r2, [pc, #44]	; (8000aa0 <HAL_Init+0x3c>)
 8000a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a78:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a7a:	2003      	movs	r0, #3
 8000a7c:	f001 fcf0 	bl	8002460 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a80:	2000      	movs	r0, #0
 8000a82:	f000 f80f 	bl	8000aa4 <HAL_InitTick>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d002      	beq.n	8000a92 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	71fb      	strb	r3, [r7, #7]
 8000a90:	e001      	b.n	8000a96 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a92:	f7ff fec5 	bl	8000820 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a96:	79fb      	ldrb	r3, [r7, #7]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40022000 	.word	0x40022000

08000aa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000aac:	2300      	movs	r3, #0
 8000aae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ab0:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <HAL_InitTick+0x6c>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d023      	beq.n	8000b00 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ab8:	4b16      	ldr	r3, [pc, #88]	; (8000b14 <HAL_InitTick+0x70>)
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <HAL_InitTick+0x6c>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f001 fced 	bl	80024ae <HAL_SYSTICK_Config>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d10f      	bne.n	8000afa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2b0f      	cmp	r3, #15
 8000ade:	d809      	bhi.n	8000af4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	6879      	ldr	r1, [r7, #4]
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	f001 fcc5 	bl	8002476 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aec:	4a0a      	ldr	r2, [pc, #40]	; (8000b18 <HAL_InitTick+0x74>)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6013      	str	r3, [r2, #0]
 8000af2:	e007      	b.n	8000b04 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000af4:	2301      	movs	r3, #1
 8000af6:	73fb      	strb	r3, [r7, #15]
 8000af8:	e004      	b.n	8000b04 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	73fb      	strb	r3, [r7, #15]
 8000afe:	e001      	b.n	8000b04 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b00:	2301      	movs	r3, #1
 8000b02:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3710      	adds	r7, #16
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000008 	.word	0x20000008
 8000b14:	20000000 	.word	0x20000000
 8000b18:	20000004 	.word	0x20000004

08000b1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_IncTick+0x20>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	461a      	mov	r2, r3
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_IncTick+0x24>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <HAL_IncTick+0x24>)
 8000b2e:	6013      	str	r3, [r2, #0]
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	20000008 	.word	0x20000008
 8000b40:	20000114 	.word	0x20000114

08000b44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return uwTick;
 8000b48:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <HAL_GetTick+0x14>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	20000114 	.word	0x20000114

08000b5c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	689b      	ldr	r3, [r3, #8]
 8000b6a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	431a      	orrs	r2, r3
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	609a      	str	r2, [r3, #8]
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000b82:	b480      	push	{r7}
 8000b84:	b083      	sub	sp, #12
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
 8000b8a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	431a      	orrs	r2, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	689b      	ldr	r3, [r3, #8]
 8000bb4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b087      	sub	sp, #28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
 8000bd0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	3360      	adds	r3, #96	; 0x60
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	4413      	add	r3, r2
 8000bde:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <LL_ADC_SetOffset+0x44>)
 8000be6:	4013      	ands	r3, r2
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000bee:	683a      	ldr	r2, [r7, #0]
 8000bf0:	430a      	orrs	r2, r1
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000bfc:	bf00      	nop
 8000bfe:	371c      	adds	r7, #28
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	03fff000 	.word	0x03fff000

08000c0c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	3360      	adds	r3, #96	; 0x60
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	4413      	add	r3, r2
 8000c22:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3714      	adds	r7, #20
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b087      	sub	sp, #28
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	3360      	adds	r3, #96	; 0x60
 8000c48:	461a      	mov	r2, r3
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	4413      	add	r3, r2
 8000c50:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	431a      	orrs	r2, r3
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000c62:	bf00      	nop
 8000c64:	371c      	adds	r7, #28
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	b083      	sub	sp, #12
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
 8000c76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	695b      	ldr	r3, [r3, #20]
 8000c7c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	431a      	orrs	r2, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	615a      	str	r2, [r3, #20]
}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d101      	bne.n	8000cac <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000ca8:	2301      	movs	r3, #1
 8000caa:	e000      	b.n	8000cae <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	b087      	sub	sp, #28
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	60f8      	str	r0, [r7, #12]
 8000cc2:	60b9      	str	r1, [r7, #8]
 8000cc4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	3330      	adds	r3, #48	; 0x30
 8000cca:	461a      	mov	r2, r3
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	0a1b      	lsrs	r3, r3, #8
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	f003 030c 	and.w	r3, r3, #12
 8000cd6:	4413      	add	r3, r2
 8000cd8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	f003 031f 	and.w	r3, r3, #31
 8000ce4:	211f      	movs	r1, #31
 8000ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cea:	43db      	mvns	r3, r3
 8000cec:	401a      	ands	r2, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	0e9b      	lsrs	r3, r3, #26
 8000cf2:	f003 011f 	and.w	r1, r3, #31
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	f003 031f 	and.w	r3, r3, #31
 8000cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000d00:	431a      	orrs	r2, r3
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000d06:	bf00      	nop
 8000d08:	371c      	adds	r7, #28
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000d12:	b480      	push	{r7}
 8000d14:	b087      	sub	sp, #28
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	60f8      	str	r0, [r7, #12]
 8000d1a:	60b9      	str	r1, [r7, #8]
 8000d1c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	3314      	adds	r3, #20
 8000d22:	461a      	mov	r2, r3
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	0e5b      	lsrs	r3, r3, #25
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	f003 0304 	and.w	r3, r3, #4
 8000d2e:	4413      	add	r3, r2
 8000d30:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	0d1b      	lsrs	r3, r3, #20
 8000d3a:	f003 031f 	and.w	r3, r3, #31
 8000d3e:	2107      	movs	r1, #7
 8000d40:	fa01 f303 	lsl.w	r3, r1, r3
 8000d44:	43db      	mvns	r3, r3
 8000d46:	401a      	ands	r2, r3
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	0d1b      	lsrs	r3, r3, #20
 8000d4c:	f003 031f 	and.w	r3, r3, #31
 8000d50:	6879      	ldr	r1, [r7, #4]
 8000d52:	fa01 f303 	lsl.w	r3, r1, r3
 8000d56:	431a      	orrs	r2, r3
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000d5c:	bf00      	nop
 8000d5e:	371c      	adds	r7, #28
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d80:	43db      	mvns	r3, r3
 8000d82:	401a      	ands	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f003 0318 	and.w	r3, r3, #24
 8000d8a:	4908      	ldr	r1, [pc, #32]	; (8000dac <LL_ADC_SetChannelSingleDiff+0x44>)
 8000d8c:	40d9      	lsrs	r1, r3
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	400b      	ands	r3, r1
 8000d92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d96:	431a      	orrs	r2, r3
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000d9e:	bf00      	nop
 8000da0:	3714      	adds	r7, #20
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	0007ffff 	.word	0x0007ffff

08000db0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	f003 031f 	and.w	r3, r3, #31
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000df8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	6093      	str	r3, [r2, #8]
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000e1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000e20:	d101      	bne.n	8000e26 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000e22:	2301      	movs	r3, #1
 8000e24:	e000      	b.n	8000e28 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000e26:	2300      	movs	r3, #0
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000e44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e48:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000e70:	d101      	bne.n	8000e76 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000e72:	2301      	movs	r3, #1
 8000e74:	e000      	b.n	8000e78 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000e76:	2300      	movs	r3, #0
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000e94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e98:	f043 0201 	orr.w	r2, r3, #1
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000ebc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ec0:	f043 0202 	orr.w	r2, r3, #2
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d101      	bne.n	8000eec <LL_ADC_IsEnabled+0x18>
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e000      	b.n	8000eee <LL_ADC_IsEnabled+0x1a>
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8000efa:	b480      	push	{r7}
 8000efc:	b083      	sub	sp, #12
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	f003 0302 	and.w	r3, r3, #2
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d101      	bne.n	8000f12 <LL_ADC_IsDisableOngoing+0x18>
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e000      	b.n	8000f14 <LL_ADC_IsDisableOngoing+0x1a>
 8000f12:	2300      	movs	r3, #0
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000f30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f34:	f043 0204 	orr.w	r2, r3, #4
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000f58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f5c:	f043 0210 	orr.w	r2, r3, #16
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	f003 0304 	and.w	r3, r3, #4
 8000f80:	2b04      	cmp	r3, #4
 8000f82:	d101      	bne.n	8000f88 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000f84:	2301      	movs	r3, #1
 8000f86:	e000      	b.n	8000f8a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8000f96:	b480      	push	{r7}
 8000f98:	b083      	sub	sp, #12
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000fa6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000faa:	f043 0220 	orr.w	r2, r3, #32
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	b083      	sub	sp, #12
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	f003 0308 	and.w	r3, r3, #8
 8000fce:	2b08      	cmp	r3, #8
 8000fd0:	d101      	bne.n	8000fd6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e000      	b.n	8000fd8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000fd6:	2300      	movs	r3, #0
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000fe4:	b590      	push	{r4, r7, lr}
 8000fe6:	b089      	sub	sp, #36	; 0x24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fec:	2300      	movs	r3, #0
 8000fee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d101      	bne.n	8000ffe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e131      	b.n	8001262 <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	691b      	ldr	r3, [r3, #16]
 8001002:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001008:	2b00      	cmp	r3, #0
 800100a:	d109      	bne.n	8001020 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff fc2b 	bl	8000868 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2200      	movs	r2, #0
 8001016:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff fef1 	bl	8000e0c <LL_ADC_IsDeepPowerDownEnabled>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d004      	beq.n	800103a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fed7 	bl	8000de8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff ff0c 	bl	8000e5c <LL_ADC_IsInternalRegulatorEnabled>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d115      	bne.n	8001076 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fef0 	bl	8000e34 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001054:	4b85      	ldr	r3, [pc, #532]	; (800126c <HAL_ADC_Init+0x288>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	099b      	lsrs	r3, r3, #6
 800105a:	4a85      	ldr	r2, [pc, #532]	; (8001270 <HAL_ADC_Init+0x28c>)
 800105c:	fba2 2303 	umull	r2, r3, r2, r3
 8001060:	099b      	lsrs	r3, r3, #6
 8001062:	3301      	adds	r3, #1
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001068:	e002      	b.n	8001070 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	3b01      	subs	r3, #1
 800106e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d1f9      	bne.n	800106a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff feee 	bl	8000e5c <LL_ADC_IsInternalRegulatorEnabled>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d10d      	bne.n	80010a2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800108a:	f043 0210 	orr.w	r2, r3, #16
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001096:	f043 0201 	orr.w	r2, r3, #1
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff ff62 	bl	8000f70 <LL_ADC_REG_IsConversionOngoing>
 80010ac:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010b2:	f003 0310 	and.w	r3, r3, #16
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f040 80ca 	bne.w	8001250 <HAL_ADC_Init+0x26c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	f040 80c6 	bne.w	8001250 <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010c8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80010cc:	f043 0202 	orr.w	r2, r3, #2
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fefb 	bl	8000ed4 <LL_ADC_IsEnabled>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d110      	bne.n	8001106 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80010e4:	4863      	ldr	r0, [pc, #396]	; (8001274 <HAL_ADC_Init+0x290>)
 80010e6:	f7ff fef5 	bl	8000ed4 <LL_ADC_IsEnabled>
 80010ea:	4604      	mov	r4, r0
 80010ec:	4862      	ldr	r0, [pc, #392]	; (8001278 <HAL_ADC_Init+0x294>)
 80010ee:	f7ff fef1 	bl	8000ed4 <LL_ADC_IsEnabled>
 80010f2:	4603      	mov	r3, r0
 80010f4:	4323      	orrs	r3, r4
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d105      	bne.n	8001106 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	4619      	mov	r1, r3
 8001100:	485e      	ldr	r0, [pc, #376]	; (800127c <HAL_ADC_Init+0x298>)
 8001102:	f7ff fd2b 	bl	8000b5c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	7e5b      	ldrb	r3, [r3, #25]
 800110a:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001110:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001116:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800111c:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001124:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d106      	bne.n	8001142 <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001138:	3b01      	subs	r3, #1
 800113a:	045b      	lsls	r3, r3, #17
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001146:	2b00      	cmp	r3, #0
 8001148:	d009      	beq.n	800115e <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800114e:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001156:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	68da      	ldr	r2, [r3, #12]
 8001164:	4b46      	ldr	r3, [pc, #280]	; (8001280 <HAL_ADC_Init+0x29c>)
 8001166:	4013      	ands	r3, r2
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	6812      	ldr	r2, [r2, #0]
 800116c:	69b9      	ldr	r1, [r7, #24]
 800116e:	430b      	orrs	r3, r1
 8001170:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff fefa 	bl	8000f70 <LL_ADC_REG_IsConversionOngoing>
 800117c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff ff1b 	bl	8000fbe <LL_ADC_INJ_IsConversionOngoing>
 8001188:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d13d      	bne.n	800120c <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d13a      	bne.n	800120c <HAL_ADC_Init+0x228>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800119a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80011a2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80011a4:	4313      	orrs	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80011b2:	f023 0302 	bic.w	r3, r3, #2
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	6812      	ldr	r2, [r2, #0]
 80011ba:	69b9      	ldr	r1, [r7, #24]
 80011bc:	430b      	orrs	r3, r1
 80011be:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d118      	bne.n	80011fc <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80011d4:	f023 0304 	bic.w	r3, r3, #4
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80011e0:	4311      	orrs	r1, r2
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80011e6:	4311      	orrs	r1, r2
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80011ec:	430a      	orrs	r2, r1
 80011ee:	431a      	orrs	r2, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f042 0201 	orr.w	r2, r2, #1
 80011f8:	611a      	str	r2, [r3, #16]
 80011fa:	e007      	b.n	800120c <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	691a      	ldr	r2, [r3, #16]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f022 0201 	bic.w	r2, r2, #1
 800120a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	691b      	ldr	r3, [r3, #16]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d10c      	bne.n	800122e <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f023 010f 	bic.w	r1, r3, #15
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	1e5a      	subs	r2, r3, #1
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	430a      	orrs	r2, r1
 800122a:	631a      	str	r2, [r3, #48]	; 0x30
 800122c:	e007      	b.n	800123e <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f022 020f 	bic.w	r2, r2, #15
 800123c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001242:	f023 0303 	bic.w	r3, r3, #3
 8001246:	f043 0201 	orr.w	r2, r3, #1
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	655a      	str	r2, [r3, #84]	; 0x54
 800124e:	e007      	b.n	8001260 <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001254:	f043 0210 	orr.w	r2, r3, #16
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001260:	7ffb      	ldrb	r3, [r7, #31]
}
 8001262:	4618      	mov	r0, r3
 8001264:	3724      	adds	r7, #36	; 0x24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd90      	pop	{r4, r7, pc}
 800126a:	bf00      	nop
 800126c:	20000000 	.word	0x20000000
 8001270:	053e2d63 	.word	0x053e2d63
 8001274:	50040000 	.word	0x50040000
 8001278:	50040100 	.word	0x50040100
 800127c:	50040300 	.word	0x50040300
 8001280:	fff0c007 	.word	0xfff0c007

08001284 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800128c:	4857      	ldr	r0, [pc, #348]	; (80013ec <HAL_ADC_Start+0x168>)
 800128e:	f7ff fd8f 	bl	8000db0 <LL_ADC_GetMultimode>
 8001292:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fe69 	bl	8000f70 <LL_ADC_REG_IsConversionOngoing>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	f040 809c 	bne.w	80013de <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d101      	bne.n	80012b4 <HAL_ADC_Start+0x30>
 80012b0:	2302      	movs	r3, #2
 80012b2:	e097      	b.n	80013e4 <HAL_ADC_Start+0x160>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2201      	movs	r2, #1
 80012b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f000 fe6d 	bl	8001f9c <ADC_Enable>
 80012c2:	4603      	mov	r3, r0
 80012c4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80012c6:	7dfb      	ldrb	r3, [r7, #23]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f040 8083 	bne.w	80013d4 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012d2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80012d6:	f023 0301 	bic.w	r3, r3, #1
 80012da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a42      	ldr	r2, [pc, #264]	; (80013f0 <HAL_ADC_Start+0x16c>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d002      	beq.n	80012f2 <HAL_ADC_Start+0x6e>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	e000      	b.n	80012f4 <HAL_ADC_Start+0x70>
 80012f2:	4b40      	ldr	r3, [pc, #256]	; (80013f4 <HAL_ADC_Start+0x170>)
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	6812      	ldr	r2, [r2, #0]
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d002      	beq.n	8001302 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d105      	bne.n	800130e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001306:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001312:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800131a:	d106      	bne.n	800132a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001320:	f023 0206 	bic.w	r2, r3, #6
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	659a      	str	r2, [r3, #88]	; 0x58
 8001328:	e002      	b.n	8001330 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	221c      	movs	r2, #28
 8001336:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a2a      	ldr	r2, [pc, #168]	; (80013f0 <HAL_ADC_Start+0x16c>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d002      	beq.n	8001350 <HAL_ADC_Start+0xcc>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	e000      	b.n	8001352 <HAL_ADC_Start+0xce>
 8001350:	4b28      	ldr	r3, [pc, #160]	; (80013f4 <HAL_ADC_Start+0x170>)
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	6812      	ldr	r2, [r2, #0]
 8001356:	4293      	cmp	r3, r2
 8001358:	d008      	beq.n	800136c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d005      	beq.n	800136c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	2b05      	cmp	r3, #5
 8001364:	d002      	beq.n	800136c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	2b09      	cmp	r3, #9
 800136a:	d114      	bne.n	8001396 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d007      	beq.n	800138a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800137e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001382:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff fdc6 	bl	8000f20 <LL_ADC_REG_StartConversion>
 8001394:	e025      	b.n	80013e2 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800139a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a12      	ldr	r2, [pc, #72]	; (80013f0 <HAL_ADC_Start+0x16c>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d002      	beq.n	80013b2 <HAL_ADC_Start+0x12e>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	e000      	b.n	80013b4 <HAL_ADC_Start+0x130>
 80013b2:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <HAL_ADC_Start+0x170>)
 80013b4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d00f      	beq.n	80013e2 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	655a      	str	r2, [r3, #84]	; 0x54
 80013d2:	e006      	b.n	80013e2 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2200      	movs	r2, #0
 80013d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80013dc:	e001      	b.n	80013e2 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80013de:	2302      	movs	r3, #2
 80013e0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80013e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3718      	adds	r7, #24
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	50040300 	.word	0x50040300
 80013f0:	50040100 	.word	0x50040100
 80013f4:	50040000 	.word	0x50040000

080013f8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001406:	2b01      	cmp	r3, #1
 8001408:	d101      	bne.n	800140e <HAL_ADC_Stop+0x16>
 800140a:	2302      	movs	r3, #2
 800140c:	e023      	b.n	8001456 <HAL_ADC_Stop+0x5e>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2201      	movs	r2, #1
 8001412:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001416:	2103      	movs	r1, #3
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 fd03 	bl	8001e24 <ADC_ConversionStop>
 800141e:	4603      	mov	r3, r0
 8001420:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001422:	7bfb      	ldrb	r3, [r7, #15]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d111      	bne.n	800144c <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f000 fe3d 	bl	80020a8 <ADC_Disable>
 800142e:	4603      	mov	r3, r0
 8001430:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001432:	7bfb      	ldrb	r3, [r7, #15]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d109      	bne.n	800144c <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800143c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001440:	f023 0301 	bic.w	r3, r3, #1
 8001444:	f043 0201 	orr.w	r2, r3, #1
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001454:	7bfb      	ldrb	r3, [r7, #15]
}
 8001456:	4618      	mov	r0, r3
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
	...

08001460 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b088      	sub	sp, #32
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800146a:	4866      	ldr	r0, [pc, #408]	; (8001604 <HAL_ADC_PollForConversion+0x1a4>)
 800146c:	f7ff fca0 	bl	8000db0 <LL_ADC_GetMultimode>
 8001470:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	2b08      	cmp	r3, #8
 8001478:	d102      	bne.n	8001480 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800147a:	2308      	movs	r3, #8
 800147c:	61fb      	str	r3, [r7, #28]
 800147e:	e02a      	b.n	80014d6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d005      	beq.n	8001492 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	2b05      	cmp	r3, #5
 800148a:	d002      	beq.n	8001492 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	2b09      	cmp	r3, #9
 8001490:	d111      	bne.n	80014b6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	2b00      	cmp	r3, #0
 800149e:	d007      	beq.n	80014b0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014a4:	f043 0220 	orr.w	r2, r3, #32
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e0a4      	b.n	80015fa <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80014b0:	2304      	movs	r3, #4
 80014b2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80014b4:	e00f      	b.n	80014d6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80014b6:	4853      	ldr	r0, [pc, #332]	; (8001604 <HAL_ADC_PollForConversion+0x1a4>)
 80014b8:	f7ff fc88 	bl	8000dcc <LL_ADC_GetMultiDMATransfer>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d007      	beq.n	80014d2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014c6:	f043 0220 	orr.w	r2, r3, #32
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e093      	b.n	80015fa <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80014d2:	2304      	movs	r3, #4
 80014d4:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80014d6:	f7ff fb35 	bl	8000b44 <HAL_GetTick>
 80014da:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80014dc:	e021      	b.n	8001522 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014e4:	d01d      	beq.n	8001522 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80014e6:	f7ff fb2d 	bl	8000b44 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	683a      	ldr	r2, [r7, #0]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d302      	bcc.n	80014fc <HAL_ADC_PollForConversion+0x9c>
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d112      	bne.n	8001522 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	4013      	ands	r3, r2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d10b      	bne.n	8001522 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800150e:	f043 0204 	orr.w	r2, r3, #4
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e06b      	b.n	80015fa <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	4013      	ands	r3, r2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d0d6      	beq.n	80014de <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001534:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff fba7 	bl	8000c94 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d01c      	beq.n	8001586 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	7e5b      	ldrb	r3, [r3, #25]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d118      	bne.n	8001586 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0308 	and.w	r3, r3, #8
 800155e:	2b08      	cmp	r3, #8
 8001560:	d111      	bne.n	8001586 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001566:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001572:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d105      	bne.n	8001586 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800157e:	f043 0201 	orr.w	r2, r3, #1
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a1f      	ldr	r2, [pc, #124]	; (8001608 <HAL_ADC_PollForConversion+0x1a8>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d002      	beq.n	8001596 <HAL_ADC_PollForConversion+0x136>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	e000      	b.n	8001598 <HAL_ADC_PollForConversion+0x138>
 8001596:	4b1d      	ldr	r3, [pc, #116]	; (800160c <HAL_ADC_PollForConversion+0x1ac>)
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	6812      	ldr	r2, [r2, #0]
 800159c:	4293      	cmp	r3, r2
 800159e:	d008      	beq.n	80015b2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d005      	beq.n	80015b2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	2b05      	cmp	r3, #5
 80015aa:	d002      	beq.n	80015b2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	2b09      	cmp	r3, #9
 80015b0:	d104      	bne.n	80015bc <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	61bb      	str	r3, [r7, #24]
 80015ba:	e00c      	b.n	80015d6 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a11      	ldr	r2, [pc, #68]	; (8001608 <HAL_ADC_PollForConversion+0x1a8>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d002      	beq.n	80015cc <HAL_ADC_PollForConversion+0x16c>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	e000      	b.n	80015ce <HAL_ADC_PollForConversion+0x16e>
 80015cc:	4b0f      	ldr	r3, [pc, #60]	; (800160c <HAL_ADC_PollForConversion+0x1ac>)
 80015ce:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	2b08      	cmp	r3, #8
 80015da:	d104      	bne.n	80015e6 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2208      	movs	r2, #8
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	e008      	b.n	80015f8 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d103      	bne.n	80015f8 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	220c      	movs	r2, #12
 80015f6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3720      	adds	r7, #32
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	50040300 	.word	0x50040300
 8001608:	50040100 	.word	0x50040100
 800160c:	50040000 	.word	0x50040000

08001610 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800161e:	4618      	mov	r0, r3
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
	...

0800162c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b0b6      	sub	sp, #216	; 0xd8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001636:	2300      	movs	r3, #0
 8001638:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800163c:	2300      	movs	r3, #0
 800163e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001646:	2b01      	cmp	r3, #1
 8001648:	d101      	bne.n	800164e <HAL_ADC_ConfigChannel+0x22>
 800164a:	2302      	movs	r3, #2
 800164c:	e3d5      	b.n	8001dfa <HAL_ADC_ConfigChannel+0x7ce>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2201      	movs	r2, #1
 8001652:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff fc88 	bl	8000f70 <LL_ADC_REG_IsConversionOngoing>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	f040 83ba 	bne.w	8001ddc <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	2b05      	cmp	r3, #5
 800166e:	d824      	bhi.n	80016ba <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	3b02      	subs	r3, #2
 8001676:	2b03      	cmp	r3, #3
 8001678:	d81b      	bhi.n	80016b2 <HAL_ADC_ConfigChannel+0x86>
 800167a:	a201      	add	r2, pc, #4	; (adr r2, 8001680 <HAL_ADC_ConfigChannel+0x54>)
 800167c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001680:	08001691 	.word	0x08001691
 8001684:	08001699 	.word	0x08001699
 8001688:	080016a1 	.word	0x080016a1
 800168c:	080016a9 	.word	0x080016a9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	220c      	movs	r2, #12
 8001694:	605a      	str	r2, [r3, #4]
          break;
 8001696:	e011      	b.n	80016bc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	2212      	movs	r2, #18
 800169c:	605a      	str	r2, [r3, #4]
          break;
 800169e:	e00d      	b.n	80016bc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	2218      	movs	r2, #24
 80016a4:	605a      	str	r2, [r3, #4]
          break;
 80016a6:	e009      	b.n	80016bc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016ae:	605a      	str	r2, [r3, #4]
          break;
 80016b0:	e004      	b.n	80016bc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	2206      	movs	r2, #6
 80016b6:	605a      	str	r2, [r3, #4]
          break;
 80016b8:	e000      	b.n	80016bc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80016ba:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6818      	ldr	r0, [r3, #0]
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	6859      	ldr	r1, [r3, #4]
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	461a      	mov	r2, r3
 80016ca:	f7ff faf6 	bl	8000cba <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff fc4c 	bl	8000f70 <LL_ADC_REG_IsConversionOngoing>
 80016d8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff fc6c 	bl	8000fbe <LL_ADC_INJ_IsConversionOngoing>
 80016e6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f040 81c1 	bne.w	8001a76 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f040 81bc 	bne.w	8001a76 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001706:	d10f      	bne.n	8001728 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6818      	ldr	r0, [r3, #0]
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2200      	movs	r2, #0
 8001712:	4619      	mov	r1, r3
 8001714:	f7ff fafd 	bl	8000d12 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff faa4 	bl	8000c6e <LL_ADC_SetSamplingTimeCommonConfig>
 8001726:	e00e      	b.n	8001746 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6818      	ldr	r0, [r3, #0]
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	6819      	ldr	r1, [r3, #0]
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	461a      	mov	r2, r3
 8001736:	f7ff faec 	bl	8000d12 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2100      	movs	r1, #0
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff fa94 	bl	8000c6e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	695a      	ldr	r2, [r3, #20]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	08db      	lsrs	r3, r3, #3
 8001752:	f003 0303 	and.w	r3, r3, #3
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	2b04      	cmp	r3, #4
 8001766:	d00a      	beq.n	800177e <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6818      	ldr	r0, [r3, #0]
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	6919      	ldr	r1, [r3, #16]
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001778:	f7ff fa24 	bl	8000bc4 <LL_ADC_SetOffset>
 800177c:	e17b      	b.n	8001a76 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2100      	movs	r1, #0
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff fa41 	bl	8000c0c <LL_ADC_GetOffsetChannel>
 800178a:	4603      	mov	r3, r0
 800178c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001790:	2b00      	cmp	r3, #0
 8001792:	d10a      	bne.n	80017aa <HAL_ADC_ConfigChannel+0x17e>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2100      	movs	r1, #0
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff fa36 	bl	8000c0c <LL_ADC_GetOffsetChannel>
 80017a0:	4603      	mov	r3, r0
 80017a2:	0e9b      	lsrs	r3, r3, #26
 80017a4:	f003 021f 	and.w	r2, r3, #31
 80017a8:	e01e      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x1bc>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2100      	movs	r1, #0
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff fa2b 	bl	8000c0c <LL_ADC_GetOffsetChannel>
 80017b6:	4603      	mov	r3, r0
 80017b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80017c0:	fa93 f3a3 	rbit	r3, r3
 80017c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80017c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80017cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80017d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d101      	bne.n	80017dc <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80017d8:	2320      	movs	r3, #32
 80017da:	e004      	b.n	80017e6 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80017dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80017e0:	fab3 f383 	clz	r3, r3
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d105      	bne.n	8001800 <HAL_ADC_ConfigChannel+0x1d4>
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	0e9b      	lsrs	r3, r3, #26
 80017fa:	f003 031f 	and.w	r3, r3, #31
 80017fe:	e018      	b.n	8001832 <HAL_ADC_ConfigChannel+0x206>
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001808:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800180c:	fa93 f3a3 	rbit	r3, r3
 8001810:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001814:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001818:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800181c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001820:	2b00      	cmp	r3, #0
 8001822:	d101      	bne.n	8001828 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001824:	2320      	movs	r3, #32
 8001826:	e004      	b.n	8001832 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001828:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800182c:	fab3 f383 	clz	r3, r3
 8001830:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001832:	429a      	cmp	r2, r3
 8001834:	d106      	bne.n	8001844 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2200      	movs	r2, #0
 800183c:	2100      	movs	r1, #0
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff f9fa 	bl	8000c38 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2101      	movs	r1, #1
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff f9de 	bl	8000c0c <LL_ADC_GetOffsetChannel>
 8001850:	4603      	mov	r3, r0
 8001852:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001856:	2b00      	cmp	r3, #0
 8001858:	d10a      	bne.n	8001870 <HAL_ADC_ConfigChannel+0x244>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2101      	movs	r1, #1
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff f9d3 	bl	8000c0c <LL_ADC_GetOffsetChannel>
 8001866:	4603      	mov	r3, r0
 8001868:	0e9b      	lsrs	r3, r3, #26
 800186a:	f003 021f 	and.w	r2, r3, #31
 800186e:	e01e      	b.n	80018ae <HAL_ADC_ConfigChannel+0x282>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2101      	movs	r1, #1
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff f9c8 	bl	8000c0c <LL_ADC_GetOffsetChannel>
 800187c:	4603      	mov	r3, r0
 800187e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001882:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001886:	fa93 f3a3 	rbit	r3, r3
 800188a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800188e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001892:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001896:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800189e:	2320      	movs	r3, #32
 80018a0:	e004      	b.n	80018ac <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80018a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018a6:	fab3 f383 	clz	r3, r3
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d105      	bne.n	80018c6 <HAL_ADC_ConfigChannel+0x29a>
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	0e9b      	lsrs	r3, r3, #26
 80018c0:	f003 031f 	and.w	r3, r3, #31
 80018c4:	e018      	b.n	80018f8 <HAL_ADC_ConfigChannel+0x2cc>
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80018d2:	fa93 f3a3 	rbit	r3, r3
 80018d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80018da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80018de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80018e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80018ea:	2320      	movs	r3, #32
 80018ec:	e004      	b.n	80018f8 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80018ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80018f2:	fab3 f383 	clz	r3, r3
 80018f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d106      	bne.n	800190a <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2200      	movs	r2, #0
 8001902:	2101      	movs	r1, #1
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff f997 	bl	8000c38 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2102      	movs	r1, #2
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff f97b 	bl	8000c0c <LL_ADC_GetOffsetChannel>
 8001916:	4603      	mov	r3, r0
 8001918:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800191c:	2b00      	cmp	r3, #0
 800191e:	d10a      	bne.n	8001936 <HAL_ADC_ConfigChannel+0x30a>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2102      	movs	r1, #2
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff f970 	bl	8000c0c <LL_ADC_GetOffsetChannel>
 800192c:	4603      	mov	r3, r0
 800192e:	0e9b      	lsrs	r3, r3, #26
 8001930:	f003 021f 	and.w	r2, r3, #31
 8001934:	e01e      	b.n	8001974 <HAL_ADC_ConfigChannel+0x348>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2102      	movs	r1, #2
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff f965 	bl	8000c0c <LL_ADC_GetOffsetChannel>
 8001942:	4603      	mov	r3, r0
 8001944:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001948:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800194c:	fa93 f3a3 	rbit	r3, r3
 8001950:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001954:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001958:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800195c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001964:	2320      	movs	r3, #32
 8001966:	e004      	b.n	8001972 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001968:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800196c:	fab3 f383 	clz	r3, r3
 8001970:	b2db      	uxtb	r3, r3
 8001972:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800197c:	2b00      	cmp	r3, #0
 800197e:	d105      	bne.n	800198c <HAL_ADC_ConfigChannel+0x360>
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	0e9b      	lsrs	r3, r3, #26
 8001986:	f003 031f 	and.w	r3, r3, #31
 800198a:	e016      	b.n	80019ba <HAL_ADC_ConfigChannel+0x38e>
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001994:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001998:	fa93 f3a3 	rbit	r3, r3
 800199c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800199e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80019a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80019a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d101      	bne.n	80019b0 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80019ac:	2320      	movs	r3, #32
 80019ae:	e004      	b.n	80019ba <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80019b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80019b4:	fab3 f383 	clz	r3, r3
 80019b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d106      	bne.n	80019cc <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2200      	movs	r2, #0
 80019c4:	2102      	movs	r1, #2
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff f936 	bl	8000c38 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2103      	movs	r1, #3
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff f91a 	bl	8000c0c <LL_ADC_GetOffsetChannel>
 80019d8:	4603      	mov	r3, r0
 80019da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d10a      	bne.n	80019f8 <HAL_ADC_ConfigChannel+0x3cc>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2103      	movs	r1, #3
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff f90f 	bl	8000c0c <LL_ADC_GetOffsetChannel>
 80019ee:	4603      	mov	r3, r0
 80019f0:	0e9b      	lsrs	r3, r3, #26
 80019f2:	f003 021f 	and.w	r2, r3, #31
 80019f6:	e017      	b.n	8001a28 <HAL_ADC_ConfigChannel+0x3fc>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2103      	movs	r1, #3
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff f904 	bl	8000c0c <LL_ADC_GetOffsetChannel>
 8001a04:	4603      	mov	r3, r0
 8001a06:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a0a:	fa93 f3a3 	rbit	r3, r3
 8001a0e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001a10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a12:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001a14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8001a1a:	2320      	movs	r3, #32
 8001a1c:	e003      	b.n	8001a26 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8001a1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a20:	fab3 f383 	clz	r3, r3
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d105      	bne.n	8001a40 <HAL_ADC_ConfigChannel+0x414>
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	0e9b      	lsrs	r3, r3, #26
 8001a3a:	f003 031f 	and.w	r3, r3, #31
 8001a3e:	e011      	b.n	8001a64 <HAL_ADC_ConfigChannel+0x438>
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a48:	fa93 f3a3 	rbit	r3, r3
 8001a4c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001a4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a50:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001a52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d101      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001a58:	2320      	movs	r3, #32
 8001a5a:	e003      	b.n	8001a64 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001a5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a5e:	fab3 f383 	clz	r3, r3
 8001a62:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d106      	bne.n	8001a76 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	2103      	movs	r1, #3
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff f8e1 	bl	8000c38 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fa2a 	bl	8000ed4 <LL_ADC_IsEnabled>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f040 8140 	bne.w	8001d08 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6818      	ldr	r0, [r3, #0]
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	6819      	ldr	r1, [r3, #0]
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	461a      	mov	r2, r3
 8001a96:	f7ff f967 	bl	8000d68 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	4a8f      	ldr	r2, [pc, #572]	; (8001cdc <HAL_ADC_ConfigChannel+0x6b0>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	f040 8131 	bne.w	8001d08 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d10b      	bne.n	8001ace <HAL_ADC_ConfigChannel+0x4a2>
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	0e9b      	lsrs	r3, r3, #26
 8001abc:	3301      	adds	r3, #1
 8001abe:	f003 031f 	and.w	r3, r3, #31
 8001ac2:	2b09      	cmp	r3, #9
 8001ac4:	bf94      	ite	ls
 8001ac6:	2301      	movls	r3, #1
 8001ac8:	2300      	movhi	r3, #0
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	e019      	b.n	8001b02 <HAL_ADC_ConfigChannel+0x4d6>
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ad6:	fa93 f3a3 	rbit	r3, r3
 8001ada:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001adc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ade:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001ae0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001ae6:	2320      	movs	r3, #32
 8001ae8:	e003      	b.n	8001af2 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001aea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001aec:	fab3 f383 	clz	r3, r3
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	3301      	adds	r3, #1
 8001af4:	f003 031f 	and.w	r3, r3, #31
 8001af8:	2b09      	cmp	r3, #9
 8001afa:	bf94      	ite	ls
 8001afc:	2301      	movls	r3, #1
 8001afe:	2300      	movhi	r3, #0
 8001b00:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d079      	beq.n	8001bfa <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d107      	bne.n	8001b22 <HAL_ADC_ConfigChannel+0x4f6>
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	0e9b      	lsrs	r3, r3, #26
 8001b18:	3301      	adds	r3, #1
 8001b1a:	069b      	lsls	r3, r3, #26
 8001b1c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b20:	e015      	b.n	8001b4e <HAL_ADC_ConfigChannel+0x522>
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b2a:	fa93 f3a3 	rbit	r3, r3
 8001b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001b30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b32:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001b34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8001b3a:	2320      	movs	r3, #32
 8001b3c:	e003      	b.n	8001b46 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8001b3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b40:	fab3 f383 	clz	r3, r3
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	3301      	adds	r3, #1
 8001b48:	069b      	lsls	r3, r3, #26
 8001b4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d109      	bne.n	8001b6e <HAL_ADC_ConfigChannel+0x542>
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	0e9b      	lsrs	r3, r3, #26
 8001b60:	3301      	adds	r3, #1
 8001b62:	f003 031f 	and.w	r3, r3, #31
 8001b66:	2101      	movs	r1, #1
 8001b68:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6c:	e017      	b.n	8001b9e <HAL_ADC_ConfigChannel+0x572>
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b76:	fa93 f3a3 	rbit	r3, r3
 8001b7a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001b7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b7e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001b80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8001b86:	2320      	movs	r3, #32
 8001b88:	e003      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8001b8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b8c:	fab3 f383 	clz	r3, r3
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	3301      	adds	r3, #1
 8001b94:	f003 031f 	and.w	r3, r3, #31
 8001b98:	2101      	movs	r1, #1
 8001b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9e:	ea42 0103 	orr.w	r1, r2, r3
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d10a      	bne.n	8001bc4 <HAL_ADC_ConfigChannel+0x598>
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	0e9b      	lsrs	r3, r3, #26
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	f003 021f 	and.w	r2, r3, #31
 8001bba:	4613      	mov	r3, r2
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	4413      	add	r3, r2
 8001bc0:	051b      	lsls	r3, r3, #20
 8001bc2:	e018      	b.n	8001bf6 <HAL_ADC_ConfigChannel+0x5ca>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bcc:	fa93 f3a3 	rbit	r3, r3
 8001bd0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d101      	bne.n	8001be0 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8001bdc:	2320      	movs	r3, #32
 8001bde:	e003      	b.n	8001be8 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8001be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001be2:	fab3 f383 	clz	r3, r3
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	3301      	adds	r3, #1
 8001bea:	f003 021f 	and.w	r2, r3, #31
 8001bee:	4613      	mov	r3, r2
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	4413      	add	r3, r2
 8001bf4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bf6:	430b      	orrs	r3, r1
 8001bf8:	e081      	b.n	8001cfe <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d107      	bne.n	8001c16 <HAL_ADC_ConfigChannel+0x5ea>
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	0e9b      	lsrs	r3, r3, #26
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	069b      	lsls	r3, r3, #26
 8001c10:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c14:	e015      	b.n	8001c42 <HAL_ADC_ConfigChannel+0x616>
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c1e:	fa93 f3a3 	rbit	r3, r3
 8001c22:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c26:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8001c2e:	2320      	movs	r3, #32
 8001c30:	e003      	b.n	8001c3a <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8001c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c34:	fab3 f383 	clz	r3, r3
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	069b      	lsls	r3, r3, #26
 8001c3e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d109      	bne.n	8001c62 <HAL_ADC_ConfigChannel+0x636>
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	0e9b      	lsrs	r3, r3, #26
 8001c54:	3301      	adds	r3, #1
 8001c56:	f003 031f 	and.w	r3, r3, #31
 8001c5a:	2101      	movs	r1, #1
 8001c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c60:	e017      	b.n	8001c92 <HAL_ADC_ConfigChannel+0x666>
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c68:	6a3b      	ldr	r3, [r7, #32]
 8001c6a:	fa93 f3a3 	rbit	r3, r3
 8001c6e:	61fb      	str	r3, [r7, #28]
  return result;
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8001c7a:	2320      	movs	r3, #32
 8001c7c:	e003      	b.n	8001c86 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c80:	fab3 f383 	clz	r3, r3
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	3301      	adds	r3, #1
 8001c88:	f003 031f 	and.w	r3, r3, #31
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c92:	ea42 0103 	orr.w	r1, r2, r3
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d10d      	bne.n	8001cbe <HAL_ADC_ConfigChannel+0x692>
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	0e9b      	lsrs	r3, r3, #26
 8001ca8:	3301      	adds	r3, #1
 8001caa:	f003 021f 	and.w	r2, r3, #31
 8001cae:	4613      	mov	r3, r2
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	4413      	add	r3, r2
 8001cb4:	3b1e      	subs	r3, #30
 8001cb6:	051b      	lsls	r3, r3, #20
 8001cb8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cbc:	e01e      	b.n	8001cfc <HAL_ADC_ConfigChannel+0x6d0>
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	fa93 f3a3 	rbit	r3, r3
 8001cca:	613b      	str	r3, [r7, #16]
  return result;
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d104      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001cd6:	2320      	movs	r3, #32
 8001cd8:	e006      	b.n	8001ce8 <HAL_ADC_ConfigChannel+0x6bc>
 8001cda:	bf00      	nop
 8001cdc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	fab3 f383 	clz	r3, r3
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	3301      	adds	r3, #1
 8001cea:	f003 021f 	and.w	r2, r3, #31
 8001cee:	4613      	mov	r3, r2
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	4413      	add	r3, r2
 8001cf4:	3b1e      	subs	r3, #30
 8001cf6:	051b      	lsls	r3, r3, #20
 8001cf8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cfc:	430b      	orrs	r3, r1
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	6892      	ldr	r2, [r2, #8]
 8001d02:	4619      	mov	r1, r3
 8001d04:	f7ff f805 	bl	8000d12 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4b3d      	ldr	r3, [pc, #244]	; (8001e04 <HAL_ADC_ConfigChannel+0x7d8>)
 8001d0e:	4013      	ands	r3, r2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d06c      	beq.n	8001dee <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d14:	483c      	ldr	r0, [pc, #240]	; (8001e08 <HAL_ADC_ConfigChannel+0x7dc>)
 8001d16:	f7fe ff47 	bl	8000ba8 <LL_ADC_GetCommonPathInternalCh>
 8001d1a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a3a      	ldr	r2, [pc, #232]	; (8001e0c <HAL_ADC_ConfigChannel+0x7e0>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d127      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001d28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d121      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a35      	ldr	r2, [pc, #212]	; (8001e10 <HAL_ADC_ConfigChannel+0x7e4>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d157      	bne.n	8001dee <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d42:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d46:	4619      	mov	r1, r3
 8001d48:	482f      	ldr	r0, [pc, #188]	; (8001e08 <HAL_ADC_ConfigChannel+0x7dc>)
 8001d4a:	f7fe ff1a 	bl	8000b82 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d4e:	4b31      	ldr	r3, [pc, #196]	; (8001e14 <HAL_ADC_ConfigChannel+0x7e8>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	099b      	lsrs	r3, r3, #6
 8001d54:	4a30      	ldr	r2, [pc, #192]	; (8001e18 <HAL_ADC_ConfigChannel+0x7ec>)
 8001d56:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5a:	099b      	lsrs	r3, r3, #6
 8001d5c:	1c5a      	adds	r2, r3, #1
 8001d5e:	4613      	mov	r3, r2
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	4413      	add	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d68:	e002      	b.n	8001d70 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f9      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d76:	e03a      	b.n	8001dee <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a27      	ldr	r2, [pc, #156]	; (8001e1c <HAL_ADC_ConfigChannel+0x7f0>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d113      	bne.n	8001daa <HAL_ADC_ConfigChannel+0x77e>
 8001d82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d10d      	bne.n	8001daa <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a1f      	ldr	r2, [pc, #124]	; (8001e10 <HAL_ADC_ConfigChannel+0x7e4>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d12a      	bne.n	8001dee <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001da0:	4619      	mov	r1, r3
 8001da2:	4819      	ldr	r0, [pc, #100]	; (8001e08 <HAL_ADC_ConfigChannel+0x7dc>)
 8001da4:	f7fe feed 	bl	8000b82 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001da8:	e021      	b.n	8001dee <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a1c      	ldr	r2, [pc, #112]	; (8001e20 <HAL_ADC_ConfigChannel+0x7f4>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d11c      	bne.n	8001dee <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001db4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001db8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d116      	bne.n	8001dee <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a12      	ldr	r2, [pc, #72]	; (8001e10 <HAL_ADC_ConfigChannel+0x7e4>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d111      	bne.n	8001dee <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001dca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001dce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	480c      	ldr	r0, [pc, #48]	; (8001e08 <HAL_ADC_ConfigChannel+0x7dc>)
 8001dd6:	f7fe fed4 	bl	8000b82 <LL_ADC_SetCommonPathInternalCh>
 8001dda:	e008      	b.n	8001dee <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de0:	f043 0220 	orr.w	r2, r3, #32
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001df6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	37d8      	adds	r7, #216	; 0xd8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	80080000 	.word	0x80080000
 8001e08:	50040300 	.word	0x50040300
 8001e0c:	c7520000 	.word	0xc7520000
 8001e10:	50040000 	.word	0x50040000
 8001e14:	20000000 	.word	0x20000000
 8001e18:	053e2d63 	.word	0x053e2d63
 8001e1c:	cb840000 	.word	0xcb840000
 8001e20:	80000001 	.word	0x80000001

08001e24 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b088      	sub	sp, #32
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff f898 	bl	8000f70 <LL_ADC_REG_IsConversionOngoing>
 8001e40:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff f8b9 	bl	8000fbe <LL_ADC_INJ_IsConversionOngoing>
 8001e4c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d103      	bne.n	8001e5c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f000 8098 	beq.w	8001f8c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d02a      	beq.n	8001ec0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	7e5b      	ldrb	r3, [r3, #25]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d126      	bne.n	8001ec0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	7e1b      	ldrb	r3, [r3, #24]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d122      	bne.n	8001ec0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001e7e:	e014      	b.n	8001eaa <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	4a45      	ldr	r2, [pc, #276]	; (8001f98 <ADC_ConversionStop+0x174>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d90d      	bls.n	8001ea4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e8c:	f043 0210 	orr.w	r2, r3, #16
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e98:	f043 0201 	orr.w	r2, r3, #1
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e074      	b.n	8001f8e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eb4:	2b40      	cmp	r3, #64	; 0x40
 8001eb6:	d1e3      	bne.n	8001e80 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2240      	movs	r2, #64	; 0x40
 8001ebe:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d014      	beq.n	8001ef0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff f850 	bl	8000f70 <LL_ADC_REG_IsConversionOngoing>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00c      	beq.n	8001ef0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7ff f80d 	bl	8000efa <LL_ADC_IsDisableOngoing>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d104      	bne.n	8001ef0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff f82c 	bl	8000f48 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d014      	beq.n	8001f20 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff f85f 	bl	8000fbe <LL_ADC_INJ_IsConversionOngoing>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00c      	beq.n	8001f20 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7fe fff5 	bl	8000efa <LL_ADC_IsDisableOngoing>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d104      	bne.n	8001f20 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff f83b 	bl	8000f96 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d005      	beq.n	8001f32 <ADC_ConversionStop+0x10e>
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	2b03      	cmp	r3, #3
 8001f2a:	d105      	bne.n	8001f38 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001f2c:	230c      	movs	r3, #12
 8001f2e:	617b      	str	r3, [r7, #20]
        break;
 8001f30:	e005      	b.n	8001f3e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001f32:	2308      	movs	r3, #8
 8001f34:	617b      	str	r3, [r7, #20]
        break;
 8001f36:	e002      	b.n	8001f3e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001f38:	2304      	movs	r3, #4
 8001f3a:	617b      	str	r3, [r7, #20]
        break;
 8001f3c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001f3e:	f7fe fe01 	bl	8000b44 <HAL_GetTick>
 8001f42:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001f44:	e01b      	b.n	8001f7e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001f46:	f7fe fdfd 	bl	8000b44 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b05      	cmp	r3, #5
 8001f52:	d914      	bls.n	8001f7e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689a      	ldr	r2, [r3, #8]
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00d      	beq.n	8001f7e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f66:	f043 0210 	orr.w	r2, r3, #16
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f72:	f043 0201 	orr.w	r2, r3, #1
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e007      	b.n	8001f8e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	4013      	ands	r3, r2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1dc      	bne.n	8001f46 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3720      	adds	r7, #32
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	a33fffff 	.word	0xa33fffff

08001f9c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7fe ff91 	bl	8000ed4 <LL_ADC_IsEnabled>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d169      	bne.n	800208c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	4b36      	ldr	r3, [pc, #216]	; (8002098 <ADC_Enable+0xfc>)
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00d      	beq.n	8001fe2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fca:	f043 0210 	orr.w	r2, r3, #16
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd6:	f043 0201 	orr.w	r2, r3, #1
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e055      	b.n	800208e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7fe ff4c 	bl	8000e84 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001fec:	482b      	ldr	r0, [pc, #172]	; (800209c <ADC_Enable+0x100>)
 8001fee:	f7fe fddb 	bl	8000ba8 <LL_ADC_GetCommonPathInternalCh>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d013      	beq.n	8002024 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ffc:	4b28      	ldr	r3, [pc, #160]	; (80020a0 <ADC_Enable+0x104>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	099b      	lsrs	r3, r3, #6
 8002002:	4a28      	ldr	r2, [pc, #160]	; (80020a4 <ADC_Enable+0x108>)
 8002004:	fba2 2303 	umull	r2, r3, r2, r3
 8002008:	099b      	lsrs	r3, r3, #6
 800200a:	1c5a      	adds	r2, r3, #1
 800200c:	4613      	mov	r3, r2
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	4413      	add	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002016:	e002      	b.n	800201e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	3b01      	subs	r3, #1
 800201c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1f9      	bne.n	8002018 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002024:	f7fe fd8e 	bl	8000b44 <HAL_GetTick>
 8002028:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800202a:	e028      	b.n	800207e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f7fe ff4f 	bl	8000ed4 <LL_ADC_IsEnabled>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d104      	bne.n	8002046 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4618      	mov	r0, r3
 8002042:	f7fe ff1f 	bl	8000e84 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002046:	f7fe fd7d 	bl	8000b44 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d914      	bls.n	800207e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b01      	cmp	r3, #1
 8002060:	d00d      	beq.n	800207e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002066:	f043 0210 	orr.w	r2, r3, #16
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002072:	f043 0201 	orr.w	r2, r3, #1
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e007      	b.n	800208e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	2b01      	cmp	r3, #1
 800208a:	d1cf      	bne.n	800202c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	8000003f 	.word	0x8000003f
 800209c:	50040300 	.word	0x50040300
 80020a0:	20000000 	.word	0x20000000
 80020a4:	053e2d63 	.word	0x053e2d63

080020a8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7fe ff20 	bl	8000efa <LL_ADC_IsDisableOngoing>
 80020ba:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7fe ff07 	bl	8000ed4 <LL_ADC_IsEnabled>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d047      	beq.n	800215c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d144      	bne.n	800215c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f003 030d 	and.w	r3, r3, #13
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d10c      	bne.n	80020fa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7fe fee1 	bl	8000eac <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2203      	movs	r2, #3
 80020f0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80020f2:	f7fe fd27 	bl	8000b44 <HAL_GetTick>
 80020f6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80020f8:	e029      	b.n	800214e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020fe:	f043 0210 	orr.w	r2, r3, #16
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210a:	f043 0201 	orr.w	r2, r3, #1
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e023      	b.n	800215e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002116:	f7fe fd15 	bl	8000b44 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d914      	bls.n	800214e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00d      	beq.n	800214e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002136:	f043 0210 	orr.w	r2, r3, #16
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002142:	f043 0201 	orr.w	r2, r3, #1
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e007      	b.n	800215e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1dc      	bne.n	8002116 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <LL_ADC_IsEnabled>:
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b01      	cmp	r3, #1
 8002178:	d101      	bne.n	800217e <LL_ADC_IsEnabled+0x18>
 800217a:	2301      	movs	r3, #1
 800217c:	e000      	b.n	8002180 <LL_ADC_IsEnabled+0x1a>
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <LL_ADC_REG_IsConversionOngoing>:
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	2b04      	cmp	r3, #4
 800219e:	d101      	bne.n	80021a4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80021a0:	2301      	movs	r3, #1
 80021a2:	e000      	b.n	80021a6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
	...

080021b4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80021b4:	b590      	push	{r4, r7, lr}
 80021b6:	b09f      	sub	sp, #124	; 0x7c
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021be:	2300      	movs	r3, #0
 80021c0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d101      	bne.n	80021d2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80021ce:	2302      	movs	r3, #2
 80021d0:	e089      	b.n	80022e6 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80021da:	2300      	movs	r3, #0
 80021dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80021de:	2300      	movs	r3, #0
 80021e0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a42      	ldr	r2, [pc, #264]	; (80022f0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d102      	bne.n	80021f2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80021ec:	4b41      	ldr	r3, [pc, #260]	; (80022f4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80021ee:	60bb      	str	r3, [r7, #8]
 80021f0:	e001      	b.n	80021f6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80021f2:	2300      	movs	r3, #0
 80021f4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d10b      	bne.n	8002214 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002200:	f043 0220 	orr.w	r2, r3, #32
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e068      	b.n	80022e6 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff ffb8 	bl	800218c <LL_ADC_REG_IsConversionOngoing>
 800221c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff ffb2 	bl	800218c <LL_ADC_REG_IsConversionOngoing>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d14a      	bne.n	80022c4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800222e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002230:	2b00      	cmp	r3, #0
 8002232:	d147      	bne.n	80022c4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002234:	4b30      	ldr	r3, [pc, #192]	; (80022f8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002236:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d027      	beq.n	8002290 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002240:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	6859      	ldr	r1, [r3, #4]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002252:	035b      	lsls	r3, r3, #13
 8002254:	430b      	orrs	r3, r1
 8002256:	431a      	orrs	r2, r3
 8002258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800225a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800225c:	4824      	ldr	r0, [pc, #144]	; (80022f0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800225e:	f7ff ff82 	bl	8002166 <LL_ADC_IsEnabled>
 8002262:	4604      	mov	r4, r0
 8002264:	4823      	ldr	r0, [pc, #140]	; (80022f4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002266:	f7ff ff7e 	bl	8002166 <LL_ADC_IsEnabled>
 800226a:	4603      	mov	r3, r0
 800226c:	4323      	orrs	r3, r4
 800226e:	2b00      	cmp	r3, #0
 8002270:	d132      	bne.n	80022d8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800227a:	f023 030f 	bic.w	r3, r3, #15
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	6811      	ldr	r1, [r2, #0]
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	6892      	ldr	r2, [r2, #8]
 8002286:	430a      	orrs	r2, r1
 8002288:	431a      	orrs	r2, r3
 800228a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800228c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800228e:	e023      	b.n	80022d8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002290:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800229a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800229c:	4814      	ldr	r0, [pc, #80]	; (80022f0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800229e:	f7ff ff62 	bl	8002166 <LL_ADC_IsEnabled>
 80022a2:	4604      	mov	r4, r0
 80022a4:	4813      	ldr	r0, [pc, #76]	; (80022f4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80022a6:	f7ff ff5e 	bl	8002166 <LL_ADC_IsEnabled>
 80022aa:	4603      	mov	r3, r0
 80022ac:	4323      	orrs	r3, r4
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d112      	bne.n	80022d8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80022b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80022ba:	f023 030f 	bic.w	r3, r3, #15
 80022be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80022c0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80022c2:	e009      	b.n	80022d8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c8:	f043 0220 	orr.w	r2, r3, #32
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80022d6:	e000      	b.n	80022da <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80022d8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80022e2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	377c      	adds	r7, #124	; 0x7c
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd90      	pop	{r4, r7, pc}
 80022ee:	bf00      	nop
 80022f0:	50040000 	.word	0x50040000
 80022f4:	50040100 	.word	0x50040100
 80022f8:	50040300 	.word	0x50040300

080022fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800230c:	4b0c      	ldr	r3, [pc, #48]	; (8002340 <__NVIC_SetPriorityGrouping+0x44>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002312:	68ba      	ldr	r2, [r7, #8]
 8002314:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002318:	4013      	ands	r3, r2
 800231a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002324:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800232c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800232e:	4a04      	ldr	r2, [pc, #16]	; (8002340 <__NVIC_SetPriorityGrouping+0x44>)
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	60d3      	str	r3, [r2, #12]
}
 8002334:	bf00      	nop
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	e000ed00 	.word	0xe000ed00

08002344 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002348:	4b04      	ldr	r3, [pc, #16]	; (800235c <__NVIC_GetPriorityGrouping+0x18>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	0a1b      	lsrs	r3, r3, #8
 800234e:	f003 0307 	and.w	r3, r3, #7
}
 8002352:	4618      	mov	r0, r3
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	4603      	mov	r3, r0
 8002368:	6039      	str	r1, [r7, #0]
 800236a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800236c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002370:	2b00      	cmp	r3, #0
 8002372:	db0a      	blt.n	800238a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	b2da      	uxtb	r2, r3
 8002378:	490c      	ldr	r1, [pc, #48]	; (80023ac <__NVIC_SetPriority+0x4c>)
 800237a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237e:	0112      	lsls	r2, r2, #4
 8002380:	b2d2      	uxtb	r2, r2
 8002382:	440b      	add	r3, r1
 8002384:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002388:	e00a      	b.n	80023a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	b2da      	uxtb	r2, r3
 800238e:	4908      	ldr	r1, [pc, #32]	; (80023b0 <__NVIC_SetPriority+0x50>)
 8002390:	79fb      	ldrb	r3, [r7, #7]
 8002392:	f003 030f 	and.w	r3, r3, #15
 8002396:	3b04      	subs	r3, #4
 8002398:	0112      	lsls	r2, r2, #4
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	440b      	add	r3, r1
 800239e:	761a      	strb	r2, [r3, #24]
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	e000e100 	.word	0xe000e100
 80023b0:	e000ed00 	.word	0xe000ed00

080023b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b089      	sub	sp, #36	; 0x24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	f1c3 0307 	rsb	r3, r3, #7
 80023ce:	2b04      	cmp	r3, #4
 80023d0:	bf28      	it	cs
 80023d2:	2304      	movcs	r3, #4
 80023d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	3304      	adds	r3, #4
 80023da:	2b06      	cmp	r3, #6
 80023dc:	d902      	bls.n	80023e4 <NVIC_EncodePriority+0x30>
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	3b03      	subs	r3, #3
 80023e2:	e000      	b.n	80023e6 <NVIC_EncodePriority+0x32>
 80023e4:	2300      	movs	r3, #0
 80023e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e8:	f04f 32ff 	mov.w	r2, #4294967295
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	43da      	mvns	r2, r3
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	401a      	ands	r2, r3
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	fa01 f303 	lsl.w	r3, r1, r3
 8002406:	43d9      	mvns	r1, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800240c:	4313      	orrs	r3, r2
         );
}
 800240e:	4618      	mov	r0, r3
 8002410:	3724      	adds	r7, #36	; 0x24
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
	...

0800241c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3b01      	subs	r3, #1
 8002428:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800242c:	d301      	bcc.n	8002432 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800242e:	2301      	movs	r3, #1
 8002430:	e00f      	b.n	8002452 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002432:	4a0a      	ldr	r2, [pc, #40]	; (800245c <SysTick_Config+0x40>)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3b01      	subs	r3, #1
 8002438:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800243a:	210f      	movs	r1, #15
 800243c:	f04f 30ff 	mov.w	r0, #4294967295
 8002440:	f7ff ff8e 	bl	8002360 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002444:	4b05      	ldr	r3, [pc, #20]	; (800245c <SysTick_Config+0x40>)
 8002446:	2200      	movs	r2, #0
 8002448:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800244a:	4b04      	ldr	r3, [pc, #16]	; (800245c <SysTick_Config+0x40>)
 800244c:	2207      	movs	r2, #7
 800244e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	e000e010 	.word	0xe000e010

08002460 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f7ff ff47 	bl	80022fc <__NVIC_SetPriorityGrouping>
}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b086      	sub	sp, #24
 800247a:	af00      	add	r7, sp, #0
 800247c:	4603      	mov	r3, r0
 800247e:	60b9      	str	r1, [r7, #8]
 8002480:	607a      	str	r2, [r7, #4]
 8002482:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002488:	f7ff ff5c 	bl	8002344 <__NVIC_GetPriorityGrouping>
 800248c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	68b9      	ldr	r1, [r7, #8]
 8002492:	6978      	ldr	r0, [r7, #20]
 8002494:	f7ff ff8e 	bl	80023b4 <NVIC_EncodePriority>
 8002498:	4602      	mov	r2, r0
 800249a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800249e:	4611      	mov	r1, r2
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff ff5d 	bl	8002360 <__NVIC_SetPriority>
}
 80024a6:	bf00      	nop
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b082      	sub	sp, #8
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7ff ffb0 	bl	800241c <SysTick_Config>
 80024bc:	4603      	mov	r3, r0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b087      	sub	sp, #28
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024d6:	e14e      	b.n	8002776 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	2101      	movs	r1, #1
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	fa01 f303 	lsl.w	r3, r1, r3
 80024e4:	4013      	ands	r3, r2
 80024e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f000 8140 	beq.w	8002770 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f003 0303 	and.w	r3, r3, #3
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d005      	beq.n	8002508 <HAL_GPIO_Init+0x40>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 0303 	and.w	r3, r3, #3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d130      	bne.n	800256a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	2203      	movs	r2, #3
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	4013      	ands	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	68da      	ldr	r2, [r3, #12]
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	4313      	orrs	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800253e:	2201      	movs	r2, #1
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	43db      	mvns	r3, r3
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	4013      	ands	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	091b      	lsrs	r3, r3, #4
 8002554:	f003 0201 	and.w	r2, r3, #1
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	4313      	orrs	r3, r2
 8002562:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	2b03      	cmp	r3, #3
 8002574:	d017      	beq.n	80025a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	2203      	movs	r2, #3
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43db      	mvns	r3, r3
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	4013      	ands	r3, r2
 800258c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	4313      	orrs	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d123      	bne.n	80025fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	08da      	lsrs	r2, r3, #3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	3208      	adds	r2, #8
 80025ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	220f      	movs	r2, #15
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43db      	mvns	r3, r3
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	4013      	ands	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	691a      	ldr	r2, [r3, #16]
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	08da      	lsrs	r2, r3, #3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3208      	adds	r2, #8
 80025f4:	6939      	ldr	r1, [r7, #16]
 80025f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	2203      	movs	r2, #3
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	43db      	mvns	r3, r3
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	4013      	ands	r3, r2
 8002610:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f003 0203 	and.w	r2, r3, #3
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	4313      	orrs	r3, r2
 8002626:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002636:	2b00      	cmp	r3, #0
 8002638:	f000 809a 	beq.w	8002770 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800263c:	4b55      	ldr	r3, [pc, #340]	; (8002794 <HAL_GPIO_Init+0x2cc>)
 800263e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002640:	4a54      	ldr	r2, [pc, #336]	; (8002794 <HAL_GPIO_Init+0x2cc>)
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	6613      	str	r3, [r2, #96]	; 0x60
 8002648:	4b52      	ldr	r3, [pc, #328]	; (8002794 <HAL_GPIO_Init+0x2cc>)
 800264a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	60bb      	str	r3, [r7, #8]
 8002652:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002654:	4a50      	ldr	r2, [pc, #320]	; (8002798 <HAL_GPIO_Init+0x2d0>)
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	089b      	lsrs	r3, r3, #2
 800265a:	3302      	adds	r3, #2
 800265c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002660:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	f003 0303 	and.w	r3, r3, #3
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	220f      	movs	r2, #15
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	43db      	mvns	r3, r3
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	4013      	ands	r3, r2
 8002676:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800267e:	d013      	beq.n	80026a8 <HAL_GPIO_Init+0x1e0>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a46      	ldr	r2, [pc, #280]	; (800279c <HAL_GPIO_Init+0x2d4>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d00d      	beq.n	80026a4 <HAL_GPIO_Init+0x1dc>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a45      	ldr	r2, [pc, #276]	; (80027a0 <HAL_GPIO_Init+0x2d8>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d007      	beq.n	80026a0 <HAL_GPIO_Init+0x1d8>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a44      	ldr	r2, [pc, #272]	; (80027a4 <HAL_GPIO_Init+0x2dc>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d101      	bne.n	800269c <HAL_GPIO_Init+0x1d4>
 8002698:	2303      	movs	r3, #3
 800269a:	e006      	b.n	80026aa <HAL_GPIO_Init+0x1e2>
 800269c:	2307      	movs	r3, #7
 800269e:	e004      	b.n	80026aa <HAL_GPIO_Init+0x1e2>
 80026a0:	2302      	movs	r3, #2
 80026a2:	e002      	b.n	80026aa <HAL_GPIO_Init+0x1e2>
 80026a4:	2301      	movs	r3, #1
 80026a6:	e000      	b.n	80026aa <HAL_GPIO_Init+0x1e2>
 80026a8:	2300      	movs	r3, #0
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	f002 0203 	and.w	r2, r2, #3
 80026b0:	0092      	lsls	r2, r2, #2
 80026b2:	4093      	lsls	r3, r2
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026ba:	4937      	ldr	r1, [pc, #220]	; (8002798 <HAL_GPIO_Init+0x2d0>)
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	089b      	lsrs	r3, r3, #2
 80026c0:	3302      	adds	r3, #2
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026c8:	4b37      	ldr	r3, [pc, #220]	; (80027a8 <HAL_GPIO_Init+0x2e0>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	43db      	mvns	r3, r3
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	4013      	ands	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026ec:	4a2e      	ldr	r2, [pc, #184]	; (80027a8 <HAL_GPIO_Init+0x2e0>)
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026f2:	4b2d      	ldr	r3, [pc, #180]	; (80027a8 <HAL_GPIO_Init+0x2e0>)
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	43db      	mvns	r3, r3
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	4013      	ands	r3, r2
 8002700:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	4313      	orrs	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002716:	4a24      	ldr	r2, [pc, #144]	; (80027a8 <HAL_GPIO_Init+0x2e0>)
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800271c:	4b22      	ldr	r3, [pc, #136]	; (80027a8 <HAL_GPIO_Init+0x2e0>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	43db      	mvns	r3, r3
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	4013      	ands	r3, r2
 800272a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d003      	beq.n	8002740 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	4313      	orrs	r3, r2
 800273e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002740:	4a19      	ldr	r2, [pc, #100]	; (80027a8 <HAL_GPIO_Init+0x2e0>)
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002746:	4b18      	ldr	r3, [pc, #96]	; (80027a8 <HAL_GPIO_Init+0x2e0>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	43db      	mvns	r3, r3
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	4013      	ands	r3, r2
 8002754:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	4313      	orrs	r3, r2
 8002768:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800276a:	4a0f      	ldr	r2, [pc, #60]	; (80027a8 <HAL_GPIO_Init+0x2e0>)
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	3301      	adds	r3, #1
 8002774:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	fa22 f303 	lsr.w	r3, r2, r3
 8002780:	2b00      	cmp	r3, #0
 8002782:	f47f aea9 	bne.w	80024d8 <HAL_GPIO_Init+0x10>
  }
}
 8002786:	bf00      	nop
 8002788:	bf00      	nop
 800278a:	371c      	adds	r7, #28
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	40021000 	.word	0x40021000
 8002798:	40010000 	.word	0x40010000
 800279c:	48000400 	.word	0x48000400
 80027a0:	48000800 	.word	0x48000800
 80027a4:	48000c00 	.word	0x48000c00
 80027a8:	40010400 	.word	0x40010400

080027ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	460b      	mov	r3, r1
 80027b6:	807b      	strh	r3, [r7, #2]
 80027b8:	4613      	mov	r3, r2
 80027ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027bc:	787b      	ldrb	r3, [r7, #1]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027c2:	887a      	ldrh	r2, [r7, #2]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027c8:	e002      	b.n	80027d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027ca:	887a      	ldrh	r2, [r7, #2]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80027e0:	4b04      	ldr	r3, [pc, #16]	; (80027f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	40007000 	.word	0x40007000

080027f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002806:	d130      	bne.n	800286a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002808:	4b23      	ldr	r3, [pc, #140]	; (8002898 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002810:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002814:	d038      	beq.n	8002888 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002816:	4b20      	ldr	r3, [pc, #128]	; (8002898 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800281e:	4a1e      	ldr	r2, [pc, #120]	; (8002898 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002820:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002824:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002826:	4b1d      	ldr	r3, [pc, #116]	; (800289c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2232      	movs	r2, #50	; 0x32
 800282c:	fb02 f303 	mul.w	r3, r2, r3
 8002830:	4a1b      	ldr	r2, [pc, #108]	; (80028a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002832:	fba2 2303 	umull	r2, r3, r2, r3
 8002836:	0c9b      	lsrs	r3, r3, #18
 8002838:	3301      	adds	r3, #1
 800283a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800283c:	e002      	b.n	8002844 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	3b01      	subs	r3, #1
 8002842:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002844:	4b14      	ldr	r3, [pc, #80]	; (8002898 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800284c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002850:	d102      	bne.n	8002858 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1f2      	bne.n	800283e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002858:	4b0f      	ldr	r3, [pc, #60]	; (8002898 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002864:	d110      	bne.n	8002888 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e00f      	b.n	800288a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800286a:	4b0b      	ldr	r3, [pc, #44]	; (8002898 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002876:	d007      	beq.n	8002888 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002878:	4b07      	ldr	r3, [pc, #28]	; (8002898 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002880:	4a05      	ldr	r2, [pc, #20]	; (8002898 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002882:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002886:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3714      	adds	r7, #20
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	40007000 	.word	0x40007000
 800289c:	20000000 	.word	0x20000000
 80028a0:	431bde83 	.word	0x431bde83

080028a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b08a      	sub	sp, #40	; 0x28
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d102      	bne.n	80028b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	f000 bc4f 	b.w	8003156 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028b8:	4b97      	ldr	r3, [pc, #604]	; (8002b18 <HAL_RCC_OscConfig+0x274>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f003 030c 	and.w	r3, r3, #12
 80028c0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028c2:	4b95      	ldr	r3, [pc, #596]	; (8002b18 <HAL_RCC_OscConfig+0x274>)
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0310 	and.w	r3, r3, #16
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 80e6 	beq.w	8002aa6 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028da:	6a3b      	ldr	r3, [r7, #32]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d007      	beq.n	80028f0 <HAL_RCC_OscConfig+0x4c>
 80028e0:	6a3b      	ldr	r3, [r7, #32]
 80028e2:	2b0c      	cmp	r3, #12
 80028e4:	f040 808d 	bne.w	8002a02 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	f040 8089 	bne.w	8002a02 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028f0:	4b89      	ldr	r3, [pc, #548]	; (8002b18 <HAL_RCC_OscConfig+0x274>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d006      	beq.n	800290a <HAL_RCC_OscConfig+0x66>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	69db      	ldr	r3, [r3, #28]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d102      	bne.n	800290a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	f000 bc26 	b.w	8003156 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800290e:	4b82      	ldr	r3, [pc, #520]	; (8002b18 <HAL_RCC_OscConfig+0x274>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0308 	and.w	r3, r3, #8
 8002916:	2b00      	cmp	r3, #0
 8002918:	d004      	beq.n	8002924 <HAL_RCC_OscConfig+0x80>
 800291a:	4b7f      	ldr	r3, [pc, #508]	; (8002b18 <HAL_RCC_OscConfig+0x274>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002922:	e005      	b.n	8002930 <HAL_RCC_OscConfig+0x8c>
 8002924:	4b7c      	ldr	r3, [pc, #496]	; (8002b18 <HAL_RCC_OscConfig+0x274>)
 8002926:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800292a:	091b      	lsrs	r3, r3, #4
 800292c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002930:	4293      	cmp	r3, r2
 8002932:	d224      	bcs.n	800297e <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	4618      	mov	r0, r3
 800293a:	f000 fdd9 	bl	80034f0 <RCC_SetFlashLatencyFromMSIRange>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d002      	beq.n	800294a <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	f000 bc06 	b.w	8003156 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800294a:	4b73      	ldr	r3, [pc, #460]	; (8002b18 <HAL_RCC_OscConfig+0x274>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a72      	ldr	r2, [pc, #456]	; (8002b18 <HAL_RCC_OscConfig+0x274>)
 8002950:	f043 0308 	orr.w	r3, r3, #8
 8002954:	6013      	str	r3, [r2, #0]
 8002956:	4b70      	ldr	r3, [pc, #448]	; (8002b18 <HAL_RCC_OscConfig+0x274>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002962:	496d      	ldr	r1, [pc, #436]	; (8002b18 <HAL_RCC_OscConfig+0x274>)
 8002964:	4313      	orrs	r3, r2
 8002966:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002968:	4b6b      	ldr	r3, [pc, #428]	; (8002b18 <HAL_RCC_OscConfig+0x274>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	021b      	lsls	r3, r3, #8
 8002976:	4968      	ldr	r1, [pc, #416]	; (8002b18 <HAL_RCC_OscConfig+0x274>)
 8002978:	4313      	orrs	r3, r2
 800297a:	604b      	str	r3, [r1, #4]
 800297c:	e025      	b.n	80029ca <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800297e:	4b66      	ldr	r3, [pc, #408]	; (8002b18 <HAL_RCC_OscConfig+0x274>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a65      	ldr	r2, [pc, #404]	; (8002b18 <HAL_RCC_OscConfig+0x274>)
 8002984:	f043 0308 	orr.w	r3, r3, #8
 8002988:	6013      	str	r3, [r2, #0]
 800298a:	4b63      	ldr	r3, [pc, #396]	; (8002b18 <HAL_RCC_OscConfig+0x274>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	4960      	ldr	r1, [pc, #384]	; (8002b18 <HAL_RCC_OscConfig+0x274>)
 8002998:	4313      	orrs	r3, r2
 800299a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800299c:	4b5e      	ldr	r3, [pc, #376]	; (8002b18 <HAL_RCC_OscConfig+0x274>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	021b      	lsls	r3, r3, #8
 80029aa:	495b      	ldr	r1, [pc, #364]	; (8002b18 <HAL_RCC_OscConfig+0x274>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029b0:	6a3b      	ldr	r3, [r7, #32]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d109      	bne.n	80029ca <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ba:	4618      	mov	r0, r3
 80029bc:	f000 fd98 	bl	80034f0 <RCC_SetFlashLatencyFromMSIRange>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e3c5      	b.n	8003156 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029ca:	f000 fccd 	bl	8003368 <HAL_RCC_GetSysClockFreq>
 80029ce:	4602      	mov	r2, r0
 80029d0:	4b51      	ldr	r3, [pc, #324]	; (8002b18 <HAL_RCC_OscConfig+0x274>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	091b      	lsrs	r3, r3, #4
 80029d6:	f003 030f 	and.w	r3, r3, #15
 80029da:	4950      	ldr	r1, [pc, #320]	; (8002b1c <HAL_RCC_OscConfig+0x278>)
 80029dc:	5ccb      	ldrb	r3, [r1, r3]
 80029de:	f003 031f 	and.w	r3, r3, #31
 80029e2:	fa22 f303 	lsr.w	r3, r2, r3
 80029e6:	4a4e      	ldr	r2, [pc, #312]	; (8002b20 <HAL_RCC_OscConfig+0x27c>)
 80029e8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80029ea:	4b4e      	ldr	r3, [pc, #312]	; (8002b24 <HAL_RCC_OscConfig+0x280>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7fe f858 	bl	8000aa4 <HAL_InitTick>
 80029f4:	4603      	mov	r3, r0
 80029f6:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80029f8:	7dfb      	ldrb	r3, [r7, #23]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d052      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80029fe:	7dfb      	ldrb	r3, [r7, #23]
 8002a00:	e3a9      	b.n	8003156 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d032      	beq.n	8002a70 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a0a:	4b43      	ldr	r3, [pc, #268]	; (8002b18 <HAL_RCC_OscConfig+0x274>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a42      	ldr	r2, [pc, #264]	; (8002b18 <HAL_RCC_OscConfig+0x274>)
 8002a10:	f043 0301 	orr.w	r3, r3, #1
 8002a14:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a16:	f7fe f895 	bl	8000b44 <HAL_GetTick>
 8002a1a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a1c:	e008      	b.n	8002a30 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a1e:	f7fe f891 	bl	8000b44 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e392      	b.n	8003156 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a30:	4b39      	ldr	r3, [pc, #228]	; (8002b18 <HAL_RCC_OscConfig+0x274>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d0f0      	beq.n	8002a1e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a3c:	4b36      	ldr	r3, [pc, #216]	; (8002b18 <HAL_RCC_OscConfig+0x274>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a35      	ldr	r2, [pc, #212]	; (8002b18 <HAL_RCC_OscConfig+0x274>)
 8002a42:	f043 0308 	orr.w	r3, r3, #8
 8002a46:	6013      	str	r3, [r2, #0]
 8002a48:	4b33      	ldr	r3, [pc, #204]	; (8002b18 <HAL_RCC_OscConfig+0x274>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	4930      	ldr	r1, [pc, #192]	; (8002b18 <HAL_RCC_OscConfig+0x274>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a5a:	4b2f      	ldr	r3, [pc, #188]	; (8002b18 <HAL_RCC_OscConfig+0x274>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	021b      	lsls	r3, r3, #8
 8002a68:	492b      	ldr	r1, [pc, #172]	; (8002b18 <HAL_RCC_OscConfig+0x274>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	604b      	str	r3, [r1, #4]
 8002a6e:	e01a      	b.n	8002aa6 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a70:	4b29      	ldr	r3, [pc, #164]	; (8002b18 <HAL_RCC_OscConfig+0x274>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a28      	ldr	r2, [pc, #160]	; (8002b18 <HAL_RCC_OscConfig+0x274>)
 8002a76:	f023 0301 	bic.w	r3, r3, #1
 8002a7a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a7c:	f7fe f862 	bl	8000b44 <HAL_GetTick>
 8002a80:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a84:	f7fe f85e 	bl	8000b44 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e35f      	b.n	8003156 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a96:	4b20      	ldr	r3, [pc, #128]	; (8002b18 <HAL_RCC_OscConfig+0x274>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1f0      	bne.n	8002a84 <HAL_RCC_OscConfig+0x1e0>
 8002aa2:	e000      	b.n	8002aa6 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002aa4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d073      	beq.n	8002b9a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ab2:	6a3b      	ldr	r3, [r7, #32]
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d005      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x220>
 8002ab8:	6a3b      	ldr	r3, [r7, #32]
 8002aba:	2b0c      	cmp	r3, #12
 8002abc:	d10e      	bne.n	8002adc <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	2b03      	cmp	r3, #3
 8002ac2:	d10b      	bne.n	8002adc <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac4:	4b14      	ldr	r3, [pc, #80]	; (8002b18 <HAL_RCC_OscConfig+0x274>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d063      	beq.n	8002b98 <HAL_RCC_OscConfig+0x2f4>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d15f      	bne.n	8002b98 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e33c      	b.n	8003156 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ae4:	d106      	bne.n	8002af4 <HAL_RCC_OscConfig+0x250>
 8002ae6:	4b0c      	ldr	r3, [pc, #48]	; (8002b18 <HAL_RCC_OscConfig+0x274>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a0b      	ldr	r2, [pc, #44]	; (8002b18 <HAL_RCC_OscConfig+0x274>)
 8002aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af0:	6013      	str	r3, [r2, #0]
 8002af2:	e025      	b.n	8002b40 <HAL_RCC_OscConfig+0x29c>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002afc:	d114      	bne.n	8002b28 <HAL_RCC_OscConfig+0x284>
 8002afe:	4b06      	ldr	r3, [pc, #24]	; (8002b18 <HAL_RCC_OscConfig+0x274>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a05      	ldr	r2, [pc, #20]	; (8002b18 <HAL_RCC_OscConfig+0x274>)
 8002b04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b08:	6013      	str	r3, [r2, #0]
 8002b0a:	4b03      	ldr	r3, [pc, #12]	; (8002b18 <HAL_RCC_OscConfig+0x274>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a02      	ldr	r2, [pc, #8]	; (8002b18 <HAL_RCC_OscConfig+0x274>)
 8002b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b14:	6013      	str	r3, [r2, #0]
 8002b16:	e013      	b.n	8002b40 <HAL_RCC_OscConfig+0x29c>
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	080041dc 	.word	0x080041dc
 8002b20:	20000000 	.word	0x20000000
 8002b24:	20000004 	.word	0x20000004
 8002b28:	4b8f      	ldr	r3, [pc, #572]	; (8002d68 <HAL_RCC_OscConfig+0x4c4>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a8e      	ldr	r2, [pc, #568]	; (8002d68 <HAL_RCC_OscConfig+0x4c4>)
 8002b2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b32:	6013      	str	r3, [r2, #0]
 8002b34:	4b8c      	ldr	r3, [pc, #560]	; (8002d68 <HAL_RCC_OscConfig+0x4c4>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a8b      	ldr	r2, [pc, #556]	; (8002d68 <HAL_RCC_OscConfig+0x4c4>)
 8002b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d013      	beq.n	8002b70 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b48:	f7fd fffc 	bl	8000b44 <HAL_GetTick>
 8002b4c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b50:	f7fd fff8 	bl	8000b44 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b64      	cmp	r3, #100	; 0x64
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e2f9      	b.n	8003156 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b62:	4b81      	ldr	r3, [pc, #516]	; (8002d68 <HAL_RCC_OscConfig+0x4c4>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d0f0      	beq.n	8002b50 <HAL_RCC_OscConfig+0x2ac>
 8002b6e:	e014      	b.n	8002b9a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b70:	f7fd ffe8 	bl	8000b44 <HAL_GetTick>
 8002b74:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b78:	f7fd ffe4 	bl	8000b44 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b64      	cmp	r3, #100	; 0x64
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e2e5      	b.n	8003156 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b8a:	4b77      	ldr	r3, [pc, #476]	; (8002d68 <HAL_RCC_OscConfig+0x4c4>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f0      	bne.n	8002b78 <HAL_RCC_OscConfig+0x2d4>
 8002b96:	e000      	b.n	8002b9a <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d060      	beq.n	8002c68 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ba6:	6a3b      	ldr	r3, [r7, #32]
 8002ba8:	2b04      	cmp	r3, #4
 8002baa:	d005      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x314>
 8002bac:	6a3b      	ldr	r3, [r7, #32]
 8002bae:	2b0c      	cmp	r3, #12
 8002bb0:	d119      	bne.n	8002be6 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d116      	bne.n	8002be6 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bb8:	4b6b      	ldr	r3, [pc, #428]	; (8002d68 <HAL_RCC_OscConfig+0x4c4>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d005      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x32c>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e2c2      	b.n	8003156 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd0:	4b65      	ldr	r3, [pc, #404]	; (8002d68 <HAL_RCC_OscConfig+0x4c4>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	061b      	lsls	r3, r3, #24
 8002bde:	4962      	ldr	r1, [pc, #392]	; (8002d68 <HAL_RCC_OscConfig+0x4c4>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002be4:	e040      	b.n	8002c68 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d023      	beq.n	8002c36 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bee:	4b5e      	ldr	r3, [pc, #376]	; (8002d68 <HAL_RCC_OscConfig+0x4c4>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a5d      	ldr	r2, [pc, #372]	; (8002d68 <HAL_RCC_OscConfig+0x4c4>)
 8002bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfa:	f7fd ffa3 	bl	8000b44 <HAL_GetTick>
 8002bfe:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c00:	e008      	b.n	8002c14 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c02:	f7fd ff9f 	bl	8000b44 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e2a0      	b.n	8003156 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c14:	4b54      	ldr	r3, [pc, #336]	; (8002d68 <HAL_RCC_OscConfig+0x4c4>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0f0      	beq.n	8002c02 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c20:	4b51      	ldr	r3, [pc, #324]	; (8002d68 <HAL_RCC_OscConfig+0x4c4>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	061b      	lsls	r3, r3, #24
 8002c2e:	494e      	ldr	r1, [pc, #312]	; (8002d68 <HAL_RCC_OscConfig+0x4c4>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	604b      	str	r3, [r1, #4]
 8002c34:	e018      	b.n	8002c68 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c36:	4b4c      	ldr	r3, [pc, #304]	; (8002d68 <HAL_RCC_OscConfig+0x4c4>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a4b      	ldr	r2, [pc, #300]	; (8002d68 <HAL_RCC_OscConfig+0x4c4>)
 8002c3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c42:	f7fd ff7f 	bl	8000b44 <HAL_GetTick>
 8002c46:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c48:	e008      	b.n	8002c5c <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c4a:	f7fd ff7b 	bl	8000b44 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e27c      	b.n	8003156 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c5c:	4b42      	ldr	r3, [pc, #264]	; (8002d68 <HAL_RCC_OscConfig+0x4c4>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1f0      	bne.n	8002c4a <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0308 	and.w	r3, r3, #8
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f000 8082 	beq.w	8002d7a <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d05f      	beq.n	8002d3e <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8002c7e:	4b3a      	ldr	r3, [pc, #232]	; (8002d68 <HAL_RCC_OscConfig+0x4c4>)
 8002c80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c84:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	699a      	ldr	r2, [r3, #24]
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	f003 0310 	and.w	r3, r3, #16
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d037      	beq.n	8002d04 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d006      	beq.n	8002cac <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e254      	b.n	8003156 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d01b      	beq.n	8002cee <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8002cb6:	4b2c      	ldr	r3, [pc, #176]	; (8002d68 <HAL_RCC_OscConfig+0x4c4>)
 8002cb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cbc:	4a2a      	ldr	r2, [pc, #168]	; (8002d68 <HAL_RCC_OscConfig+0x4c4>)
 8002cbe:	f023 0301 	bic.w	r3, r3, #1
 8002cc2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cc6:	f7fd ff3d 	bl	8000b44 <HAL_GetTick>
 8002cca:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ccc:	e008      	b.n	8002ce0 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cce:	f7fd ff39 	bl	8000b44 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b11      	cmp	r3, #17
 8002cda:	d901      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e23a      	b.n	8003156 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ce0:	4b21      	ldr	r3, [pc, #132]	; (8002d68 <HAL_RCC_OscConfig+0x4c4>)
 8002ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1ef      	bne.n	8002cce <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002cee:	4b1e      	ldr	r3, [pc, #120]	; (8002d68 <HAL_RCC_OscConfig+0x4c4>)
 8002cf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cf4:	f023 0210 	bic.w	r2, r3, #16
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	491a      	ldr	r1, [pc, #104]	; (8002d68 <HAL_RCC_OscConfig+0x4c4>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d04:	4b18      	ldr	r3, [pc, #96]	; (8002d68 <HAL_RCC_OscConfig+0x4c4>)
 8002d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d0a:	4a17      	ldr	r2, [pc, #92]	; (8002d68 <HAL_RCC_OscConfig+0x4c4>)
 8002d0c:	f043 0301 	orr.w	r3, r3, #1
 8002d10:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d14:	f7fd ff16 	bl	8000b44 <HAL_GetTick>
 8002d18:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d1c:	f7fd ff12 	bl	8000b44 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b11      	cmp	r3, #17
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e213      	b.n	8003156 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d2e:	4b0e      	ldr	r3, [pc, #56]	; (8002d68 <HAL_RCC_OscConfig+0x4c4>)
 8002d30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0ef      	beq.n	8002d1c <HAL_RCC_OscConfig+0x478>
 8002d3c:	e01d      	b.n	8002d7a <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d3e:	4b0a      	ldr	r3, [pc, #40]	; (8002d68 <HAL_RCC_OscConfig+0x4c4>)
 8002d40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d44:	4a08      	ldr	r2, [pc, #32]	; (8002d68 <HAL_RCC_OscConfig+0x4c4>)
 8002d46:	f023 0301 	bic.w	r3, r3, #1
 8002d4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d4e:	f7fd fef9 	bl	8000b44 <HAL_GetTick>
 8002d52:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d54:	e00a      	b.n	8002d6c <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d56:	f7fd fef5 	bl	8000b44 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b11      	cmp	r3, #17
 8002d62:	d903      	bls.n	8002d6c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e1f6      	b.n	8003156 <HAL_RCC_OscConfig+0x8b2>
 8002d68:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d6c:	4ba9      	ldr	r3, [pc, #676]	; (8003014 <HAL_RCC_OscConfig+0x770>)
 8002d6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1ed      	bne.n	8002d56 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0304 	and.w	r3, r3, #4
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f000 80bd 	beq.w	8002f02 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d8e:	4ba1      	ldr	r3, [pc, #644]	; (8003014 <HAL_RCC_OscConfig+0x770>)
 8002d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10e      	bne.n	8002db8 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d9a:	4b9e      	ldr	r3, [pc, #632]	; (8003014 <HAL_RCC_OscConfig+0x770>)
 8002d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9e:	4a9d      	ldr	r2, [pc, #628]	; (8003014 <HAL_RCC_OscConfig+0x770>)
 8002da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002da4:	6593      	str	r3, [r2, #88]	; 0x58
 8002da6:	4b9b      	ldr	r3, [pc, #620]	; (8003014 <HAL_RCC_OscConfig+0x770>)
 8002da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002db2:	2301      	movs	r3, #1
 8002db4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002db8:	4b97      	ldr	r3, [pc, #604]	; (8003018 <HAL_RCC_OscConfig+0x774>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d118      	bne.n	8002df6 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dc4:	4b94      	ldr	r3, [pc, #592]	; (8003018 <HAL_RCC_OscConfig+0x774>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a93      	ldr	r2, [pc, #588]	; (8003018 <HAL_RCC_OscConfig+0x774>)
 8002dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dd0:	f7fd feb8 	bl	8000b44 <HAL_GetTick>
 8002dd4:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dd8:	f7fd feb4 	bl	8000b44 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e1b5      	b.n	8003156 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dea:	4b8b      	ldr	r3, [pc, #556]	; (8003018 <HAL_RCC_OscConfig+0x774>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d0f0      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d02c      	beq.n	8002e5c <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002e02:	4b84      	ldr	r3, [pc, #528]	; (8003014 <HAL_RCC_OscConfig+0x770>)
 8002e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e08:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e14:	497f      	ldr	r1, [pc, #508]	; (8003014 <HAL_RCC_OscConfig+0x770>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d010      	beq.n	8002e4a <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e28:	4b7a      	ldr	r3, [pc, #488]	; (8003014 <HAL_RCC_OscConfig+0x770>)
 8002e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2e:	4a79      	ldr	r2, [pc, #484]	; (8003014 <HAL_RCC_OscConfig+0x770>)
 8002e30:	f043 0304 	orr.w	r3, r3, #4
 8002e34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e38:	4b76      	ldr	r3, [pc, #472]	; (8003014 <HAL_RCC_OscConfig+0x770>)
 8002e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e3e:	4a75      	ldr	r2, [pc, #468]	; (8003014 <HAL_RCC_OscConfig+0x770>)
 8002e40:	f043 0301 	orr.w	r3, r3, #1
 8002e44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e48:	e018      	b.n	8002e7c <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e4a:	4b72      	ldr	r3, [pc, #456]	; (8003014 <HAL_RCC_OscConfig+0x770>)
 8002e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e50:	4a70      	ldr	r2, [pc, #448]	; (8003014 <HAL_RCC_OscConfig+0x770>)
 8002e52:	f043 0301 	orr.w	r3, r3, #1
 8002e56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e5a:	e00f      	b.n	8002e7c <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e5c:	4b6d      	ldr	r3, [pc, #436]	; (8003014 <HAL_RCC_OscConfig+0x770>)
 8002e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e62:	4a6c      	ldr	r2, [pc, #432]	; (8003014 <HAL_RCC_OscConfig+0x770>)
 8002e64:	f023 0301 	bic.w	r3, r3, #1
 8002e68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e6c:	4b69      	ldr	r3, [pc, #420]	; (8003014 <HAL_RCC_OscConfig+0x770>)
 8002e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e72:	4a68      	ldr	r2, [pc, #416]	; (8003014 <HAL_RCC_OscConfig+0x770>)
 8002e74:	f023 0304 	bic.w	r3, r3, #4
 8002e78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d016      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e84:	f7fd fe5e 	bl	8000b44 <HAL_GetTick>
 8002e88:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e8a:	e00a      	b.n	8002ea2 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e8c:	f7fd fe5a 	bl	8000b44 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e159      	b.n	8003156 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ea2:	4b5c      	ldr	r3, [pc, #368]	; (8003014 <HAL_RCC_OscConfig+0x770>)
 8002ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0ed      	beq.n	8002e8c <HAL_RCC_OscConfig+0x5e8>
 8002eb0:	e01d      	b.n	8002eee <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb2:	f7fd fe47 	bl	8000b44 <HAL_GetTick>
 8002eb6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002eb8:	e00a      	b.n	8002ed0 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eba:	f7fd fe43 	bl	8000b44 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e142      	b.n	8003156 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ed0:	4b50      	ldr	r3, [pc, #320]	; (8003014 <HAL_RCC_OscConfig+0x770>)
 8002ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1ed      	bne.n	8002eba <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002ede:	4b4d      	ldr	r3, [pc, #308]	; (8003014 <HAL_RCC_OscConfig+0x770>)
 8002ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee4:	4a4b      	ldr	r2, [pc, #300]	; (8003014 <HAL_RCC_OscConfig+0x770>)
 8002ee6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002eea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002eee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d105      	bne.n	8002f02 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ef6:	4b47      	ldr	r3, [pc, #284]	; (8003014 <HAL_RCC_OscConfig+0x770>)
 8002ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002efa:	4a46      	ldr	r2, [pc, #280]	; (8003014 <HAL_RCC_OscConfig+0x770>)
 8002efc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f00:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0320 	and.w	r3, r3, #32
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d03c      	beq.n	8002f88 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d01c      	beq.n	8002f50 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f16:	4b3f      	ldr	r3, [pc, #252]	; (8003014 <HAL_RCC_OscConfig+0x770>)
 8002f18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f1c:	4a3d      	ldr	r2, [pc, #244]	; (8003014 <HAL_RCC_OscConfig+0x770>)
 8002f1e:	f043 0301 	orr.w	r3, r3, #1
 8002f22:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f26:	f7fd fe0d 	bl	8000b44 <HAL_GetTick>
 8002f2a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f2c:	e008      	b.n	8002f40 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f2e:	f7fd fe09 	bl	8000b44 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e10a      	b.n	8003156 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f40:	4b34      	ldr	r3, [pc, #208]	; (8003014 <HAL_RCC_OscConfig+0x770>)
 8002f42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d0ef      	beq.n	8002f2e <HAL_RCC_OscConfig+0x68a>
 8002f4e:	e01b      	b.n	8002f88 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f50:	4b30      	ldr	r3, [pc, #192]	; (8003014 <HAL_RCC_OscConfig+0x770>)
 8002f52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f56:	4a2f      	ldr	r2, [pc, #188]	; (8003014 <HAL_RCC_OscConfig+0x770>)
 8002f58:	f023 0301 	bic.w	r3, r3, #1
 8002f5c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f60:	f7fd fdf0 	bl	8000b44 <HAL_GetTick>
 8002f64:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f68:	f7fd fdec 	bl	8000b44 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e0ed      	b.n	8003156 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f7a:	4b26      	ldr	r3, [pc, #152]	; (8003014 <HAL_RCC_OscConfig+0x770>)
 8002f7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1ef      	bne.n	8002f68 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 80e1 	beq.w	8003154 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	f040 80b5 	bne.w	8003106 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f9c:	4b1d      	ldr	r3, [pc, #116]	; (8003014 <HAL_RCC_OscConfig+0x770>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	f003 0203 	and.w	r2, r3, #3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d124      	bne.n	8002ffa <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d11b      	bne.n	8002ffa <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fcc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d113      	bne.n	8002ffa <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fdc:	085b      	lsrs	r3, r3, #1
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d109      	bne.n	8002ffa <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff0:	085b      	lsrs	r3, r3, #1
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d05f      	beq.n	80030ba <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	2b0c      	cmp	r3, #12
 8002ffe:	d05a      	beq.n	80030b6 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003000:	4b04      	ldr	r3, [pc, #16]	; (8003014 <HAL_RCC_OscConfig+0x770>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a03      	ldr	r2, [pc, #12]	; (8003014 <HAL_RCC_OscConfig+0x770>)
 8003006:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800300a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800300c:	f7fd fd9a 	bl	8000b44 <HAL_GetTick>
 8003010:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003012:	e00c      	b.n	800302e <HAL_RCC_OscConfig+0x78a>
 8003014:	40021000 	.word	0x40021000
 8003018:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800301c:	f7fd fd92 	bl	8000b44 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e093      	b.n	8003156 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800302e:	4b4c      	ldr	r3, [pc, #304]	; (8003160 <HAL_RCC_OscConfig+0x8bc>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f0      	bne.n	800301c <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800303a:	4b49      	ldr	r3, [pc, #292]	; (8003160 <HAL_RCC_OscConfig+0x8bc>)
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	4b49      	ldr	r3, [pc, #292]	; (8003164 <HAL_RCC_OscConfig+0x8c0>)
 8003040:	4013      	ands	r3, r2
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800304a:	3a01      	subs	r2, #1
 800304c:	0112      	lsls	r2, r2, #4
 800304e:	4311      	orrs	r1, r2
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003054:	0212      	lsls	r2, r2, #8
 8003056:	4311      	orrs	r1, r2
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800305c:	0852      	lsrs	r2, r2, #1
 800305e:	3a01      	subs	r2, #1
 8003060:	0552      	lsls	r2, r2, #21
 8003062:	4311      	orrs	r1, r2
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003068:	0852      	lsrs	r2, r2, #1
 800306a:	3a01      	subs	r2, #1
 800306c:	0652      	lsls	r2, r2, #25
 800306e:	430a      	orrs	r2, r1
 8003070:	493b      	ldr	r1, [pc, #236]	; (8003160 <HAL_RCC_OscConfig+0x8bc>)
 8003072:	4313      	orrs	r3, r2
 8003074:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003076:	4b3a      	ldr	r3, [pc, #232]	; (8003160 <HAL_RCC_OscConfig+0x8bc>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a39      	ldr	r2, [pc, #228]	; (8003160 <HAL_RCC_OscConfig+0x8bc>)
 800307c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003080:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003082:	4b37      	ldr	r3, [pc, #220]	; (8003160 <HAL_RCC_OscConfig+0x8bc>)
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	4a36      	ldr	r2, [pc, #216]	; (8003160 <HAL_RCC_OscConfig+0x8bc>)
 8003088:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800308c:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800308e:	f7fd fd59 	bl	8000b44 <HAL_GetTick>
 8003092:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003094:	e008      	b.n	80030a8 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003096:	f7fd fd55 	bl	8000b44 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e056      	b.n	8003156 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030a8:	4b2d      	ldr	r3, [pc, #180]	; (8003160 <HAL_RCC_OscConfig+0x8bc>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0f0      	beq.n	8003096 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030b4:	e04e      	b.n	8003154 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e04d      	b.n	8003156 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ba:	4b29      	ldr	r3, [pc, #164]	; (8003160 <HAL_RCC_OscConfig+0x8bc>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d146      	bne.n	8003154 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80030c6:	4b26      	ldr	r3, [pc, #152]	; (8003160 <HAL_RCC_OscConfig+0x8bc>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a25      	ldr	r2, [pc, #148]	; (8003160 <HAL_RCC_OscConfig+0x8bc>)
 80030cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030d0:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030d2:	4b23      	ldr	r3, [pc, #140]	; (8003160 <HAL_RCC_OscConfig+0x8bc>)
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	4a22      	ldr	r2, [pc, #136]	; (8003160 <HAL_RCC_OscConfig+0x8bc>)
 80030d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030dc:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030de:	f7fd fd31 	bl	8000b44 <HAL_GetTick>
 80030e2:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030e4:	e008      	b.n	80030f8 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e6:	f7fd fd2d 	bl	8000b44 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e02e      	b.n	8003156 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030f8:	4b19      	ldr	r3, [pc, #100]	; (8003160 <HAL_RCC_OscConfig+0x8bc>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d0f0      	beq.n	80030e6 <HAL_RCC_OscConfig+0x842>
 8003104:	e026      	b.n	8003154 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003106:	6a3b      	ldr	r3, [r7, #32]
 8003108:	2b0c      	cmp	r3, #12
 800310a:	d021      	beq.n	8003150 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800310c:	4b14      	ldr	r3, [pc, #80]	; (8003160 <HAL_RCC_OscConfig+0x8bc>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a13      	ldr	r2, [pc, #76]	; (8003160 <HAL_RCC_OscConfig+0x8bc>)
 8003112:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003116:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003118:	f7fd fd14 	bl	8000b44 <HAL_GetTick>
 800311c:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003120:	f7fd fd10 	bl	8000b44 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e011      	b.n	8003156 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003132:	4b0b      	ldr	r3, [pc, #44]	; (8003160 <HAL_RCC_OscConfig+0x8bc>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1f0      	bne.n	8003120 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800313e:	4b08      	ldr	r3, [pc, #32]	; (8003160 <HAL_RCC_OscConfig+0x8bc>)
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	4a07      	ldr	r2, [pc, #28]	; (8003160 <HAL_RCC_OscConfig+0x8bc>)
 8003144:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003148:	f023 0303 	bic.w	r3, r3, #3
 800314c:	60d3      	str	r3, [r2, #12]
 800314e:	e001      	b.n	8003154 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e000      	b.n	8003156 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3728      	adds	r7, #40	; 0x28
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40021000 	.word	0x40021000
 8003164:	f99f808c 	.word	0xf99f808c

08003168 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d101      	bne.n	800317c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e0e7      	b.n	800334c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800317c:	4b75      	ldr	r3, [pc, #468]	; (8003354 <HAL_RCC_ClockConfig+0x1ec>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	429a      	cmp	r2, r3
 8003188:	d910      	bls.n	80031ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800318a:	4b72      	ldr	r3, [pc, #456]	; (8003354 <HAL_RCC_ClockConfig+0x1ec>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f023 0207 	bic.w	r2, r3, #7
 8003192:	4970      	ldr	r1, [pc, #448]	; (8003354 <HAL_RCC_ClockConfig+0x1ec>)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	4313      	orrs	r3, r2
 8003198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800319a:	4b6e      	ldr	r3, [pc, #440]	; (8003354 <HAL_RCC_ClockConfig+0x1ec>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0307 	and.w	r3, r3, #7
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d001      	beq.n	80031ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e0cf      	b.n	800334c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d010      	beq.n	80031da <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	4b66      	ldr	r3, [pc, #408]	; (8003358 <HAL_RCC_ClockConfig+0x1f0>)
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d908      	bls.n	80031da <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031c8:	4b63      	ldr	r3, [pc, #396]	; (8003358 <HAL_RCC_ClockConfig+0x1f0>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	4960      	ldr	r1, [pc, #384]	; (8003358 <HAL_RCC_ClockConfig+0x1f0>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d04c      	beq.n	8003280 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	2b03      	cmp	r3, #3
 80031ec:	d107      	bne.n	80031fe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ee:	4b5a      	ldr	r3, [pc, #360]	; (8003358 <HAL_RCC_ClockConfig+0x1f0>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d121      	bne.n	800323e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e0a6      	b.n	800334c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	2b02      	cmp	r3, #2
 8003204:	d107      	bne.n	8003216 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003206:	4b54      	ldr	r3, [pc, #336]	; (8003358 <HAL_RCC_ClockConfig+0x1f0>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d115      	bne.n	800323e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e09a      	b.n	800334c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d107      	bne.n	800322e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800321e:	4b4e      	ldr	r3, [pc, #312]	; (8003358 <HAL_RCC_ClockConfig+0x1f0>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d109      	bne.n	800323e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e08e      	b.n	800334c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800322e:	4b4a      	ldr	r3, [pc, #296]	; (8003358 <HAL_RCC_ClockConfig+0x1f0>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e086      	b.n	800334c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800323e:	4b46      	ldr	r3, [pc, #280]	; (8003358 <HAL_RCC_ClockConfig+0x1f0>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f023 0203 	bic.w	r2, r3, #3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	4943      	ldr	r1, [pc, #268]	; (8003358 <HAL_RCC_ClockConfig+0x1f0>)
 800324c:	4313      	orrs	r3, r2
 800324e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003250:	f7fd fc78 	bl	8000b44 <HAL_GetTick>
 8003254:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003256:	e00a      	b.n	800326e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003258:	f7fd fc74 	bl	8000b44 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	f241 3288 	movw	r2, #5000	; 0x1388
 8003266:	4293      	cmp	r3, r2
 8003268:	d901      	bls.n	800326e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e06e      	b.n	800334c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800326e:	4b3a      	ldr	r3, [pc, #232]	; (8003358 <HAL_RCC_ClockConfig+0x1f0>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 020c 	and.w	r2, r3, #12
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	429a      	cmp	r2, r3
 800327e:	d1eb      	bne.n	8003258 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d010      	beq.n	80032ae <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	4b31      	ldr	r3, [pc, #196]	; (8003358 <HAL_RCC_ClockConfig+0x1f0>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003298:	429a      	cmp	r2, r3
 800329a:	d208      	bcs.n	80032ae <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800329c:	4b2e      	ldr	r3, [pc, #184]	; (8003358 <HAL_RCC_ClockConfig+0x1f0>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	492b      	ldr	r1, [pc, #172]	; (8003358 <HAL_RCC_ClockConfig+0x1f0>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032ae:	4b29      	ldr	r3, [pc, #164]	; (8003354 <HAL_RCC_ClockConfig+0x1ec>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d210      	bcs.n	80032de <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032bc:	4b25      	ldr	r3, [pc, #148]	; (8003354 <HAL_RCC_ClockConfig+0x1ec>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f023 0207 	bic.w	r2, r3, #7
 80032c4:	4923      	ldr	r1, [pc, #140]	; (8003354 <HAL_RCC_ClockConfig+0x1ec>)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032cc:	4b21      	ldr	r3, [pc, #132]	; (8003354 <HAL_RCC_ClockConfig+0x1ec>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d001      	beq.n	80032de <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e036      	b.n	800334c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0304 	and.w	r3, r3, #4
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d008      	beq.n	80032fc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032ea:	4b1b      	ldr	r3, [pc, #108]	; (8003358 <HAL_RCC_ClockConfig+0x1f0>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	4918      	ldr	r1, [pc, #96]	; (8003358 <HAL_RCC_ClockConfig+0x1f0>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0308 	and.w	r3, r3, #8
 8003304:	2b00      	cmp	r3, #0
 8003306:	d009      	beq.n	800331c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003308:	4b13      	ldr	r3, [pc, #76]	; (8003358 <HAL_RCC_ClockConfig+0x1f0>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	4910      	ldr	r1, [pc, #64]	; (8003358 <HAL_RCC_ClockConfig+0x1f0>)
 8003318:	4313      	orrs	r3, r2
 800331a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800331c:	f000 f824 	bl	8003368 <HAL_RCC_GetSysClockFreq>
 8003320:	4602      	mov	r2, r0
 8003322:	4b0d      	ldr	r3, [pc, #52]	; (8003358 <HAL_RCC_ClockConfig+0x1f0>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	091b      	lsrs	r3, r3, #4
 8003328:	f003 030f 	and.w	r3, r3, #15
 800332c:	490b      	ldr	r1, [pc, #44]	; (800335c <HAL_RCC_ClockConfig+0x1f4>)
 800332e:	5ccb      	ldrb	r3, [r1, r3]
 8003330:	f003 031f 	and.w	r3, r3, #31
 8003334:	fa22 f303 	lsr.w	r3, r2, r3
 8003338:	4a09      	ldr	r2, [pc, #36]	; (8003360 <HAL_RCC_ClockConfig+0x1f8>)
 800333a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800333c:	4b09      	ldr	r3, [pc, #36]	; (8003364 <HAL_RCC_ClockConfig+0x1fc>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4618      	mov	r0, r3
 8003342:	f7fd fbaf 	bl	8000aa4 <HAL_InitTick>
 8003346:	4603      	mov	r3, r0
 8003348:	72fb      	strb	r3, [r7, #11]

  return status;
 800334a:	7afb      	ldrb	r3, [r7, #11]
}
 800334c:	4618      	mov	r0, r3
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	40022000 	.word	0x40022000
 8003358:	40021000 	.word	0x40021000
 800335c:	080041dc 	.word	0x080041dc
 8003360:	20000000 	.word	0x20000000
 8003364:	20000004 	.word	0x20000004

08003368 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003368:	b480      	push	{r7}
 800336a:	b089      	sub	sp, #36	; 0x24
 800336c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800336e:	2300      	movs	r3, #0
 8003370:	61fb      	str	r3, [r7, #28]
 8003372:	2300      	movs	r3, #0
 8003374:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003376:	4b3e      	ldr	r3, [pc, #248]	; (8003470 <HAL_RCC_GetSysClockFreq+0x108>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 030c 	and.w	r3, r3, #12
 800337e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003380:	4b3b      	ldr	r3, [pc, #236]	; (8003470 <HAL_RCC_GetSysClockFreq+0x108>)
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	f003 0303 	and.w	r3, r3, #3
 8003388:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d005      	beq.n	800339c <HAL_RCC_GetSysClockFreq+0x34>
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	2b0c      	cmp	r3, #12
 8003394:	d121      	bne.n	80033da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d11e      	bne.n	80033da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800339c:	4b34      	ldr	r3, [pc, #208]	; (8003470 <HAL_RCC_GetSysClockFreq+0x108>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0308 	and.w	r3, r3, #8
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d107      	bne.n	80033b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80033a8:	4b31      	ldr	r3, [pc, #196]	; (8003470 <HAL_RCC_GetSysClockFreq+0x108>)
 80033aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033ae:	0a1b      	lsrs	r3, r3, #8
 80033b0:	f003 030f 	and.w	r3, r3, #15
 80033b4:	61fb      	str	r3, [r7, #28]
 80033b6:	e005      	b.n	80033c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80033b8:	4b2d      	ldr	r3, [pc, #180]	; (8003470 <HAL_RCC_GetSysClockFreq+0x108>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	091b      	lsrs	r3, r3, #4
 80033be:	f003 030f 	and.w	r3, r3, #15
 80033c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80033c4:	4a2b      	ldr	r2, [pc, #172]	; (8003474 <HAL_RCC_GetSysClockFreq+0x10c>)
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10d      	bne.n	80033f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033d8:	e00a      	b.n	80033f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	2b04      	cmp	r3, #4
 80033de:	d102      	bne.n	80033e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033e0:	4b25      	ldr	r3, [pc, #148]	; (8003478 <HAL_RCC_GetSysClockFreq+0x110>)
 80033e2:	61bb      	str	r3, [r7, #24]
 80033e4:	e004      	b.n	80033f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	2b08      	cmp	r3, #8
 80033ea:	d101      	bne.n	80033f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033ec:	4b23      	ldr	r3, [pc, #140]	; (800347c <HAL_RCC_GetSysClockFreq+0x114>)
 80033ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	2b0c      	cmp	r3, #12
 80033f4:	d134      	bne.n	8003460 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033f6:	4b1e      	ldr	r3, [pc, #120]	; (8003470 <HAL_RCC_GetSysClockFreq+0x108>)
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	f003 0303 	and.w	r3, r3, #3
 80033fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	2b02      	cmp	r3, #2
 8003404:	d003      	beq.n	800340e <HAL_RCC_GetSysClockFreq+0xa6>
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	2b03      	cmp	r3, #3
 800340a:	d003      	beq.n	8003414 <HAL_RCC_GetSysClockFreq+0xac>
 800340c:	e005      	b.n	800341a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800340e:	4b1a      	ldr	r3, [pc, #104]	; (8003478 <HAL_RCC_GetSysClockFreq+0x110>)
 8003410:	617b      	str	r3, [r7, #20]
      break;
 8003412:	e005      	b.n	8003420 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003414:	4b19      	ldr	r3, [pc, #100]	; (800347c <HAL_RCC_GetSysClockFreq+0x114>)
 8003416:	617b      	str	r3, [r7, #20]
      break;
 8003418:	e002      	b.n	8003420 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	617b      	str	r3, [r7, #20]
      break;
 800341e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003420:	4b13      	ldr	r3, [pc, #76]	; (8003470 <HAL_RCC_GetSysClockFreq+0x108>)
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	091b      	lsrs	r3, r3, #4
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	3301      	adds	r3, #1
 800342c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800342e:	4b10      	ldr	r3, [pc, #64]	; (8003470 <HAL_RCC_GetSysClockFreq+0x108>)
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	0a1b      	lsrs	r3, r3, #8
 8003434:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	fb03 f202 	mul.w	r2, r3, r2
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	fbb2 f3f3 	udiv	r3, r2, r3
 8003444:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003446:	4b0a      	ldr	r3, [pc, #40]	; (8003470 <HAL_RCC_GetSysClockFreq+0x108>)
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	0e5b      	lsrs	r3, r3, #25
 800344c:	f003 0303 	and.w	r3, r3, #3
 8003450:	3301      	adds	r3, #1
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	fbb2 f3f3 	udiv	r3, r2, r3
 800345e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003460:	69bb      	ldr	r3, [r7, #24]
}
 8003462:	4618      	mov	r0, r3
 8003464:	3724      	adds	r7, #36	; 0x24
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	40021000 	.word	0x40021000
 8003474:	080041f4 	.word	0x080041f4
 8003478:	00f42400 	.word	0x00f42400
 800347c:	007a1200 	.word	0x007a1200

08003480 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003484:	4b03      	ldr	r3, [pc, #12]	; (8003494 <HAL_RCC_GetHCLKFreq+0x14>)
 8003486:	681b      	ldr	r3, [r3, #0]
}
 8003488:	4618      	mov	r0, r3
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	20000000 	.word	0x20000000

08003498 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800349c:	f7ff fff0 	bl	8003480 <HAL_RCC_GetHCLKFreq>
 80034a0:	4602      	mov	r2, r0
 80034a2:	4b06      	ldr	r3, [pc, #24]	; (80034bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	0a1b      	lsrs	r3, r3, #8
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	4904      	ldr	r1, [pc, #16]	; (80034c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80034ae:	5ccb      	ldrb	r3, [r1, r3]
 80034b0:	f003 031f 	and.w	r3, r3, #31
 80034b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40021000 	.word	0x40021000
 80034c0:	080041ec 	.word	0x080041ec

080034c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80034c8:	f7ff ffda 	bl	8003480 <HAL_RCC_GetHCLKFreq>
 80034cc:	4602      	mov	r2, r0
 80034ce:	4b06      	ldr	r3, [pc, #24]	; (80034e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	0adb      	lsrs	r3, r3, #11
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	4904      	ldr	r1, [pc, #16]	; (80034ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80034da:	5ccb      	ldrb	r3, [r1, r3]
 80034dc:	f003 031f 	and.w	r3, r3, #31
 80034e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	40021000 	.word	0x40021000
 80034ec:	080041ec 	.word	0x080041ec

080034f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80034f8:	2300      	movs	r3, #0
 80034fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80034fc:	4b2a      	ldr	r3, [pc, #168]	; (80035a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d003      	beq.n	8003510 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003508:	f7ff f968 	bl	80027dc <HAL_PWREx_GetVoltageRange>
 800350c:	6178      	str	r0, [r7, #20]
 800350e:	e014      	b.n	800353a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003510:	4b25      	ldr	r3, [pc, #148]	; (80035a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003514:	4a24      	ldr	r2, [pc, #144]	; (80035a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003516:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800351a:	6593      	str	r3, [r2, #88]	; 0x58
 800351c:	4b22      	ldr	r3, [pc, #136]	; (80035a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800351e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003524:	60fb      	str	r3, [r7, #12]
 8003526:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003528:	f7ff f958 	bl	80027dc <HAL_PWREx_GetVoltageRange>
 800352c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800352e:	4b1e      	ldr	r3, [pc, #120]	; (80035a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003532:	4a1d      	ldr	r2, [pc, #116]	; (80035a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003534:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003538:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003540:	d10b      	bne.n	800355a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b80      	cmp	r3, #128	; 0x80
 8003546:	d919      	bls.n	800357c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2ba0      	cmp	r3, #160	; 0xa0
 800354c:	d902      	bls.n	8003554 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800354e:	2302      	movs	r3, #2
 8003550:	613b      	str	r3, [r7, #16]
 8003552:	e013      	b.n	800357c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003554:	2301      	movs	r3, #1
 8003556:	613b      	str	r3, [r7, #16]
 8003558:	e010      	b.n	800357c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2b80      	cmp	r3, #128	; 0x80
 800355e:	d902      	bls.n	8003566 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003560:	2303      	movs	r3, #3
 8003562:	613b      	str	r3, [r7, #16]
 8003564:	e00a      	b.n	800357c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b80      	cmp	r3, #128	; 0x80
 800356a:	d102      	bne.n	8003572 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800356c:	2302      	movs	r3, #2
 800356e:	613b      	str	r3, [r7, #16]
 8003570:	e004      	b.n	800357c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b70      	cmp	r3, #112	; 0x70
 8003576:	d101      	bne.n	800357c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003578:	2301      	movs	r3, #1
 800357a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800357c:	4b0b      	ldr	r3, [pc, #44]	; (80035ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f023 0207 	bic.w	r2, r3, #7
 8003584:	4909      	ldr	r1, [pc, #36]	; (80035ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	4313      	orrs	r3, r2
 800358a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800358c:	4b07      	ldr	r3, [pc, #28]	; (80035ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	429a      	cmp	r2, r3
 8003598:	d001      	beq.n	800359e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e000      	b.n	80035a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3718      	adds	r7, #24
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40021000 	.word	0x40021000
 80035ac:	40022000 	.word	0x40022000

080035b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035b8:	2300      	movs	r3, #0
 80035ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035bc:	2300      	movs	r3, #0
 80035be:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f000 809e 	beq.w	800370a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ce:	2300      	movs	r3, #0
 80035d0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035d2:	4b46      	ldr	r3, [pc, #280]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80035d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80035de:	2301      	movs	r3, #1
 80035e0:	e000      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x34>
 80035e2:	2300      	movs	r3, #0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00d      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035e8:	4b40      	ldr	r3, [pc, #256]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80035ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ec:	4a3f      	ldr	r2, [pc, #252]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80035ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f2:	6593      	str	r3, [r2, #88]	; 0x58
 80035f4:	4b3d      	ldr	r3, [pc, #244]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80035f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035fc:	60bb      	str	r3, [r7, #8]
 80035fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003600:	2301      	movs	r3, #1
 8003602:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003604:	4b3a      	ldr	r3, [pc, #232]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a39      	ldr	r2, [pc, #228]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800360a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800360e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003610:	f7fd fa98 	bl	8000b44 <HAL_GetTick>
 8003614:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003616:	e009      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003618:	f7fd fa94 	bl	8000b44 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d902      	bls.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	74fb      	strb	r3, [r7, #19]
        break;
 800362a:	e005      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800362c:	4b30      	ldr	r3, [pc, #192]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003634:	2b00      	cmp	r3, #0
 8003636:	d0ef      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8003638:	7cfb      	ldrb	r3, [r7, #19]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d15a      	bne.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800363e:	4b2b      	ldr	r3, [pc, #172]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003644:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003648:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d01e      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	429a      	cmp	r2, r3
 8003658:	d019      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800365a:	4b24      	ldr	r3, [pc, #144]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800365c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003660:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003664:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003666:	4b21      	ldr	r3, [pc, #132]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366c:	4a1f      	ldr	r2, [pc, #124]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800366e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003672:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003676:	4b1d      	ldr	r3, [pc, #116]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367c:	4a1b      	ldr	r2, [pc, #108]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800367e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003682:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003686:	4a19      	ldr	r2, [pc, #100]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	2b00      	cmp	r3, #0
 8003696:	d016      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003698:	f7fd fa54 	bl	8000b44 <HAL_GetTick>
 800369c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800369e:	e00b      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a0:	f7fd fa50 	bl	8000b44 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d902      	bls.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	74fb      	strb	r3, [r7, #19]
            break;
 80036b6:	e006      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036b8:	4b0c      	ldr	r3, [pc, #48]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80036ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0ec      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 80036c6:	7cfb      	ldrb	r3, [r7, #19]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d10b      	bne.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036cc:	4b07      	ldr	r3, [pc, #28]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80036ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036da:	4904      	ldr	r1, [pc, #16]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80036e2:	e009      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036e4:	7cfb      	ldrb	r3, [r7, #19]
 80036e6:	74bb      	strb	r3, [r7, #18]
 80036e8:	e006      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80036ea:	bf00      	nop
 80036ec:	40021000 	.word	0x40021000
 80036f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f4:	7cfb      	ldrb	r3, [r7, #19]
 80036f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036f8:	7c7b      	ldrb	r3, [r7, #17]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d105      	bne.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036fe:	4b6e      	ldr	r3, [pc, #440]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003702:	4a6d      	ldr	r2, [pc, #436]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003704:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003708:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00a      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003716:	4b68      	ldr	r3, [pc, #416]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371c:	f023 0203 	bic.w	r2, r3, #3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	4964      	ldr	r1, [pc, #400]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003726:	4313      	orrs	r3, r2
 8003728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00a      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003738:	4b5f      	ldr	r3, [pc, #380]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800373a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373e:	f023 020c 	bic.w	r2, r3, #12
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	495c      	ldr	r1, [pc, #368]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003748:	4313      	orrs	r3, r2
 800374a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0304 	and.w	r3, r3, #4
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00a      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800375a:	4b57      	ldr	r3, [pc, #348]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800375c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003760:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	4953      	ldr	r1, [pc, #332]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800376a:	4313      	orrs	r3, r2
 800376c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0320 	and.w	r3, r3, #32
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00a      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800377c:	4b4e      	ldr	r3, [pc, #312]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800377e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003782:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	494b      	ldr	r1, [pc, #300]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800378c:	4313      	orrs	r3, r2
 800378e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00a      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800379e:	4b46      	ldr	r3, [pc, #280]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	4942      	ldr	r1, [pc, #264]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00a      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80037c0:	4b3d      	ldr	r3, [pc, #244]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ce:	493a      	ldr	r1, [pc, #232]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00a      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037e2:	4b35      	ldr	r3, [pc, #212]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	4931      	ldr	r1, [pc, #196]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00a      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003804:	4b2c      	ldr	r3, [pc, #176]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	4929      	ldr	r1, [pc, #164]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003814:	4313      	orrs	r3, r2
 8003816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00a      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003826:	4b24      	ldr	r3, [pc, #144]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	69db      	ldr	r3, [r3, #28]
 8003834:	4920      	ldr	r1, [pc, #128]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003836:	4313      	orrs	r3, r2
 8003838:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d015      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003848:	4b1b      	ldr	r3, [pc, #108]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800384a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003856:	4918      	ldr	r1, [pc, #96]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003858:	4313      	orrs	r3, r2
 800385a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003862:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003866:	d105      	bne.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003868:	4b13      	ldr	r3, [pc, #76]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	4a12      	ldr	r2, [pc, #72]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800386e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003872:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d015      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003880:	4b0d      	ldr	r3, [pc, #52]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003886:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388e:	490a      	ldr	r1, [pc, #40]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003890:	4313      	orrs	r3, r2
 8003892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800389e:	d105      	bne.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038a0:	4b05      	ldr	r3, [pc, #20]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	4a04      	ldr	r2, [pc, #16]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80038a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038aa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80038ac:	7cbb      	ldrb	r3, [r7, #18]
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3718      	adds	r7, #24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	40021000 	.word	0x40021000

080038bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e040      	b.n	8003950 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d106      	bne.n	80038e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7fd f802 	bl	80008e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2224      	movs	r2, #36	; 0x24
 80038e8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 0201 	bic.w	r2, r2, #1
 80038f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f82c 	bl	8003958 <UART_SetConfig>
 8003900:	4603      	mov	r3, r0
 8003902:	2b01      	cmp	r3, #1
 8003904:	d101      	bne.n	800390a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e022      	b.n	8003950 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	2b00      	cmp	r3, #0
 8003910:	d002      	beq.n	8003918 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 fa7a 	bl	8003e0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003926:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689a      	ldr	r2, [r3, #8]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003936:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 0201 	orr.w	r2, r2, #1
 8003946:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 fb01 	bl	8003f50 <UART_CheckIdleState>
 800394e:	4603      	mov	r3, r0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3708      	adds	r7, #8
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003958:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800395c:	b08a      	sub	sp, #40	; 0x28
 800395e:	af00      	add	r7, sp, #0
 8003960:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003962:	2300      	movs	r3, #0
 8003964:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	431a      	orrs	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	431a      	orrs	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	69db      	ldr	r3, [r3, #28]
 800397c:	4313      	orrs	r3, r2
 800397e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	4b9e      	ldr	r3, [pc, #632]	; (8003c00 <UART_SetConfig+0x2a8>)
 8003988:	4013      	ands	r3, r2
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	6812      	ldr	r2, [r2, #0]
 800398e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003990:	430b      	orrs	r3, r1
 8003992:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	68da      	ldr	r2, [r3, #12]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a93      	ldr	r2, [pc, #588]	; (8003c04 <UART_SetConfig+0x2ac>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d004      	beq.n	80039c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c0:	4313      	orrs	r3, r2
 80039c2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039d4:	430a      	orrs	r2, r1
 80039d6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a8a      	ldr	r2, [pc, #552]	; (8003c08 <UART_SetConfig+0x2b0>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d126      	bne.n	8003a30 <UART_SetConfig+0xd8>
 80039e2:	4b8a      	ldr	r3, [pc, #552]	; (8003c0c <UART_SetConfig+0x2b4>)
 80039e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e8:	f003 0303 	and.w	r3, r3, #3
 80039ec:	2b03      	cmp	r3, #3
 80039ee:	d81b      	bhi.n	8003a28 <UART_SetConfig+0xd0>
 80039f0:	a201      	add	r2, pc, #4	; (adr r2, 80039f8 <UART_SetConfig+0xa0>)
 80039f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f6:	bf00      	nop
 80039f8:	08003a09 	.word	0x08003a09
 80039fc:	08003a19 	.word	0x08003a19
 8003a00:	08003a11 	.word	0x08003a11
 8003a04:	08003a21 	.word	0x08003a21
 8003a08:	2301      	movs	r3, #1
 8003a0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a0e:	e0ab      	b.n	8003b68 <UART_SetConfig+0x210>
 8003a10:	2302      	movs	r3, #2
 8003a12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a16:	e0a7      	b.n	8003b68 <UART_SetConfig+0x210>
 8003a18:	2304      	movs	r3, #4
 8003a1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a1e:	e0a3      	b.n	8003b68 <UART_SetConfig+0x210>
 8003a20:	2308      	movs	r3, #8
 8003a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a26:	e09f      	b.n	8003b68 <UART_SetConfig+0x210>
 8003a28:	2310      	movs	r3, #16
 8003a2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a2e:	e09b      	b.n	8003b68 <UART_SetConfig+0x210>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a76      	ldr	r2, [pc, #472]	; (8003c10 <UART_SetConfig+0x2b8>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d138      	bne.n	8003aac <UART_SetConfig+0x154>
 8003a3a:	4b74      	ldr	r3, [pc, #464]	; (8003c0c <UART_SetConfig+0x2b4>)
 8003a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a40:	f003 030c 	and.w	r3, r3, #12
 8003a44:	2b0c      	cmp	r3, #12
 8003a46:	d82d      	bhi.n	8003aa4 <UART_SetConfig+0x14c>
 8003a48:	a201      	add	r2, pc, #4	; (adr r2, 8003a50 <UART_SetConfig+0xf8>)
 8003a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4e:	bf00      	nop
 8003a50:	08003a85 	.word	0x08003a85
 8003a54:	08003aa5 	.word	0x08003aa5
 8003a58:	08003aa5 	.word	0x08003aa5
 8003a5c:	08003aa5 	.word	0x08003aa5
 8003a60:	08003a95 	.word	0x08003a95
 8003a64:	08003aa5 	.word	0x08003aa5
 8003a68:	08003aa5 	.word	0x08003aa5
 8003a6c:	08003aa5 	.word	0x08003aa5
 8003a70:	08003a8d 	.word	0x08003a8d
 8003a74:	08003aa5 	.word	0x08003aa5
 8003a78:	08003aa5 	.word	0x08003aa5
 8003a7c:	08003aa5 	.word	0x08003aa5
 8003a80:	08003a9d 	.word	0x08003a9d
 8003a84:	2300      	movs	r3, #0
 8003a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a8a:	e06d      	b.n	8003b68 <UART_SetConfig+0x210>
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a92:	e069      	b.n	8003b68 <UART_SetConfig+0x210>
 8003a94:	2304      	movs	r3, #4
 8003a96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a9a:	e065      	b.n	8003b68 <UART_SetConfig+0x210>
 8003a9c:	2308      	movs	r3, #8
 8003a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aa2:	e061      	b.n	8003b68 <UART_SetConfig+0x210>
 8003aa4:	2310      	movs	r3, #16
 8003aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aaa:	e05d      	b.n	8003b68 <UART_SetConfig+0x210>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a58      	ldr	r2, [pc, #352]	; (8003c14 <UART_SetConfig+0x2bc>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d125      	bne.n	8003b02 <UART_SetConfig+0x1aa>
 8003ab6:	4b55      	ldr	r3, [pc, #340]	; (8003c0c <UART_SetConfig+0x2b4>)
 8003ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003abc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003ac0:	2b30      	cmp	r3, #48	; 0x30
 8003ac2:	d016      	beq.n	8003af2 <UART_SetConfig+0x19a>
 8003ac4:	2b30      	cmp	r3, #48	; 0x30
 8003ac6:	d818      	bhi.n	8003afa <UART_SetConfig+0x1a2>
 8003ac8:	2b20      	cmp	r3, #32
 8003aca:	d00a      	beq.n	8003ae2 <UART_SetConfig+0x18a>
 8003acc:	2b20      	cmp	r3, #32
 8003ace:	d814      	bhi.n	8003afa <UART_SetConfig+0x1a2>
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d002      	beq.n	8003ada <UART_SetConfig+0x182>
 8003ad4:	2b10      	cmp	r3, #16
 8003ad6:	d008      	beq.n	8003aea <UART_SetConfig+0x192>
 8003ad8:	e00f      	b.n	8003afa <UART_SetConfig+0x1a2>
 8003ada:	2300      	movs	r3, #0
 8003adc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ae0:	e042      	b.n	8003b68 <UART_SetConfig+0x210>
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ae8:	e03e      	b.n	8003b68 <UART_SetConfig+0x210>
 8003aea:	2304      	movs	r3, #4
 8003aec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003af0:	e03a      	b.n	8003b68 <UART_SetConfig+0x210>
 8003af2:	2308      	movs	r3, #8
 8003af4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003af8:	e036      	b.n	8003b68 <UART_SetConfig+0x210>
 8003afa:	2310      	movs	r3, #16
 8003afc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b00:	e032      	b.n	8003b68 <UART_SetConfig+0x210>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a3f      	ldr	r2, [pc, #252]	; (8003c04 <UART_SetConfig+0x2ac>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d12a      	bne.n	8003b62 <UART_SetConfig+0x20a>
 8003b0c:	4b3f      	ldr	r3, [pc, #252]	; (8003c0c <UART_SetConfig+0x2b4>)
 8003b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b12:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b1a:	d01a      	beq.n	8003b52 <UART_SetConfig+0x1fa>
 8003b1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b20:	d81b      	bhi.n	8003b5a <UART_SetConfig+0x202>
 8003b22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b26:	d00c      	beq.n	8003b42 <UART_SetConfig+0x1ea>
 8003b28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b2c:	d815      	bhi.n	8003b5a <UART_SetConfig+0x202>
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d003      	beq.n	8003b3a <UART_SetConfig+0x1e2>
 8003b32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b36:	d008      	beq.n	8003b4a <UART_SetConfig+0x1f2>
 8003b38:	e00f      	b.n	8003b5a <UART_SetConfig+0x202>
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b40:	e012      	b.n	8003b68 <UART_SetConfig+0x210>
 8003b42:	2302      	movs	r3, #2
 8003b44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b48:	e00e      	b.n	8003b68 <UART_SetConfig+0x210>
 8003b4a:	2304      	movs	r3, #4
 8003b4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b50:	e00a      	b.n	8003b68 <UART_SetConfig+0x210>
 8003b52:	2308      	movs	r3, #8
 8003b54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b58:	e006      	b.n	8003b68 <UART_SetConfig+0x210>
 8003b5a:	2310      	movs	r3, #16
 8003b5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b60:	e002      	b.n	8003b68 <UART_SetConfig+0x210>
 8003b62:	2310      	movs	r3, #16
 8003b64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a25      	ldr	r2, [pc, #148]	; (8003c04 <UART_SetConfig+0x2ac>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	f040 808a 	bne.w	8003c88 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b78:	2b08      	cmp	r3, #8
 8003b7a:	d824      	bhi.n	8003bc6 <UART_SetConfig+0x26e>
 8003b7c:	a201      	add	r2, pc, #4	; (adr r2, 8003b84 <UART_SetConfig+0x22c>)
 8003b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b82:	bf00      	nop
 8003b84:	08003ba9 	.word	0x08003ba9
 8003b88:	08003bc7 	.word	0x08003bc7
 8003b8c:	08003bb1 	.word	0x08003bb1
 8003b90:	08003bc7 	.word	0x08003bc7
 8003b94:	08003bb7 	.word	0x08003bb7
 8003b98:	08003bc7 	.word	0x08003bc7
 8003b9c:	08003bc7 	.word	0x08003bc7
 8003ba0:	08003bc7 	.word	0x08003bc7
 8003ba4:	08003bbf 	.word	0x08003bbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ba8:	f7ff fc76 	bl	8003498 <HAL_RCC_GetPCLK1Freq>
 8003bac:	61f8      	str	r0, [r7, #28]
        break;
 8003bae:	e010      	b.n	8003bd2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bb0:	4b19      	ldr	r3, [pc, #100]	; (8003c18 <UART_SetConfig+0x2c0>)
 8003bb2:	61fb      	str	r3, [r7, #28]
        break;
 8003bb4:	e00d      	b.n	8003bd2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bb6:	f7ff fbd7 	bl	8003368 <HAL_RCC_GetSysClockFreq>
 8003bba:	61f8      	str	r0, [r7, #28]
        break;
 8003bbc:	e009      	b.n	8003bd2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bc2:	61fb      	str	r3, [r7, #28]
        break;
 8003bc4:	e005      	b.n	8003bd2 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003bd0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 8109 	beq.w	8003dec <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	685a      	ldr	r2, [r3, #4]
 8003bde:	4613      	mov	r3, r2
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	4413      	add	r3, r2
 8003be4:	69fa      	ldr	r2, [r7, #28]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d305      	bcc.n	8003bf6 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003bf0:	69fa      	ldr	r2, [r7, #28]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d912      	bls.n	8003c1c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003bfc:	e0f6      	b.n	8003dec <UART_SetConfig+0x494>
 8003bfe:	bf00      	nop
 8003c00:	efff69f3 	.word	0xefff69f3
 8003c04:	40008000 	.word	0x40008000
 8003c08:	40013800 	.word	0x40013800
 8003c0c:	40021000 	.word	0x40021000
 8003c10:	40004400 	.word	0x40004400
 8003c14:	40004800 	.word	0x40004800
 8003c18:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	461c      	mov	r4, r3
 8003c22:	4615      	mov	r5, r2
 8003c24:	f04f 0200 	mov.w	r2, #0
 8003c28:	f04f 0300 	mov.w	r3, #0
 8003c2c:	022b      	lsls	r3, r5, #8
 8003c2e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003c32:	0222      	lsls	r2, r4, #8
 8003c34:	68f9      	ldr	r1, [r7, #12]
 8003c36:	6849      	ldr	r1, [r1, #4]
 8003c38:	0849      	lsrs	r1, r1, #1
 8003c3a:	2000      	movs	r0, #0
 8003c3c:	4688      	mov	r8, r1
 8003c3e:	4681      	mov	r9, r0
 8003c40:	eb12 0a08 	adds.w	sl, r2, r8
 8003c44:	eb43 0b09 	adc.w	fp, r3, r9
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	603b      	str	r3, [r7, #0]
 8003c50:	607a      	str	r2, [r7, #4]
 8003c52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c56:	4650      	mov	r0, sl
 8003c58:	4659      	mov	r1, fp
 8003c5a:	f7fc fab7 	bl	80001cc <__aeabi_uldivmod>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	460b      	mov	r3, r1
 8003c62:	4613      	mov	r3, r2
 8003c64:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c6c:	d308      	bcc.n	8003c80 <UART_SetConfig+0x328>
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c74:	d204      	bcs.n	8003c80 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	60da      	str	r2, [r3, #12]
 8003c7e:	e0b5      	b.n	8003dec <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c86:	e0b1      	b.n	8003dec <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	69db      	ldr	r3, [r3, #28]
 8003c8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c90:	d15d      	bne.n	8003d4e <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8003c92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c96:	2b08      	cmp	r3, #8
 8003c98:	d827      	bhi.n	8003cea <UART_SetConfig+0x392>
 8003c9a:	a201      	add	r2, pc, #4	; (adr r2, 8003ca0 <UART_SetConfig+0x348>)
 8003c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca0:	08003cc5 	.word	0x08003cc5
 8003ca4:	08003ccd 	.word	0x08003ccd
 8003ca8:	08003cd5 	.word	0x08003cd5
 8003cac:	08003ceb 	.word	0x08003ceb
 8003cb0:	08003cdb 	.word	0x08003cdb
 8003cb4:	08003ceb 	.word	0x08003ceb
 8003cb8:	08003ceb 	.word	0x08003ceb
 8003cbc:	08003ceb 	.word	0x08003ceb
 8003cc0:	08003ce3 	.word	0x08003ce3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cc4:	f7ff fbe8 	bl	8003498 <HAL_RCC_GetPCLK1Freq>
 8003cc8:	61f8      	str	r0, [r7, #28]
        break;
 8003cca:	e014      	b.n	8003cf6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ccc:	f7ff fbfa 	bl	80034c4 <HAL_RCC_GetPCLK2Freq>
 8003cd0:	61f8      	str	r0, [r7, #28]
        break;
 8003cd2:	e010      	b.n	8003cf6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cd4:	4b4c      	ldr	r3, [pc, #304]	; (8003e08 <UART_SetConfig+0x4b0>)
 8003cd6:	61fb      	str	r3, [r7, #28]
        break;
 8003cd8:	e00d      	b.n	8003cf6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cda:	f7ff fb45 	bl	8003368 <HAL_RCC_GetSysClockFreq>
 8003cde:	61f8      	str	r0, [r7, #28]
        break;
 8003ce0:	e009      	b.n	8003cf6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ce6:	61fb      	str	r3, [r7, #28]
        break;
 8003ce8:	e005      	b.n	8003cf6 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003cf4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d077      	beq.n	8003dec <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	005a      	lsls	r2, r3, #1
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	085b      	lsrs	r3, r3, #1
 8003d06:	441a      	add	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d10:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	2b0f      	cmp	r3, #15
 8003d16:	d916      	bls.n	8003d46 <UART_SetConfig+0x3ee>
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d1e:	d212      	bcs.n	8003d46 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	f023 030f 	bic.w	r3, r3, #15
 8003d28:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	085b      	lsrs	r3, r3, #1
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	f003 0307 	and.w	r3, r3, #7
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	8afb      	ldrh	r3, [r7, #22]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	8afa      	ldrh	r2, [r7, #22]
 8003d42:	60da      	str	r2, [r3, #12]
 8003d44:	e052      	b.n	8003dec <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d4c:	e04e      	b.n	8003dec <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d52:	2b08      	cmp	r3, #8
 8003d54:	d827      	bhi.n	8003da6 <UART_SetConfig+0x44e>
 8003d56:	a201      	add	r2, pc, #4	; (adr r2, 8003d5c <UART_SetConfig+0x404>)
 8003d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d5c:	08003d81 	.word	0x08003d81
 8003d60:	08003d89 	.word	0x08003d89
 8003d64:	08003d91 	.word	0x08003d91
 8003d68:	08003da7 	.word	0x08003da7
 8003d6c:	08003d97 	.word	0x08003d97
 8003d70:	08003da7 	.word	0x08003da7
 8003d74:	08003da7 	.word	0x08003da7
 8003d78:	08003da7 	.word	0x08003da7
 8003d7c:	08003d9f 	.word	0x08003d9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d80:	f7ff fb8a 	bl	8003498 <HAL_RCC_GetPCLK1Freq>
 8003d84:	61f8      	str	r0, [r7, #28]
        break;
 8003d86:	e014      	b.n	8003db2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d88:	f7ff fb9c 	bl	80034c4 <HAL_RCC_GetPCLK2Freq>
 8003d8c:	61f8      	str	r0, [r7, #28]
        break;
 8003d8e:	e010      	b.n	8003db2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d90:	4b1d      	ldr	r3, [pc, #116]	; (8003e08 <UART_SetConfig+0x4b0>)
 8003d92:	61fb      	str	r3, [r7, #28]
        break;
 8003d94:	e00d      	b.n	8003db2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d96:	f7ff fae7 	bl	8003368 <HAL_RCC_GetSysClockFreq>
 8003d9a:	61f8      	str	r0, [r7, #28]
        break;
 8003d9c:	e009      	b.n	8003db2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003da2:	61fb      	str	r3, [r7, #28]
        break;
 8003da4:	e005      	b.n	8003db2 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8003da6:	2300      	movs	r3, #0
 8003da8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003db0:	bf00      	nop
    }

    if (pclk != 0U)
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d019      	beq.n	8003dec <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	085a      	lsrs	r2, r3, #1
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	441a      	add	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dca:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	2b0f      	cmp	r3, #15
 8003dd0:	d909      	bls.n	8003de6 <UART_SetConfig+0x48e>
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dd8:	d205      	bcs.n	8003de6 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	60da      	str	r2, [r3, #12]
 8003de4:	e002      	b.n	8003dec <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003df8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3728      	adds	r7, #40	; 0x28
 8003e00:	46bd      	mov	sp, r7
 8003e02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e06:	bf00      	nop
 8003e08:	00f42400 	.word	0x00f42400

08003e0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00a      	beq.n	8003e36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00a      	beq.n	8003e58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5c:	f003 0304 	and.w	r3, r3, #4
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00a      	beq.n	8003e7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7e:	f003 0308 	and.w	r3, r3, #8
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00a      	beq.n	8003e9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea0:	f003 0310 	and.w	r3, r3, #16
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00a      	beq.n	8003ebe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec2:	f003 0320 	and.w	r3, r3, #32
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00a      	beq.n	8003ee0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	430a      	orrs	r2, r1
 8003ede:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d01a      	beq.n	8003f22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	430a      	orrs	r2, r1
 8003f00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f0a:	d10a      	bne.n	8003f22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00a      	beq.n	8003f44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	605a      	str	r2, [r3, #4]
  }
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af02      	add	r7, sp, #8
 8003f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f60:	f7fc fdf0 	bl	8000b44 <HAL_GetTick>
 8003f64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0308 	and.w	r3, r3, #8
 8003f70:	2b08      	cmp	r3, #8
 8003f72:	d10e      	bne.n	8003f92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f78:	9300      	str	r3, [sp, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f82d 	bl	8003fe2 <UART_WaitOnFlagUntilTimeout>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e023      	b.n	8003fda <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0304 	and.w	r3, r3, #4
 8003f9c:	2b04      	cmp	r3, #4
 8003f9e:	d10e      	bne.n	8003fbe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fa0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f817 	bl	8003fe2 <UART_WaitOnFlagUntilTimeout>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e00d      	b.n	8003fda <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b09c      	sub	sp, #112	; 0x70
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	60f8      	str	r0, [r7, #12]
 8003fea:	60b9      	str	r1, [r7, #8]
 8003fec:	603b      	str	r3, [r7, #0]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ff2:	e0a5      	b.n	8004140 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ff4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffa:	f000 80a1 	beq.w	8004140 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ffe:	f7fc fda1 	bl	8000b44 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800400a:	429a      	cmp	r2, r3
 800400c:	d302      	bcc.n	8004014 <UART_WaitOnFlagUntilTimeout+0x32>
 800400e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004010:	2b00      	cmp	r3, #0
 8004012:	d13e      	bne.n	8004092 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800401c:	e853 3f00 	ldrex	r3, [r3]
 8004020:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004024:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004028:	667b      	str	r3, [r7, #100]	; 0x64
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	461a      	mov	r2, r3
 8004030:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004032:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004034:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004036:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004038:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800403a:	e841 2300 	strex	r3, r2, [r1]
 800403e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004040:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1e6      	bne.n	8004014 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	3308      	adds	r3, #8
 800404c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004050:	e853 3f00 	ldrex	r3, [r3]
 8004054:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004058:	f023 0301 	bic.w	r3, r3, #1
 800405c:	663b      	str	r3, [r7, #96]	; 0x60
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	3308      	adds	r3, #8
 8004064:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004066:	64ba      	str	r2, [r7, #72]	; 0x48
 8004068:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800406c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800406e:	e841 2300 	strex	r3, r2, [r1]
 8004072:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004074:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1e5      	bne.n	8004046 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2220      	movs	r2, #32
 800407e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2220      	movs	r2, #32
 8004084:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e067      	b.n	8004162 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	2b00      	cmp	r3, #0
 800409e:	d04f      	beq.n	8004140 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040ae:	d147      	bne.n	8004140 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040b8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c2:	e853 3f00 	ldrex	r3, [r3]
 80040c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	461a      	mov	r2, r3
 80040d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040d8:	637b      	str	r3, [r7, #52]	; 0x34
 80040da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040e0:	e841 2300 	strex	r3, r2, [r1]
 80040e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1e6      	bne.n	80040ba <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	3308      	adds	r3, #8
 80040f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	e853 3f00 	ldrex	r3, [r3]
 80040fa:	613b      	str	r3, [r7, #16]
   return(result);
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	f023 0301 	bic.w	r3, r3, #1
 8004102:	66bb      	str	r3, [r7, #104]	; 0x68
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	3308      	adds	r3, #8
 800410a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800410c:	623a      	str	r2, [r7, #32]
 800410e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004110:	69f9      	ldr	r1, [r7, #28]
 8004112:	6a3a      	ldr	r2, [r7, #32]
 8004114:	e841 2300 	strex	r3, r2, [r1]
 8004118:	61bb      	str	r3, [r7, #24]
   return(result);
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1e5      	bne.n	80040ec <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2220      	movs	r2, #32
 8004124:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2220      	movs	r2, #32
 800412a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2220      	movs	r2, #32
 8004130:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e010      	b.n	8004162 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	69da      	ldr	r2, [r3, #28]
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	4013      	ands	r3, r2
 800414a:	68ba      	ldr	r2, [r7, #8]
 800414c:	429a      	cmp	r2, r3
 800414e:	bf0c      	ite	eq
 8004150:	2301      	moveq	r3, #1
 8004152:	2300      	movne	r3, #0
 8004154:	b2db      	uxtb	r3, r3
 8004156:	461a      	mov	r2, r3
 8004158:	79fb      	ldrb	r3, [r7, #7]
 800415a:	429a      	cmp	r2, r3
 800415c:	f43f af4a 	beq.w	8003ff4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3770      	adds	r7, #112	; 0x70
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
	...

0800416c <__libc_init_array>:
 800416c:	b570      	push	{r4, r5, r6, lr}
 800416e:	4d0d      	ldr	r5, [pc, #52]	; (80041a4 <__libc_init_array+0x38>)
 8004170:	4c0d      	ldr	r4, [pc, #52]	; (80041a8 <__libc_init_array+0x3c>)
 8004172:	1b64      	subs	r4, r4, r5
 8004174:	10a4      	asrs	r4, r4, #2
 8004176:	2600      	movs	r6, #0
 8004178:	42a6      	cmp	r6, r4
 800417a:	d109      	bne.n	8004190 <__libc_init_array+0x24>
 800417c:	4d0b      	ldr	r5, [pc, #44]	; (80041ac <__libc_init_array+0x40>)
 800417e:	4c0c      	ldr	r4, [pc, #48]	; (80041b0 <__libc_init_array+0x44>)
 8004180:	f000 f820 	bl	80041c4 <_init>
 8004184:	1b64      	subs	r4, r4, r5
 8004186:	10a4      	asrs	r4, r4, #2
 8004188:	2600      	movs	r6, #0
 800418a:	42a6      	cmp	r6, r4
 800418c:	d105      	bne.n	800419a <__libc_init_array+0x2e>
 800418e:	bd70      	pop	{r4, r5, r6, pc}
 8004190:	f855 3b04 	ldr.w	r3, [r5], #4
 8004194:	4798      	blx	r3
 8004196:	3601      	adds	r6, #1
 8004198:	e7ee      	b.n	8004178 <__libc_init_array+0xc>
 800419a:	f855 3b04 	ldr.w	r3, [r5], #4
 800419e:	4798      	blx	r3
 80041a0:	3601      	adds	r6, #1
 80041a2:	e7f2      	b.n	800418a <__libc_init_array+0x1e>
 80041a4:	0800422c 	.word	0x0800422c
 80041a8:	0800422c 	.word	0x0800422c
 80041ac:	0800422c 	.word	0x0800422c
 80041b0:	08004230 	.word	0x08004230

080041b4 <memset>:
 80041b4:	4402      	add	r2, r0
 80041b6:	4603      	mov	r3, r0
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d100      	bne.n	80041be <memset+0xa>
 80041bc:	4770      	bx	lr
 80041be:	f803 1b01 	strb.w	r1, [r3], #1
 80041c2:	e7f9      	b.n	80041b8 <memset+0x4>

080041c4 <_init>:
 80041c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041c6:	bf00      	nop
 80041c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ca:	bc08      	pop	{r3}
 80041cc:	469e      	mov	lr, r3
 80041ce:	4770      	bx	lr

080041d0 <_fini>:
 80041d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041d2:	bf00      	nop
 80041d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041d6:	bc08      	pop	{r3}
 80041d8:	469e      	mov	lr, r3
 80041da:	4770      	bx	lr
