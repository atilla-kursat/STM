
led_strip.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c90  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005e68  08005e68  00015e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ea8  08005ea8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005ea8  08005ea8  00015ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005eb0  08005eb0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005eb0  08005eb0  00015eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005eb4  08005eb4  00015eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000484  20000010  08005ec8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  08005ec8  00020494  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013969  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002691  00000000  00000000  000339a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f8  00000000  00000000  00036040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001010  00000000  00000000  00037138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dce6  00000000  00000000  00038148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a77  00000000  00000000  00055e2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c2fa3  00000000  00000000  000698a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012c848  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048f0  00000000  00000000  0012c898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005e50 	.word	0x08005e50

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08005e50 	.word	0x08005e50

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	; 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	; 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__aeabi_d2iz>:
 80007e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007ec:	d215      	bcs.n	800081a <__aeabi_d2iz+0x36>
 80007ee:	d511      	bpl.n	8000814 <__aeabi_d2iz+0x30>
 80007f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007f8:	d912      	bls.n	8000820 <__aeabi_d2iz+0x3c>
 80007fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000802:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000806:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800080a:	fa23 f002 	lsr.w	r0, r3, r2
 800080e:	bf18      	it	ne
 8000810:	4240      	negne	r0, r0
 8000812:	4770      	bx	lr
 8000814:	f04f 0000 	mov.w	r0, #0
 8000818:	4770      	bx	lr
 800081a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800081e:	d105      	bne.n	800082c <__aeabi_d2iz+0x48>
 8000820:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000824:	bf08      	it	eq
 8000826:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800082a:	4770      	bx	lr
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <__aeabi_uldivmod>:
 8000834:	b953      	cbnz	r3, 800084c <__aeabi_uldivmod+0x18>
 8000836:	b94a      	cbnz	r2, 800084c <__aeabi_uldivmod+0x18>
 8000838:	2900      	cmp	r1, #0
 800083a:	bf08      	it	eq
 800083c:	2800      	cmpeq	r0, #0
 800083e:	bf1c      	itt	ne
 8000840:	f04f 31ff 	movne.w	r1, #4294967295
 8000844:	f04f 30ff 	movne.w	r0, #4294967295
 8000848:	f000 b974 	b.w	8000b34 <__aeabi_idiv0>
 800084c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000850:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000854:	f000 f806 	bl	8000864 <__udivmoddi4>
 8000858:	f8dd e004 	ldr.w	lr, [sp, #4]
 800085c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000860:	b004      	add	sp, #16
 8000862:	4770      	bx	lr

08000864 <__udivmoddi4>:
 8000864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000868:	9d08      	ldr	r5, [sp, #32]
 800086a:	4604      	mov	r4, r0
 800086c:	468e      	mov	lr, r1
 800086e:	2b00      	cmp	r3, #0
 8000870:	d14d      	bne.n	800090e <__udivmoddi4+0xaa>
 8000872:	428a      	cmp	r2, r1
 8000874:	4694      	mov	ip, r2
 8000876:	d969      	bls.n	800094c <__udivmoddi4+0xe8>
 8000878:	fab2 f282 	clz	r2, r2
 800087c:	b152      	cbz	r2, 8000894 <__udivmoddi4+0x30>
 800087e:	fa01 f302 	lsl.w	r3, r1, r2
 8000882:	f1c2 0120 	rsb	r1, r2, #32
 8000886:	fa20 f101 	lsr.w	r1, r0, r1
 800088a:	fa0c fc02 	lsl.w	ip, ip, r2
 800088e:	ea41 0e03 	orr.w	lr, r1, r3
 8000892:	4094      	lsls	r4, r2
 8000894:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000898:	0c21      	lsrs	r1, r4, #16
 800089a:	fbbe f6f8 	udiv	r6, lr, r8
 800089e:	fa1f f78c 	uxth.w	r7, ip
 80008a2:	fb08 e316 	mls	r3, r8, r6, lr
 80008a6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008aa:	fb06 f107 	mul.w	r1, r6, r7
 80008ae:	4299      	cmp	r1, r3
 80008b0:	d90a      	bls.n	80008c8 <__udivmoddi4+0x64>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80008ba:	f080 811f 	bcs.w	8000afc <__udivmoddi4+0x298>
 80008be:	4299      	cmp	r1, r3
 80008c0:	f240 811c 	bls.w	8000afc <__udivmoddi4+0x298>
 80008c4:	3e02      	subs	r6, #2
 80008c6:	4463      	add	r3, ip
 80008c8:	1a5b      	subs	r3, r3, r1
 80008ca:	b2a4      	uxth	r4, r4
 80008cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80008d0:	fb08 3310 	mls	r3, r8, r0, r3
 80008d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008d8:	fb00 f707 	mul.w	r7, r0, r7
 80008dc:	42a7      	cmp	r7, r4
 80008de:	d90a      	bls.n	80008f6 <__udivmoddi4+0x92>
 80008e0:	eb1c 0404 	adds.w	r4, ip, r4
 80008e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80008e8:	f080 810a 	bcs.w	8000b00 <__udivmoddi4+0x29c>
 80008ec:	42a7      	cmp	r7, r4
 80008ee:	f240 8107 	bls.w	8000b00 <__udivmoddi4+0x29c>
 80008f2:	4464      	add	r4, ip
 80008f4:	3802      	subs	r0, #2
 80008f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008fa:	1be4      	subs	r4, r4, r7
 80008fc:	2600      	movs	r6, #0
 80008fe:	b11d      	cbz	r5, 8000908 <__udivmoddi4+0xa4>
 8000900:	40d4      	lsrs	r4, r2
 8000902:	2300      	movs	r3, #0
 8000904:	e9c5 4300 	strd	r4, r3, [r5]
 8000908:	4631      	mov	r1, r6
 800090a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800090e:	428b      	cmp	r3, r1
 8000910:	d909      	bls.n	8000926 <__udivmoddi4+0xc2>
 8000912:	2d00      	cmp	r5, #0
 8000914:	f000 80ef 	beq.w	8000af6 <__udivmoddi4+0x292>
 8000918:	2600      	movs	r6, #0
 800091a:	e9c5 0100 	strd	r0, r1, [r5]
 800091e:	4630      	mov	r0, r6
 8000920:	4631      	mov	r1, r6
 8000922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000926:	fab3 f683 	clz	r6, r3
 800092a:	2e00      	cmp	r6, #0
 800092c:	d14a      	bne.n	80009c4 <__udivmoddi4+0x160>
 800092e:	428b      	cmp	r3, r1
 8000930:	d302      	bcc.n	8000938 <__udivmoddi4+0xd4>
 8000932:	4282      	cmp	r2, r0
 8000934:	f200 80f9 	bhi.w	8000b2a <__udivmoddi4+0x2c6>
 8000938:	1a84      	subs	r4, r0, r2
 800093a:	eb61 0303 	sbc.w	r3, r1, r3
 800093e:	2001      	movs	r0, #1
 8000940:	469e      	mov	lr, r3
 8000942:	2d00      	cmp	r5, #0
 8000944:	d0e0      	beq.n	8000908 <__udivmoddi4+0xa4>
 8000946:	e9c5 4e00 	strd	r4, lr, [r5]
 800094a:	e7dd      	b.n	8000908 <__udivmoddi4+0xa4>
 800094c:	b902      	cbnz	r2, 8000950 <__udivmoddi4+0xec>
 800094e:	deff      	udf	#255	; 0xff
 8000950:	fab2 f282 	clz	r2, r2
 8000954:	2a00      	cmp	r2, #0
 8000956:	f040 8092 	bne.w	8000a7e <__udivmoddi4+0x21a>
 800095a:	eba1 010c 	sub.w	r1, r1, ip
 800095e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000962:	fa1f fe8c 	uxth.w	lr, ip
 8000966:	2601      	movs	r6, #1
 8000968:	0c20      	lsrs	r0, r4, #16
 800096a:	fbb1 f3f7 	udiv	r3, r1, r7
 800096e:	fb07 1113 	mls	r1, r7, r3, r1
 8000972:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000976:	fb0e f003 	mul.w	r0, lr, r3
 800097a:	4288      	cmp	r0, r1
 800097c:	d908      	bls.n	8000990 <__udivmoddi4+0x12c>
 800097e:	eb1c 0101 	adds.w	r1, ip, r1
 8000982:	f103 38ff 	add.w	r8, r3, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0x12a>
 8000988:	4288      	cmp	r0, r1
 800098a:	f200 80cb 	bhi.w	8000b24 <__udivmoddi4+0x2c0>
 800098e:	4643      	mov	r3, r8
 8000990:	1a09      	subs	r1, r1, r0
 8000992:	b2a4      	uxth	r4, r4
 8000994:	fbb1 f0f7 	udiv	r0, r1, r7
 8000998:	fb07 1110 	mls	r1, r7, r0, r1
 800099c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009a0:	fb0e fe00 	mul.w	lr, lr, r0
 80009a4:	45a6      	cmp	lr, r4
 80009a6:	d908      	bls.n	80009ba <__udivmoddi4+0x156>
 80009a8:	eb1c 0404 	adds.w	r4, ip, r4
 80009ac:	f100 31ff 	add.w	r1, r0, #4294967295
 80009b0:	d202      	bcs.n	80009b8 <__udivmoddi4+0x154>
 80009b2:	45a6      	cmp	lr, r4
 80009b4:	f200 80bb 	bhi.w	8000b2e <__udivmoddi4+0x2ca>
 80009b8:	4608      	mov	r0, r1
 80009ba:	eba4 040e 	sub.w	r4, r4, lr
 80009be:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009c2:	e79c      	b.n	80008fe <__udivmoddi4+0x9a>
 80009c4:	f1c6 0720 	rsb	r7, r6, #32
 80009c8:	40b3      	lsls	r3, r6
 80009ca:	fa22 fc07 	lsr.w	ip, r2, r7
 80009ce:	ea4c 0c03 	orr.w	ip, ip, r3
 80009d2:	fa20 f407 	lsr.w	r4, r0, r7
 80009d6:	fa01 f306 	lsl.w	r3, r1, r6
 80009da:	431c      	orrs	r4, r3
 80009dc:	40f9      	lsrs	r1, r7
 80009de:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009e2:	fa00 f306 	lsl.w	r3, r0, r6
 80009e6:	fbb1 f8f9 	udiv	r8, r1, r9
 80009ea:	0c20      	lsrs	r0, r4, #16
 80009ec:	fa1f fe8c 	uxth.w	lr, ip
 80009f0:	fb09 1118 	mls	r1, r9, r8, r1
 80009f4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009f8:	fb08 f00e 	mul.w	r0, r8, lr
 80009fc:	4288      	cmp	r0, r1
 80009fe:	fa02 f206 	lsl.w	r2, r2, r6
 8000a02:	d90b      	bls.n	8000a1c <__udivmoddi4+0x1b8>
 8000a04:	eb1c 0101 	adds.w	r1, ip, r1
 8000a08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a0c:	f080 8088 	bcs.w	8000b20 <__udivmoddi4+0x2bc>
 8000a10:	4288      	cmp	r0, r1
 8000a12:	f240 8085 	bls.w	8000b20 <__udivmoddi4+0x2bc>
 8000a16:	f1a8 0802 	sub.w	r8, r8, #2
 8000a1a:	4461      	add	r1, ip
 8000a1c:	1a09      	subs	r1, r1, r0
 8000a1e:	b2a4      	uxth	r4, r4
 8000a20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a24:	fb09 1110 	mls	r1, r9, r0, r1
 8000a28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a30:	458e      	cmp	lr, r1
 8000a32:	d908      	bls.n	8000a46 <__udivmoddi4+0x1e2>
 8000a34:	eb1c 0101 	adds.w	r1, ip, r1
 8000a38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a3c:	d26c      	bcs.n	8000b18 <__udivmoddi4+0x2b4>
 8000a3e:	458e      	cmp	lr, r1
 8000a40:	d96a      	bls.n	8000b18 <__udivmoddi4+0x2b4>
 8000a42:	3802      	subs	r0, #2
 8000a44:	4461      	add	r1, ip
 8000a46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000a4e:	eba1 010e 	sub.w	r1, r1, lr
 8000a52:	42a1      	cmp	r1, r4
 8000a54:	46c8      	mov	r8, r9
 8000a56:	46a6      	mov	lr, r4
 8000a58:	d356      	bcc.n	8000b08 <__udivmoddi4+0x2a4>
 8000a5a:	d053      	beq.n	8000b04 <__udivmoddi4+0x2a0>
 8000a5c:	b15d      	cbz	r5, 8000a76 <__udivmoddi4+0x212>
 8000a5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000a62:	eb61 010e 	sbc.w	r1, r1, lr
 8000a66:	fa01 f707 	lsl.w	r7, r1, r7
 8000a6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000a6e:	40f1      	lsrs	r1, r6
 8000a70:	431f      	orrs	r7, r3
 8000a72:	e9c5 7100 	strd	r7, r1, [r5]
 8000a76:	2600      	movs	r6, #0
 8000a78:	4631      	mov	r1, r6
 8000a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7e:	f1c2 0320 	rsb	r3, r2, #32
 8000a82:	40d8      	lsrs	r0, r3
 8000a84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a88:	fa21 f303 	lsr.w	r3, r1, r3
 8000a8c:	4091      	lsls	r1, r2
 8000a8e:	4301      	orrs	r1, r0
 8000a90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a94:	fa1f fe8c 	uxth.w	lr, ip
 8000a98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000aa0:	0c0b      	lsrs	r3, r1, #16
 8000aa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000aa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000aaa:	429e      	cmp	r6, r3
 8000aac:	fa04 f402 	lsl.w	r4, r4, r2
 8000ab0:	d908      	bls.n	8000ac4 <__udivmoddi4+0x260>
 8000ab2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ab6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000aba:	d22f      	bcs.n	8000b1c <__udivmoddi4+0x2b8>
 8000abc:	429e      	cmp	r6, r3
 8000abe:	d92d      	bls.n	8000b1c <__udivmoddi4+0x2b8>
 8000ac0:	3802      	subs	r0, #2
 8000ac2:	4463      	add	r3, ip
 8000ac4:	1b9b      	subs	r3, r3, r6
 8000ac6:	b289      	uxth	r1, r1
 8000ac8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000acc:	fb07 3316 	mls	r3, r7, r6, r3
 8000ad0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ad4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ad8:	428b      	cmp	r3, r1
 8000ada:	d908      	bls.n	8000aee <__udivmoddi4+0x28a>
 8000adc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ae0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ae4:	d216      	bcs.n	8000b14 <__udivmoddi4+0x2b0>
 8000ae6:	428b      	cmp	r3, r1
 8000ae8:	d914      	bls.n	8000b14 <__udivmoddi4+0x2b0>
 8000aea:	3e02      	subs	r6, #2
 8000aec:	4461      	add	r1, ip
 8000aee:	1ac9      	subs	r1, r1, r3
 8000af0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000af4:	e738      	b.n	8000968 <__udivmoddi4+0x104>
 8000af6:	462e      	mov	r6, r5
 8000af8:	4628      	mov	r0, r5
 8000afa:	e705      	b.n	8000908 <__udivmoddi4+0xa4>
 8000afc:	4606      	mov	r6, r0
 8000afe:	e6e3      	b.n	80008c8 <__udivmoddi4+0x64>
 8000b00:	4618      	mov	r0, r3
 8000b02:	e6f8      	b.n	80008f6 <__udivmoddi4+0x92>
 8000b04:	454b      	cmp	r3, r9
 8000b06:	d2a9      	bcs.n	8000a5c <__udivmoddi4+0x1f8>
 8000b08:	ebb9 0802 	subs.w	r8, r9, r2
 8000b0c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b10:	3801      	subs	r0, #1
 8000b12:	e7a3      	b.n	8000a5c <__udivmoddi4+0x1f8>
 8000b14:	4646      	mov	r6, r8
 8000b16:	e7ea      	b.n	8000aee <__udivmoddi4+0x28a>
 8000b18:	4620      	mov	r0, r4
 8000b1a:	e794      	b.n	8000a46 <__udivmoddi4+0x1e2>
 8000b1c:	4640      	mov	r0, r8
 8000b1e:	e7d1      	b.n	8000ac4 <__udivmoddi4+0x260>
 8000b20:	46d0      	mov	r8, sl
 8000b22:	e77b      	b.n	8000a1c <__udivmoddi4+0x1b8>
 8000b24:	3b02      	subs	r3, #2
 8000b26:	4461      	add	r1, ip
 8000b28:	e732      	b.n	8000990 <__udivmoddi4+0x12c>
 8000b2a:	4630      	mov	r0, r6
 8000b2c:	e709      	b.n	8000942 <__udivmoddi4+0xde>
 8000b2e:	4464      	add	r4, ip
 8000b30:	3802      	subs	r0, #2
 8000b32:	e742      	b.n	80009ba <__udivmoddi4+0x156>

08000b34 <__aeabi_idiv0>:
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop

08000b38 <HAL_UART_RxCpltCallback>:
 char msg_failure = "message was corrupted, try again?(y/n)";
 */
uint8_t failure_signal = 0;
uint8_t success_signal = 1;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]

	if (data[1] == 8) {
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <HAL_UART_RxCpltCallback+0x3c>)
 8000b42:	785b      	ldrb	r3, [r3, #1]
 8000b44:	2b08      	cmp	r3, #8
 8000b46:	d102      	bne.n	8000b4e <HAL_UART_RxCpltCallback+0x16>
		completedcounter = 8;
 8000b48:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <HAL_UART_RxCpltCallback+0x40>)
 8000b4a:	2208      	movs	r2, #8
 8000b4c:	601a      	str	r2, [r3, #0]
	}
	if (counter < 8) {
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <HAL_UART_RxCpltCallback+0x44>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	2b07      	cmp	r3, #7
 8000b54:	dc09      	bgt.n	8000b6a <HAL_UART_RxCpltCallback+0x32>
		counter++;
 8000b56:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <HAL_UART_RxCpltCallback+0x44>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	4a07      	ldr	r2, [pc, #28]	; (8000b7c <HAL_UART_RxCpltCallback+0x44>)
 8000b5e:	6013      	str	r3, [r2, #0]
		HAL_UART_Receive_DMA(&huart1, data, 18);
 8000b60:	2212      	movs	r2, #18
 8000b62:	4904      	ldr	r1, [pc, #16]	; (8000b74 <HAL_UART_RxCpltCallback+0x3c>)
 8000b64:	4806      	ldr	r0, [pc, #24]	; (8000b80 <HAL_UART_RxCpltCallback+0x48>)
 8000b66:	f004 f90d 	bl	8004d84 <HAL_UART_Receive_DMA>
	}

}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	200001ec 	.word	0x200001ec
 8000b78:	2000046c 	.word	0x2000046c
 8000b7c:	20000468 	.word	0x20000468
 8000b80:	200000fc 	.word	0x200000fc

08000b84 <organizer>:

void organizer() {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
	int green = data[2] * 100 + data[3] * 10 + data[4];
 8000b8a:	4b24      	ldr	r3, [pc, #144]	; (8000c1c <organizer+0x98>)
 8000b8c:	789b      	ldrb	r3, [r3, #2]
 8000b8e:	461a      	mov	r2, r3
 8000b90:	2364      	movs	r3, #100	; 0x64
 8000b92:	fb03 f202 	mul.w	r2, r3, r2
 8000b96:	4b21      	ldr	r3, [pc, #132]	; (8000c1c <organizer+0x98>)
 8000b98:	78db      	ldrb	r3, [r3, #3]
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	440b      	add	r3, r1
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	4413      	add	r3, r2
 8000ba6:	4a1d      	ldr	r2, [pc, #116]	; (8000c1c <organizer+0x98>)
 8000ba8:	7912      	ldrb	r2, [r2, #4]
 8000baa:	4413      	add	r3, r2
 8000bac:	60fb      	str	r3, [r7, #12]
	int red = data[5] * 100 + data[6] * 10 + data[7];
 8000bae:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <organizer+0x98>)
 8000bb0:	795b      	ldrb	r3, [r3, #5]
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	2364      	movs	r3, #100	; 0x64
 8000bb6:	fb03 f202 	mul.w	r2, r3, r2
 8000bba:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <organizer+0x98>)
 8000bbc:	799b      	ldrb	r3, [r3, #6]
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	440b      	add	r3, r1
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	4413      	add	r3, r2
 8000bca:	4a14      	ldr	r2, [pc, #80]	; (8000c1c <organizer+0x98>)
 8000bcc:	79d2      	ldrb	r2, [r2, #7]
 8000bce:	4413      	add	r3, r2
 8000bd0:	60bb      	str	r3, [r7, #8]
	int blue = data[8] * 100 + data[9] * 10 + data[10];
 8000bd2:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <organizer+0x98>)
 8000bd4:	7a1b      	ldrb	r3, [r3, #8]
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	2364      	movs	r3, #100	; 0x64
 8000bda:	fb03 f202 	mul.w	r2, r3, r2
 8000bde:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <organizer+0x98>)
 8000be0:	7a5b      	ldrb	r3, [r3, #9]
 8000be2:	4619      	mov	r1, r3
 8000be4:	460b      	mov	r3, r1
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	440b      	add	r3, r1
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	4413      	add	r3, r2
 8000bee:	4a0b      	ldr	r2, [pc, #44]	; (8000c1c <organizer+0x98>)
 8000bf0:	7a92      	ldrb	r2, [r2, #10]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	607b      	str	r3, [r7, #4]
	led_select(data[1], green, red, blue);
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <organizer+0x98>)
 8000bf8:	785b      	ldrb	r3, [r3, #1]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	68ba      	ldr	r2, [r7, #8]
 8000c00:	68f9      	ldr	r1, [r7, #12]
 8000c02:	f000 f80f 	bl	8000c24 <led_select>
	completedcounter++;
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <organizer+0x9c>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	4a04      	ldr	r2, [pc, #16]	; (8000c20 <organizer+0x9c>)
 8000c0e:	6013      	str	r3, [r2, #0]
	brightness_select();
 8000c10:	f000 f832 	bl	8000c78 <brightness_select>


}
 8000c14:	bf00      	nop
 8000c16:	3710      	adds	r7, #16
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	200001ec 	.word	0x200001ec
 8000c20:	2000046c 	.word	0x2000046c

08000c24 <led_select>:

void led_select(int lednum, int g, int r, int b) {
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
 8000c30:	603b      	str	r3, [r7, #0]
	led_data[lednum][0] = lednum;
 8000c32:	4a10      	ldr	r2, [pc, #64]	; (8000c74 <led_select+0x50>)
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	011b      	lsls	r3, r3, #4
 8000c38:	4413      	add	r3, r2
 8000c3a:	68fa      	ldr	r2, [r7, #12]
 8000c3c:	601a      	str	r2, [r3, #0]
	led_data[lednum][1] = g;
 8000c3e:	4a0d      	ldr	r2, [pc, #52]	; (8000c74 <led_select+0x50>)
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	011b      	lsls	r3, r3, #4
 8000c44:	4413      	add	r3, r2
 8000c46:	3304      	adds	r3, #4
 8000c48:	68ba      	ldr	r2, [r7, #8]
 8000c4a:	601a      	str	r2, [r3, #0]
	led_data[lednum][2] = r;
 8000c4c:	4a09      	ldr	r2, [pc, #36]	; (8000c74 <led_select+0x50>)
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	011b      	lsls	r3, r3, #4
 8000c52:	4413      	add	r3, r2
 8000c54:	3308      	adds	r3, #8
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	601a      	str	r2, [r3, #0]
	led_data[lednum][3] = b;
 8000c5a:	4a06      	ldr	r2, [pc, #24]	; (8000c74 <led_select+0x50>)
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	011b      	lsls	r3, r3, #4
 8000c60:	4413      	add	r3, r2
 8000c62:	330c      	adds	r3, #12
 8000c64:	683a      	ldr	r2, [r7, #0]
 8000c66:	601a      	str	r2, [r3, #0]
}
 8000c68:	bf00      	nop
 8000c6a:	3714      	adds	r7, #20
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	200003e4 	.word	0x200003e4

08000c78 <brightness_select>:

void brightness_select() {
 8000c78:	b590      	push	{r4, r7, lr}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
	double val = 1;
 8000c7e:	f04f 0200 	mov.w	r2, #0
 8000c82:	4b25      	ldr	r3, [pc, #148]	; (8000d18 <brightness_select+0xa0>)
 8000c84:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (data[10] == 1) {
 8000c88:	4b24      	ldr	r3, [pc, #144]	; (8000d1c <brightness_select+0xa4>)
 8000c8a:	7a9b      	ldrb	r3, [r3, #10]
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d104      	bne.n	8000c9a <brightness_select+0x22>
		val = 0.25;
 8000c90:	f04f 0200 	mov.w	r2, #0
 8000c94:	4b22      	ldr	r3, [pc, #136]	; (8000d20 <brightness_select+0xa8>)
 8000c96:	e9c7 2302 	strd	r2, r3, [r7, #8]
	}
	if (data[10] == 2) {
 8000c9a:	4b20      	ldr	r3, [pc, #128]	; (8000d1c <brightness_select+0xa4>)
 8000c9c:	7a9b      	ldrb	r3, [r3, #10]
 8000c9e:	2b02      	cmp	r3, #2
 8000ca0:	d104      	bne.n	8000cac <brightness_select+0x34>
		val = 0.5;
 8000ca2:	f04f 0200 	mov.w	r2, #0
 8000ca6:	4b1f      	ldr	r3, [pc, #124]	; (8000d24 <brightness_select+0xac>)
 8000ca8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	}
	if (data[10] == 3) {
 8000cac:	4b1b      	ldr	r3, [pc, #108]	; (8000d1c <brightness_select+0xa4>)
 8000cae:	7a9b      	ldrb	r3, [r3, #10]
 8000cb0:	2b03      	cmp	r3, #3
 8000cb2:	d104      	bne.n	8000cbe <brightness_select+0x46>
		val = 0.75;
 8000cb4:	f04f 0200 	mov.w	r2, #0
 8000cb8:	4b1b      	ldr	r3, [pc, #108]	; (8000d28 <brightness_select+0xb0>)
 8000cba:	e9c7 2302 	strd	r2, r3, [r7, #8]
	}

	for (int j = 1; j < 4; j++) {
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	607b      	str	r3, [r7, #4]
 8000cc2:	e021      	b.n	8000d08 <brightness_select+0x90>
		led_data[data[1]][j] = led_data[data[1]][j] * val;
 8000cc4:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <brightness_select+0xa4>)
 8000cc6:	785b      	ldrb	r3, [r3, #1]
 8000cc8:	4918      	ldr	r1, [pc, #96]	; (8000d2c <brightness_select+0xb4>)
 8000cca:	009a      	lsls	r2, r3, #2
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4413      	add	r3, r2
 8000cd0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fd1b 	bl	8000710 <__aeabi_i2d>
 8000cda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000cde:	f7ff fa9b 	bl	8000218 <__aeabi_dmul>
 8000ce2:	4602      	mov	r2, r0
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	490d      	ldr	r1, [pc, #52]	; (8000d1c <brightness_select+0xa4>)
 8000ce8:	7849      	ldrb	r1, [r1, #1]
 8000cea:	460c      	mov	r4, r1
 8000cec:	4610      	mov	r0, r2
 8000cee:	4619      	mov	r1, r3
 8000cf0:	f7ff fd78 	bl	80007e4 <__aeabi_d2iz>
 8000cf4:	4601      	mov	r1, r0
 8000cf6:	480d      	ldr	r0, [pc, #52]	; (8000d2c <brightness_select+0xb4>)
 8000cf8:	00a2      	lsls	r2, r4, #2
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
	for (int j = 1; j < 4; j++) {
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	3301      	adds	r3, #1
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2b03      	cmp	r3, #3
 8000d0c:	ddda      	ble.n	8000cc4 <brightness_select+0x4c>
	}

}
 8000d0e:	bf00      	nop
 8000d10:	bf00      	nop
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd90      	pop	{r4, r7, pc}
 8000d18:	3ff00000 	.word	0x3ff00000
 8000d1c:	200001ec 	.word	0x200001ec
 8000d20:	3fd00000 	.word	0x3fd00000
 8000d24:	3fe00000 	.word	0x3fe00000
 8000d28:	3fe80000 	.word	0x3fe80000
 8000d2c:	200003e4 	.word	0x200003e4

08000d30 <colorselect>:

void colorselect(int g, int r, int b) {
 8000d30:	b480      	push	{r7}
 8000d32:	b089      	sub	sp, #36	; 0x24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
//			pwmData[data_index] = 30;
//
//		data_index++;
//	}

	for (int i = 0; i < 8; i++) {
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61fb      	str	r3, [r7, #28]
 8000d40:	e017      	b.n	8000d72 <colorselect+0x42>
		pwmData[data_index] = ((g << i) & 0x80) ? 60 : 30;
 8000d42:	68fa      	ldr	r2, [r7, #12]
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <colorselect+0x26>
 8000d52:	213c      	movs	r1, #60	; 0x3c
 8000d54:	e000      	b.n	8000d58 <colorselect+0x28>
 8000d56:	211e      	movs	r1, #30
 8000d58:	4b29      	ldr	r3, [pc, #164]	; (8000e00 <colorselect+0xd0>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a29      	ldr	r2, [pc, #164]	; (8000e04 <colorselect+0xd4>)
 8000d5e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		data_index++;
 8000d62:	4b27      	ldr	r3, [pc, #156]	; (8000e00 <colorselect+0xd0>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	3301      	adds	r3, #1
 8000d68:	4a25      	ldr	r2, [pc, #148]	; (8000e00 <colorselect+0xd0>)
 8000d6a:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 8; i++) {
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	61fb      	str	r3, [r7, #28]
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	2b07      	cmp	r3, #7
 8000d76:	dde4      	ble.n	8000d42 <colorselect+0x12>
	}
	for (int i = 0; i < 8; i++) {
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61bb      	str	r3, [r7, #24]
 8000d7c:	e017      	b.n	8000dae <colorselect+0x7e>
		pwmData[data_index] = ((r << i) & 0x80) ? 60 : 30;
 8000d7e:	68ba      	ldr	r2, [r7, #8]
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <colorselect+0x62>
 8000d8e:	213c      	movs	r1, #60	; 0x3c
 8000d90:	e000      	b.n	8000d94 <colorselect+0x64>
 8000d92:	211e      	movs	r1, #30
 8000d94:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <colorselect+0xd0>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a1a      	ldr	r2, [pc, #104]	; (8000e04 <colorselect+0xd4>)
 8000d9a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		data_index++;
 8000d9e:	4b18      	ldr	r3, [pc, #96]	; (8000e00 <colorselect+0xd0>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	3301      	adds	r3, #1
 8000da4:	4a16      	ldr	r2, [pc, #88]	; (8000e00 <colorselect+0xd0>)
 8000da6:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 8; i++) {
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	3301      	adds	r3, #1
 8000dac:	61bb      	str	r3, [r7, #24]
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	2b07      	cmp	r3, #7
 8000db2:	dde4      	ble.n	8000d7e <colorselect+0x4e>
	}
	for (int i = 0; i < 8; i++) {
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
 8000db8:	e017      	b.n	8000dea <colorselect+0xba>
		pwmData[data_index] = ((b << i) & 0x80) ? 60 : 30;
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <colorselect+0x9e>
 8000dca:	213c      	movs	r1, #60	; 0x3c
 8000dcc:	e000      	b.n	8000dd0 <colorselect+0xa0>
 8000dce:	211e      	movs	r1, #30
 8000dd0:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <colorselect+0xd0>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a0b      	ldr	r2, [pc, #44]	; (8000e04 <colorselect+0xd4>)
 8000dd6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		data_index++;
 8000dda:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <colorselect+0xd0>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	3301      	adds	r3, #1
 8000de0:	4a07      	ldr	r2, [pc, #28]	; (8000e00 <colorselect+0xd0>)
 8000de2:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 8; i++) {
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	3301      	adds	r3, #1
 8000de8:	617b      	str	r3, [r7, #20]
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	2b07      	cmp	r3, #7
 8000dee:	dde4      	ble.n	8000dba <colorselect+0x8a>
	}

}
 8000df0:	bf00      	nop
 8000df2:	bf00      	nop
 8000df4:	3724      	adds	r7, #36	; 0x24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	20000464 	.word	0x20000464
 8000e04:	20000200 	.word	0x20000200

08000e08 <send_data>:

void send_data() {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0

	for (int i = 0; i < led_count; i++) {
 8000e0e:	2300      	movs	r3, #0
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	e017      	b.n	8000e44 <send_data+0x3c>
		colorselect(led_data[i][1], led_data[i][2], led_data[i][3]);
 8000e14:	4a1e      	ldr	r2, [pc, #120]	; (8000e90 <send_data+0x88>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	011b      	lsls	r3, r3, #4
 8000e1a:	4413      	add	r3, r2
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	6818      	ldr	r0, [r3, #0]
 8000e20:	4a1b      	ldr	r2, [pc, #108]	; (8000e90 <send_data+0x88>)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	011b      	lsls	r3, r3, #4
 8000e26:	4413      	add	r3, r2
 8000e28:	3308      	adds	r3, #8
 8000e2a:	6819      	ldr	r1, [r3, #0]
 8000e2c:	4a18      	ldr	r2, [pc, #96]	; (8000e90 <send_data+0x88>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	011b      	lsls	r3, r3, #4
 8000e32:	4413      	add	r3, r2
 8000e34:	330c      	adds	r3, #12
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	f7ff ff79 	bl	8000d30 <colorselect>
	for (int i = 0; i < led_count; i++) {
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	3301      	adds	r3, #1
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <send_data+0x8c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	dbe2      	blt.n	8000e14 <send_data+0xc>
	}
	for (int i = 0; i < 50; i++) {
 8000e4e:	2300      	movs	r3, #0
 8000e50:	603b      	str	r3, [r7, #0]
 8000e52:	e00d      	b.n	8000e70 <send_data+0x68>
		pwmData[data_index] = 0;
 8000e54:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <send_data+0x90>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a10      	ldr	r2, [pc, #64]	; (8000e9c <send_data+0x94>)
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		data_index++;
 8000e60:	4b0d      	ldr	r3, [pc, #52]	; (8000e98 <send_data+0x90>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	3301      	adds	r3, #1
 8000e66:	4a0c      	ldr	r2, [pc, #48]	; (8000e98 <send_data+0x90>)
 8000e68:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 50; i++) {
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	603b      	str	r3, [r7, #0]
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	2b31      	cmp	r3, #49	; 0x31
 8000e74:	ddee      	ble.n	8000e54 <send_data+0x4c>
	}
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_TI1SELECTION_CH1, (uint32_t*) pwmData,
 8000e76:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <send_data+0x90>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	4a07      	ldr	r2, [pc, #28]	; (8000e9c <send_data+0x94>)
 8000e7e:	2100      	movs	r1, #0
 8000e80:	4807      	ldr	r0, [pc, #28]	; (8000ea0 <send_data+0x98>)
 8000e82:	f002 fcb9 	bl	80037f8 <HAL_TIM_PWM_Start_DMA>
			data_index);
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	200003e4 	.word	0x200003e4
 8000e94:	20000000 	.word	0x20000000
 8000e98:	20000464 	.word	0x20000464
 8000e9c:	20000200 	.word	0x20000200
 8000ea0:	20000050 	.word	0x20000050

08000ea4 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	//HAL_TIM_PWM_Start_DMA(&htim1, TIM_TI1SELECTION_CH1, (uint32_t*) pwmData,
			//data_index);

}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ebe:	f000 fc90 	bl	80017e2 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ec2:	f000 f8e3 	bl	800108c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ec6:	f000 fa7f 	bl	80013c8 <MX_GPIO_Init>
	MX_DMA_Init();
 8000eca:	f000 fa4b 	bl	8001364 <MX_DMA_Init>
	MX_TIM1_Init();
 8000ece:	f000 f94d 	bl	800116c <MX_TIM1_Init>
	MX_USART1_UART_Init();
 8000ed2:	f000 f9fb 	bl	80012cc <MX_USART1_UART_Init>
	MX_CRC_Init();
 8000ed6:	f000 f927 	bl	8001128 <MX_CRC_Init>
	/* USER CODE BEGIN 2 */

	HAL_UART_Receive_DMA(&huart1, data, 18);
 8000eda:	2212      	movs	r2, #18
 8000edc:	495f      	ldr	r1, [pc, #380]	; (800105c <main+0x1a4>)
 8000ede:	4860      	ldr	r0, [pc, #384]	; (8001060 <main+0x1a8>)
 8000ee0:	f003 ff50 	bl	8004d84 <HAL_UART_Receive_DMA>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		if (counter > completedcounter) {
 8000ee4:	4b5f      	ldr	r3, [pc, #380]	; (8001064 <main+0x1ac>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4b5f      	ldr	r3, [pc, #380]	; (8001068 <main+0x1b0>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	f340 80a8 	ble.w	8001042 <main+0x18a>

			if (data[0] != 75 || data[17] != 85) {
 8000ef2:	4b5a      	ldr	r3, [pc, #360]	; (800105c <main+0x1a4>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b4b      	cmp	r3, #75	; 0x4b
 8000ef8:	d103      	bne.n	8000f02 <main+0x4a>
 8000efa:	4b58      	ldr	r3, [pc, #352]	; (800105c <main+0x1a4>)
 8000efc:	7c5b      	ldrb	r3, [r3, #17]
 8000efe:	2b55      	cmp	r3, #85	; 0x55
 8000f00:	d003      	beq.n	8000f0a <main+0x52>
				data_corrupted_flag = 1;
 8000f02:	4b5a      	ldr	r3, [pc, #360]	; (800106c <main+0x1b4>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	601a      	str	r2, [r3, #0]
				goto flagchck;
 8000f08:	e083      	b.n	8001012 <main+0x15a>
			}

			checksum = 0;
 8000f0a:	4b59      	ldr	r3, [pc, #356]	; (8001070 <main+0x1b8>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
			for (int i = 1; i < 12; i++) {
 8000f10:	2301      	movs	r3, #1
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	e00c      	b.n	8000f30 <main+0x78>
				checksum += data[i];
 8000f16:	4a51      	ldr	r2, [pc, #324]	; (800105c <main+0x1a4>)
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	4b53      	ldr	r3, [pc, #332]	; (8001070 <main+0x1b8>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4413      	add	r3, r2
 8000f26:	4a52      	ldr	r2, [pc, #328]	; (8001070 <main+0x1b8>)
 8000f28:	6013      	str	r3, [r2, #0]
			for (int i = 1; i < 12; i++) {
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	2b0b      	cmp	r3, #11
 8000f34:	ddef      	ble.n	8000f16 <main+0x5e>
			}
			if (checksum != data[12]) {
 8000f36:	4b49      	ldr	r3, [pc, #292]	; (800105c <main+0x1a4>)
 8000f38:	7b1b      	ldrb	r3, [r3, #12]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	4b4c      	ldr	r3, [pc, #304]	; (8001070 <main+0x1b8>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d003      	beq.n	8000f4c <main+0x94>
				data_corrupted_flag = 1;
 8000f44:	4b49      	ldr	r3, [pc, #292]	; (800106c <main+0x1b4>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	601a      	str	r2, [r3, #0]
				goto flagchck;
 8000f4a:	e062      	b.n	8001012 <main+0x15a>
			}
			int p = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	613b      	str	r3, [r7, #16]
			for (int i = 13; i < 17; i++) {
 8000f50:	230d      	movs	r3, #13
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	e00e      	b.n	8000f74 <main+0xbc>
				crc_incoming_data[p] = data[i];
 8000f56:	4a41      	ldr	r2, [pc, #260]	; (800105c <main+0x1a4>)
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	7819      	ldrb	r1, [r3, #0]
 8000f5e:	4a45      	ldr	r2, [pc, #276]	; (8001074 <main+0x1bc>)
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	4413      	add	r3, r2
 8000f64:	460a      	mov	r2, r1
 8000f66:	701a      	strb	r2, [r3, #0]
				p++;
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	613b      	str	r3, [r7, #16]
			for (int i = 13; i < 17; i++) {
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	3301      	adds	r3, #1
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	2b10      	cmp	r3, #16
 8000f78:	dded      	ble.n	8000f56 <main+0x9e>

			}
			p = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
			for (int i = 1; i < 12; i++) {
 8000f7e:	2301      	movs	r3, #1
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	e010      	b.n	8000fa6 <main+0xee>
				reformed_data[p] = data[i] + 48;
 8000f84:	4a35      	ldr	r2, [pc, #212]	; (800105c <main+0x1a4>)
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	4413      	add	r3, r2
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	3330      	adds	r3, #48	; 0x30
 8000f8e:	b2d9      	uxtb	r1, r3
 8000f90:	4a39      	ldr	r2, [pc, #228]	; (8001078 <main+0x1c0>)
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	4413      	add	r3, r2
 8000f96:	460a      	mov	r2, r1
 8000f98:	701a      	strb	r2, [r3, #0]
				p++;
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	613b      	str	r3, [r7, #16]
			for (int i = 1; i < 12; i++) {
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	2b0b      	cmp	r3, #11
 8000faa:	ddeb      	ble.n	8000f84 <main+0xcc>

			}
			crc_incoming_result=0;
 8000fac:	4b33      	ldr	r3, [pc, #204]	; (800107c <main+0x1c4>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
			for (int i = 3; i >= 0; i--) {
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	e011      	b.n	8000fdc <main+0x124>
				crc_incoming_result |= crc_incoming_data[i] << (8 * i);
 8000fb8:	4a2e      	ldr	r2, [pc, #184]	; (8001074 <main+0x1bc>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	461a      	mov	r2, r3
 8000fcc:	4b2b      	ldr	r3, [pc, #172]	; (800107c <main+0x1c4>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	4a2a      	ldr	r2, [pc, #168]	; (800107c <main+0x1c4>)
 8000fd4:	6013      	str	r3, [r2, #0]
			for (int i = 3; i >= 0; i--) {
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	daea      	bge.n	8000fb8 <main+0x100>

			}


			calculated_crc = HAL_CRC_Calculate(&hcrc, (uint32_t*) reformed_data	, sizeof(reformed_data));
 8000fe2:	220b      	movs	r2, #11
 8000fe4:	4924      	ldr	r1, [pc, #144]	; (8001078 <main+0x1c0>)
 8000fe6:	4826      	ldr	r0, [pc, #152]	; (8001080 <main+0x1c8>)
 8000fe8:	f000 fde0 	bl	8001bac <HAL_CRC_Calculate>
 8000fec:	4603      	mov	r3, r0
 8000fee:	4a25      	ldr	r2, [pc, #148]	; (8001084 <main+0x1cc>)
 8000ff0:	6013      	str	r3, [r2, #0]
			calculated_crc ^= 0xFFFFFFFF;
 8000ff2:	4b24      	ldr	r3, [pc, #144]	; (8001084 <main+0x1cc>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	4a22      	ldr	r2, [pc, #136]	; (8001084 <main+0x1cc>)
 8000ffa:	6013      	str	r3, [r2, #0]

			}
			CRC->DR = all_bytes;
			calculated_crc = CRC->DR;
				*/
			if (calculated_crc != crc_incoming_result) {
 8000ffc:	4b21      	ldr	r3, [pc, #132]	; (8001084 <main+0x1cc>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	4b1e      	ldr	r3, [pc, #120]	; (800107c <main+0x1c4>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	429a      	cmp	r2, r3
 8001006:	d003      	beq.n	8001010 <main+0x158>
				data_corrupted_flag = 1;
 8001008:	4b18      	ldr	r3, [pc, #96]	; (800106c <main+0x1b4>)
 800100a:	2201      	movs	r2, #1
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	e000      	b.n	8001012 <main+0x15a>
			}
			flagchck:
 8001010:	bf00      	nop
			if (data_corrupted_flag == 0) {
 8001012:	4b16      	ldr	r3, [pc, #88]	; (800106c <main+0x1b4>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d108      	bne.n	800102c <main+0x174>
				//HAL_UART_Transmit(&huart1, &success_signal, 1, 250);
				CRC->CR  |= CRC_CR_RESET;
 800101a:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <main+0x1d0>)
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	4a1a      	ldr	r2, [pc, #104]	; (8001088 <main+0x1d0>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6093      	str	r3, [r2, #8]
				organizer();
 8001026:	f7ff fdad 	bl	8000b84 <organizer>
 800102a:	e00a      	b.n	8001042 <main+0x18a>

			} else {
				counter--;
 800102c:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <main+0x1ac>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	3b01      	subs	r3, #1
 8001032:	4a0c      	ldr	r2, [pc, #48]	; (8001064 <main+0x1ac>)
 8001034:	6013      	str	r3, [r2, #0]
				//transmit a 0 to main computer for resend
				//HAL_UART_Transmit(&huart1, &failure_signal, 1, 250);
				CRC->CR  |= CRC_CR_RESET;
 8001036:	4b14      	ldr	r3, [pc, #80]	; (8001088 <main+0x1d0>)
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	4a13      	ldr	r2, [pc, #76]	; (8001088 <main+0x1d0>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	6093      	str	r3, [r2, #8]
			}

		}

		if (completedcounter == 8) {
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <main+0x1b0>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2b08      	cmp	r3, #8
 8001048:	f47f af4c 	bne.w	8000ee4 <main+0x2c>
			send_data();
 800104c:	f7ff fedc 	bl	8000e08 <send_data>
			completedcounter++;
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <main+0x1b0>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	3301      	adds	r3, #1
 8001056:	4a04      	ldr	r2, [pc, #16]	; (8001068 <main+0x1b0>)
 8001058:	6013      	str	r3, [r2, #0]
		if (counter > completedcounter) {
 800105a:	e743      	b.n	8000ee4 <main+0x2c>
 800105c:	200001ec 	.word	0x200001ec
 8001060:	200000fc 	.word	0x200000fc
 8001064:	20000468 	.word	0x20000468
 8001068:	2000046c 	.word	0x2000046c
 800106c:	20000470 	.word	0x20000470
 8001070:	20000480 	.word	0x20000480
 8001074:	20000474 	.word	0x20000474
 8001078:	20000484 	.word	0x20000484
 800107c:	20000478 	.word	0x20000478
 8001080:	2000002c 	.word	0x2000002c
 8001084:	2000047c 	.word	0x2000047c
 8001088:	40023000 	.word	0x40023000

0800108c <SystemClock_Config>:
}
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b094      	sub	sp, #80	; 0x50
 8001090:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001092:	f107 0318 	add.w	r3, r7, #24
 8001096:	2238      	movs	r2, #56	; 0x38
 8001098:	2100      	movs	r1, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f004 fed0 	bl	8005e40 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]
 80010ac:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010b2:	f001 fb21 	bl	80026f8 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010b6:	2302      	movs	r3, #2
 80010b8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010c0:	2340      	movs	r3, #64	; 0x40
 80010c2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c4:	2302      	movs	r3, #2
 80010c6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010c8:	2302      	movs	r3, #2
 80010ca:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80010cc:	2301      	movs	r3, #1
 80010ce:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 9;
 80010d0:	2309      	movs	r3, #9
 80010d2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010d4:	2302      	movs	r3, #2
 80010d6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010d8:	2302      	movs	r3, #2
 80010da:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010dc:	2302      	movs	r3, #2
 80010de:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80010e0:	f107 0318 	add.w	r3, r7, #24
 80010e4:	4618      	mov	r0, r3
 80010e6:	f001 fbab 	bl	8002840 <HAL_RCC_OscConfig>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <SystemClock_Config+0x68>
		Error_Handler();
 80010f0:	f000 f9aa 	bl	8001448 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80010f4:	230f      	movs	r3, #15
 80010f6:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f8:	2303      	movs	r3, #3
 80010fa:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001100:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001104:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	2102      	movs	r1, #2
 800110e:	4618      	mov	r0, r3
 8001110:	f001 feae 	bl	8002e70 <HAL_RCC_ClockConfig>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <SystemClock_Config+0x92>
		Error_Handler();
 800111a:	f000 f995 	bl	8001448 <Error_Handler>
	}
}
 800111e:	bf00      	nop
 8001120:	3750      	adds	r7, #80	; 0x50
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 800112c:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <MX_CRC_Init+0x3c>)
 800112e:	4a0e      	ldr	r2, [pc, #56]	; (8001168 <MX_CRC_Init+0x40>)
 8001130:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001132:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <MX_CRC_Init+0x3c>)
 8001134:	2200      	movs	r2, #0
 8001136:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001138:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <MX_CRC_Init+0x3c>)
 800113a:	2200      	movs	r2, #0
 800113c:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 800113e:	4b09      	ldr	r3, [pc, #36]	; (8001164 <MX_CRC_Init+0x3c>)
 8001140:	2220      	movs	r2, #32
 8001142:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 8001144:	4b07      	ldr	r3, [pc, #28]	; (8001164 <MX_CRC_Init+0x3c>)
 8001146:	2280      	movs	r2, #128	; 0x80
 8001148:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <MX_CRC_Init+0x3c>)
 800114c:	2201      	movs	r2, #1
 800114e:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 8001150:	4804      	ldr	r0, [pc, #16]	; (8001164 <MX_CRC_Init+0x3c>)
 8001152:	f000 fcc7 	bl	8001ae4 <HAL_CRC_Init>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_CRC_Init+0x38>
		Error_Handler();
 800115c:	f000 f974 	bl	8001448 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}
 8001164:	2000002c 	.word	0x2000002c
 8001168:	40023000 	.word	0x40023000

0800116c <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b09c      	sub	sp, #112	; 0x70
 8001170:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001172:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001180:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800118c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
 800119c:	615a      	str	r2, [r3, #20]
 800119e:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	2234      	movs	r2, #52	; 0x34
 80011a4:	2100      	movs	r1, #0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f004 fe4a 	bl	8005e40 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80011ac:	4b45      	ldr	r3, [pc, #276]	; (80012c4 <MX_TIM1_Init+0x158>)
 80011ae:	4a46      	ldr	r2, [pc, #280]	; (80012c8 <MX_TIM1_Init+0x15c>)
 80011b0:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80011b2:	4b44      	ldr	r3, [pc, #272]	; (80012c4 <MX_TIM1_Init+0x158>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b8:	4b42      	ldr	r3, [pc, #264]	; (80012c4 <MX_TIM1_Init+0x158>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 89;
 80011be:	4b41      	ldr	r3, [pc, #260]	; (80012c4 <MX_TIM1_Init+0x158>)
 80011c0:	2259      	movs	r2, #89	; 0x59
 80011c2:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c4:	4b3f      	ldr	r3, [pc, #252]	; (80012c4 <MX_TIM1_Init+0x158>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80011ca:	4b3e      	ldr	r3, [pc, #248]	; (80012c4 <MX_TIM1_Init+0x158>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d0:	4b3c      	ldr	r3, [pc, #240]	; (80012c4 <MX_TIM1_Init+0x158>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80011d6:	483b      	ldr	r0, [pc, #236]	; (80012c4 <MX_TIM1_Init+0x158>)
 80011d8:	f002 fa56 	bl	8003688 <HAL_TIM_Base_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM1_Init+0x7a>
		Error_Handler();
 80011e2:	f000 f931 	bl	8001448 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ea:	663b      	str	r3, [r7, #96]	; 0x60
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80011ec:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80011f0:	4619      	mov	r1, r3
 80011f2:	4834      	ldr	r0, [pc, #208]	; (80012c4 <MX_TIM1_Init+0x158>)
 80011f4:	f002 fe2c 	bl	8003e50 <HAL_TIM_ConfigClockSource>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM1_Init+0x96>
		Error_Handler();
 80011fe:	f000 f923 	bl	8001448 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001202:	4830      	ldr	r0, [pc, #192]	; (80012c4 <MX_TIM1_Init+0x158>)
 8001204:	f002 fa97 	bl	8003736 <HAL_TIM_PWM_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_TIM1_Init+0xa6>
		Error_Handler();
 800120e:	f000 f91b 	bl	8001448 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001212:	2300      	movs	r3, #0
 8001214:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001216:	2300      	movs	r3, #0
 8001218:	65bb      	str	r3, [r7, #88]	; 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800121a:	2300      	movs	r3, #0
 800121c:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800121e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001222:	4619      	mov	r1, r3
 8001224:	4827      	ldr	r0, [pc, #156]	; (80012c4 <MX_TIM1_Init+0x158>)
 8001226:	f003 fc3b 	bl	8004aa0 <HAL_TIMEx_MasterConfigSynchronization>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_TIM1_Init+0xc8>
			!= HAL_OK) {
		Error_Handler();
 8001230:	f000 f90a 	bl	8001448 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001234:	2360      	movs	r3, #96	; 0x60
 8001236:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.Pulse = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800123c:	2300      	movs	r3, #0
 800123e:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001240:	2300      	movs	r3, #0
 8001242:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001244:	2300      	movs	r3, #0
 8001246:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001248:	2300      	movs	r3, #0
 800124a:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800124c:	2300      	movs	r3, #0
 800124e:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8001250:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001254:	2200      	movs	r2, #0
 8001256:	4619      	mov	r1, r3
 8001258:	481a      	ldr	r0, [pc, #104]	; (80012c4 <MX_TIM1_Init+0x158>)
 800125a:	f002 fce5 	bl	8003c28 <HAL_TIM_PWM_ConfigChannel>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_TIM1_Init+0xfc>
			!= HAL_OK) {
		Error_Handler();
 8001264:	f000 f8f0 	bl	8001448 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001268:	2300      	movs	r3, #0
 800126a:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800126c:	2300      	movs	r3, #0
 800126e:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001270:	2300      	movs	r3, #0
 8001272:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800127c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001280:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001286:	2300      	movs	r3, #0
 8001288:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800128a:	2300      	movs	r3, #0
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800128e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001292:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	62fb      	str	r3, [r7, #44]	; 0x2c
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001298:	2300      	movs	r3, #0
 800129a:	633b      	str	r3, [r7, #48]	; 0x30
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800129c:	2300      	movs	r3, #0
 800129e:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	4619      	mov	r1, r3
 80012a4:	4807      	ldr	r0, [pc, #28]	; (80012c4 <MX_TIM1_Init+0x158>)
 80012a6:	f003 fc7d 	bl	8004ba4 <HAL_TIMEx_ConfigBreakDeadTime>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM1_Init+0x148>
			!= HAL_OK) {
		Error_Handler();
 80012b0:	f000 f8ca 	bl	8001448 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80012b4:	4803      	ldr	r0, [pc, #12]	; (80012c4 <MX_TIM1_Init+0x158>)
 80012b6:	f000 f95d 	bl	8001574 <HAL_TIM_MspPostInit>

}
 80012ba:	bf00      	nop
 80012bc:	3770      	adds	r7, #112	; 0x70
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000050 	.word	0x20000050
 80012c8:	40012c00 	.word	0x40012c00

080012cc <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80012d0:	4b22      	ldr	r3, [pc, #136]	; (800135c <MX_USART1_UART_Init+0x90>)
 80012d2:	4a23      	ldr	r2, [pc, #140]	; (8001360 <MX_USART1_UART_Init+0x94>)
 80012d4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 80012d6:	4b21      	ldr	r3, [pc, #132]	; (800135c <MX_USART1_UART_Init+0x90>)
 80012d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80012dc:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012de:	4b1f      	ldr	r3, [pc, #124]	; (800135c <MX_USART1_UART_Init+0x90>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80012e4:	4b1d      	ldr	r3, [pc, #116]	; (800135c <MX_USART1_UART_Init+0x90>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80012ea:	4b1c      	ldr	r3, [pc, #112]	; (800135c <MX_USART1_UART_Init+0x90>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80012f0:	4b1a      	ldr	r3, [pc, #104]	; (800135c <MX_USART1_UART_Init+0x90>)
 80012f2:	220c      	movs	r2, #12
 80012f4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012f6:	4b19      	ldr	r3, [pc, #100]	; (800135c <MX_USART1_UART_Init+0x90>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012fc:	4b17      	ldr	r3, [pc, #92]	; (800135c <MX_USART1_UART_Init+0x90>)
 80012fe:	2200      	movs	r2, #0
 8001300:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001302:	4b16      	ldr	r3, [pc, #88]	; (800135c <MX_USART1_UART_Init+0x90>)
 8001304:	2200      	movs	r2, #0
 8001306:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001308:	4b14      	ldr	r3, [pc, #80]	; (800135c <MX_USART1_UART_Init+0x90>)
 800130a:	2200      	movs	r2, #0
 800130c:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800130e:	4b13      	ldr	r3, [pc, #76]	; (800135c <MX_USART1_UART_Init+0x90>)
 8001310:	2200      	movs	r2, #0
 8001312:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001314:	4811      	ldr	r0, [pc, #68]	; (800135c <MX_USART1_UART_Init+0x90>)
 8001316:	f003 fce5 	bl	8004ce4 <HAL_UART_Init>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_USART1_UART_Init+0x58>
		Error_Handler();
 8001320:	f000 f892 	bl	8001448 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 8001324:	2100      	movs	r1, #0
 8001326:	480d      	ldr	r0, [pc, #52]	; (800135c <MX_USART1_UART_Init+0x90>)
 8001328:	f004 fc9b 	bl	8005c62 <HAL_UARTEx_SetTxFifoThreshold>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_USART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8001332:	f000 f889 	bl	8001448 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 8001336:	2100      	movs	r1, #0
 8001338:	4808      	ldr	r0, [pc, #32]	; (800135c <MX_USART1_UART_Init+0x90>)
 800133a:	f004 fcd0 	bl	8005cde <HAL_UARTEx_SetRxFifoThreshold>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_USART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8001344:	f000 f880 	bl	8001448 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 8001348:	4804      	ldr	r0, [pc, #16]	; (800135c <MX_USART1_UART_Init+0x90>)
 800134a:	f004 fc51 	bl	8005bf0 <HAL_UARTEx_DisableFifoMode>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_USART1_UART_Init+0x8c>
		Error_Handler();
 8001354:	f000 f878 	bl	8001448 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	200000fc 	.word	0x200000fc
 8001360:	40013800 	.word	0x40013800

08001364 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 800136a:	4b16      	ldr	r3, [pc, #88]	; (80013c4 <MX_DMA_Init+0x60>)
 800136c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800136e:	4a15      	ldr	r2, [pc, #84]	; (80013c4 <MX_DMA_Init+0x60>)
 8001370:	f043 0304 	orr.w	r3, r3, #4
 8001374:	6493      	str	r3, [r2, #72]	; 0x48
 8001376:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <MX_DMA_Init+0x60>)
 8001378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800137a:	f003 0304 	and.w	r3, r3, #4
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <MX_DMA_Init+0x60>)
 8001384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001386:	4a0f      	ldr	r2, [pc, #60]	; (80013c4 <MX_DMA_Init+0x60>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6493      	str	r3, [r2, #72]	; 0x48
 800138e:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <MX_DMA_Init+0x60>)
 8001390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	603b      	str	r3, [r7, #0]
 8001398:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800139a:	2200      	movs	r2, #0
 800139c:	2100      	movs	r1, #0
 800139e:	200b      	movs	r0, #11
 80013a0:	f000 fb6b 	bl	8001a7a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013a4:	200b      	movs	r0, #11
 80013a6:	f000 fb82 	bl	8001aae <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2100      	movs	r1, #0
 80013ae:	200c      	movs	r0, #12
 80013b0:	f000 fb63 	bl	8001a7a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80013b4:	200c      	movs	r0, #12
 80013b6:	f000 fb7a 	bl	8001aae <HAL_NVIC_EnableIRQ>

}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40021000 	.word	0x40021000

080013c8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b088      	sub	sp, #32
 80013cc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80013ce:	f107 030c 	add.w	r3, r7, #12
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]
 80013dc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80013de:	4b18      	ldr	r3, [pc, #96]	; (8001440 <MX_GPIO_Init+0x78>)
 80013e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e2:	4a17      	ldr	r2, [pc, #92]	; (8001440 <MX_GPIO_Init+0x78>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ea:	4b15      	ldr	r3, [pc, #84]	; (8001440 <MX_GPIO_Init+0x78>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	60bb      	str	r3, [r7, #8]
 80013f4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80013f6:	4b12      	ldr	r3, [pc, #72]	; (8001440 <MX_GPIO_Init+0x78>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fa:	4a11      	ldr	r2, [pc, #68]	; (8001440 <MX_GPIO_Init+0x78>)
 80013fc:	f043 0302 	orr.w	r3, r3, #2
 8001400:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001402:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <MX_GPIO_Init+0x78>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800140e:	2200      	movs	r2, #0
 8001410:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001414:	480b      	ldr	r0, [pc, #44]	; (8001444 <MX_GPIO_Init+0x7c>)
 8001416:	f001 f957 	bl	80026c8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 800141a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800141e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001420:	2301      	movs	r3, #1
 8001422:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001428:	2300      	movs	r3, #0
 800142a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800142c:	f107 030c 	add.w	r3, r7, #12
 8001430:	4619      	mov	r1, r3
 8001432:	4804      	ldr	r0, [pc, #16]	; (8001444 <MX_GPIO_Init+0x7c>)
 8001434:	f000 ffc6 	bl	80023c4 <HAL_GPIO_Init>

}
 8001438:	bf00      	nop
 800143a:	3720      	adds	r7, #32
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40021000 	.word	0x40021000
 8001444:	48000400 	.word	0x48000400

08001448 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800144c:	b672      	cpsid	i
}
 800144e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001450:	e7fe      	b.n	8001450 <Error_Handler+0x8>
	...

08001454 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145a:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <HAL_MspInit+0x44>)
 800145c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800145e:	4a0e      	ldr	r2, [pc, #56]	; (8001498 <HAL_MspInit+0x44>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	6613      	str	r3, [r2, #96]	; 0x60
 8001466:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <HAL_MspInit+0x44>)
 8001468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001472:	4b09      	ldr	r3, [pc, #36]	; (8001498 <HAL_MspInit+0x44>)
 8001474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001476:	4a08      	ldr	r2, [pc, #32]	; (8001498 <HAL_MspInit+0x44>)
 8001478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800147c:	6593      	str	r3, [r2, #88]	; 0x58
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <HAL_MspInit+0x44>)
 8001480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001486:	603b      	str	r3, [r7, #0]
 8001488:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	40021000 	.word	0x40021000

0800149c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a0a      	ldr	r2, [pc, #40]	; (80014d4 <HAL_CRC_MspInit+0x38>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d10b      	bne.n	80014c6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80014ae:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <HAL_CRC_MspInit+0x3c>)
 80014b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014b2:	4a09      	ldr	r2, [pc, #36]	; (80014d8 <HAL_CRC_MspInit+0x3c>)
 80014b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014b8:	6493      	str	r3, [r2, #72]	; 0x48
 80014ba:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <HAL_CRC_MspInit+0x3c>)
 80014bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80014c6:	bf00      	nop
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	40023000 	.word	0x40023000
 80014d8:	40021000 	.word	0x40021000

080014dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a1e      	ldr	r2, [pc, #120]	; (8001564 <HAL_TIM_Base_MspInit+0x88>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d136      	bne.n	800155c <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014ee:	4b1e      	ldr	r3, [pc, #120]	; (8001568 <HAL_TIM_Base_MspInit+0x8c>)
 80014f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014f2:	4a1d      	ldr	r2, [pc, #116]	; (8001568 <HAL_TIM_Base_MspInit+0x8c>)
 80014f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014f8:	6613      	str	r3, [r2, #96]	; 0x60
 80014fa:	4b1b      	ldr	r3, [pc, #108]	; (8001568 <HAL_TIM_Base_MspInit+0x8c>)
 80014fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel1;
 8001506:	4b19      	ldr	r3, [pc, #100]	; (800156c <HAL_TIM_Base_MspInit+0x90>)
 8001508:	4a19      	ldr	r2, [pc, #100]	; (8001570 <HAL_TIM_Base_MspInit+0x94>)
 800150a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 800150c:	4b17      	ldr	r3, [pc, #92]	; (800156c <HAL_TIM_Base_MspInit+0x90>)
 800150e:	222a      	movs	r2, #42	; 0x2a
 8001510:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001512:	4b16      	ldr	r3, [pc, #88]	; (800156c <HAL_TIM_Base_MspInit+0x90>)
 8001514:	2210      	movs	r2, #16
 8001516:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001518:	4b14      	ldr	r3, [pc, #80]	; (800156c <HAL_TIM_Base_MspInit+0x90>)
 800151a:	2200      	movs	r2, #0
 800151c:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800151e:	4b13      	ldr	r3, [pc, #76]	; (800156c <HAL_TIM_Base_MspInit+0x90>)
 8001520:	2280      	movs	r2, #128	; 0x80
 8001522:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001524:	4b11      	ldr	r3, [pc, #68]	; (800156c <HAL_TIM_Base_MspInit+0x90>)
 8001526:	f44f 7280 	mov.w	r2, #256	; 0x100
 800152a:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800152c:	4b0f      	ldr	r3, [pc, #60]	; (800156c <HAL_TIM_Base_MspInit+0x90>)
 800152e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001532:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001534:	4b0d      	ldr	r3, [pc, #52]	; (800156c <HAL_TIM_Base_MspInit+0x90>)
 8001536:	2200      	movs	r2, #0
 8001538:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800153a:	4b0c      	ldr	r3, [pc, #48]	; (800156c <HAL_TIM_Base_MspInit+0x90>)
 800153c:	2200      	movs	r2, #0
 800153e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001540:	480a      	ldr	r0, [pc, #40]	; (800156c <HAL_TIM_Base_MspInit+0x90>)
 8001542:	f000 fccd 	bl	8001ee0 <HAL_DMA_Init>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 800154c:	f7ff ff7c 	bl	8001448 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a06      	ldr	r2, [pc, #24]	; (800156c <HAL_TIM_Base_MspInit+0x90>)
 8001554:	625a      	str	r2, [r3, #36]	; 0x24
 8001556:	4a05      	ldr	r2, [pc, #20]	; (800156c <HAL_TIM_Base_MspInit+0x90>)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800155c:	bf00      	nop
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40012c00 	.word	0x40012c00
 8001568:	40021000 	.word	0x40021000
 800156c:	2000009c 	.word	0x2000009c
 8001570:	40020008 	.word	0x40020008

08001574 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b088      	sub	sp, #32
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 030c 	add.w	r3, r7, #12
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a12      	ldr	r2, [pc, #72]	; (80015dc <HAL_TIM_MspPostInit+0x68>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d11d      	bne.n	80015d2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001596:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <HAL_TIM_MspPostInit+0x6c>)
 8001598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159a:	4a11      	ldr	r2, [pc, #68]	; (80015e0 <HAL_TIM_MspPostInit+0x6c>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015a2:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <HAL_TIM_MspPostInit+0x6c>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	2302      	movs	r3, #2
 80015b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015bc:	2300      	movs	r3, #0
 80015be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80015c0:	2306      	movs	r3, #6
 80015c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c4:	f107 030c 	add.w	r3, r7, #12
 80015c8:	4619      	mov	r1, r3
 80015ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ce:	f000 fef9 	bl	80023c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80015d2:	bf00      	nop
 80015d4:	3720      	adds	r7, #32
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40012c00 	.word	0x40012c00
 80015e0:	40021000 	.word	0x40021000

080015e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b09a      	sub	sp, #104	; 0x68
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015fc:	f107 0310 	add.w	r3, r7, #16
 8001600:	2244      	movs	r2, #68	; 0x44
 8001602:	2100      	movs	r1, #0
 8001604:	4618      	mov	r0, r3
 8001606:	f004 fc1b 	bl	8005e40 <memset>
  if(huart->Instance==USART1)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a34      	ldr	r2, [pc, #208]	; (80016e0 <HAL_UART_MspInit+0xfc>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d160      	bne.n	80016d6 <HAL_UART_MspInit+0xf2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001614:	2301      	movs	r3, #1
 8001616:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800161c:	f107 0310 	add.w	r3, r7, #16
 8001620:	4618      	mov	r0, r3
 8001622:	f001 fe41 	bl	80032a8 <HAL_RCCEx_PeriphCLKConfig>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800162c:	f7ff ff0c 	bl	8001448 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001630:	4b2c      	ldr	r3, [pc, #176]	; (80016e4 <HAL_UART_MspInit+0x100>)
 8001632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001634:	4a2b      	ldr	r2, [pc, #172]	; (80016e4 <HAL_UART_MspInit+0x100>)
 8001636:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800163a:	6613      	str	r3, [r2, #96]	; 0x60
 800163c:	4b29      	ldr	r3, [pc, #164]	; (80016e4 <HAL_UART_MspInit+0x100>)
 800163e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001648:	4b26      	ldr	r3, [pc, #152]	; (80016e4 <HAL_UART_MspInit+0x100>)
 800164a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164c:	4a25      	ldr	r2, [pc, #148]	; (80016e4 <HAL_UART_MspInit+0x100>)
 800164e:	f043 0301 	orr.w	r3, r3, #1
 8001652:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001654:	4b23      	ldr	r3, [pc, #140]	; (80016e4 <HAL_UART_MspInit+0x100>)
 8001656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001660:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001664:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001666:	2302      	movs	r3, #2
 8001668:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166e:	2300      	movs	r3, #0
 8001670:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001672:	2307      	movs	r3, #7
 8001674:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001676:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800167a:	4619      	mov	r1, r3
 800167c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001680:	f000 fea0 	bl	80023c4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8001684:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <HAL_UART_MspInit+0x104>)
 8001686:	4a19      	ldr	r2, [pc, #100]	; (80016ec <HAL_UART_MspInit+0x108>)
 8001688:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800168a:	4b17      	ldr	r3, [pc, #92]	; (80016e8 <HAL_UART_MspInit+0x104>)
 800168c:	2218      	movs	r2, #24
 800168e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001690:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <HAL_UART_MspInit+0x104>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001696:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <HAL_UART_MspInit+0x104>)
 8001698:	2200      	movs	r2, #0
 800169a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800169c:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <HAL_UART_MspInit+0x104>)
 800169e:	2280      	movs	r2, #128	; 0x80
 80016a0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016a2:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <HAL_UART_MspInit+0x104>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016a8:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <HAL_UART_MspInit+0x104>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80016ae:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <HAL_UART_MspInit+0x104>)
 80016b0:	2220      	movs	r2, #32
 80016b2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <HAL_UART_MspInit+0x104>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80016ba:	480b      	ldr	r0, [pc, #44]	; (80016e8 <HAL_UART_MspInit+0x104>)
 80016bc:	f000 fc10 	bl	8001ee0 <HAL_DMA_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80016c6:	f7ff febf 	bl	8001448 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a06      	ldr	r2, [pc, #24]	; (80016e8 <HAL_UART_MspInit+0x104>)
 80016ce:	67da      	str	r2, [r3, #124]	; 0x7c
 80016d0:	4a05      	ldr	r2, [pc, #20]	; (80016e8 <HAL_UART_MspInit+0x104>)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80016d6:	bf00      	nop
 80016d8:	3768      	adds	r7, #104	; 0x68
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40013800 	.word	0x40013800
 80016e4:	40021000 	.word	0x40021000
 80016e8:	2000018c 	.word	0x2000018c
 80016ec:	4002001c 	.word	0x4002001c

080016f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016f4:	e7fe      	b.n	80016f4 <NMI_Handler+0x4>

080016f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016fa:	e7fe      	b.n	80016fa <HardFault_Handler+0x4>

080016fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001700:	e7fe      	b.n	8001700 <MemManage_Handler+0x4>

08001702 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001706:	e7fe      	b.n	8001706 <BusFault_Handler+0x4>

08001708 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800170c:	e7fe      	b.n	800170c <UsageFault_Handler+0x4>

0800170e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800173c:	f000 f8a4 	bl	8001888 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}

08001744 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001748:	4802      	ldr	r0, [pc, #8]	; (8001754 <DMA1_Channel1_IRQHandler+0x10>)
 800174a:	f000 fcec 	bl	8002126 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	2000009c 	.word	0x2000009c

08001758 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800175c:	4802      	ldr	r0, [pc, #8]	; (8001768 <DMA1_Channel2_IRQHandler+0x10>)
 800175e:	f000 fce2 	bl	8002126 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	2000018c 	.word	0x2000018c

0800176c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <SystemInit+0x20>)
 8001772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001776:	4a05      	ldr	r2, [pc, #20]	; (800178c <SystemInit+0x20>)
 8001778:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800177c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001790:	480d      	ldr	r0, [pc, #52]	; (80017c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001792:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001794:	480d      	ldr	r0, [pc, #52]	; (80017cc <LoopForever+0x6>)
  ldr r1, =_edata
 8001796:	490e      	ldr	r1, [pc, #56]	; (80017d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001798:	4a0e      	ldr	r2, [pc, #56]	; (80017d4 <LoopForever+0xe>)
  movs r3, #0
 800179a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800179c:	e002      	b.n	80017a4 <LoopCopyDataInit>

0800179e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800179e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017a2:	3304      	adds	r3, #4

080017a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a8:	d3f9      	bcc.n	800179e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017aa:	4a0b      	ldr	r2, [pc, #44]	; (80017d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017ac:	4c0b      	ldr	r4, [pc, #44]	; (80017dc <LoopForever+0x16>)
  movs r3, #0
 80017ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017b0:	e001      	b.n	80017b6 <LoopFillZerobss>

080017b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b4:	3204      	adds	r2, #4

080017b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b8:	d3fb      	bcc.n	80017b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017ba:	f7ff ffd7 	bl	800176c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017be:	f004 fb1b 	bl	8005df8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017c2:	f7ff fb79 	bl	8000eb8 <main>

080017c6 <LoopForever>:

LoopForever:
    b LoopForever
 80017c6:	e7fe      	b.n	80017c6 <LoopForever>
  ldr   r0, =_estack
 80017c8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80017cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017d0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80017d4:	08005eb8 	.word	0x08005eb8
  ldr r2, =_sbss
 80017d8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80017dc:	20000494 	.word	0x20000494

080017e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017e0:	e7fe      	b.n	80017e0 <ADC1_2_IRQHandler>

080017e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017e8:	2300      	movs	r3, #0
 80017ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ec:	2003      	movs	r0, #3
 80017ee:	f000 f939 	bl	8001a64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017f2:	2000      	movs	r0, #0
 80017f4:	f000 f80e 	bl	8001814 <HAL_InitTick>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d002      	beq.n	8001804 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	71fb      	strb	r3, [r7, #7]
 8001802:	e001      	b.n	8001808 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001804:	f7ff fe26 	bl	8001454 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001808:	79fb      	ldrb	r3, [r7, #7]

}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
	...

08001814 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800181c:	2300      	movs	r3, #0
 800181e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001820:	4b16      	ldr	r3, [pc, #88]	; (800187c <HAL_InitTick+0x68>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d022      	beq.n	800186e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001828:	4b15      	ldr	r3, [pc, #84]	; (8001880 <HAL_InitTick+0x6c>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4b13      	ldr	r3, [pc, #76]	; (800187c <HAL_InitTick+0x68>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001834:	fbb1 f3f3 	udiv	r3, r1, r3
 8001838:	fbb2 f3f3 	udiv	r3, r2, r3
 800183c:	4618      	mov	r0, r3
 800183e:	f000 f944 	bl	8001aca <HAL_SYSTICK_Config>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d10f      	bne.n	8001868 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2b0f      	cmp	r3, #15
 800184c:	d809      	bhi.n	8001862 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800184e:	2200      	movs	r2, #0
 8001850:	6879      	ldr	r1, [r7, #4]
 8001852:	f04f 30ff 	mov.w	r0, #4294967295
 8001856:	f000 f910 	bl	8001a7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800185a:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <HAL_InitTick+0x70>)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6013      	str	r3, [r2, #0]
 8001860:	e007      	b.n	8001872 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	73fb      	strb	r3, [r7, #15]
 8001866:	e004      	b.n	8001872 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	73fb      	strb	r3, [r7, #15]
 800186c:	e001      	b.n	8001872 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001872:	7bfb      	ldrb	r3, [r7, #15]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3710      	adds	r7, #16
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	2000000c 	.word	0x2000000c
 8001880:	20000004 	.word	0x20000004
 8001884:	20000008 	.word	0x20000008

08001888 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800188c:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <HAL_IncTick+0x1c>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <HAL_IncTick+0x20>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4413      	add	r3, r2
 8001896:	4a03      	ldr	r2, [pc, #12]	; (80018a4 <HAL_IncTick+0x1c>)
 8001898:	6013      	str	r3, [r2, #0]
}
 800189a:	bf00      	nop
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	20000490 	.word	0x20000490
 80018a8:	2000000c 	.word	0x2000000c

080018ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return uwTick;
 80018b0:	4b03      	ldr	r3, [pc, #12]	; (80018c0 <HAL_GetTick+0x14>)
 80018b2:	681b      	ldr	r3, [r3, #0]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	20000490 	.word	0x20000490

080018c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d4:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <__NVIC_SetPriorityGrouping+0x44>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018da:	68ba      	ldr	r2, [r7, #8]
 80018dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018e0:	4013      	ands	r3, r2
 80018e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018f6:	4a04      	ldr	r2, [pc, #16]	; (8001908 <__NVIC_SetPriorityGrouping+0x44>)
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	60d3      	str	r3, [r2, #12]
}
 80018fc:	bf00      	nop
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001910:	4b04      	ldr	r3, [pc, #16]	; (8001924 <__NVIC_GetPriorityGrouping+0x18>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	0a1b      	lsrs	r3, r3, #8
 8001916:	f003 0307 	and.w	r3, r3, #7
}
 800191a:	4618      	mov	r0, r3
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001936:	2b00      	cmp	r3, #0
 8001938:	db0b      	blt.n	8001952 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	f003 021f 	and.w	r2, r3, #31
 8001940:	4907      	ldr	r1, [pc, #28]	; (8001960 <__NVIC_EnableIRQ+0x38>)
 8001942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001946:	095b      	lsrs	r3, r3, #5
 8001948:	2001      	movs	r0, #1
 800194a:	fa00 f202 	lsl.w	r2, r0, r2
 800194e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000e100 	.word	0xe000e100

08001964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	6039      	str	r1, [r7, #0]
 800196e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001974:	2b00      	cmp	r3, #0
 8001976:	db0a      	blt.n	800198e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	b2da      	uxtb	r2, r3
 800197c:	490c      	ldr	r1, [pc, #48]	; (80019b0 <__NVIC_SetPriority+0x4c>)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	0112      	lsls	r2, r2, #4
 8001984:	b2d2      	uxtb	r2, r2
 8001986:	440b      	add	r3, r1
 8001988:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800198c:	e00a      	b.n	80019a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	b2da      	uxtb	r2, r3
 8001992:	4908      	ldr	r1, [pc, #32]	; (80019b4 <__NVIC_SetPriority+0x50>)
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	f003 030f 	and.w	r3, r3, #15
 800199a:	3b04      	subs	r3, #4
 800199c:	0112      	lsls	r2, r2, #4
 800199e:	b2d2      	uxtb	r2, r2
 80019a0:	440b      	add	r3, r1
 80019a2:	761a      	strb	r2, [r3, #24]
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	e000e100 	.word	0xe000e100
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b089      	sub	sp, #36	; 0x24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	f1c3 0307 	rsb	r3, r3, #7
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	bf28      	it	cs
 80019d6:	2304      	movcs	r3, #4
 80019d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3304      	adds	r3, #4
 80019de:	2b06      	cmp	r3, #6
 80019e0:	d902      	bls.n	80019e8 <NVIC_EncodePriority+0x30>
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3b03      	subs	r3, #3
 80019e6:	e000      	b.n	80019ea <NVIC_EncodePriority+0x32>
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ec:	f04f 32ff 	mov.w	r2, #4294967295
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43da      	mvns	r2, r3
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	401a      	ands	r2, r3
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a00:	f04f 31ff 	mov.w	r1, #4294967295
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0a:	43d9      	mvns	r1, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a10:	4313      	orrs	r3, r2
         );
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3724      	adds	r7, #36	; 0x24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
	...

08001a20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a30:	d301      	bcc.n	8001a36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a32:	2301      	movs	r3, #1
 8001a34:	e00f      	b.n	8001a56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a36:	4a0a      	ldr	r2, [pc, #40]	; (8001a60 <SysTick_Config+0x40>)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a3e:	210f      	movs	r1, #15
 8001a40:	f04f 30ff 	mov.w	r0, #4294967295
 8001a44:	f7ff ff8e 	bl	8001964 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a48:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <SysTick_Config+0x40>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a4e:	4b04      	ldr	r3, [pc, #16]	; (8001a60 <SysTick_Config+0x40>)
 8001a50:	2207      	movs	r2, #7
 8001a52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	e000e010 	.word	0xe000e010

08001a64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff ff29 	bl	80018c4 <__NVIC_SetPriorityGrouping>
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b086      	sub	sp, #24
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	4603      	mov	r3, r0
 8001a82:	60b9      	str	r1, [r7, #8]
 8001a84:	607a      	str	r2, [r7, #4]
 8001a86:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a88:	f7ff ff40 	bl	800190c <__NVIC_GetPriorityGrouping>
 8001a8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	68b9      	ldr	r1, [r7, #8]
 8001a92:	6978      	ldr	r0, [r7, #20]
 8001a94:	f7ff ff90 	bl	80019b8 <NVIC_EncodePriority>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff ff5f 	bl	8001964 <__NVIC_SetPriority>
}
 8001aa6:	bf00      	nop
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b082      	sub	sp, #8
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ff33 	bl	8001928 <__NVIC_EnableIRQ>
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff ffa4 	bl	8001a20 <SysTick_Config>
 8001ad8:	4603      	mov	r3, r0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
	...

08001ae4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e054      	b.n	8001ba0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	7f5b      	ldrb	r3, [r3, #29]
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d105      	bne.n	8001b0c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff fcc8 	bl	800149c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2202      	movs	r2, #2
 8001b10:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	791b      	ldrb	r3, [r3, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d10c      	bne.n	8001b34 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a22      	ldr	r2, [pc, #136]	; (8001ba8 <HAL_CRC_Init+0xc4>)
 8001b20:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f022 0218 	bic.w	r2, r2, #24
 8001b30:	609a      	str	r2, [r3, #8]
 8001b32:	e00c      	b.n	8001b4e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6899      	ldr	r1, [r3, #8]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 f948 	bl	8001dd4 <HAL_CRCEx_Polynomial_Set>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e028      	b.n	8001ba0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	795b      	ldrb	r3, [r3, #5]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d105      	bne.n	8001b62 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8001b5e:	611a      	str	r2, [r3, #16]
 8001b60:	e004      	b.n	8001b6c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	6912      	ldr	r2, [r2, #16]
 8001b6a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	695a      	ldr	r2, [r3, #20]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	699a      	ldr	r2, [r3, #24]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	430a      	orrs	r2, r1
 8001b96:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	04c11db7 	.word	0x04c11db7

08001bac <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001bb8:	2300      	movs	r3, #0
 8001bba:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f042 0201 	orr.w	r2, r2, #1
 8001bd0:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	6a1b      	ldr	r3, [r3, #32]
 8001bd6:	2b03      	cmp	r3, #3
 8001bd8:	d006      	beq.n	8001be8 <HAL_CRC_Calculate+0x3c>
 8001bda:	2b03      	cmp	r3, #3
 8001bdc:	d829      	bhi.n	8001c32 <HAL_CRC_Calculate+0x86>
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d019      	beq.n	8001c16 <HAL_CRC_Calculate+0x6a>
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d01e      	beq.n	8001c24 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8001be6:	e024      	b.n	8001c32 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]
 8001bec:	e00a      	b.n	8001c04 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	68ba      	ldr	r2, [r7, #8]
 8001bf4:	441a      	add	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6812      	ldr	r2, [r2, #0]
 8001bfc:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	3301      	adds	r3, #1
 8001c02:	617b      	str	r3, [r7, #20]
 8001c04:	697a      	ldr	r2, [r7, #20]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d3f0      	bcc.n	8001bee <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	613b      	str	r3, [r7, #16]
      break;
 8001c14:	e00e      	b.n	8001c34 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	68b9      	ldr	r1, [r7, #8]
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	f000 f812 	bl	8001c44 <CRC_Handle_8>
 8001c20:	6138      	str	r0, [r7, #16]
      break;
 8001c22:	e007      	b.n	8001c34 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	68b9      	ldr	r1, [r7, #8]
 8001c28:	68f8      	ldr	r0, [r7, #12]
 8001c2a:	f000 f899 	bl	8001d60 <CRC_Handle_16>
 8001c2e:	6138      	str	r0, [r7, #16]
      break;
 8001c30:	e000      	b.n	8001c34 <HAL_CRC_Calculate+0x88>
      break;
 8001c32:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2201      	movs	r2, #1
 8001c38:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8001c3a:	693b      	ldr	r3, [r7, #16]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3718      	adds	r7, #24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b089      	sub	sp, #36	; 0x24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001c50:	2300      	movs	r3, #0
 8001c52:	61fb      	str	r3, [r7, #28]
 8001c54:	e023      	b.n	8001c9e <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	3301      	adds	r3, #1
 8001c68:	68b9      	ldr	r1, [r7, #8]
 8001c6a:	440b      	add	r3, r1
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001c70:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	3302      	adds	r3, #2
 8001c78:	68b9      	ldr	r1, [r7, #8]
 8001c7a:	440b      	add	r3, r1
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001c80:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	3303      	adds	r3, #3
 8001c88:	68b9      	ldr	r1, [r7, #8]
 8001c8a:	440b      	add	r3, r1
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001c94:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001c96:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	61fb      	str	r3, [r7, #28]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	089b      	lsrs	r3, r3, #2
 8001ca2:	69fa      	ldr	r2, [r7, #28]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d3d6      	bcc.n	8001c56 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d04d      	beq.n	8001d4e <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f003 0303 	and.w	r3, r3, #3
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d107      	bne.n	8001ccc <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	68ba      	ldr	r2, [r7, #8]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	6812      	ldr	r2, [r2, #0]
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f003 0303 	and.w	r3, r3, #3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d116      	bne.n	8001d04 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	68ba      	ldr	r2, [r7, #8]
 8001cdc:	4413      	add	r3, r2
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	021b      	lsls	r3, r3, #8
 8001ce2:	b21a      	sxth	r2, r3
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	3301      	adds	r3, #1
 8001cea:	68b9      	ldr	r1, [r7, #8]
 8001cec:	440b      	add	r3, r1
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	b21b      	sxth	r3, r3
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	b21b      	sxth	r3, r3
 8001cf6:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	8b7a      	ldrh	r2, [r7, #26]
 8001d02:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f003 0303 	and.w	r3, r3, #3
 8001d0a:	2b03      	cmp	r3, #3
 8001d0c:	d11f      	bne.n	8001d4e <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	68ba      	ldr	r2, [r7, #8]
 8001d14:	4413      	add	r3, r2
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	021b      	lsls	r3, r3, #8
 8001d1a:	b21a      	sxth	r2, r3
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	3301      	adds	r3, #1
 8001d22:	68b9      	ldr	r1, [r7, #8]
 8001d24:	440b      	add	r3, r1
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	b21b      	sxth	r3, r3
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	b21b      	sxth	r3, r3
 8001d2e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	8b7a      	ldrh	r2, [r7, #26]
 8001d3a:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	3302      	adds	r3, #2
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	4413      	add	r3, r2
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	6812      	ldr	r2, [r2, #0]
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3724      	adds	r7, #36	; 0x24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b087      	sub	sp, #28
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]
 8001d70:	e013      	b.n	8001d9a <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	68ba      	ldr	r2, [r7, #8]
 8001d78:	4413      	add	r3, r2
 8001d7a:	881b      	ldrh	r3, [r3, #0]
 8001d7c:	041a      	lsls	r2, r3, #16
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	3302      	adds	r3, #2
 8001d84:	68b9      	ldr	r1, [r7, #8]
 8001d86:	440b      	add	r3, r1
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	430a      	orrs	r2, r1
 8001d92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	3301      	adds	r3, #1
 8001d98:	617b      	str	r3, [r7, #20]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	085b      	lsrs	r3, r3, #1
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d3e6      	bcc.n	8001d72 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d009      	beq.n	8001dc2 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	68ba      	ldr	r2, [r7, #8]
 8001dba:	4413      	add	r3, r2
 8001dbc:	881a      	ldrh	r2, [r3, #0]
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	371c      	adds	r7, #28
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b087      	sub	sp, #28
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001de0:	2300      	movs	r3, #0
 8001de2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001de4:	231f      	movs	r3, #31
 8001de6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001de8:	bf00      	nop
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1e5a      	subs	r2, r3, #1
 8001dee:	613a      	str	r2, [r7, #16]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d009      	beq.n	8001e08 <HAL_CRCEx_Polynomial_Set+0x34>
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	f003 031f 	and.w	r3, r3, #31
 8001dfa:	68ba      	ldr	r2, [r7, #8]
 8001dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0f0      	beq.n	8001dea <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b18      	cmp	r3, #24
 8001e0c:	d846      	bhi.n	8001e9c <HAL_CRCEx_Polynomial_Set+0xc8>
 8001e0e:	a201      	add	r2, pc, #4	; (adr r2, 8001e14 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e14:	08001ea3 	.word	0x08001ea3
 8001e18:	08001e9d 	.word	0x08001e9d
 8001e1c:	08001e9d 	.word	0x08001e9d
 8001e20:	08001e9d 	.word	0x08001e9d
 8001e24:	08001e9d 	.word	0x08001e9d
 8001e28:	08001e9d 	.word	0x08001e9d
 8001e2c:	08001e9d 	.word	0x08001e9d
 8001e30:	08001e9d 	.word	0x08001e9d
 8001e34:	08001e91 	.word	0x08001e91
 8001e38:	08001e9d 	.word	0x08001e9d
 8001e3c:	08001e9d 	.word	0x08001e9d
 8001e40:	08001e9d 	.word	0x08001e9d
 8001e44:	08001e9d 	.word	0x08001e9d
 8001e48:	08001e9d 	.word	0x08001e9d
 8001e4c:	08001e9d 	.word	0x08001e9d
 8001e50:	08001e9d 	.word	0x08001e9d
 8001e54:	08001e85 	.word	0x08001e85
 8001e58:	08001e9d 	.word	0x08001e9d
 8001e5c:	08001e9d 	.word	0x08001e9d
 8001e60:	08001e9d 	.word	0x08001e9d
 8001e64:	08001e9d 	.word	0x08001e9d
 8001e68:	08001e9d 	.word	0x08001e9d
 8001e6c:	08001e9d 	.word	0x08001e9d
 8001e70:	08001e9d 	.word	0x08001e9d
 8001e74:	08001e79 	.word	0x08001e79
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	2b06      	cmp	r3, #6
 8001e7c:	d913      	bls.n	8001ea6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001e82:	e010      	b.n	8001ea6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	2b07      	cmp	r3, #7
 8001e88:	d90f      	bls.n	8001eaa <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001e8e:	e00c      	b.n	8001eaa <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	2b0f      	cmp	r3, #15
 8001e94:	d90b      	bls.n	8001eae <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001e9a:	e008      	b.n	8001eae <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	75fb      	strb	r3, [r7, #23]
      break;
 8001ea0:	e006      	b.n	8001eb0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001ea2:	bf00      	nop
 8001ea4:	e004      	b.n	8001eb0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001ea6:	bf00      	nop
 8001ea8:	e002      	b.n	8001eb0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001eaa:	bf00      	nop
 8001eac:	e000      	b.n	8001eb0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001eae:	bf00      	nop
  }
  if (status == HAL_OK)
 8001eb0:	7dfb      	ldrb	r3, [r7, #23]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10d      	bne.n	8001ed2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68ba      	ldr	r2, [r7, #8]
 8001ebc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f023 0118 	bic.w	r1, r3, #24
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001ed2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	371c      	adds	r7, #28
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e08d      	b.n	800200e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	4b47      	ldr	r3, [pc, #284]	; (8002018 <HAL_DMA_Init+0x138>)
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d80f      	bhi.n	8001f1e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	461a      	mov	r2, r3
 8001f04:	4b45      	ldr	r3, [pc, #276]	; (800201c <HAL_DMA_Init+0x13c>)
 8001f06:	4413      	add	r3, r2
 8001f08:	4a45      	ldr	r2, [pc, #276]	; (8002020 <HAL_DMA_Init+0x140>)
 8001f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0e:	091b      	lsrs	r3, r3, #4
 8001f10:	009a      	lsls	r2, r3, #2
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a42      	ldr	r2, [pc, #264]	; (8002024 <HAL_DMA_Init+0x144>)
 8001f1a:	641a      	str	r2, [r3, #64]	; 0x40
 8001f1c:	e00e      	b.n	8001f3c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	461a      	mov	r2, r3
 8001f24:	4b40      	ldr	r3, [pc, #256]	; (8002028 <HAL_DMA_Init+0x148>)
 8001f26:	4413      	add	r3, r2
 8001f28:	4a3d      	ldr	r2, [pc, #244]	; (8002020 <HAL_DMA_Init+0x140>)
 8001f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2e:	091b      	lsrs	r3, r3, #4
 8001f30:	009a      	lsls	r2, r3, #2
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a3c      	ldr	r2, [pc, #240]	; (800202c <HAL_DMA_Init+0x14c>)
 8001f3a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2202      	movs	r2, #2
 8001f40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f56:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001f60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f9b6 	bl	8002300 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f9c:	d102      	bne.n	8001fa4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fac:	b2d2      	uxtb	r2, r2
 8001fae:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001fb8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d010      	beq.n	8001fe4 <HAL_DMA_Init+0x104>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b04      	cmp	r3, #4
 8001fc8:	d80c      	bhi.n	8001fe4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 f9d6 	bl	800237c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	e008      	b.n	8001ff6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40020407 	.word	0x40020407
 800201c:	bffdfff8 	.word	0xbffdfff8
 8002020:	cccccccd 	.word	0xcccccccd
 8002024:	40020000 	.word	0x40020000
 8002028:	bffdfbf8 	.word	0xbffdfbf8
 800202c:	40020400 	.word	0x40020400

08002030 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
 800203c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800203e:	2300      	movs	r3, #0
 8002040:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002048:	2b01      	cmp	r3, #1
 800204a:	d101      	bne.n	8002050 <HAL_DMA_Start_IT+0x20>
 800204c:	2302      	movs	r3, #2
 800204e:	e066      	b.n	800211e <HAL_DMA_Start_IT+0xee>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b01      	cmp	r3, #1
 8002062:	d155      	bne.n	8002110 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2202      	movs	r2, #2
 8002068:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 0201 	bic.w	r2, r2, #1
 8002080:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	68b9      	ldr	r1, [r7, #8]
 8002088:	68f8      	ldr	r0, [r7, #12]
 800208a:	f000 f8fb 	bl	8002284 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	2b00      	cmp	r3, #0
 8002094:	d008      	beq.n	80020a8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f042 020e 	orr.w	r2, r2, #14
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	e00f      	b.n	80020c8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 0204 	bic.w	r2, r2, #4
 80020b6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f042 020a 	orr.w	r2, r2, #10
 80020c6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d007      	beq.n	80020e6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020e4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d007      	beq.n	80020fe <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020fc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f042 0201 	orr.w	r2, r2, #1
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	e005      	b.n	800211c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002118:	2302      	movs	r3, #2
 800211a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800211c:	7dfb      	ldrb	r3, [r7, #23]
}
 800211e:	4618      	mov	r0, r3
 8002120:	3718      	adds	r7, #24
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b084      	sub	sp, #16
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002142:	f003 031f 	and.w	r3, r3, #31
 8002146:	2204      	movs	r2, #4
 8002148:	409a      	lsls	r2, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	4013      	ands	r3, r2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d026      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x7a>
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	f003 0304 	and.w	r3, r3, #4
 8002158:	2b00      	cmp	r3, #0
 800215a:	d021      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0320 	and.w	r3, r3, #32
 8002166:	2b00      	cmp	r3, #0
 8002168:	d107      	bne.n	800217a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 0204 	bic.w	r2, r2, #4
 8002178:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217e:	f003 021f 	and.w	r2, r3, #31
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	2104      	movs	r1, #4
 8002188:	fa01 f202 	lsl.w	r2, r1, r2
 800218c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	2b00      	cmp	r3, #0
 8002194:	d071      	beq.n	800227a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800219e:	e06c      	b.n	800227a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a4:	f003 031f 	and.w	r3, r3, #31
 80021a8:	2202      	movs	r2, #2
 80021aa:	409a      	lsls	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4013      	ands	r3, r2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d02e      	beq.n	8002212 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d029      	beq.n	8002212 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0320 	and.w	r3, r3, #32
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d10b      	bne.n	80021e4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 020a 	bic.w	r2, r2, #10
 80021da:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e8:	f003 021f 	and.w	r2, r3, #31
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f0:	2102      	movs	r1, #2
 80021f2:	fa01 f202 	lsl.w	r2, r1, r2
 80021f6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002204:	2b00      	cmp	r3, #0
 8002206:	d038      	beq.n	800227a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002210:	e033      	b.n	800227a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002216:	f003 031f 	and.w	r3, r3, #31
 800221a:	2208      	movs	r2, #8
 800221c:	409a      	lsls	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	4013      	ands	r3, r2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d02a      	beq.n	800227c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	f003 0308 	and.w	r3, r3, #8
 800222c:	2b00      	cmp	r3, #0
 800222e:	d025      	beq.n	800227c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 020e 	bic.w	r2, r2, #14
 800223e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002244:	f003 021f 	and.w	r2, r3, #31
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	2101      	movs	r1, #1
 800224e:	fa01 f202 	lsl.w	r2, r1, r2
 8002252:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800226e:	2b00      	cmp	r3, #0
 8002270:	d004      	beq.n	800227c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800227a:	bf00      	nop
 800227c:	bf00      	nop
}
 800227e:	3710      	adds	r7, #16
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
 8002290:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800229a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d004      	beq.n	80022ae <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80022ac:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b2:	f003 021f 	and.w	r2, r3, #31
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	2101      	movs	r1, #1
 80022bc:	fa01 f202 	lsl.w	r2, r1, r2
 80022c0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	2b10      	cmp	r3, #16
 80022d0:	d108      	bne.n	80022e4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80022e2:	e007      	b.n	80022f4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68ba      	ldr	r2, [r7, #8]
 80022ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	60da      	str	r2, [r3, #12]
}
 80022f4:	bf00      	nop
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002300:	b480      	push	{r7}
 8002302:	b087      	sub	sp, #28
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	461a      	mov	r2, r3
 800230e:	4b16      	ldr	r3, [pc, #88]	; (8002368 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002310:	429a      	cmp	r2, r3
 8002312:	d802      	bhi.n	800231a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002314:	4b15      	ldr	r3, [pc, #84]	; (800236c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002316:	617b      	str	r3, [r7, #20]
 8002318:	e001      	b.n	800231e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800231a:	4b15      	ldr	r3, [pc, #84]	; (8002370 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800231c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	b2db      	uxtb	r3, r3
 8002328:	3b08      	subs	r3, #8
 800232a:	4a12      	ldr	r2, [pc, #72]	; (8002374 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800232c:	fba2 2303 	umull	r2, r3, r2, r3
 8002330:	091b      	lsrs	r3, r3, #4
 8002332:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002338:	089b      	lsrs	r3, r3, #2
 800233a:	009a      	lsls	r2, r3, #2
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	4413      	add	r3, r2
 8002340:	461a      	mov	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a0b      	ldr	r2, [pc, #44]	; (8002378 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800234a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f003 031f 	and.w	r3, r3, #31
 8002352:	2201      	movs	r2, #1
 8002354:	409a      	lsls	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	651a      	str	r2, [r3, #80]	; 0x50
}
 800235a:	bf00      	nop
 800235c:	371c      	adds	r7, #28
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	40020407 	.word	0x40020407
 800236c:	40020800 	.word	0x40020800
 8002370:	40020820 	.word	0x40020820
 8002374:	cccccccd 	.word	0xcccccccd
 8002378:	40020880 	.word	0x40020880

0800237c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	b2db      	uxtb	r3, r3
 800238a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002390:	4413      	add	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	461a      	mov	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a08      	ldr	r2, [pc, #32]	; (80023c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800239e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	f003 031f 	and.w	r3, r3, #31
 80023a8:	2201      	movs	r2, #1
 80023aa:	409a      	lsls	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80023b0:	bf00      	nop
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	1000823f 	.word	0x1000823f
 80023c0:	40020940 	.word	0x40020940

080023c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b087      	sub	sp, #28
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80023d2:	e15a      	b.n	800268a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	2101      	movs	r1, #1
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	fa01 f303 	lsl.w	r3, r1, r3
 80023e0:	4013      	ands	r3, r2
 80023e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f000 814c 	beq.w	8002684 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f003 0303 	and.w	r3, r3, #3
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d005      	beq.n	8002404 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002400:	2b02      	cmp	r3, #2
 8002402:	d130      	bne.n	8002466 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	2203      	movs	r2, #3
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	43db      	mvns	r3, r3
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	4013      	ands	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	68da      	ldr	r2, [r3, #12]
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	4313      	orrs	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800243a:	2201      	movs	r2, #1
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43db      	mvns	r3, r3
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	4013      	ands	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	091b      	lsrs	r3, r3, #4
 8002450:	f003 0201 	and.w	r2, r3, #1
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	4313      	orrs	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	2b03      	cmp	r3, #3
 8002470:	d017      	beq.n	80024a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	2203      	movs	r2, #3
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	43db      	mvns	r3, r3
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	4013      	ands	r3, r2
 8002488:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	689a      	ldr	r2, [r3, #8]
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	4313      	orrs	r3, r2
 800249a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d123      	bne.n	80024f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	08da      	lsrs	r2, r3, #3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	3208      	adds	r2, #8
 80024b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	220f      	movs	r2, #15
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	43db      	mvns	r3, r3
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4013      	ands	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	691a      	ldr	r2, [r3, #16]
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	08da      	lsrs	r2, r3, #3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3208      	adds	r2, #8
 80024f0:	6939      	ldr	r1, [r7, #16]
 80024f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	2203      	movs	r2, #3
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43db      	mvns	r3, r3
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	4013      	ands	r3, r2
 800250c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f003 0203 	and.w	r2, r3, #3
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	4313      	orrs	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 80a6 	beq.w	8002684 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002538:	4b5b      	ldr	r3, [pc, #364]	; (80026a8 <HAL_GPIO_Init+0x2e4>)
 800253a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800253c:	4a5a      	ldr	r2, [pc, #360]	; (80026a8 <HAL_GPIO_Init+0x2e4>)
 800253e:	f043 0301 	orr.w	r3, r3, #1
 8002542:	6613      	str	r3, [r2, #96]	; 0x60
 8002544:	4b58      	ldr	r3, [pc, #352]	; (80026a8 <HAL_GPIO_Init+0x2e4>)
 8002546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	60bb      	str	r3, [r7, #8]
 800254e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002550:	4a56      	ldr	r2, [pc, #344]	; (80026ac <HAL_GPIO_Init+0x2e8>)
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	089b      	lsrs	r3, r3, #2
 8002556:	3302      	adds	r3, #2
 8002558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800255c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	f003 0303 	and.w	r3, r3, #3
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	220f      	movs	r2, #15
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	4013      	ands	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800257a:	d01f      	beq.n	80025bc <HAL_GPIO_Init+0x1f8>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a4c      	ldr	r2, [pc, #304]	; (80026b0 <HAL_GPIO_Init+0x2ec>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d019      	beq.n	80025b8 <HAL_GPIO_Init+0x1f4>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a4b      	ldr	r2, [pc, #300]	; (80026b4 <HAL_GPIO_Init+0x2f0>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d013      	beq.n	80025b4 <HAL_GPIO_Init+0x1f0>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a4a      	ldr	r2, [pc, #296]	; (80026b8 <HAL_GPIO_Init+0x2f4>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d00d      	beq.n	80025b0 <HAL_GPIO_Init+0x1ec>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a49      	ldr	r2, [pc, #292]	; (80026bc <HAL_GPIO_Init+0x2f8>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d007      	beq.n	80025ac <HAL_GPIO_Init+0x1e8>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a48      	ldr	r2, [pc, #288]	; (80026c0 <HAL_GPIO_Init+0x2fc>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d101      	bne.n	80025a8 <HAL_GPIO_Init+0x1e4>
 80025a4:	2305      	movs	r3, #5
 80025a6:	e00a      	b.n	80025be <HAL_GPIO_Init+0x1fa>
 80025a8:	2306      	movs	r3, #6
 80025aa:	e008      	b.n	80025be <HAL_GPIO_Init+0x1fa>
 80025ac:	2304      	movs	r3, #4
 80025ae:	e006      	b.n	80025be <HAL_GPIO_Init+0x1fa>
 80025b0:	2303      	movs	r3, #3
 80025b2:	e004      	b.n	80025be <HAL_GPIO_Init+0x1fa>
 80025b4:	2302      	movs	r3, #2
 80025b6:	e002      	b.n	80025be <HAL_GPIO_Init+0x1fa>
 80025b8:	2301      	movs	r3, #1
 80025ba:	e000      	b.n	80025be <HAL_GPIO_Init+0x1fa>
 80025bc:	2300      	movs	r3, #0
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	f002 0203 	and.w	r2, r2, #3
 80025c4:	0092      	lsls	r2, r2, #2
 80025c6:	4093      	lsls	r3, r2
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025ce:	4937      	ldr	r1, [pc, #220]	; (80026ac <HAL_GPIO_Init+0x2e8>)
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	089b      	lsrs	r3, r3, #2
 80025d4:	3302      	adds	r3, #2
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025dc:	4b39      	ldr	r3, [pc, #228]	; (80026c4 <HAL_GPIO_Init+0x300>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	43db      	mvns	r3, r3
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	4013      	ands	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d003      	beq.n	8002600 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002600:	4a30      	ldr	r2, [pc, #192]	; (80026c4 <HAL_GPIO_Init+0x300>)
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002606:	4b2f      	ldr	r3, [pc, #188]	; (80026c4 <HAL_GPIO_Init+0x300>)
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	43db      	mvns	r3, r3
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	4013      	ands	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	4313      	orrs	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800262a:	4a26      	ldr	r2, [pc, #152]	; (80026c4 <HAL_GPIO_Init+0x300>)
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002630:	4b24      	ldr	r3, [pc, #144]	; (80026c4 <HAL_GPIO_Init+0x300>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	43db      	mvns	r3, r3
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	4013      	ands	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	4313      	orrs	r3, r2
 8002652:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002654:	4a1b      	ldr	r2, [pc, #108]	; (80026c4 <HAL_GPIO_Init+0x300>)
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800265a:	4b1a      	ldr	r3, [pc, #104]	; (80026c4 <HAL_GPIO_Init+0x300>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	43db      	mvns	r3, r3
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	4013      	ands	r3, r2
 8002668:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	4313      	orrs	r3, r2
 800267c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800267e:	4a11      	ldr	r2, [pc, #68]	; (80026c4 <HAL_GPIO_Init+0x300>)
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	3301      	adds	r3, #1
 8002688:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	fa22 f303 	lsr.w	r3, r2, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	f47f ae9d 	bne.w	80023d4 <HAL_GPIO_Init+0x10>
  }
}
 800269a:	bf00      	nop
 800269c:	bf00      	nop
 800269e:	371c      	adds	r7, #28
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	40021000 	.word	0x40021000
 80026ac:	40010000 	.word	0x40010000
 80026b0:	48000400 	.word	0x48000400
 80026b4:	48000800 	.word	0x48000800
 80026b8:	48000c00 	.word	0x48000c00
 80026bc:	48001000 	.word	0x48001000
 80026c0:	48001400 	.word	0x48001400
 80026c4:	40010400 	.word	0x40010400

080026c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	460b      	mov	r3, r1
 80026d2:	807b      	strh	r3, [r7, #2]
 80026d4:	4613      	mov	r3, r2
 80026d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026d8:	787b      	ldrb	r3, [r7, #1]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026de:	887a      	ldrh	r2, [r7, #2]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026e4:	e002      	b.n	80026ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026e6:	887a      	ldrh	r2, [r7, #2]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d141      	bne.n	800278a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002706:	4b4b      	ldr	r3, [pc, #300]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800270e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002712:	d131      	bne.n	8002778 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002714:	4b47      	ldr	r3, [pc, #284]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002716:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800271a:	4a46      	ldr	r2, [pc, #280]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800271c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002720:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002724:	4b43      	ldr	r3, [pc, #268]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800272c:	4a41      	ldr	r2, [pc, #260]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800272e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002732:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002734:	4b40      	ldr	r3, [pc, #256]	; (8002838 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2232      	movs	r2, #50	; 0x32
 800273a:	fb02 f303 	mul.w	r3, r2, r3
 800273e:	4a3f      	ldr	r2, [pc, #252]	; (800283c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002740:	fba2 2303 	umull	r2, r3, r2, r3
 8002744:	0c9b      	lsrs	r3, r3, #18
 8002746:	3301      	adds	r3, #1
 8002748:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800274a:	e002      	b.n	8002752 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	3b01      	subs	r3, #1
 8002750:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002752:	4b38      	ldr	r3, [pc, #224]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800275a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800275e:	d102      	bne.n	8002766 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1f2      	bne.n	800274c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002766:	4b33      	ldr	r3, [pc, #204]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800276e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002772:	d158      	bne.n	8002826 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e057      	b.n	8002828 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002778:	4b2e      	ldr	r3, [pc, #184]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800277a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800277e:	4a2d      	ldr	r2, [pc, #180]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002780:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002784:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002788:	e04d      	b.n	8002826 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002790:	d141      	bne.n	8002816 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002792:	4b28      	ldr	r3, [pc, #160]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800279a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800279e:	d131      	bne.n	8002804 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027a0:	4b24      	ldr	r3, [pc, #144]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027a6:	4a23      	ldr	r2, [pc, #140]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027b0:	4b20      	ldr	r3, [pc, #128]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027b8:	4a1e      	ldr	r2, [pc, #120]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80027c0:	4b1d      	ldr	r3, [pc, #116]	; (8002838 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2232      	movs	r2, #50	; 0x32
 80027c6:	fb02 f303 	mul.w	r3, r2, r3
 80027ca:	4a1c      	ldr	r2, [pc, #112]	; (800283c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80027cc:	fba2 2303 	umull	r2, r3, r2, r3
 80027d0:	0c9b      	lsrs	r3, r3, #18
 80027d2:	3301      	adds	r3, #1
 80027d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027d6:	e002      	b.n	80027de <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	3b01      	subs	r3, #1
 80027dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027de:	4b15      	ldr	r3, [pc, #84]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ea:	d102      	bne.n	80027f2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1f2      	bne.n	80027d8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027f2:	4b10      	ldr	r3, [pc, #64]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027fe:	d112      	bne.n	8002826 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e011      	b.n	8002828 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002804:	4b0b      	ldr	r3, [pc, #44]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002806:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800280a:	4a0a      	ldr	r2, [pc, #40]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800280c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002810:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002814:	e007      	b.n	8002826 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002816:	4b07      	ldr	r3, [pc, #28]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800281e:	4a05      	ldr	r2, [pc, #20]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002820:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002824:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	40007000 	.word	0x40007000
 8002838:	20000004 	.word	0x20000004
 800283c:	431bde83 	.word	0x431bde83

08002840 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b088      	sub	sp, #32
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e306      	b.n	8002e60 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d075      	beq.n	800294a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800285e:	4b97      	ldr	r3, [pc, #604]	; (8002abc <HAL_RCC_OscConfig+0x27c>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 030c 	and.w	r3, r3, #12
 8002866:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002868:	4b94      	ldr	r3, [pc, #592]	; (8002abc <HAL_RCC_OscConfig+0x27c>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	f003 0303 	and.w	r3, r3, #3
 8002870:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	2b0c      	cmp	r3, #12
 8002876:	d102      	bne.n	800287e <HAL_RCC_OscConfig+0x3e>
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	2b03      	cmp	r3, #3
 800287c:	d002      	beq.n	8002884 <HAL_RCC_OscConfig+0x44>
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	2b08      	cmp	r3, #8
 8002882:	d10b      	bne.n	800289c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002884:	4b8d      	ldr	r3, [pc, #564]	; (8002abc <HAL_RCC_OscConfig+0x27c>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d05b      	beq.n	8002948 <HAL_RCC_OscConfig+0x108>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d157      	bne.n	8002948 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e2e1      	b.n	8002e60 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028a4:	d106      	bne.n	80028b4 <HAL_RCC_OscConfig+0x74>
 80028a6:	4b85      	ldr	r3, [pc, #532]	; (8002abc <HAL_RCC_OscConfig+0x27c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a84      	ldr	r2, [pc, #528]	; (8002abc <HAL_RCC_OscConfig+0x27c>)
 80028ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	e01d      	b.n	80028f0 <HAL_RCC_OscConfig+0xb0>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028bc:	d10c      	bne.n	80028d8 <HAL_RCC_OscConfig+0x98>
 80028be:	4b7f      	ldr	r3, [pc, #508]	; (8002abc <HAL_RCC_OscConfig+0x27c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a7e      	ldr	r2, [pc, #504]	; (8002abc <HAL_RCC_OscConfig+0x27c>)
 80028c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028c8:	6013      	str	r3, [r2, #0]
 80028ca:	4b7c      	ldr	r3, [pc, #496]	; (8002abc <HAL_RCC_OscConfig+0x27c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a7b      	ldr	r2, [pc, #492]	; (8002abc <HAL_RCC_OscConfig+0x27c>)
 80028d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d4:	6013      	str	r3, [r2, #0]
 80028d6:	e00b      	b.n	80028f0 <HAL_RCC_OscConfig+0xb0>
 80028d8:	4b78      	ldr	r3, [pc, #480]	; (8002abc <HAL_RCC_OscConfig+0x27c>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a77      	ldr	r2, [pc, #476]	; (8002abc <HAL_RCC_OscConfig+0x27c>)
 80028de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028e2:	6013      	str	r3, [r2, #0]
 80028e4:	4b75      	ldr	r3, [pc, #468]	; (8002abc <HAL_RCC_OscConfig+0x27c>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a74      	ldr	r2, [pc, #464]	; (8002abc <HAL_RCC_OscConfig+0x27c>)
 80028ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d013      	beq.n	8002920 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f8:	f7fe ffd8 	bl	80018ac <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002900:	f7fe ffd4 	bl	80018ac <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b64      	cmp	r3, #100	; 0x64
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e2a6      	b.n	8002e60 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002912:	4b6a      	ldr	r3, [pc, #424]	; (8002abc <HAL_RCC_OscConfig+0x27c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0f0      	beq.n	8002900 <HAL_RCC_OscConfig+0xc0>
 800291e:	e014      	b.n	800294a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002920:	f7fe ffc4 	bl	80018ac <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002928:	f7fe ffc0 	bl	80018ac <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b64      	cmp	r3, #100	; 0x64
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e292      	b.n	8002e60 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800293a:	4b60      	ldr	r3, [pc, #384]	; (8002abc <HAL_RCC_OscConfig+0x27c>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1f0      	bne.n	8002928 <HAL_RCC_OscConfig+0xe8>
 8002946:	e000      	b.n	800294a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002948:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d075      	beq.n	8002a42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002956:	4b59      	ldr	r3, [pc, #356]	; (8002abc <HAL_RCC_OscConfig+0x27c>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f003 030c 	and.w	r3, r3, #12
 800295e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002960:	4b56      	ldr	r3, [pc, #344]	; (8002abc <HAL_RCC_OscConfig+0x27c>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f003 0303 	and.w	r3, r3, #3
 8002968:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	2b0c      	cmp	r3, #12
 800296e:	d102      	bne.n	8002976 <HAL_RCC_OscConfig+0x136>
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	2b02      	cmp	r3, #2
 8002974:	d002      	beq.n	800297c <HAL_RCC_OscConfig+0x13c>
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	2b04      	cmp	r3, #4
 800297a:	d11f      	bne.n	80029bc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800297c:	4b4f      	ldr	r3, [pc, #316]	; (8002abc <HAL_RCC_OscConfig+0x27c>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002984:	2b00      	cmp	r3, #0
 8002986:	d005      	beq.n	8002994 <HAL_RCC_OscConfig+0x154>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d101      	bne.n	8002994 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e265      	b.n	8002e60 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002994:	4b49      	ldr	r3, [pc, #292]	; (8002abc <HAL_RCC_OscConfig+0x27c>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	061b      	lsls	r3, r3, #24
 80029a2:	4946      	ldr	r1, [pc, #280]	; (8002abc <HAL_RCC_OscConfig+0x27c>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80029a8:	4b45      	ldr	r3, [pc, #276]	; (8002ac0 <HAL_RCC_OscConfig+0x280>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7fe ff31 	bl	8001814 <HAL_InitTick>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d043      	beq.n	8002a40 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e251      	b.n	8002e60 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d023      	beq.n	8002a0c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029c4:	4b3d      	ldr	r3, [pc, #244]	; (8002abc <HAL_RCC_OscConfig+0x27c>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a3c      	ldr	r2, [pc, #240]	; (8002abc <HAL_RCC_OscConfig+0x27c>)
 80029ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d0:	f7fe ff6c 	bl	80018ac <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029d8:	f7fe ff68 	bl	80018ac <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e23a      	b.n	8002e60 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029ea:	4b34      	ldr	r3, [pc, #208]	; (8002abc <HAL_RCC_OscConfig+0x27c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0f0      	beq.n	80029d8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f6:	4b31      	ldr	r3, [pc, #196]	; (8002abc <HAL_RCC_OscConfig+0x27c>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	061b      	lsls	r3, r3, #24
 8002a04:	492d      	ldr	r1, [pc, #180]	; (8002abc <HAL_RCC_OscConfig+0x27c>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	604b      	str	r3, [r1, #4]
 8002a0a:	e01a      	b.n	8002a42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a0c:	4b2b      	ldr	r3, [pc, #172]	; (8002abc <HAL_RCC_OscConfig+0x27c>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a2a      	ldr	r2, [pc, #168]	; (8002abc <HAL_RCC_OscConfig+0x27c>)
 8002a12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a18:	f7fe ff48 	bl	80018ac <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a20:	f7fe ff44 	bl	80018ac <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e216      	b.n	8002e60 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a32:	4b22      	ldr	r3, [pc, #136]	; (8002abc <HAL_RCC_OscConfig+0x27c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1f0      	bne.n	8002a20 <HAL_RCC_OscConfig+0x1e0>
 8002a3e:	e000      	b.n	8002a42 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a40:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0308 	and.w	r3, r3, #8
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d041      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d01c      	beq.n	8002a90 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a56:	4b19      	ldr	r3, [pc, #100]	; (8002abc <HAL_RCC_OscConfig+0x27c>)
 8002a58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a5c:	4a17      	ldr	r2, [pc, #92]	; (8002abc <HAL_RCC_OscConfig+0x27c>)
 8002a5e:	f043 0301 	orr.w	r3, r3, #1
 8002a62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a66:	f7fe ff21 	bl	80018ac <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a6e:	f7fe ff1d 	bl	80018ac <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e1ef      	b.n	8002e60 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a80:	4b0e      	ldr	r3, [pc, #56]	; (8002abc <HAL_RCC_OscConfig+0x27c>)
 8002a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d0ef      	beq.n	8002a6e <HAL_RCC_OscConfig+0x22e>
 8002a8e:	e020      	b.n	8002ad2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a90:	4b0a      	ldr	r3, [pc, #40]	; (8002abc <HAL_RCC_OscConfig+0x27c>)
 8002a92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a96:	4a09      	ldr	r2, [pc, #36]	; (8002abc <HAL_RCC_OscConfig+0x27c>)
 8002a98:	f023 0301 	bic.w	r3, r3, #1
 8002a9c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa0:	f7fe ff04 	bl	80018ac <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002aa6:	e00d      	b.n	8002ac4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aa8:	f7fe ff00 	bl	80018ac <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d906      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e1d2      	b.n	8002e60 <HAL_RCC_OscConfig+0x620>
 8002aba:	bf00      	nop
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ac4:	4b8c      	ldr	r3, [pc, #560]	; (8002cf8 <HAL_RCC_OscConfig+0x4b8>)
 8002ac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1ea      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0304 	and.w	r3, r3, #4
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f000 80a6 	beq.w	8002c2c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ae4:	4b84      	ldr	r3, [pc, #528]	; (8002cf8 <HAL_RCC_OscConfig+0x4b8>)
 8002ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <HAL_RCC_OscConfig+0x2b4>
 8002af0:	2301      	movs	r3, #1
 8002af2:	e000      	b.n	8002af6 <HAL_RCC_OscConfig+0x2b6>
 8002af4:	2300      	movs	r3, #0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00d      	beq.n	8002b16 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002afa:	4b7f      	ldr	r3, [pc, #508]	; (8002cf8 <HAL_RCC_OscConfig+0x4b8>)
 8002afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afe:	4a7e      	ldr	r2, [pc, #504]	; (8002cf8 <HAL_RCC_OscConfig+0x4b8>)
 8002b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b04:	6593      	str	r3, [r2, #88]	; 0x58
 8002b06:	4b7c      	ldr	r3, [pc, #496]	; (8002cf8 <HAL_RCC_OscConfig+0x4b8>)
 8002b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002b12:	2301      	movs	r3, #1
 8002b14:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b16:	4b79      	ldr	r3, [pc, #484]	; (8002cfc <HAL_RCC_OscConfig+0x4bc>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d118      	bne.n	8002b54 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b22:	4b76      	ldr	r3, [pc, #472]	; (8002cfc <HAL_RCC_OscConfig+0x4bc>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a75      	ldr	r2, [pc, #468]	; (8002cfc <HAL_RCC_OscConfig+0x4bc>)
 8002b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b2e:	f7fe febd 	bl	80018ac <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b36:	f7fe feb9 	bl	80018ac <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e18b      	b.n	8002e60 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b48:	4b6c      	ldr	r3, [pc, #432]	; (8002cfc <HAL_RCC_OscConfig+0x4bc>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d0f0      	beq.n	8002b36 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d108      	bne.n	8002b6e <HAL_RCC_OscConfig+0x32e>
 8002b5c:	4b66      	ldr	r3, [pc, #408]	; (8002cf8 <HAL_RCC_OscConfig+0x4b8>)
 8002b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b62:	4a65      	ldr	r2, [pc, #404]	; (8002cf8 <HAL_RCC_OscConfig+0x4b8>)
 8002b64:	f043 0301 	orr.w	r3, r3, #1
 8002b68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b6c:	e024      	b.n	8002bb8 <HAL_RCC_OscConfig+0x378>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	2b05      	cmp	r3, #5
 8002b74:	d110      	bne.n	8002b98 <HAL_RCC_OscConfig+0x358>
 8002b76:	4b60      	ldr	r3, [pc, #384]	; (8002cf8 <HAL_RCC_OscConfig+0x4b8>)
 8002b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b7c:	4a5e      	ldr	r2, [pc, #376]	; (8002cf8 <HAL_RCC_OscConfig+0x4b8>)
 8002b7e:	f043 0304 	orr.w	r3, r3, #4
 8002b82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b86:	4b5c      	ldr	r3, [pc, #368]	; (8002cf8 <HAL_RCC_OscConfig+0x4b8>)
 8002b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8c:	4a5a      	ldr	r2, [pc, #360]	; (8002cf8 <HAL_RCC_OscConfig+0x4b8>)
 8002b8e:	f043 0301 	orr.w	r3, r3, #1
 8002b92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b96:	e00f      	b.n	8002bb8 <HAL_RCC_OscConfig+0x378>
 8002b98:	4b57      	ldr	r3, [pc, #348]	; (8002cf8 <HAL_RCC_OscConfig+0x4b8>)
 8002b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9e:	4a56      	ldr	r2, [pc, #344]	; (8002cf8 <HAL_RCC_OscConfig+0x4b8>)
 8002ba0:	f023 0301 	bic.w	r3, r3, #1
 8002ba4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ba8:	4b53      	ldr	r3, [pc, #332]	; (8002cf8 <HAL_RCC_OscConfig+0x4b8>)
 8002baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bae:	4a52      	ldr	r2, [pc, #328]	; (8002cf8 <HAL_RCC_OscConfig+0x4b8>)
 8002bb0:	f023 0304 	bic.w	r3, r3, #4
 8002bb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d016      	beq.n	8002bee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc0:	f7fe fe74 	bl	80018ac <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bc6:	e00a      	b.n	8002bde <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bc8:	f7fe fe70 	bl	80018ac <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e140      	b.n	8002e60 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bde:	4b46      	ldr	r3, [pc, #280]	; (8002cf8 <HAL_RCC_OscConfig+0x4b8>)
 8002be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0ed      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x388>
 8002bec:	e015      	b.n	8002c1a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bee:	f7fe fe5d 	bl	80018ac <HAL_GetTick>
 8002bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bf4:	e00a      	b.n	8002c0c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bf6:	f7fe fe59 	bl	80018ac <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e129      	b.n	8002e60 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c0c:	4b3a      	ldr	r3, [pc, #232]	; (8002cf8 <HAL_RCC_OscConfig+0x4b8>)
 8002c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1ed      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c1a:	7ffb      	ldrb	r3, [r7, #31]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d105      	bne.n	8002c2c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c20:	4b35      	ldr	r3, [pc, #212]	; (8002cf8 <HAL_RCC_OscConfig+0x4b8>)
 8002c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c24:	4a34      	ldr	r2, [pc, #208]	; (8002cf8 <HAL_RCC_OscConfig+0x4b8>)
 8002c26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c2a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0320 	and.w	r3, r3, #32
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d03c      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d01c      	beq.n	8002c7a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c40:	4b2d      	ldr	r3, [pc, #180]	; (8002cf8 <HAL_RCC_OscConfig+0x4b8>)
 8002c42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c46:	4a2c      	ldr	r2, [pc, #176]	; (8002cf8 <HAL_RCC_OscConfig+0x4b8>)
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c50:	f7fe fe2c 	bl	80018ac <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c58:	f7fe fe28 	bl	80018ac <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e0fa      	b.n	8002e60 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c6a:	4b23      	ldr	r3, [pc, #140]	; (8002cf8 <HAL_RCC_OscConfig+0x4b8>)
 8002c6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d0ef      	beq.n	8002c58 <HAL_RCC_OscConfig+0x418>
 8002c78:	e01b      	b.n	8002cb2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c7a:	4b1f      	ldr	r3, [pc, #124]	; (8002cf8 <HAL_RCC_OscConfig+0x4b8>)
 8002c7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c80:	4a1d      	ldr	r2, [pc, #116]	; (8002cf8 <HAL_RCC_OscConfig+0x4b8>)
 8002c82:	f023 0301 	bic.w	r3, r3, #1
 8002c86:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8a:	f7fe fe0f 	bl	80018ac <HAL_GetTick>
 8002c8e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c90:	e008      	b.n	8002ca4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c92:	f7fe fe0b 	bl	80018ac <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e0dd      	b.n	8002e60 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ca4:	4b14      	ldr	r3, [pc, #80]	; (8002cf8 <HAL_RCC_OscConfig+0x4b8>)
 8002ca6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1ef      	bne.n	8002c92 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f000 80d1 	beq.w	8002e5e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cbc:	4b0e      	ldr	r3, [pc, #56]	; (8002cf8 <HAL_RCC_OscConfig+0x4b8>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f003 030c 	and.w	r3, r3, #12
 8002cc4:	2b0c      	cmp	r3, #12
 8002cc6:	f000 808b 	beq.w	8002de0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d15e      	bne.n	8002d90 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cd2:	4b09      	ldr	r3, [pc, #36]	; (8002cf8 <HAL_RCC_OscConfig+0x4b8>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a08      	ldr	r2, [pc, #32]	; (8002cf8 <HAL_RCC_OscConfig+0x4b8>)
 8002cd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cde:	f7fe fde5 	bl	80018ac <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ce4:	e00c      	b.n	8002d00 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ce6:	f7fe fde1 	bl	80018ac <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d905      	bls.n	8002d00 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e0b3      	b.n	8002e60 <HAL_RCC_OscConfig+0x620>
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d00:	4b59      	ldr	r3, [pc, #356]	; (8002e68 <HAL_RCC_OscConfig+0x628>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1ec      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d0c:	4b56      	ldr	r3, [pc, #344]	; (8002e68 <HAL_RCC_OscConfig+0x628>)
 8002d0e:	68da      	ldr	r2, [r3, #12]
 8002d10:	4b56      	ldr	r3, [pc, #344]	; (8002e6c <HAL_RCC_OscConfig+0x62c>)
 8002d12:	4013      	ands	r3, r2
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6a11      	ldr	r1, [r2, #32]
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d1c:	3a01      	subs	r2, #1
 8002d1e:	0112      	lsls	r2, r2, #4
 8002d20:	4311      	orrs	r1, r2
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002d26:	0212      	lsls	r2, r2, #8
 8002d28:	4311      	orrs	r1, r2
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002d2e:	0852      	lsrs	r2, r2, #1
 8002d30:	3a01      	subs	r2, #1
 8002d32:	0552      	lsls	r2, r2, #21
 8002d34:	4311      	orrs	r1, r2
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d3a:	0852      	lsrs	r2, r2, #1
 8002d3c:	3a01      	subs	r2, #1
 8002d3e:	0652      	lsls	r2, r2, #25
 8002d40:	4311      	orrs	r1, r2
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d46:	06d2      	lsls	r2, r2, #27
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	4947      	ldr	r1, [pc, #284]	; (8002e68 <HAL_RCC_OscConfig+0x628>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d50:	4b45      	ldr	r3, [pc, #276]	; (8002e68 <HAL_RCC_OscConfig+0x628>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a44      	ldr	r2, [pc, #272]	; (8002e68 <HAL_RCC_OscConfig+0x628>)
 8002d56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d5a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d5c:	4b42      	ldr	r3, [pc, #264]	; (8002e68 <HAL_RCC_OscConfig+0x628>)
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	4a41      	ldr	r2, [pc, #260]	; (8002e68 <HAL_RCC_OscConfig+0x628>)
 8002d62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d66:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d68:	f7fe fda0 	bl	80018ac <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d70:	f7fe fd9c 	bl	80018ac <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e06e      	b.n	8002e60 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d82:	4b39      	ldr	r3, [pc, #228]	; (8002e68 <HAL_RCC_OscConfig+0x628>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0f0      	beq.n	8002d70 <HAL_RCC_OscConfig+0x530>
 8002d8e:	e066      	b.n	8002e5e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d90:	4b35      	ldr	r3, [pc, #212]	; (8002e68 <HAL_RCC_OscConfig+0x628>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a34      	ldr	r2, [pc, #208]	; (8002e68 <HAL_RCC_OscConfig+0x628>)
 8002d96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d9a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002d9c:	4b32      	ldr	r3, [pc, #200]	; (8002e68 <HAL_RCC_OscConfig+0x628>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	4a31      	ldr	r2, [pc, #196]	; (8002e68 <HAL_RCC_OscConfig+0x628>)
 8002da2:	f023 0303 	bic.w	r3, r3, #3
 8002da6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002da8:	4b2f      	ldr	r3, [pc, #188]	; (8002e68 <HAL_RCC_OscConfig+0x628>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	4a2e      	ldr	r2, [pc, #184]	; (8002e68 <HAL_RCC_OscConfig+0x628>)
 8002dae:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002db2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002db6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db8:	f7fe fd78 	bl	80018ac <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc0:	f7fe fd74 	bl	80018ac <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e046      	b.n	8002e60 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dd2:	4b25      	ldr	r3, [pc, #148]	; (8002e68 <HAL_RCC_OscConfig+0x628>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1f0      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x580>
 8002dde:	e03e      	b.n	8002e5e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	69db      	ldr	r3, [r3, #28]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d101      	bne.n	8002dec <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e039      	b.n	8002e60 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002dec:	4b1e      	ldr	r3, [pc, #120]	; (8002e68 <HAL_RCC_OscConfig+0x628>)
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f003 0203 	and.w	r2, r3, #3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d12c      	bne.n	8002e5a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d123      	bne.n	8002e5a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d11b      	bne.n	8002e5a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d113      	bne.n	8002e5a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3c:	085b      	lsrs	r3, r3, #1
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d109      	bne.n	8002e5a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e50:	085b      	lsrs	r3, r3, #1
 8002e52:	3b01      	subs	r3, #1
 8002e54:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d001      	beq.n	8002e5e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e000      	b.n	8002e60 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3720      	adds	r7, #32
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	019f800c 	.word	0x019f800c

08002e70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e11e      	b.n	80030c6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e88:	4b91      	ldr	r3, [pc, #580]	; (80030d0 <HAL_RCC_ClockConfig+0x260>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 030f 	and.w	r3, r3, #15
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d910      	bls.n	8002eb8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e96:	4b8e      	ldr	r3, [pc, #568]	; (80030d0 <HAL_RCC_ClockConfig+0x260>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f023 020f 	bic.w	r2, r3, #15
 8002e9e:	498c      	ldr	r1, [pc, #560]	; (80030d0 <HAL_RCC_ClockConfig+0x260>)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ea6:	4b8a      	ldr	r3, [pc, #552]	; (80030d0 <HAL_RCC_ClockConfig+0x260>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 030f 	and.w	r3, r3, #15
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d001      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e106      	b.n	80030c6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d073      	beq.n	8002fac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	2b03      	cmp	r3, #3
 8002eca:	d129      	bne.n	8002f20 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ecc:	4b81      	ldr	r3, [pc, #516]	; (80030d4 <HAL_RCC_ClockConfig+0x264>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e0f4      	b.n	80030c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002edc:	f000 f99e 	bl	800321c <RCC_GetSysClockFreqFromPLLSource>
 8002ee0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	4a7c      	ldr	r2, [pc, #496]	; (80030d8 <HAL_RCC_ClockConfig+0x268>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d93f      	bls.n	8002f6a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002eea:	4b7a      	ldr	r3, [pc, #488]	; (80030d4 <HAL_RCC_ClockConfig+0x264>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d009      	beq.n	8002f0a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d033      	beq.n	8002f6a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d12f      	bne.n	8002f6a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002f0a:	4b72      	ldr	r3, [pc, #456]	; (80030d4 <HAL_RCC_ClockConfig+0x264>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f12:	4a70      	ldr	r2, [pc, #448]	; (80030d4 <HAL_RCC_ClockConfig+0x264>)
 8002f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f18:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002f1a:	2380      	movs	r3, #128	; 0x80
 8002f1c:	617b      	str	r3, [r7, #20]
 8002f1e:	e024      	b.n	8002f6a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d107      	bne.n	8002f38 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f28:	4b6a      	ldr	r3, [pc, #424]	; (80030d4 <HAL_RCC_ClockConfig+0x264>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d109      	bne.n	8002f48 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0c6      	b.n	80030c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f38:	4b66      	ldr	r3, [pc, #408]	; (80030d4 <HAL_RCC_ClockConfig+0x264>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e0be      	b.n	80030c6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002f48:	f000 f8ce 	bl	80030e8 <HAL_RCC_GetSysClockFreq>
 8002f4c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	4a61      	ldr	r2, [pc, #388]	; (80030d8 <HAL_RCC_ClockConfig+0x268>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d909      	bls.n	8002f6a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002f56:	4b5f      	ldr	r3, [pc, #380]	; (80030d4 <HAL_RCC_ClockConfig+0x264>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f5e:	4a5d      	ldr	r2, [pc, #372]	; (80030d4 <HAL_RCC_ClockConfig+0x264>)
 8002f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f64:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002f66:	2380      	movs	r3, #128	; 0x80
 8002f68:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f6a:	4b5a      	ldr	r3, [pc, #360]	; (80030d4 <HAL_RCC_ClockConfig+0x264>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f023 0203 	bic.w	r2, r3, #3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	4957      	ldr	r1, [pc, #348]	; (80030d4 <HAL_RCC_ClockConfig+0x264>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f7c:	f7fe fc96 	bl	80018ac <HAL_GetTick>
 8002f80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f82:	e00a      	b.n	8002f9a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f84:	f7fe fc92 	bl	80018ac <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e095      	b.n	80030c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f9a:	4b4e      	ldr	r3, [pc, #312]	; (80030d4 <HAL_RCC_ClockConfig+0x264>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 020c 	and.w	r2, r3, #12
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d1eb      	bne.n	8002f84 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d023      	beq.n	8003000 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d005      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fc4:	4b43      	ldr	r3, [pc, #268]	; (80030d4 <HAL_RCC_ClockConfig+0x264>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	4a42      	ldr	r2, [pc, #264]	; (80030d4 <HAL_RCC_ClockConfig+0x264>)
 8002fca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fce:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0308 	and.w	r3, r3, #8
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d007      	beq.n	8002fec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002fdc:	4b3d      	ldr	r3, [pc, #244]	; (80030d4 <HAL_RCC_ClockConfig+0x264>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002fe4:	4a3b      	ldr	r2, [pc, #236]	; (80030d4 <HAL_RCC_ClockConfig+0x264>)
 8002fe6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fec:	4b39      	ldr	r3, [pc, #228]	; (80030d4 <HAL_RCC_ClockConfig+0x264>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	4936      	ldr	r1, [pc, #216]	; (80030d4 <HAL_RCC_ClockConfig+0x264>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	608b      	str	r3, [r1, #8]
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	2b80      	cmp	r3, #128	; 0x80
 8003004:	d105      	bne.n	8003012 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003006:	4b33      	ldr	r3, [pc, #204]	; (80030d4 <HAL_RCC_ClockConfig+0x264>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	4a32      	ldr	r2, [pc, #200]	; (80030d4 <HAL_RCC_ClockConfig+0x264>)
 800300c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003010:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003012:	4b2f      	ldr	r3, [pc, #188]	; (80030d0 <HAL_RCC_ClockConfig+0x260>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 030f 	and.w	r3, r3, #15
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	429a      	cmp	r2, r3
 800301e:	d21d      	bcs.n	800305c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003020:	4b2b      	ldr	r3, [pc, #172]	; (80030d0 <HAL_RCC_ClockConfig+0x260>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f023 020f 	bic.w	r2, r3, #15
 8003028:	4929      	ldr	r1, [pc, #164]	; (80030d0 <HAL_RCC_ClockConfig+0x260>)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	4313      	orrs	r3, r2
 800302e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003030:	f7fe fc3c 	bl	80018ac <HAL_GetTick>
 8003034:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003036:	e00a      	b.n	800304e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003038:	f7fe fc38 	bl	80018ac <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	f241 3288 	movw	r2, #5000	; 0x1388
 8003046:	4293      	cmp	r3, r2
 8003048:	d901      	bls.n	800304e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e03b      	b.n	80030c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800304e:	4b20      	ldr	r3, [pc, #128]	; (80030d0 <HAL_RCC_ClockConfig+0x260>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 030f 	and.w	r3, r3, #15
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	429a      	cmp	r2, r3
 800305a:	d1ed      	bne.n	8003038 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0304 	and.w	r3, r3, #4
 8003064:	2b00      	cmp	r3, #0
 8003066:	d008      	beq.n	800307a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003068:	4b1a      	ldr	r3, [pc, #104]	; (80030d4 <HAL_RCC_ClockConfig+0x264>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	4917      	ldr	r1, [pc, #92]	; (80030d4 <HAL_RCC_ClockConfig+0x264>)
 8003076:	4313      	orrs	r3, r2
 8003078:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0308 	and.w	r3, r3, #8
 8003082:	2b00      	cmp	r3, #0
 8003084:	d009      	beq.n	800309a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003086:	4b13      	ldr	r3, [pc, #76]	; (80030d4 <HAL_RCC_ClockConfig+0x264>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	490f      	ldr	r1, [pc, #60]	; (80030d4 <HAL_RCC_ClockConfig+0x264>)
 8003096:	4313      	orrs	r3, r2
 8003098:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800309a:	f000 f825 	bl	80030e8 <HAL_RCC_GetSysClockFreq>
 800309e:	4602      	mov	r2, r0
 80030a0:	4b0c      	ldr	r3, [pc, #48]	; (80030d4 <HAL_RCC_ClockConfig+0x264>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	091b      	lsrs	r3, r3, #4
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	490c      	ldr	r1, [pc, #48]	; (80030dc <HAL_RCC_ClockConfig+0x26c>)
 80030ac:	5ccb      	ldrb	r3, [r1, r3]
 80030ae:	f003 031f 	and.w	r3, r3, #31
 80030b2:	fa22 f303 	lsr.w	r3, r2, r3
 80030b6:	4a0a      	ldr	r2, [pc, #40]	; (80030e0 <HAL_RCC_ClockConfig+0x270>)
 80030b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80030ba:	4b0a      	ldr	r3, [pc, #40]	; (80030e4 <HAL_RCC_ClockConfig+0x274>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f7fe fba8 	bl	8001814 <HAL_InitTick>
 80030c4:	4603      	mov	r3, r0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40022000 	.word	0x40022000
 80030d4:	40021000 	.word	0x40021000
 80030d8:	04c4b400 	.word	0x04c4b400
 80030dc:	08005e68 	.word	0x08005e68
 80030e0:	20000004 	.word	0x20000004
 80030e4:	20000008 	.word	0x20000008

080030e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b087      	sub	sp, #28
 80030ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80030ee:	4b2c      	ldr	r3, [pc, #176]	; (80031a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f003 030c 	and.w	r3, r3, #12
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	d102      	bne.n	8003100 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030fa:	4b2a      	ldr	r3, [pc, #168]	; (80031a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80030fc:	613b      	str	r3, [r7, #16]
 80030fe:	e047      	b.n	8003190 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003100:	4b27      	ldr	r3, [pc, #156]	; (80031a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f003 030c 	and.w	r3, r3, #12
 8003108:	2b08      	cmp	r3, #8
 800310a:	d102      	bne.n	8003112 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800310c:	4b26      	ldr	r3, [pc, #152]	; (80031a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800310e:	613b      	str	r3, [r7, #16]
 8003110:	e03e      	b.n	8003190 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003112:	4b23      	ldr	r3, [pc, #140]	; (80031a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f003 030c 	and.w	r3, r3, #12
 800311a:	2b0c      	cmp	r3, #12
 800311c:	d136      	bne.n	800318c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800311e:	4b20      	ldr	r3, [pc, #128]	; (80031a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003128:	4b1d      	ldr	r3, [pc, #116]	; (80031a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	091b      	lsrs	r3, r3, #4
 800312e:	f003 030f 	and.w	r3, r3, #15
 8003132:	3301      	adds	r3, #1
 8003134:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2b03      	cmp	r3, #3
 800313a:	d10c      	bne.n	8003156 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800313c:	4a1a      	ldr	r2, [pc, #104]	; (80031a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	fbb2 f3f3 	udiv	r3, r2, r3
 8003144:	4a16      	ldr	r2, [pc, #88]	; (80031a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003146:	68d2      	ldr	r2, [r2, #12]
 8003148:	0a12      	lsrs	r2, r2, #8
 800314a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800314e:	fb02 f303 	mul.w	r3, r2, r3
 8003152:	617b      	str	r3, [r7, #20]
      break;
 8003154:	e00c      	b.n	8003170 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003156:	4a13      	ldr	r2, [pc, #76]	; (80031a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	fbb2 f3f3 	udiv	r3, r2, r3
 800315e:	4a10      	ldr	r2, [pc, #64]	; (80031a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003160:	68d2      	ldr	r2, [r2, #12]
 8003162:	0a12      	lsrs	r2, r2, #8
 8003164:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003168:	fb02 f303 	mul.w	r3, r2, r3
 800316c:	617b      	str	r3, [r7, #20]
      break;
 800316e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003170:	4b0b      	ldr	r3, [pc, #44]	; (80031a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	0e5b      	lsrs	r3, r3, #25
 8003176:	f003 0303 	and.w	r3, r3, #3
 800317a:	3301      	adds	r3, #1
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	fbb2 f3f3 	udiv	r3, r2, r3
 8003188:	613b      	str	r3, [r7, #16]
 800318a:	e001      	b.n	8003190 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800318c:	2300      	movs	r3, #0
 800318e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003190:	693b      	ldr	r3, [r7, #16]
}
 8003192:	4618      	mov	r0, r3
 8003194:	371c      	adds	r7, #28
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	40021000 	.word	0x40021000
 80031a4:	00f42400 	.word	0x00f42400
 80031a8:	007a1200 	.word	0x007a1200

080031ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031b0:	4b03      	ldr	r3, [pc, #12]	; (80031c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80031b2:	681b      	ldr	r3, [r3, #0]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	20000004 	.word	0x20000004

080031c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80031c8:	f7ff fff0 	bl	80031ac <HAL_RCC_GetHCLKFreq>
 80031cc:	4602      	mov	r2, r0
 80031ce:	4b06      	ldr	r3, [pc, #24]	; (80031e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	0a1b      	lsrs	r3, r3, #8
 80031d4:	f003 0307 	and.w	r3, r3, #7
 80031d8:	4904      	ldr	r1, [pc, #16]	; (80031ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80031da:	5ccb      	ldrb	r3, [r1, r3]
 80031dc:	f003 031f 	and.w	r3, r3, #31
 80031e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40021000 	.word	0x40021000
 80031ec:	08005e78 	.word	0x08005e78

080031f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80031f4:	f7ff ffda 	bl	80031ac <HAL_RCC_GetHCLKFreq>
 80031f8:	4602      	mov	r2, r0
 80031fa:	4b06      	ldr	r3, [pc, #24]	; (8003214 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	0adb      	lsrs	r3, r3, #11
 8003200:	f003 0307 	and.w	r3, r3, #7
 8003204:	4904      	ldr	r1, [pc, #16]	; (8003218 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003206:	5ccb      	ldrb	r3, [r1, r3]
 8003208:	f003 031f 	and.w	r3, r3, #31
 800320c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003210:	4618      	mov	r0, r3
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40021000 	.word	0x40021000
 8003218:	08005e78 	.word	0x08005e78

0800321c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800321c:	b480      	push	{r7}
 800321e:	b087      	sub	sp, #28
 8003220:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003222:	4b1e      	ldr	r3, [pc, #120]	; (800329c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	f003 0303 	and.w	r3, r3, #3
 800322a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800322c:	4b1b      	ldr	r3, [pc, #108]	; (800329c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	091b      	lsrs	r3, r3, #4
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	3301      	adds	r3, #1
 8003238:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	2b03      	cmp	r3, #3
 800323e:	d10c      	bne.n	800325a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003240:	4a17      	ldr	r2, [pc, #92]	; (80032a0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	fbb2 f3f3 	udiv	r3, r2, r3
 8003248:	4a14      	ldr	r2, [pc, #80]	; (800329c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800324a:	68d2      	ldr	r2, [r2, #12]
 800324c:	0a12      	lsrs	r2, r2, #8
 800324e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003252:	fb02 f303 	mul.w	r3, r2, r3
 8003256:	617b      	str	r3, [r7, #20]
    break;
 8003258:	e00c      	b.n	8003274 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800325a:	4a12      	ldr	r2, [pc, #72]	; (80032a4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003262:	4a0e      	ldr	r2, [pc, #56]	; (800329c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003264:	68d2      	ldr	r2, [r2, #12]
 8003266:	0a12      	lsrs	r2, r2, #8
 8003268:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800326c:	fb02 f303 	mul.w	r3, r2, r3
 8003270:	617b      	str	r3, [r7, #20]
    break;
 8003272:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003274:	4b09      	ldr	r3, [pc, #36]	; (800329c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	0e5b      	lsrs	r3, r3, #25
 800327a:	f003 0303 	and.w	r3, r3, #3
 800327e:	3301      	adds	r3, #1
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003284:	697a      	ldr	r2, [r7, #20]
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	fbb2 f3f3 	udiv	r3, r2, r3
 800328c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800328e:	687b      	ldr	r3, [r7, #4]
}
 8003290:	4618      	mov	r0, r3
 8003292:	371c      	adds	r7, #28
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	40021000 	.word	0x40021000
 80032a0:	007a1200 	.word	0x007a1200
 80032a4:	00f42400 	.word	0x00f42400

080032a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032b0:	2300      	movs	r3, #0
 80032b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032b4:	2300      	movs	r3, #0
 80032b6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 8098 	beq.w	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032c6:	2300      	movs	r3, #0
 80032c8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ca:	4b43      	ldr	r3, [pc, #268]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10d      	bne.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032d6:	4b40      	ldr	r3, [pc, #256]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032da:	4a3f      	ldr	r2, [pc, #252]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032e0:	6593      	str	r3, [r2, #88]	; 0x58
 80032e2:	4b3d      	ldr	r3, [pc, #244]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ea:	60bb      	str	r3, [r7, #8]
 80032ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ee:	2301      	movs	r3, #1
 80032f0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032f2:	4b3a      	ldr	r3, [pc, #232]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a39      	ldr	r2, [pc, #228]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80032f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032fe:	f7fe fad5 	bl	80018ac <HAL_GetTick>
 8003302:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003304:	e009      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003306:	f7fe fad1 	bl	80018ac <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d902      	bls.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	74fb      	strb	r3, [r7, #19]
        break;
 8003318:	e005      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800331a:	4b30      	ldr	r3, [pc, #192]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003322:	2b00      	cmp	r3, #0
 8003324:	d0ef      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003326:	7cfb      	ldrb	r3, [r7, #19]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d159      	bne.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800332c:	4b2a      	ldr	r3, [pc, #168]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800332e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003336:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d01e      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	429a      	cmp	r2, r3
 8003346:	d019      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003348:	4b23      	ldr	r3, [pc, #140]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800334a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800334e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003352:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003354:	4b20      	ldr	r3, [pc, #128]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800335a:	4a1f      	ldr	r2, [pc, #124]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800335c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003360:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003364:	4b1c      	ldr	r3, [pc, #112]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800336a:	4a1b      	ldr	r2, [pc, #108]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800336c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003370:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003374:	4a18      	ldr	r2, [pc, #96]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b00      	cmp	r3, #0
 8003384:	d016      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003386:	f7fe fa91 	bl	80018ac <HAL_GetTick>
 800338a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800338c:	e00b      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800338e:	f7fe fa8d 	bl	80018ac <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	f241 3288 	movw	r2, #5000	; 0x1388
 800339c:	4293      	cmp	r3, r2
 800339e:	d902      	bls.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	74fb      	strb	r3, [r7, #19]
            break;
 80033a4:	e006      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033a6:	4b0c      	ldr	r3, [pc, #48]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d0ec      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80033b4:	7cfb      	ldrb	r3, [r7, #19]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10b      	bne.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033ba:	4b07      	ldr	r3, [pc, #28]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c8:	4903      	ldr	r1, [pc, #12]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80033d0:	e008      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033d2:	7cfb      	ldrb	r3, [r7, #19]
 80033d4:	74bb      	strb	r3, [r7, #18]
 80033d6:	e005      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80033d8:	40021000 	.word	0x40021000
 80033dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033e0:	7cfb      	ldrb	r3, [r7, #19]
 80033e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033e4:	7c7b      	ldrb	r3, [r7, #17]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d105      	bne.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ea:	4ba6      	ldr	r3, [pc, #664]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ee:	4aa5      	ldr	r2, [pc, #660]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00a      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003402:	4ba0      	ldr	r3, [pc, #640]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003408:	f023 0203 	bic.w	r2, r3, #3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	499c      	ldr	r1, [pc, #624]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003412:	4313      	orrs	r3, r2
 8003414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00a      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003424:	4b97      	ldr	r3, [pc, #604]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342a:	f023 020c 	bic.w	r2, r3, #12
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	4994      	ldr	r1, [pc, #592]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003434:	4313      	orrs	r3, r2
 8003436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0304 	and.w	r3, r3, #4
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00a      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003446:	4b8f      	ldr	r3, [pc, #572]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	498b      	ldr	r1, [pc, #556]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003456:	4313      	orrs	r3, r2
 8003458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0308 	and.w	r3, r3, #8
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00a      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003468:	4b86      	ldr	r3, [pc, #536]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800346a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	4983      	ldr	r1, [pc, #524]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003478:	4313      	orrs	r3, r2
 800347a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0320 	and.w	r3, r3, #32
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00a      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800348a:	4b7e      	ldr	r3, [pc, #504]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800348c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003490:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	497a      	ldr	r1, [pc, #488]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800349a:	4313      	orrs	r3, r2
 800349c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00a      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034ac:	4b75      	ldr	r3, [pc, #468]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	4972      	ldr	r1, [pc, #456]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00a      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034ce:	4b6d      	ldr	r3, [pc, #436]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	69db      	ldr	r3, [r3, #28]
 80034dc:	4969      	ldr	r1, [pc, #420]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00a      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034f0:	4b64      	ldr	r3, [pc, #400]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	4961      	ldr	r1, [pc, #388]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003500:	4313      	orrs	r3, r2
 8003502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00a      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003512:	4b5c      	ldr	r3, [pc, #368]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003518:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003520:	4958      	ldr	r1, [pc, #352]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003522:	4313      	orrs	r3, r2
 8003524:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003530:	2b00      	cmp	r3, #0
 8003532:	d015      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003534:	4b53      	ldr	r3, [pc, #332]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003542:	4950      	ldr	r1, [pc, #320]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003544:	4313      	orrs	r3, r2
 8003546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003552:	d105      	bne.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003554:	4b4b      	ldr	r3, [pc, #300]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	4a4a      	ldr	r2, [pc, #296]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800355a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800355e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003568:	2b00      	cmp	r3, #0
 800356a:	d015      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800356c:	4b45      	ldr	r3, [pc, #276]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800356e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003572:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357a:	4942      	ldr	r1, [pc, #264]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800357c:	4313      	orrs	r3, r2
 800357e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003586:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800358a:	d105      	bne.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800358c:	4b3d      	ldr	r3, [pc, #244]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	4a3c      	ldr	r2, [pc, #240]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003592:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003596:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d015      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80035a4:	4b37      	ldr	r3, [pc, #220]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035aa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b2:	4934      	ldr	r1, [pc, #208]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035c2:	d105      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035c4:	4b2f      	ldr	r3, [pc, #188]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	4a2e      	ldr	r2, [pc, #184]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035ce:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d015      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035dc:	4b29      	ldr	r3, [pc, #164]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ea:	4926      	ldr	r1, [pc, #152]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035fa:	d105      	bne.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035fc:	4b21      	ldr	r3, [pc, #132]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	4a20      	ldr	r2, [pc, #128]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003602:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003606:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d015      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003614:	4b1b      	ldr	r3, [pc, #108]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800361a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003622:	4918      	ldr	r1, [pc, #96]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003624:	4313      	orrs	r3, r2
 8003626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003632:	d105      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003634:	4b13      	ldr	r3, [pc, #76]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	4a12      	ldr	r2, [pc, #72]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800363a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800363e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d015      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800364c:	4b0d      	ldr	r3, [pc, #52]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800364e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003652:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365a:	490a      	ldr	r1, [pc, #40]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800365c:	4313      	orrs	r3, r2
 800365e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003666:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800366a:	d105      	bne.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800366c:	4b05      	ldr	r3, [pc, #20]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	4a04      	ldr	r2, [pc, #16]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003672:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003676:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003678:	7cbb      	ldrb	r3, [r7, #18]
}
 800367a:	4618      	mov	r0, r3
 800367c:	3718      	adds	r7, #24
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	40021000 	.word	0x40021000

08003688 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e049      	b.n	800372e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d106      	bne.n	80036b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f7fd ff14 	bl	80014dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2202      	movs	r2, #2
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3304      	adds	r3, #4
 80036c4:	4619      	mov	r1, r3
 80036c6:	4610      	mov	r0, r2
 80036c8:	f000 fda2 	bl	8004210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b082      	sub	sp, #8
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e049      	b.n	80037dc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2b00      	cmp	r3, #0
 8003752:	d106      	bne.n	8003762 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 f841 	bl	80037e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2202      	movs	r2, #2
 8003766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	3304      	adds	r3, #4
 8003772:	4619      	mov	r1, r3
 8003774:	4610      	mov	r0, r2
 8003776:	f000 fd4b 	bl	8004210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3708      	adds	r7, #8
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]
 8003804:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003806:	2300      	movs	r3, #0
 8003808:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d109      	bne.n	8003824 <HAL_TIM_PWM_Start_DMA+0x2c>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	bf0c      	ite	eq
 800381c:	2301      	moveq	r3, #1
 800381e:	2300      	movne	r3, #0
 8003820:	b2db      	uxtb	r3, r3
 8003822:	e03c      	b.n	800389e <HAL_TIM_PWM_Start_DMA+0xa6>
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	2b04      	cmp	r3, #4
 8003828:	d109      	bne.n	800383e <HAL_TIM_PWM_Start_DMA+0x46>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b02      	cmp	r3, #2
 8003834:	bf0c      	ite	eq
 8003836:	2301      	moveq	r3, #1
 8003838:	2300      	movne	r3, #0
 800383a:	b2db      	uxtb	r3, r3
 800383c:	e02f      	b.n	800389e <HAL_TIM_PWM_Start_DMA+0xa6>
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	2b08      	cmp	r3, #8
 8003842:	d109      	bne.n	8003858 <HAL_TIM_PWM_Start_DMA+0x60>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	bf0c      	ite	eq
 8003850:	2301      	moveq	r3, #1
 8003852:	2300      	movne	r3, #0
 8003854:	b2db      	uxtb	r3, r3
 8003856:	e022      	b.n	800389e <HAL_TIM_PWM_Start_DMA+0xa6>
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	2b0c      	cmp	r3, #12
 800385c:	d109      	bne.n	8003872 <HAL_TIM_PWM_Start_DMA+0x7a>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b02      	cmp	r3, #2
 8003868:	bf0c      	ite	eq
 800386a:	2301      	moveq	r3, #1
 800386c:	2300      	movne	r3, #0
 800386e:	b2db      	uxtb	r3, r3
 8003870:	e015      	b.n	800389e <HAL_TIM_PWM_Start_DMA+0xa6>
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	2b10      	cmp	r3, #16
 8003876:	d109      	bne.n	800388c <HAL_TIM_PWM_Start_DMA+0x94>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	bf0c      	ite	eq
 8003884:	2301      	moveq	r3, #1
 8003886:	2300      	movne	r3, #0
 8003888:	b2db      	uxtb	r3, r3
 800388a:	e008      	b.n	800389e <HAL_TIM_PWM_Start_DMA+0xa6>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	bf0c      	ite	eq
 8003898:	2301      	moveq	r3, #1
 800389a:	2300      	movne	r3, #0
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 80038a2:	2302      	movs	r3, #2
 80038a4:	e1a6      	b.n	8003bf4 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d109      	bne.n	80038c0 <HAL_TIM_PWM_Start_DMA+0xc8>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	bf0c      	ite	eq
 80038b8:	2301      	moveq	r3, #1
 80038ba:	2300      	movne	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	e03c      	b.n	800393a <HAL_TIM_PWM_Start_DMA+0x142>
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	2b04      	cmp	r3, #4
 80038c4:	d109      	bne.n	80038da <HAL_TIM_PWM_Start_DMA+0xe2>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	bf0c      	ite	eq
 80038d2:	2301      	moveq	r3, #1
 80038d4:	2300      	movne	r3, #0
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	e02f      	b.n	800393a <HAL_TIM_PWM_Start_DMA+0x142>
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	2b08      	cmp	r3, #8
 80038de:	d109      	bne.n	80038f4 <HAL_TIM_PWM_Start_DMA+0xfc>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	bf0c      	ite	eq
 80038ec:	2301      	moveq	r3, #1
 80038ee:	2300      	movne	r3, #0
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	e022      	b.n	800393a <HAL_TIM_PWM_Start_DMA+0x142>
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	2b0c      	cmp	r3, #12
 80038f8:	d109      	bne.n	800390e <HAL_TIM_PWM_Start_DMA+0x116>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b01      	cmp	r3, #1
 8003904:	bf0c      	ite	eq
 8003906:	2301      	moveq	r3, #1
 8003908:	2300      	movne	r3, #0
 800390a:	b2db      	uxtb	r3, r3
 800390c:	e015      	b.n	800393a <HAL_TIM_PWM_Start_DMA+0x142>
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	2b10      	cmp	r3, #16
 8003912:	d109      	bne.n	8003928 <HAL_TIM_PWM_Start_DMA+0x130>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b01      	cmp	r3, #1
 800391e:	bf0c      	ite	eq
 8003920:	2301      	moveq	r3, #1
 8003922:	2300      	movne	r3, #0
 8003924:	b2db      	uxtb	r3, r3
 8003926:	e008      	b.n	800393a <HAL_TIM_PWM_Start_DMA+0x142>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b01      	cmp	r3, #1
 8003932:	bf0c      	ite	eq
 8003934:	2301      	moveq	r3, #1
 8003936:	2300      	movne	r3, #0
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d034      	beq.n	80039a8 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) && (Length > 0U))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d104      	bne.n	800394e <HAL_TIM_PWM_Start_DMA+0x156>
 8003944:	887b      	ldrh	r3, [r7, #2]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e152      	b.n	8003bf4 <HAL_TIM_PWM_Start_DMA+0x3fc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d104      	bne.n	800395e <HAL_TIM_PWM_Start_DMA+0x166>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2202      	movs	r2, #2
 8003958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800395c:	e026      	b.n	80039ac <HAL_TIM_PWM_Start_DMA+0x1b4>
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	2b04      	cmp	r3, #4
 8003962:	d104      	bne.n	800396e <HAL_TIM_PWM_Start_DMA+0x176>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2202      	movs	r2, #2
 8003968:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800396c:	e01e      	b.n	80039ac <HAL_TIM_PWM_Start_DMA+0x1b4>
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	2b08      	cmp	r3, #8
 8003972:	d104      	bne.n	800397e <HAL_TIM_PWM_Start_DMA+0x186>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2202      	movs	r2, #2
 8003978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800397c:	e016      	b.n	80039ac <HAL_TIM_PWM_Start_DMA+0x1b4>
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	2b0c      	cmp	r3, #12
 8003982:	d104      	bne.n	800398e <HAL_TIM_PWM_Start_DMA+0x196>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2202      	movs	r2, #2
 8003988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800398c:	e00e      	b.n	80039ac <HAL_TIM_PWM_Start_DMA+0x1b4>
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	2b10      	cmp	r3, #16
 8003992:	d104      	bne.n	800399e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2202      	movs	r2, #2
 8003998:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800399c:	e006      	b.n	80039ac <HAL_TIM_PWM_Start_DMA+0x1b4>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2202      	movs	r2, #2
 80039a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039a6:	e001      	b.n	80039ac <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e123      	b.n	8003bf4 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }

  switch (Channel)
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	2b0c      	cmp	r3, #12
 80039b0:	f200 80ae 	bhi.w	8003b10 <HAL_TIM_PWM_Start_DMA+0x318>
 80039b4:	a201      	add	r2, pc, #4	; (adr r2, 80039bc <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80039b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ba:	bf00      	nop
 80039bc:	080039f1 	.word	0x080039f1
 80039c0:	08003b11 	.word	0x08003b11
 80039c4:	08003b11 	.word	0x08003b11
 80039c8:	08003b11 	.word	0x08003b11
 80039cc:	08003a39 	.word	0x08003a39
 80039d0:	08003b11 	.word	0x08003b11
 80039d4:	08003b11 	.word	0x08003b11
 80039d8:	08003b11 	.word	0x08003b11
 80039dc:	08003a81 	.word	0x08003a81
 80039e0:	08003b11 	.word	0x08003b11
 80039e4:	08003b11 	.word	0x08003b11
 80039e8:	08003b11 	.word	0x08003b11
 80039ec:	08003ac9 	.word	0x08003ac9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f4:	4a81      	ldr	r2, [pc, #516]	; (8003bfc <HAL_TIM_PWM_Start_DMA+0x404>)
 80039f6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fc:	4a80      	ldr	r2, [pc, #512]	; (8003c00 <HAL_TIM_PWM_Start_DMA+0x408>)
 80039fe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a04:	4a7f      	ldr	r2, [pc, #508]	; (8003c04 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8003a06:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003a0c:	6879      	ldr	r1, [r7, #4]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	3334      	adds	r3, #52	; 0x34
 8003a14:	461a      	mov	r2, r3
 8003a16:	887b      	ldrh	r3, [r7, #2]
 8003a18:	f7fe fb0a 	bl	8002030 <HAL_DMA_Start_IT>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e0e6      	b.n	8003bf4 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68da      	ldr	r2, [r3, #12]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a34:	60da      	str	r2, [r3, #12]
      break;
 8003a36:	e06e      	b.n	8003b16 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3c:	4a6f      	ldr	r2, [pc, #444]	; (8003bfc <HAL_TIM_PWM_Start_DMA+0x404>)
 8003a3e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a44:	4a6e      	ldr	r2, [pc, #440]	; (8003c00 <HAL_TIM_PWM_Start_DMA+0x408>)
 8003a46:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4c:	4a6d      	ldr	r2, [pc, #436]	; (8003c04 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8003a4e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003a54:	6879      	ldr	r1, [r7, #4]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	3338      	adds	r3, #56	; 0x38
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	887b      	ldrh	r3, [r7, #2]
 8003a60:	f7fe fae6 	bl	8002030 <HAL_DMA_Start_IT>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d001      	beq.n	8003a6e <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e0c2      	b.n	8003bf4 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68da      	ldr	r2, [r3, #12]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a7c:	60da      	str	r2, [r3, #12]
      break;
 8003a7e:	e04a      	b.n	8003b16 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a84:	4a5d      	ldr	r2, [pc, #372]	; (8003bfc <HAL_TIM_PWM_Start_DMA+0x404>)
 8003a86:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8c:	4a5c      	ldr	r2, [pc, #368]	; (8003c00 <HAL_TIM_PWM_Start_DMA+0x408>)
 8003a8e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a94:	4a5b      	ldr	r2, [pc, #364]	; (8003c04 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8003a96:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003a9c:	6879      	ldr	r1, [r7, #4]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	333c      	adds	r3, #60	; 0x3c
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	887b      	ldrh	r3, [r7, #2]
 8003aa8:	f7fe fac2 	bl	8002030 <HAL_DMA_Start_IT>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e09e      	b.n	8003bf4 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68da      	ldr	r2, [r3, #12]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ac4:	60da      	str	r2, [r3, #12]
      break;
 8003ac6:	e026      	b.n	8003b16 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003acc:	4a4b      	ldr	r2, [pc, #300]	; (8003bfc <HAL_TIM_PWM_Start_DMA+0x404>)
 8003ace:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad4:	4a4a      	ldr	r2, [pc, #296]	; (8003c00 <HAL_TIM_PWM_Start_DMA+0x408>)
 8003ad6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003adc:	4a49      	ldr	r2, [pc, #292]	; (8003c04 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8003ade:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003ae4:	6879      	ldr	r1, [r7, #4]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	3340      	adds	r3, #64	; 0x40
 8003aec:	461a      	mov	r2, r3
 8003aee:	887b      	ldrh	r3, [r7, #2]
 8003af0:	f7fe fa9e 	bl	8002030 <HAL_DMA_Start_IT>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e07a      	b.n	8003bf4 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68da      	ldr	r2, [r3, #12]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b0c:	60da      	str	r2, [r3, #12]
      break;
 8003b0e:	e002      	b.n	8003b16 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	75fb      	strb	r3, [r7, #23]
      break;
 8003b14:	bf00      	nop
  }

  if (status == HAL_OK)
 8003b16:	7dfb      	ldrb	r3, [r7, #23]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d16a      	bne.n	8003bf2 <HAL_TIM_PWM_Start_DMA+0x3fa>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2201      	movs	r2, #1
 8003b22:	68b9      	ldr	r1, [r7, #8]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f000 ff95 	bl	8004a54 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a36      	ldr	r2, [pc, #216]	; (8003c08 <HAL_TIM_PWM_Start_DMA+0x410>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d013      	beq.n	8003b5c <HAL_TIM_PWM_Start_DMA+0x364>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a34      	ldr	r2, [pc, #208]	; (8003c0c <HAL_TIM_PWM_Start_DMA+0x414>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d00e      	beq.n	8003b5c <HAL_TIM_PWM_Start_DMA+0x364>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a33      	ldr	r2, [pc, #204]	; (8003c10 <HAL_TIM_PWM_Start_DMA+0x418>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d009      	beq.n	8003b5c <HAL_TIM_PWM_Start_DMA+0x364>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a31      	ldr	r2, [pc, #196]	; (8003c14 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d004      	beq.n	8003b5c <HAL_TIM_PWM_Start_DMA+0x364>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a30      	ldr	r2, [pc, #192]	; (8003c18 <HAL_TIM_PWM_Start_DMA+0x420>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d101      	bne.n	8003b60 <HAL_TIM_PWM_Start_DMA+0x368>
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e000      	b.n	8003b62 <HAL_TIM_PWM_Start_DMA+0x36a>
 8003b60:	2300      	movs	r3, #0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d007      	beq.n	8003b76 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b74:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a23      	ldr	r2, [pc, #140]	; (8003c08 <HAL_TIM_PWM_Start_DMA+0x410>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d018      	beq.n	8003bb2 <HAL_TIM_PWM_Start_DMA+0x3ba>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b88:	d013      	beq.n	8003bb2 <HAL_TIM_PWM_Start_DMA+0x3ba>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a23      	ldr	r2, [pc, #140]	; (8003c1c <HAL_TIM_PWM_Start_DMA+0x424>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d00e      	beq.n	8003bb2 <HAL_TIM_PWM_Start_DMA+0x3ba>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a21      	ldr	r2, [pc, #132]	; (8003c20 <HAL_TIM_PWM_Start_DMA+0x428>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d009      	beq.n	8003bb2 <HAL_TIM_PWM_Start_DMA+0x3ba>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a1a      	ldr	r2, [pc, #104]	; (8003c0c <HAL_TIM_PWM_Start_DMA+0x414>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d004      	beq.n	8003bb2 <HAL_TIM_PWM_Start_DMA+0x3ba>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a18      	ldr	r2, [pc, #96]	; (8003c10 <HAL_TIM_PWM_Start_DMA+0x418>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d115      	bne.n	8003bde <HAL_TIM_PWM_Start_DMA+0x3e6>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	689a      	ldr	r2, [r3, #8]
 8003bb8:	4b1a      	ldr	r3, [pc, #104]	; (8003c24 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8003bba:	4013      	ands	r3, r2
 8003bbc:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	2b06      	cmp	r3, #6
 8003bc2:	d015      	beq.n	8003bf0 <HAL_TIM_PWM_Start_DMA+0x3f8>
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bca:	d011      	beq.n	8003bf0 <HAL_TIM_PWM_Start_DMA+0x3f8>
      {
        __HAL_TIM_ENABLE(htim);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 0201 	orr.w	r2, r2, #1
 8003bda:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bdc:	e008      	b.n	8003bf0 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f042 0201 	orr.w	r2, r2, #1
 8003bec:	601a      	str	r2, [r3, #0]
 8003bee:	e000      	b.n	8003bf2 <HAL_TIM_PWM_Start_DMA+0x3fa>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bf0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3718      	adds	r7, #24
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	080040ff 	.word	0x080040ff
 8003c00:	080041a7 	.word	0x080041a7
 8003c04:	0800406d 	.word	0x0800406d
 8003c08:	40012c00 	.word	0x40012c00
 8003c0c:	40013400 	.word	0x40013400
 8003c10:	40014000 	.word	0x40014000
 8003c14:	40014400 	.word	0x40014400
 8003c18:	40014800 	.word	0x40014800
 8003c1c:	40000400 	.word	0x40000400
 8003c20:	40000800 	.word	0x40000800
 8003c24:	00010007 	.word	0x00010007

08003c28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c34:	2300      	movs	r3, #0
 8003c36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d101      	bne.n	8003c46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c42:	2302      	movs	r3, #2
 8003c44:	e0ff      	b.n	8003e46 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2b14      	cmp	r3, #20
 8003c52:	f200 80f0 	bhi.w	8003e36 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003c56:	a201      	add	r2, pc, #4	; (adr r2, 8003c5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c5c:	08003cb1 	.word	0x08003cb1
 8003c60:	08003e37 	.word	0x08003e37
 8003c64:	08003e37 	.word	0x08003e37
 8003c68:	08003e37 	.word	0x08003e37
 8003c6c:	08003cf1 	.word	0x08003cf1
 8003c70:	08003e37 	.word	0x08003e37
 8003c74:	08003e37 	.word	0x08003e37
 8003c78:	08003e37 	.word	0x08003e37
 8003c7c:	08003d33 	.word	0x08003d33
 8003c80:	08003e37 	.word	0x08003e37
 8003c84:	08003e37 	.word	0x08003e37
 8003c88:	08003e37 	.word	0x08003e37
 8003c8c:	08003d73 	.word	0x08003d73
 8003c90:	08003e37 	.word	0x08003e37
 8003c94:	08003e37 	.word	0x08003e37
 8003c98:	08003e37 	.word	0x08003e37
 8003c9c:	08003db5 	.word	0x08003db5
 8003ca0:	08003e37 	.word	0x08003e37
 8003ca4:	08003e37 	.word	0x08003e37
 8003ca8:	08003e37 	.word	0x08003e37
 8003cac:	08003df5 	.word	0x08003df5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68b9      	ldr	r1, [r7, #8]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f000 fb3a 	bl	8004330 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	699a      	ldr	r2, [r3, #24]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f042 0208 	orr.w	r2, r2, #8
 8003cca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	699a      	ldr	r2, [r3, #24]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 0204 	bic.w	r2, r2, #4
 8003cda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6999      	ldr	r1, [r3, #24]
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	691a      	ldr	r2, [r3, #16]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	619a      	str	r2, [r3, #24]
      break;
 8003cee:	e0a5      	b.n	8003e3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68b9      	ldr	r1, [r7, #8]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 fbaa 	bl	8004450 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	699a      	ldr	r2, [r3, #24]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	699a      	ldr	r2, [r3, #24]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6999      	ldr	r1, [r3, #24]
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	021a      	lsls	r2, r3, #8
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	619a      	str	r2, [r3, #24]
      break;
 8003d30:	e084      	b.n	8003e3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68b9      	ldr	r1, [r7, #8]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f000 fc13 	bl	8004564 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	69da      	ldr	r2, [r3, #28]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f042 0208 	orr.w	r2, r2, #8
 8003d4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	69da      	ldr	r2, [r3, #28]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 0204 	bic.w	r2, r2, #4
 8003d5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	69d9      	ldr	r1, [r3, #28]
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	691a      	ldr	r2, [r3, #16]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	61da      	str	r2, [r3, #28]
      break;
 8003d70:	e064      	b.n	8003e3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68b9      	ldr	r1, [r7, #8]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f000 fc7b 	bl	8004674 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	69da      	ldr	r2, [r3, #28]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	69da      	ldr	r2, [r3, #28]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	69d9      	ldr	r1, [r3, #28]
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	021a      	lsls	r2, r3, #8
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	61da      	str	r2, [r3, #28]
      break;
 8003db2:	e043      	b.n	8003e3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68b9      	ldr	r1, [r7, #8]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 fce4 	bl	8004788 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f042 0208 	orr.w	r2, r2, #8
 8003dce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f022 0204 	bic.w	r2, r2, #4
 8003dde:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	691a      	ldr	r2, [r3, #16]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003df2:	e023      	b.n	8003e3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68b9      	ldr	r1, [r7, #8]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 fd28 	bl	8004850 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e0e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e1e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	021a      	lsls	r2, r3, #8
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003e34:	e002      	b.n	8003e3c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	75fb      	strb	r3, [r7, #23]
      break;
 8003e3a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e44:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3718      	adds	r7, #24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop

08003e50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d101      	bne.n	8003e6c <HAL_TIM_ConfigClockSource+0x1c>
 8003e68:	2302      	movs	r3, #2
 8003e6a:	e0de      	b.n	800402a <HAL_TIM_ConfigClockSource+0x1da>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2202      	movs	r2, #2
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003e8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68ba      	ldr	r2, [r7, #8]
 8003e9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a63      	ldr	r2, [pc, #396]	; (8004034 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	f000 80a9 	beq.w	8003ffe <HAL_TIM_ConfigClockSource+0x1ae>
 8003eac:	4a61      	ldr	r2, [pc, #388]	; (8004034 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	f200 80ae 	bhi.w	8004010 <HAL_TIM_ConfigClockSource+0x1c0>
 8003eb4:	4a60      	ldr	r2, [pc, #384]	; (8004038 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	f000 80a1 	beq.w	8003ffe <HAL_TIM_ConfigClockSource+0x1ae>
 8003ebc:	4a5e      	ldr	r2, [pc, #376]	; (8004038 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	f200 80a6 	bhi.w	8004010 <HAL_TIM_ConfigClockSource+0x1c0>
 8003ec4:	4a5d      	ldr	r2, [pc, #372]	; (800403c <HAL_TIM_ConfigClockSource+0x1ec>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	f000 8099 	beq.w	8003ffe <HAL_TIM_ConfigClockSource+0x1ae>
 8003ecc:	4a5b      	ldr	r2, [pc, #364]	; (800403c <HAL_TIM_ConfigClockSource+0x1ec>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	f200 809e 	bhi.w	8004010 <HAL_TIM_ConfigClockSource+0x1c0>
 8003ed4:	4a5a      	ldr	r2, [pc, #360]	; (8004040 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	f000 8091 	beq.w	8003ffe <HAL_TIM_ConfigClockSource+0x1ae>
 8003edc:	4a58      	ldr	r2, [pc, #352]	; (8004040 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	f200 8096 	bhi.w	8004010 <HAL_TIM_ConfigClockSource+0x1c0>
 8003ee4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003ee8:	f000 8089 	beq.w	8003ffe <HAL_TIM_ConfigClockSource+0x1ae>
 8003eec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003ef0:	f200 808e 	bhi.w	8004010 <HAL_TIM_ConfigClockSource+0x1c0>
 8003ef4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ef8:	d03e      	beq.n	8003f78 <HAL_TIM_ConfigClockSource+0x128>
 8003efa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003efe:	f200 8087 	bhi.w	8004010 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f06:	f000 8086 	beq.w	8004016 <HAL_TIM_ConfigClockSource+0x1c6>
 8003f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f0e:	d87f      	bhi.n	8004010 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f10:	2b70      	cmp	r3, #112	; 0x70
 8003f12:	d01a      	beq.n	8003f4a <HAL_TIM_ConfigClockSource+0xfa>
 8003f14:	2b70      	cmp	r3, #112	; 0x70
 8003f16:	d87b      	bhi.n	8004010 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f18:	2b60      	cmp	r3, #96	; 0x60
 8003f1a:	d050      	beq.n	8003fbe <HAL_TIM_ConfigClockSource+0x16e>
 8003f1c:	2b60      	cmp	r3, #96	; 0x60
 8003f1e:	d877      	bhi.n	8004010 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f20:	2b50      	cmp	r3, #80	; 0x50
 8003f22:	d03c      	beq.n	8003f9e <HAL_TIM_ConfigClockSource+0x14e>
 8003f24:	2b50      	cmp	r3, #80	; 0x50
 8003f26:	d873      	bhi.n	8004010 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f28:	2b40      	cmp	r3, #64	; 0x40
 8003f2a:	d058      	beq.n	8003fde <HAL_TIM_ConfigClockSource+0x18e>
 8003f2c:	2b40      	cmp	r3, #64	; 0x40
 8003f2e:	d86f      	bhi.n	8004010 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f30:	2b30      	cmp	r3, #48	; 0x30
 8003f32:	d064      	beq.n	8003ffe <HAL_TIM_ConfigClockSource+0x1ae>
 8003f34:	2b30      	cmp	r3, #48	; 0x30
 8003f36:	d86b      	bhi.n	8004010 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f38:	2b20      	cmp	r3, #32
 8003f3a:	d060      	beq.n	8003ffe <HAL_TIM_ConfigClockSource+0x1ae>
 8003f3c:	2b20      	cmp	r3, #32
 8003f3e:	d867      	bhi.n	8004010 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d05c      	beq.n	8003ffe <HAL_TIM_ConfigClockSource+0x1ae>
 8003f44:	2b10      	cmp	r3, #16
 8003f46:	d05a      	beq.n	8003ffe <HAL_TIM_ConfigClockSource+0x1ae>
 8003f48:	e062      	b.n	8004010 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6818      	ldr	r0, [r3, #0]
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	6899      	ldr	r1, [r3, #8]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	f000 fd5b 	bl	8004a14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	609a      	str	r2, [r3, #8]
      break;
 8003f76:	e04f      	b.n	8004018 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6818      	ldr	r0, [r3, #0]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	6899      	ldr	r1, [r3, #8]
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f000 fd44 	bl	8004a14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689a      	ldr	r2, [r3, #8]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f9a:	609a      	str	r2, [r3, #8]
      break;
 8003f9c:	e03c      	b.n	8004018 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6818      	ldr	r0, [r3, #0]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	6859      	ldr	r1, [r3, #4]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	461a      	mov	r2, r3
 8003fac:	f000 fcb6 	bl	800491c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2150      	movs	r1, #80	; 0x50
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 fd0f 	bl	80049da <TIM_ITRx_SetConfig>
      break;
 8003fbc:	e02c      	b.n	8004018 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6818      	ldr	r0, [r3, #0]
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	6859      	ldr	r1, [r3, #4]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	f000 fcd5 	bl	800497a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2160      	movs	r1, #96	; 0x60
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f000 fcff 	bl	80049da <TIM_ITRx_SetConfig>
      break;
 8003fdc:	e01c      	b.n	8004018 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6818      	ldr	r0, [r3, #0]
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	6859      	ldr	r1, [r3, #4]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	461a      	mov	r2, r3
 8003fec:	f000 fc96 	bl	800491c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2140      	movs	r1, #64	; 0x40
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 fcef 	bl	80049da <TIM_ITRx_SetConfig>
      break;
 8003ffc:	e00c      	b.n	8004018 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4619      	mov	r1, r3
 8004008:	4610      	mov	r0, r2
 800400a:	f000 fce6 	bl	80049da <TIM_ITRx_SetConfig>
      break;
 800400e:	e003      	b.n	8004018 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	73fb      	strb	r3, [r7, #15]
      break;
 8004014:	e000      	b.n	8004018 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8004016:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004028:	7bfb      	ldrb	r3, [r7, #15]
}
 800402a:	4618      	mov	r0, r3
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	00100070 	.word	0x00100070
 8004038:	00100040 	.word	0x00100040
 800403c:	00100030 	.word	0x00100030
 8004040:	00100020 	.word	0x00100020

08004044 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004078:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	429a      	cmp	r2, r3
 8004082:	d107      	bne.n	8004094 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2201      	movs	r2, #1
 8004088:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004092:	e02a      	b.n	80040ea <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	429a      	cmp	r2, r3
 800409c:	d107      	bne.n	80040ae <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2202      	movs	r2, #2
 80040a2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040ac:	e01d      	b.n	80040ea <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d107      	bne.n	80040c8 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2204      	movs	r2, #4
 80040bc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040c6:	e010      	b.n	80040ea <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d107      	bne.n	80040e2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2208      	movs	r2, #8
 80040d6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040e0:	e003      	b.n	80040ea <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f7ff ffb4 	bl	8004058 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	771a      	strb	r2, [r3, #28]
}
 80040f6:	bf00      	nop
 80040f8:	3710      	adds	r7, #16
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b084      	sub	sp, #16
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	429a      	cmp	r2, r3
 8004114:	d10b      	bne.n	800412e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2201      	movs	r2, #1
 800411a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	69db      	ldr	r3, [r3, #28]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d136      	bne.n	8004192 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800412c:	e031      	b.n	8004192 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	429a      	cmp	r2, r3
 8004136:	d10b      	bne.n	8004150 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2202      	movs	r2, #2
 800413c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	69db      	ldr	r3, [r3, #28]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d125      	bne.n	8004192 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800414e:	e020      	b.n	8004192 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	429a      	cmp	r2, r3
 8004158:	d10b      	bne.n	8004172 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2204      	movs	r2, #4
 800415e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	69db      	ldr	r3, [r3, #28]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d114      	bne.n	8004192 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004170:	e00f      	b.n	8004192 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	429a      	cmp	r2, r3
 800417a:	d10a      	bne.n	8004192 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2208      	movs	r2, #8
 8004180:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d103      	bne.n	8004192 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f7fc fe86 	bl	8000ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	771a      	strb	r2, [r3, #28]
}
 800419e:	bf00      	nop
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b084      	sub	sp, #16
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d103      	bne.n	80041c6 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2201      	movs	r2, #1
 80041c2:	771a      	strb	r2, [r3, #28]
 80041c4:	e019      	b.n	80041fa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d103      	bne.n	80041d8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2202      	movs	r2, #2
 80041d4:	771a      	strb	r2, [r3, #28]
 80041d6:	e010      	b.n	80041fa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d103      	bne.n	80041ea <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2204      	movs	r2, #4
 80041e6:	771a      	strb	r2, [r3, #28]
 80041e8:	e007      	b.n	80041fa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d102      	bne.n	80041fa <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2208      	movs	r2, #8
 80041f8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	f7ff ff22 	bl	8004044 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	771a      	strb	r2, [r3, #28]
}
 8004206:	bf00      	nop
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
	...

08004210 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a3c      	ldr	r2, [pc, #240]	; (8004314 <TIM_Base_SetConfig+0x104>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d00f      	beq.n	8004248 <TIM_Base_SetConfig+0x38>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800422e:	d00b      	beq.n	8004248 <TIM_Base_SetConfig+0x38>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a39      	ldr	r2, [pc, #228]	; (8004318 <TIM_Base_SetConfig+0x108>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d007      	beq.n	8004248 <TIM_Base_SetConfig+0x38>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a38      	ldr	r2, [pc, #224]	; (800431c <TIM_Base_SetConfig+0x10c>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d003      	beq.n	8004248 <TIM_Base_SetConfig+0x38>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a37      	ldr	r2, [pc, #220]	; (8004320 <TIM_Base_SetConfig+0x110>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d108      	bne.n	800425a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800424e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	4313      	orrs	r3, r2
 8004258:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a2d      	ldr	r2, [pc, #180]	; (8004314 <TIM_Base_SetConfig+0x104>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d01b      	beq.n	800429a <TIM_Base_SetConfig+0x8a>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004268:	d017      	beq.n	800429a <TIM_Base_SetConfig+0x8a>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a2a      	ldr	r2, [pc, #168]	; (8004318 <TIM_Base_SetConfig+0x108>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d013      	beq.n	800429a <TIM_Base_SetConfig+0x8a>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a29      	ldr	r2, [pc, #164]	; (800431c <TIM_Base_SetConfig+0x10c>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d00f      	beq.n	800429a <TIM_Base_SetConfig+0x8a>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a28      	ldr	r2, [pc, #160]	; (8004320 <TIM_Base_SetConfig+0x110>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d00b      	beq.n	800429a <TIM_Base_SetConfig+0x8a>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a27      	ldr	r2, [pc, #156]	; (8004324 <TIM_Base_SetConfig+0x114>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d007      	beq.n	800429a <TIM_Base_SetConfig+0x8a>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a26      	ldr	r2, [pc, #152]	; (8004328 <TIM_Base_SetConfig+0x118>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d003      	beq.n	800429a <TIM_Base_SetConfig+0x8a>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a25      	ldr	r2, [pc, #148]	; (800432c <TIM_Base_SetConfig+0x11c>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d108      	bne.n	80042ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	689a      	ldr	r2, [r3, #8]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a10      	ldr	r2, [pc, #64]	; (8004314 <TIM_Base_SetConfig+0x104>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d00f      	beq.n	80042f8 <TIM_Base_SetConfig+0xe8>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a11      	ldr	r2, [pc, #68]	; (8004320 <TIM_Base_SetConfig+0x110>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d00b      	beq.n	80042f8 <TIM_Base_SetConfig+0xe8>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a10      	ldr	r2, [pc, #64]	; (8004324 <TIM_Base_SetConfig+0x114>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d007      	beq.n	80042f8 <TIM_Base_SetConfig+0xe8>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a0f      	ldr	r2, [pc, #60]	; (8004328 <TIM_Base_SetConfig+0x118>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d003      	beq.n	80042f8 <TIM_Base_SetConfig+0xe8>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a0e      	ldr	r2, [pc, #56]	; (800432c <TIM_Base_SetConfig+0x11c>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d103      	bne.n	8004300 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	691a      	ldr	r2, [r3, #16]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	615a      	str	r2, [r3, #20]
}
 8004306:	bf00      	nop
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	40012c00 	.word	0x40012c00
 8004318:	40000400 	.word	0x40000400
 800431c:	40000800 	.word	0x40000800
 8004320:	40013400 	.word	0x40013400
 8004324:	40014000 	.word	0x40014000
 8004328:	40014400 	.word	0x40014400
 800432c:	40014800 	.word	0x40014800

08004330 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004330:	b480      	push	{r7}
 8004332:	b087      	sub	sp, #28
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	f023 0201 	bic.w	r2, r3, #1
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800435e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f023 0303 	bic.w	r3, r3, #3
 800436a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	4313      	orrs	r3, r2
 8004374:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f023 0302 	bic.w	r3, r3, #2
 800437c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	4313      	orrs	r3, r2
 8004386:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a2c      	ldr	r2, [pc, #176]	; (800443c <TIM_OC1_SetConfig+0x10c>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d00f      	beq.n	80043b0 <TIM_OC1_SetConfig+0x80>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a2b      	ldr	r2, [pc, #172]	; (8004440 <TIM_OC1_SetConfig+0x110>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d00b      	beq.n	80043b0 <TIM_OC1_SetConfig+0x80>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a2a      	ldr	r2, [pc, #168]	; (8004444 <TIM_OC1_SetConfig+0x114>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d007      	beq.n	80043b0 <TIM_OC1_SetConfig+0x80>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a29      	ldr	r2, [pc, #164]	; (8004448 <TIM_OC1_SetConfig+0x118>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d003      	beq.n	80043b0 <TIM_OC1_SetConfig+0x80>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a28      	ldr	r2, [pc, #160]	; (800444c <TIM_OC1_SetConfig+0x11c>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d10c      	bne.n	80043ca <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	f023 0308 	bic.w	r3, r3, #8
 80043b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	697a      	ldr	r2, [r7, #20]
 80043be:	4313      	orrs	r3, r2
 80043c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f023 0304 	bic.w	r3, r3, #4
 80043c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a1b      	ldr	r2, [pc, #108]	; (800443c <TIM_OC1_SetConfig+0x10c>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d00f      	beq.n	80043f2 <TIM_OC1_SetConfig+0xc2>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a1a      	ldr	r2, [pc, #104]	; (8004440 <TIM_OC1_SetConfig+0x110>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d00b      	beq.n	80043f2 <TIM_OC1_SetConfig+0xc2>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a19      	ldr	r2, [pc, #100]	; (8004444 <TIM_OC1_SetConfig+0x114>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d007      	beq.n	80043f2 <TIM_OC1_SetConfig+0xc2>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a18      	ldr	r2, [pc, #96]	; (8004448 <TIM_OC1_SetConfig+0x118>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d003      	beq.n	80043f2 <TIM_OC1_SetConfig+0xc2>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a17      	ldr	r2, [pc, #92]	; (800444c <TIM_OC1_SetConfig+0x11c>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d111      	bne.n	8004416 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004400:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	4313      	orrs	r3, r2
 800440a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	4313      	orrs	r3, r2
 8004414:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	621a      	str	r2, [r3, #32]
}
 8004430:	bf00      	nop
 8004432:	371c      	adds	r7, #28
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	40012c00 	.word	0x40012c00
 8004440:	40013400 	.word	0x40013400
 8004444:	40014000 	.word	0x40014000
 8004448:	40014400 	.word	0x40014400
 800444c:	40014800 	.word	0x40014800

08004450 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004450:	b480      	push	{r7}
 8004452:	b087      	sub	sp, #28
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	f023 0210 	bic.w	r2, r3, #16
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800447e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800448a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	021b      	lsls	r3, r3, #8
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	4313      	orrs	r3, r2
 8004496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	f023 0320 	bic.w	r3, r3, #32
 800449e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	011b      	lsls	r3, r3, #4
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a28      	ldr	r2, [pc, #160]	; (8004550 <TIM_OC2_SetConfig+0x100>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d003      	beq.n	80044bc <TIM_OC2_SetConfig+0x6c>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a27      	ldr	r2, [pc, #156]	; (8004554 <TIM_OC2_SetConfig+0x104>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d10d      	bne.n	80044d8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	011b      	lsls	r3, r3, #4
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a1d      	ldr	r2, [pc, #116]	; (8004550 <TIM_OC2_SetConfig+0x100>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d00f      	beq.n	8004500 <TIM_OC2_SetConfig+0xb0>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a1c      	ldr	r2, [pc, #112]	; (8004554 <TIM_OC2_SetConfig+0x104>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d00b      	beq.n	8004500 <TIM_OC2_SetConfig+0xb0>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a1b      	ldr	r2, [pc, #108]	; (8004558 <TIM_OC2_SetConfig+0x108>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d007      	beq.n	8004500 <TIM_OC2_SetConfig+0xb0>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a1a      	ldr	r2, [pc, #104]	; (800455c <TIM_OC2_SetConfig+0x10c>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d003      	beq.n	8004500 <TIM_OC2_SetConfig+0xb0>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a19      	ldr	r2, [pc, #100]	; (8004560 <TIM_OC2_SetConfig+0x110>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d113      	bne.n	8004528 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004506:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800450e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	4313      	orrs	r3, r2
 800451a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	4313      	orrs	r3, r2
 8004526:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	621a      	str	r2, [r3, #32]
}
 8004542:	bf00      	nop
 8004544:	371c      	adds	r7, #28
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	40012c00 	.word	0x40012c00
 8004554:	40013400 	.word	0x40013400
 8004558:	40014000 	.word	0x40014000
 800455c:	40014400 	.word	0x40014400
 8004560:	40014800 	.word	0x40014800

08004564 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004564:	b480      	push	{r7}
 8004566:	b087      	sub	sp, #28
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f023 0303 	bic.w	r3, r3, #3
 800459e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	021b      	lsls	r3, r3, #8
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a27      	ldr	r2, [pc, #156]	; (8004660 <TIM_OC3_SetConfig+0xfc>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d003      	beq.n	80045ce <TIM_OC3_SetConfig+0x6a>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a26      	ldr	r2, [pc, #152]	; (8004664 <TIM_OC3_SetConfig+0x100>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d10d      	bne.n	80045ea <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	021b      	lsls	r3, r3, #8
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	4313      	orrs	r3, r2
 80045e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a1c      	ldr	r2, [pc, #112]	; (8004660 <TIM_OC3_SetConfig+0xfc>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d00f      	beq.n	8004612 <TIM_OC3_SetConfig+0xae>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a1b      	ldr	r2, [pc, #108]	; (8004664 <TIM_OC3_SetConfig+0x100>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d00b      	beq.n	8004612 <TIM_OC3_SetConfig+0xae>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a1a      	ldr	r2, [pc, #104]	; (8004668 <TIM_OC3_SetConfig+0x104>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d007      	beq.n	8004612 <TIM_OC3_SetConfig+0xae>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a19      	ldr	r2, [pc, #100]	; (800466c <TIM_OC3_SetConfig+0x108>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d003      	beq.n	8004612 <TIM_OC3_SetConfig+0xae>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a18      	ldr	r2, [pc, #96]	; (8004670 <TIM_OC3_SetConfig+0x10c>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d113      	bne.n	800463a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004618:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004620:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	011b      	lsls	r3, r3, #4
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	4313      	orrs	r3, r2
 800462c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	011b      	lsls	r3, r3, #4
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	4313      	orrs	r3, r2
 8004638:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	685a      	ldr	r2, [r3, #4]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	621a      	str	r2, [r3, #32]
}
 8004654:	bf00      	nop
 8004656:	371c      	adds	r7, #28
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr
 8004660:	40012c00 	.word	0x40012c00
 8004664:	40013400 	.word	0x40013400
 8004668:	40014000 	.word	0x40014000
 800466c:	40014400 	.word	0x40014400
 8004670:	40014800 	.word	0x40014800

08004674 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004674:	b480      	push	{r7}
 8004676:	b087      	sub	sp, #28
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a1b      	ldr	r3, [r3, #32]
 800468e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	021b      	lsls	r3, r3, #8
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	031b      	lsls	r3, r3, #12
 80046ca:	697a      	ldr	r2, [r7, #20]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a28      	ldr	r2, [pc, #160]	; (8004774 <TIM_OC4_SetConfig+0x100>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d003      	beq.n	80046e0 <TIM_OC4_SetConfig+0x6c>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a27      	ldr	r2, [pc, #156]	; (8004778 <TIM_OC4_SetConfig+0x104>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d10d      	bne.n	80046fc <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80046e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	031b      	lsls	r3, r3, #12
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a1d      	ldr	r2, [pc, #116]	; (8004774 <TIM_OC4_SetConfig+0x100>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d00f      	beq.n	8004724 <TIM_OC4_SetConfig+0xb0>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a1c      	ldr	r2, [pc, #112]	; (8004778 <TIM_OC4_SetConfig+0x104>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d00b      	beq.n	8004724 <TIM_OC4_SetConfig+0xb0>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a1b      	ldr	r2, [pc, #108]	; (800477c <TIM_OC4_SetConfig+0x108>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d007      	beq.n	8004724 <TIM_OC4_SetConfig+0xb0>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a1a      	ldr	r2, [pc, #104]	; (8004780 <TIM_OC4_SetConfig+0x10c>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d003      	beq.n	8004724 <TIM_OC4_SetConfig+0xb0>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a19      	ldr	r2, [pc, #100]	; (8004784 <TIM_OC4_SetConfig+0x110>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d113      	bne.n	800474c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800472a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004732:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	019b      	lsls	r3, r3, #6
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	4313      	orrs	r3, r2
 800473e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	699b      	ldr	r3, [r3, #24]
 8004744:	019b      	lsls	r3, r3, #6
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	4313      	orrs	r3, r2
 800474a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685a      	ldr	r2, [r3, #4]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	621a      	str	r2, [r3, #32]
}
 8004766:	bf00      	nop
 8004768:	371c      	adds	r7, #28
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	40012c00 	.word	0x40012c00
 8004778:	40013400 	.word	0x40013400
 800477c:	40014000 	.word	0x40014000
 8004780:	40014400 	.word	0x40014400
 8004784:	40014800 	.word	0x40014800

08004788 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004788:	b480      	push	{r7}
 800478a:	b087      	sub	sp, #28
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80047cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	041b      	lsls	r3, r3, #16
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a17      	ldr	r2, [pc, #92]	; (800483c <TIM_OC5_SetConfig+0xb4>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d00f      	beq.n	8004802 <TIM_OC5_SetConfig+0x7a>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a16      	ldr	r2, [pc, #88]	; (8004840 <TIM_OC5_SetConfig+0xb8>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d00b      	beq.n	8004802 <TIM_OC5_SetConfig+0x7a>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a15      	ldr	r2, [pc, #84]	; (8004844 <TIM_OC5_SetConfig+0xbc>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d007      	beq.n	8004802 <TIM_OC5_SetConfig+0x7a>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a14      	ldr	r2, [pc, #80]	; (8004848 <TIM_OC5_SetConfig+0xc0>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d003      	beq.n	8004802 <TIM_OC5_SetConfig+0x7a>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a13      	ldr	r2, [pc, #76]	; (800484c <TIM_OC5_SetConfig+0xc4>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d109      	bne.n	8004816 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004808:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	021b      	lsls	r3, r3, #8
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	4313      	orrs	r3, r2
 8004814:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	621a      	str	r2, [r3, #32]
}
 8004830:	bf00      	nop
 8004832:	371c      	adds	r7, #28
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr
 800483c:	40012c00 	.word	0x40012c00
 8004840:	40013400 	.word	0x40013400
 8004844:	40014000 	.word	0x40014000
 8004848:	40014400 	.word	0x40014400
 800484c:	40014800 	.word	0x40014800

08004850 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004850:	b480      	push	{r7}
 8004852:	b087      	sub	sp, #28
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800487e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004882:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	021b      	lsls	r3, r3, #8
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	4313      	orrs	r3, r2
 800488e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004896:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	051b      	lsls	r3, r3, #20
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a18      	ldr	r2, [pc, #96]	; (8004908 <TIM_OC6_SetConfig+0xb8>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d00f      	beq.n	80048cc <TIM_OC6_SetConfig+0x7c>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a17      	ldr	r2, [pc, #92]	; (800490c <TIM_OC6_SetConfig+0xbc>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d00b      	beq.n	80048cc <TIM_OC6_SetConfig+0x7c>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a16      	ldr	r2, [pc, #88]	; (8004910 <TIM_OC6_SetConfig+0xc0>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d007      	beq.n	80048cc <TIM_OC6_SetConfig+0x7c>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a15      	ldr	r2, [pc, #84]	; (8004914 <TIM_OC6_SetConfig+0xc4>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d003      	beq.n	80048cc <TIM_OC6_SetConfig+0x7c>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a14      	ldr	r2, [pc, #80]	; (8004918 <TIM_OC6_SetConfig+0xc8>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d109      	bne.n	80048e0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	029b      	lsls	r3, r3, #10
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	4313      	orrs	r3, r2
 80048de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685a      	ldr	r2, [r3, #4]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	621a      	str	r2, [r3, #32]
}
 80048fa:	bf00      	nop
 80048fc:	371c      	adds	r7, #28
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	40012c00 	.word	0x40012c00
 800490c:	40013400 	.word	0x40013400
 8004910:	40014000 	.word	0x40014000
 8004914:	40014400 	.word	0x40014400
 8004918:	40014800 	.word	0x40014800

0800491c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800491c:	b480      	push	{r7}
 800491e:	b087      	sub	sp, #28
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6a1b      	ldr	r3, [r3, #32]
 800492c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	f023 0201 	bic.w	r2, r3, #1
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004946:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	011b      	lsls	r3, r3, #4
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	4313      	orrs	r3, r2
 8004950:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f023 030a 	bic.w	r3, r3, #10
 8004958:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	4313      	orrs	r3, r2
 8004960:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	621a      	str	r2, [r3, #32]
}
 800496e:	bf00      	nop
 8004970:	371c      	adds	r7, #28
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800497a:	b480      	push	{r7}
 800497c:	b087      	sub	sp, #28
 800497e:	af00      	add	r7, sp, #0
 8004980:	60f8      	str	r0, [r7, #12]
 8004982:	60b9      	str	r1, [r7, #8]
 8004984:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	f023 0210 	bic.w	r2, r3, #16
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6a1b      	ldr	r3, [r3, #32]
 800499c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	031b      	lsls	r3, r3, #12
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	011b      	lsls	r3, r3, #4
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	4313      	orrs	r3, r2
 80049c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	697a      	ldr	r2, [r7, #20]
 80049c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	621a      	str	r2, [r3, #32]
}
 80049ce:	bf00      	nop
 80049d0:	371c      	adds	r7, #28
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049da:	b480      	push	{r7}
 80049dc:	b085      	sub	sp, #20
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
 80049e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80049f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049f6:	683a      	ldr	r2, [r7, #0]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	f043 0307 	orr.w	r3, r3, #7
 8004a00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	609a      	str	r2, [r3, #8]
}
 8004a08:	bf00      	nop
 8004a0a:	3714      	adds	r7, #20
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b087      	sub	sp, #28
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
 8004a20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	021a      	lsls	r2, r3, #8
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	431a      	orrs	r2, r3
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	609a      	str	r2, [r3, #8]
}
 8004a48:	bf00      	nop
 8004a4a:	371c      	adds	r7, #28
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b087      	sub	sp, #28
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	f003 031f 	and.w	r3, r3, #31
 8004a66:	2201      	movs	r2, #1
 8004a68:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6a1a      	ldr	r2, [r3, #32]
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	43db      	mvns	r3, r3
 8004a76:	401a      	ands	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6a1a      	ldr	r2, [r3, #32]
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	f003 031f 	and.w	r3, r3, #31
 8004a86:	6879      	ldr	r1, [r7, #4]
 8004a88:	fa01 f303 	lsl.w	r3, r1, r3
 8004a8c:	431a      	orrs	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	621a      	str	r2, [r3, #32]
}
 8004a92:	bf00      	nop
 8004a94:	371c      	adds	r7, #28
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
	...

08004aa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d101      	bne.n	8004ab8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	e065      	b.n	8004b84 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a2c      	ldr	r2, [pc, #176]	; (8004b90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d004      	beq.n	8004aec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a2b      	ldr	r2, [pc, #172]	; (8004b94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d108      	bne.n	8004afe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004af2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b08:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a1b      	ldr	r2, [pc, #108]	; (8004b90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d018      	beq.n	8004b58 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b2e:	d013      	beq.n	8004b58 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a18      	ldr	r2, [pc, #96]	; (8004b98 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d00e      	beq.n	8004b58 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a17      	ldr	r2, [pc, #92]	; (8004b9c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d009      	beq.n	8004b58 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a12      	ldr	r2, [pc, #72]	; (8004b94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d004      	beq.n	8004b58 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a13      	ldr	r2, [pc, #76]	; (8004ba0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d10c      	bne.n	8004b72 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b5e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	68ba      	ldr	r2, [r7, #8]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2201      	movs	r2, #1
 8004b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3714      	adds	r7, #20
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	40012c00 	.word	0x40012c00
 8004b94:	40013400 	.word	0x40013400
 8004b98:	40000400 	.word	0x40000400
 8004b9c:	40000800 	.word	0x40000800
 8004ba0:	40014000 	.word	0x40014000

08004ba4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d101      	bne.n	8004bc0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	e087      	b.n	8004cd0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	695b      	ldr	r3, [r3, #20]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c26:	4313      	orrs	r3, r2
 8004c28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	041b      	lsls	r3, r3, #16
 8004c36:	4313      	orrs	r3, r2
 8004c38:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a27      	ldr	r2, [pc, #156]	; (8004cdc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d004      	beq.n	8004c4e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a25      	ldr	r2, [pc, #148]	; (8004ce0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d106      	bne.n	8004c5c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	69db      	ldr	r3, [r3, #28]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a1e      	ldr	r2, [pc, #120]	; (8004cdc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d004      	beq.n	8004c70 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a1d      	ldr	r2, [pc, #116]	; (8004ce0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d126      	bne.n	8004cbe <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7a:	051b      	lsls	r3, r3, #20
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	6a1b      	ldr	r3, [r3, #32]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a0e      	ldr	r2, [pc, #56]	; (8004cdc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d004      	beq.n	8004cb0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a0d      	ldr	r2, [pc, #52]	; (8004ce0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d106      	bne.n	8004cbe <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3714      	adds	r7, #20
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr
 8004cdc:	40012c00 	.word	0x40012c00
 8004ce0:	40013400 	.word	0x40013400

08004ce4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e042      	b.n	8004d7c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d106      	bne.n	8004d0e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f7fc fc6b 	bl	80015e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2224      	movs	r2, #36	; 0x24
 8004d12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f022 0201 	bic.w	r2, r2, #1
 8004d24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f8a2 	bl	8004e70 <UART_SetConfig>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d101      	bne.n	8004d36 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e022      	b.n	8004d7c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d002      	beq.n	8004d44 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 fb62 	bl	8005408 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689a      	ldr	r2, [r3, #8]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f042 0201 	orr.w	r2, r2, #1
 8004d72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 fbe9 	bl	800554c <UART_CheckIdleState>
 8004d7a:	4603      	mov	r3, r0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b08a      	sub	sp, #40	; 0x28
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d98:	2b20      	cmp	r3, #32
 8004d9a:	d142      	bne.n	8004e22 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d002      	beq.n	8004da8 <HAL_UART_Receive_DMA+0x24>
 8004da2:	88fb      	ldrh	r3, [r7, #6]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d101      	bne.n	8004dac <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e03b      	b.n	8004e24 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d101      	bne.n	8004dba <HAL_UART_Receive_DMA+0x36>
 8004db6:	2302      	movs	r3, #2
 8004db8:	e034      	b.n	8004e24 <HAL_UART_Receive_DMA+0xa0>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a17      	ldr	r2, [pc, #92]	; (8004e2c <HAL_UART_Receive_DMA+0xa8>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d01f      	beq.n	8004e12 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d018      	beq.n	8004e12 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	e853 3f00 	ldrex	r3, [r3]
 8004dec:	613b      	str	r3, [r7, #16]
   return(result);
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004df4:	627b      	str	r3, [r7, #36]	; 0x24
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfe:	623b      	str	r3, [r7, #32]
 8004e00:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e02:	69f9      	ldr	r1, [r7, #28]
 8004e04:	6a3a      	ldr	r2, [r7, #32]
 8004e06:	e841 2300 	strex	r3, r2, [r1]
 8004e0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1e6      	bne.n	8004de0 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004e12:	88fb      	ldrh	r3, [r7, #6]
 8004e14:	461a      	mov	r2, r3
 8004e16:	68b9      	ldr	r1, [r7, #8]
 8004e18:	68f8      	ldr	r0, [r7, #12]
 8004e1a:	f000 fcab 	bl	8005774 <UART_Start_Receive_DMA>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	e000      	b.n	8004e24 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004e22:	2302      	movs	r3, #2
  }
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3728      	adds	r7, #40	; 0x28
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	40008000 	.word	0x40008000

08004e30 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004e38:	bf00      	nop
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	460b      	mov	r3, r1
 8004e62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e74:	b08c      	sub	sp, #48	; 0x30
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	689a      	ldr	r2, [r3, #8]
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	431a      	orrs	r2, r3
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	69db      	ldr	r3, [r3, #28]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	4bab      	ldr	r3, [pc, #684]	; (800514c <UART_SetConfig+0x2dc>)
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	6812      	ldr	r2, [r2, #0]
 8004ea6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ea8:	430b      	orrs	r3, r1
 8004eaa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	68da      	ldr	r2, [r3, #12]
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4aa0      	ldr	r2, [pc, #640]	; (8005150 <UART_SetConfig+0x2e0>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d004      	beq.n	8004edc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004ee6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	6812      	ldr	r2, [r2, #0]
 8004eee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ef0:	430b      	orrs	r3, r1
 8004ef2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efa:	f023 010f 	bic.w	r1, r3, #15
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a91      	ldr	r2, [pc, #580]	; (8005154 <UART_SetConfig+0x2e4>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d125      	bne.n	8004f60 <UART_SetConfig+0xf0>
 8004f14:	4b90      	ldr	r3, [pc, #576]	; (8005158 <UART_SetConfig+0x2e8>)
 8004f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1a:	f003 0303 	and.w	r3, r3, #3
 8004f1e:	2b03      	cmp	r3, #3
 8004f20:	d81a      	bhi.n	8004f58 <UART_SetConfig+0xe8>
 8004f22:	a201      	add	r2, pc, #4	; (adr r2, 8004f28 <UART_SetConfig+0xb8>)
 8004f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f28:	08004f39 	.word	0x08004f39
 8004f2c:	08004f49 	.word	0x08004f49
 8004f30:	08004f41 	.word	0x08004f41
 8004f34:	08004f51 	.word	0x08004f51
 8004f38:	2301      	movs	r3, #1
 8004f3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f3e:	e0d6      	b.n	80050ee <UART_SetConfig+0x27e>
 8004f40:	2302      	movs	r3, #2
 8004f42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f46:	e0d2      	b.n	80050ee <UART_SetConfig+0x27e>
 8004f48:	2304      	movs	r3, #4
 8004f4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f4e:	e0ce      	b.n	80050ee <UART_SetConfig+0x27e>
 8004f50:	2308      	movs	r3, #8
 8004f52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f56:	e0ca      	b.n	80050ee <UART_SetConfig+0x27e>
 8004f58:	2310      	movs	r3, #16
 8004f5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f5e:	e0c6      	b.n	80050ee <UART_SetConfig+0x27e>
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a7d      	ldr	r2, [pc, #500]	; (800515c <UART_SetConfig+0x2ec>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d138      	bne.n	8004fdc <UART_SetConfig+0x16c>
 8004f6a:	4b7b      	ldr	r3, [pc, #492]	; (8005158 <UART_SetConfig+0x2e8>)
 8004f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f70:	f003 030c 	and.w	r3, r3, #12
 8004f74:	2b0c      	cmp	r3, #12
 8004f76:	d82d      	bhi.n	8004fd4 <UART_SetConfig+0x164>
 8004f78:	a201      	add	r2, pc, #4	; (adr r2, 8004f80 <UART_SetConfig+0x110>)
 8004f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7e:	bf00      	nop
 8004f80:	08004fb5 	.word	0x08004fb5
 8004f84:	08004fd5 	.word	0x08004fd5
 8004f88:	08004fd5 	.word	0x08004fd5
 8004f8c:	08004fd5 	.word	0x08004fd5
 8004f90:	08004fc5 	.word	0x08004fc5
 8004f94:	08004fd5 	.word	0x08004fd5
 8004f98:	08004fd5 	.word	0x08004fd5
 8004f9c:	08004fd5 	.word	0x08004fd5
 8004fa0:	08004fbd 	.word	0x08004fbd
 8004fa4:	08004fd5 	.word	0x08004fd5
 8004fa8:	08004fd5 	.word	0x08004fd5
 8004fac:	08004fd5 	.word	0x08004fd5
 8004fb0:	08004fcd 	.word	0x08004fcd
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fba:	e098      	b.n	80050ee <UART_SetConfig+0x27e>
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fc2:	e094      	b.n	80050ee <UART_SetConfig+0x27e>
 8004fc4:	2304      	movs	r3, #4
 8004fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fca:	e090      	b.n	80050ee <UART_SetConfig+0x27e>
 8004fcc:	2308      	movs	r3, #8
 8004fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fd2:	e08c      	b.n	80050ee <UART_SetConfig+0x27e>
 8004fd4:	2310      	movs	r3, #16
 8004fd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fda:	e088      	b.n	80050ee <UART_SetConfig+0x27e>
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a5f      	ldr	r2, [pc, #380]	; (8005160 <UART_SetConfig+0x2f0>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d125      	bne.n	8005032 <UART_SetConfig+0x1c2>
 8004fe6:	4b5c      	ldr	r3, [pc, #368]	; (8005158 <UART_SetConfig+0x2e8>)
 8004fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004ff0:	2b30      	cmp	r3, #48	; 0x30
 8004ff2:	d016      	beq.n	8005022 <UART_SetConfig+0x1b2>
 8004ff4:	2b30      	cmp	r3, #48	; 0x30
 8004ff6:	d818      	bhi.n	800502a <UART_SetConfig+0x1ba>
 8004ff8:	2b20      	cmp	r3, #32
 8004ffa:	d00a      	beq.n	8005012 <UART_SetConfig+0x1a2>
 8004ffc:	2b20      	cmp	r3, #32
 8004ffe:	d814      	bhi.n	800502a <UART_SetConfig+0x1ba>
 8005000:	2b00      	cmp	r3, #0
 8005002:	d002      	beq.n	800500a <UART_SetConfig+0x19a>
 8005004:	2b10      	cmp	r3, #16
 8005006:	d008      	beq.n	800501a <UART_SetConfig+0x1aa>
 8005008:	e00f      	b.n	800502a <UART_SetConfig+0x1ba>
 800500a:	2300      	movs	r3, #0
 800500c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005010:	e06d      	b.n	80050ee <UART_SetConfig+0x27e>
 8005012:	2302      	movs	r3, #2
 8005014:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005018:	e069      	b.n	80050ee <UART_SetConfig+0x27e>
 800501a:	2304      	movs	r3, #4
 800501c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005020:	e065      	b.n	80050ee <UART_SetConfig+0x27e>
 8005022:	2308      	movs	r3, #8
 8005024:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005028:	e061      	b.n	80050ee <UART_SetConfig+0x27e>
 800502a:	2310      	movs	r3, #16
 800502c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005030:	e05d      	b.n	80050ee <UART_SetConfig+0x27e>
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a4b      	ldr	r2, [pc, #300]	; (8005164 <UART_SetConfig+0x2f4>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d125      	bne.n	8005088 <UART_SetConfig+0x218>
 800503c:	4b46      	ldr	r3, [pc, #280]	; (8005158 <UART_SetConfig+0x2e8>)
 800503e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005042:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005046:	2bc0      	cmp	r3, #192	; 0xc0
 8005048:	d016      	beq.n	8005078 <UART_SetConfig+0x208>
 800504a:	2bc0      	cmp	r3, #192	; 0xc0
 800504c:	d818      	bhi.n	8005080 <UART_SetConfig+0x210>
 800504e:	2b80      	cmp	r3, #128	; 0x80
 8005050:	d00a      	beq.n	8005068 <UART_SetConfig+0x1f8>
 8005052:	2b80      	cmp	r3, #128	; 0x80
 8005054:	d814      	bhi.n	8005080 <UART_SetConfig+0x210>
 8005056:	2b00      	cmp	r3, #0
 8005058:	d002      	beq.n	8005060 <UART_SetConfig+0x1f0>
 800505a:	2b40      	cmp	r3, #64	; 0x40
 800505c:	d008      	beq.n	8005070 <UART_SetConfig+0x200>
 800505e:	e00f      	b.n	8005080 <UART_SetConfig+0x210>
 8005060:	2300      	movs	r3, #0
 8005062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005066:	e042      	b.n	80050ee <UART_SetConfig+0x27e>
 8005068:	2302      	movs	r3, #2
 800506a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800506e:	e03e      	b.n	80050ee <UART_SetConfig+0x27e>
 8005070:	2304      	movs	r3, #4
 8005072:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005076:	e03a      	b.n	80050ee <UART_SetConfig+0x27e>
 8005078:	2308      	movs	r3, #8
 800507a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800507e:	e036      	b.n	80050ee <UART_SetConfig+0x27e>
 8005080:	2310      	movs	r3, #16
 8005082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005086:	e032      	b.n	80050ee <UART_SetConfig+0x27e>
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a30      	ldr	r2, [pc, #192]	; (8005150 <UART_SetConfig+0x2e0>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d12a      	bne.n	80050e8 <UART_SetConfig+0x278>
 8005092:	4b31      	ldr	r3, [pc, #196]	; (8005158 <UART_SetConfig+0x2e8>)
 8005094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005098:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800509c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050a0:	d01a      	beq.n	80050d8 <UART_SetConfig+0x268>
 80050a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050a6:	d81b      	bhi.n	80050e0 <UART_SetConfig+0x270>
 80050a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050ac:	d00c      	beq.n	80050c8 <UART_SetConfig+0x258>
 80050ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050b2:	d815      	bhi.n	80050e0 <UART_SetConfig+0x270>
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d003      	beq.n	80050c0 <UART_SetConfig+0x250>
 80050b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050bc:	d008      	beq.n	80050d0 <UART_SetConfig+0x260>
 80050be:	e00f      	b.n	80050e0 <UART_SetConfig+0x270>
 80050c0:	2300      	movs	r3, #0
 80050c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050c6:	e012      	b.n	80050ee <UART_SetConfig+0x27e>
 80050c8:	2302      	movs	r3, #2
 80050ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050ce:	e00e      	b.n	80050ee <UART_SetConfig+0x27e>
 80050d0:	2304      	movs	r3, #4
 80050d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050d6:	e00a      	b.n	80050ee <UART_SetConfig+0x27e>
 80050d8:	2308      	movs	r3, #8
 80050da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050de:	e006      	b.n	80050ee <UART_SetConfig+0x27e>
 80050e0:	2310      	movs	r3, #16
 80050e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050e6:	e002      	b.n	80050ee <UART_SetConfig+0x27e>
 80050e8:	2310      	movs	r3, #16
 80050ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a17      	ldr	r2, [pc, #92]	; (8005150 <UART_SetConfig+0x2e0>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	f040 80a8 	bne.w	800524a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80050fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80050fe:	2b08      	cmp	r3, #8
 8005100:	d834      	bhi.n	800516c <UART_SetConfig+0x2fc>
 8005102:	a201      	add	r2, pc, #4	; (adr r2, 8005108 <UART_SetConfig+0x298>)
 8005104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005108:	0800512d 	.word	0x0800512d
 800510c:	0800516d 	.word	0x0800516d
 8005110:	08005135 	.word	0x08005135
 8005114:	0800516d 	.word	0x0800516d
 8005118:	0800513b 	.word	0x0800513b
 800511c:	0800516d 	.word	0x0800516d
 8005120:	0800516d 	.word	0x0800516d
 8005124:	0800516d 	.word	0x0800516d
 8005128:	08005143 	.word	0x08005143
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800512c:	f7fe f84a 	bl	80031c4 <HAL_RCC_GetPCLK1Freq>
 8005130:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005132:	e021      	b.n	8005178 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005134:	4b0c      	ldr	r3, [pc, #48]	; (8005168 <UART_SetConfig+0x2f8>)
 8005136:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005138:	e01e      	b.n	8005178 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800513a:	f7fd ffd5 	bl	80030e8 <HAL_RCC_GetSysClockFreq>
 800513e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005140:	e01a      	b.n	8005178 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005146:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005148:	e016      	b.n	8005178 <UART_SetConfig+0x308>
 800514a:	bf00      	nop
 800514c:	cfff69f3 	.word	0xcfff69f3
 8005150:	40008000 	.word	0x40008000
 8005154:	40013800 	.word	0x40013800
 8005158:	40021000 	.word	0x40021000
 800515c:	40004400 	.word	0x40004400
 8005160:	40004800 	.word	0x40004800
 8005164:	40004c00 	.word	0x40004c00
 8005168:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800516c:	2300      	movs	r3, #0
 800516e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005176:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517a:	2b00      	cmp	r3, #0
 800517c:	f000 812a 	beq.w	80053d4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005184:	4a9e      	ldr	r2, [pc, #632]	; (8005400 <UART_SetConfig+0x590>)
 8005186:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800518a:	461a      	mov	r2, r3
 800518c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005192:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	685a      	ldr	r2, [r3, #4]
 8005198:	4613      	mov	r3, r2
 800519a:	005b      	lsls	r3, r3, #1
 800519c:	4413      	add	r3, r2
 800519e:	69ba      	ldr	r2, [r7, #24]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d305      	bcc.n	80051b0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051aa:	69ba      	ldr	r2, [r7, #24]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d903      	bls.n	80051b8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80051b6:	e10d      	b.n	80053d4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ba:	2200      	movs	r2, #0
 80051bc:	60bb      	str	r3, [r7, #8]
 80051be:	60fa      	str	r2, [r7, #12]
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c4:	4a8e      	ldr	r2, [pc, #568]	; (8005400 <UART_SetConfig+0x590>)
 80051c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	2200      	movs	r2, #0
 80051ce:	603b      	str	r3, [r7, #0]
 80051d0:	607a      	str	r2, [r7, #4]
 80051d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80051da:	f7fb fb2b 	bl	8000834 <__aeabi_uldivmod>
 80051de:	4602      	mov	r2, r0
 80051e0:	460b      	mov	r3, r1
 80051e2:	4610      	mov	r0, r2
 80051e4:	4619      	mov	r1, r3
 80051e6:	f04f 0200 	mov.w	r2, #0
 80051ea:	f04f 0300 	mov.w	r3, #0
 80051ee:	020b      	lsls	r3, r1, #8
 80051f0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80051f4:	0202      	lsls	r2, r0, #8
 80051f6:	6979      	ldr	r1, [r7, #20]
 80051f8:	6849      	ldr	r1, [r1, #4]
 80051fa:	0849      	lsrs	r1, r1, #1
 80051fc:	2000      	movs	r0, #0
 80051fe:	460c      	mov	r4, r1
 8005200:	4605      	mov	r5, r0
 8005202:	eb12 0804 	adds.w	r8, r2, r4
 8005206:	eb43 0905 	adc.w	r9, r3, r5
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	469a      	mov	sl, r3
 8005212:	4693      	mov	fp, r2
 8005214:	4652      	mov	r2, sl
 8005216:	465b      	mov	r3, fp
 8005218:	4640      	mov	r0, r8
 800521a:	4649      	mov	r1, r9
 800521c:	f7fb fb0a 	bl	8000834 <__aeabi_uldivmod>
 8005220:	4602      	mov	r2, r0
 8005222:	460b      	mov	r3, r1
 8005224:	4613      	mov	r3, r2
 8005226:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005228:	6a3b      	ldr	r3, [r7, #32]
 800522a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800522e:	d308      	bcc.n	8005242 <UART_SetConfig+0x3d2>
 8005230:	6a3b      	ldr	r3, [r7, #32]
 8005232:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005236:	d204      	bcs.n	8005242 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	6a3a      	ldr	r2, [r7, #32]
 800523e:	60da      	str	r2, [r3, #12]
 8005240:	e0c8      	b.n	80053d4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005248:	e0c4      	b.n	80053d4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	69db      	ldr	r3, [r3, #28]
 800524e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005252:	d167      	bne.n	8005324 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005254:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005258:	2b08      	cmp	r3, #8
 800525a:	d828      	bhi.n	80052ae <UART_SetConfig+0x43e>
 800525c:	a201      	add	r2, pc, #4	; (adr r2, 8005264 <UART_SetConfig+0x3f4>)
 800525e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005262:	bf00      	nop
 8005264:	08005289 	.word	0x08005289
 8005268:	08005291 	.word	0x08005291
 800526c:	08005299 	.word	0x08005299
 8005270:	080052af 	.word	0x080052af
 8005274:	0800529f 	.word	0x0800529f
 8005278:	080052af 	.word	0x080052af
 800527c:	080052af 	.word	0x080052af
 8005280:	080052af 	.word	0x080052af
 8005284:	080052a7 	.word	0x080052a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005288:	f7fd ff9c 	bl	80031c4 <HAL_RCC_GetPCLK1Freq>
 800528c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800528e:	e014      	b.n	80052ba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005290:	f7fd ffae 	bl	80031f0 <HAL_RCC_GetPCLK2Freq>
 8005294:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005296:	e010      	b.n	80052ba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005298:	4b5a      	ldr	r3, [pc, #360]	; (8005404 <UART_SetConfig+0x594>)
 800529a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800529c:	e00d      	b.n	80052ba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800529e:	f7fd ff23 	bl	80030e8 <HAL_RCC_GetSysClockFreq>
 80052a2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80052a4:	e009      	b.n	80052ba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80052ac:	e005      	b.n	80052ba <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80052ae:	2300      	movs	r3, #0
 80052b0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80052b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f000 8089 	beq.w	80053d4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c6:	4a4e      	ldr	r2, [pc, #312]	; (8005400 <UART_SetConfig+0x590>)
 80052c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052cc:	461a      	mov	r2, r3
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80052d4:	005a      	lsls	r2, r3, #1
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	085b      	lsrs	r3, r3, #1
 80052dc:	441a      	add	r2, r3
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052e8:	6a3b      	ldr	r3, [r7, #32]
 80052ea:	2b0f      	cmp	r3, #15
 80052ec:	d916      	bls.n	800531c <UART_SetConfig+0x4ac>
 80052ee:	6a3b      	ldr	r3, [r7, #32]
 80052f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052f4:	d212      	bcs.n	800531c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052f6:	6a3b      	ldr	r3, [r7, #32]
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	f023 030f 	bic.w	r3, r3, #15
 80052fe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005300:	6a3b      	ldr	r3, [r7, #32]
 8005302:	085b      	lsrs	r3, r3, #1
 8005304:	b29b      	uxth	r3, r3
 8005306:	f003 0307 	and.w	r3, r3, #7
 800530a:	b29a      	uxth	r2, r3
 800530c:	8bfb      	ldrh	r3, [r7, #30]
 800530e:	4313      	orrs	r3, r2
 8005310:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	8bfa      	ldrh	r2, [r7, #30]
 8005318:	60da      	str	r2, [r3, #12]
 800531a:	e05b      	b.n	80053d4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005322:	e057      	b.n	80053d4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005324:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005328:	2b08      	cmp	r3, #8
 800532a:	d828      	bhi.n	800537e <UART_SetConfig+0x50e>
 800532c:	a201      	add	r2, pc, #4	; (adr r2, 8005334 <UART_SetConfig+0x4c4>)
 800532e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005332:	bf00      	nop
 8005334:	08005359 	.word	0x08005359
 8005338:	08005361 	.word	0x08005361
 800533c:	08005369 	.word	0x08005369
 8005340:	0800537f 	.word	0x0800537f
 8005344:	0800536f 	.word	0x0800536f
 8005348:	0800537f 	.word	0x0800537f
 800534c:	0800537f 	.word	0x0800537f
 8005350:	0800537f 	.word	0x0800537f
 8005354:	08005377 	.word	0x08005377
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005358:	f7fd ff34 	bl	80031c4 <HAL_RCC_GetPCLK1Freq>
 800535c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800535e:	e014      	b.n	800538a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005360:	f7fd ff46 	bl	80031f0 <HAL_RCC_GetPCLK2Freq>
 8005364:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005366:	e010      	b.n	800538a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005368:	4b26      	ldr	r3, [pc, #152]	; (8005404 <UART_SetConfig+0x594>)
 800536a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800536c:	e00d      	b.n	800538a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800536e:	f7fd febb 	bl	80030e8 <HAL_RCC_GetSysClockFreq>
 8005372:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005374:	e009      	b.n	800538a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005376:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800537a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800537c:	e005      	b.n	800538a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800537e:	2300      	movs	r3, #0
 8005380:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005388:	bf00      	nop
    }

    if (pclk != 0U)
 800538a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538c:	2b00      	cmp	r3, #0
 800538e:	d021      	beq.n	80053d4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005394:	4a1a      	ldr	r2, [pc, #104]	; (8005400 <UART_SetConfig+0x590>)
 8005396:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800539a:	461a      	mov	r2, r3
 800539c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539e:	fbb3 f2f2 	udiv	r2, r3, r2
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	085b      	lsrs	r3, r3, #1
 80053a8:	441a      	add	r2, r3
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053b4:	6a3b      	ldr	r3, [r7, #32]
 80053b6:	2b0f      	cmp	r3, #15
 80053b8:	d909      	bls.n	80053ce <UART_SetConfig+0x55e>
 80053ba:	6a3b      	ldr	r3, [r7, #32]
 80053bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053c0:	d205      	bcs.n	80053ce <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053c2:	6a3b      	ldr	r3, [r7, #32]
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	60da      	str	r2, [r3, #12]
 80053cc:	e002      	b.n	80053d4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	2201      	movs	r2, #1
 80053e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	2200      	movs	r2, #0
 80053e8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	2200      	movs	r2, #0
 80053ee:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80053f0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3730      	adds	r7, #48	; 0x30
 80053f8:	46bd      	mov	sp, r7
 80053fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053fe:	bf00      	nop
 8005400:	08005e80 	.word	0x08005e80
 8005404:	00f42400 	.word	0x00f42400

08005408 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00a      	beq.n	8005432 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	430a      	orrs	r2, r1
 8005430:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005436:	f003 0302 	and.w	r3, r3, #2
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00a      	beq.n	8005454 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	430a      	orrs	r2, r1
 8005452:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005458:	f003 0304 	and.w	r3, r3, #4
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00a      	beq.n	8005476 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547a:	f003 0308 	and.w	r3, r3, #8
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00a      	beq.n	8005498 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	430a      	orrs	r2, r1
 8005496:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549c:	f003 0310 	and.w	r3, r3, #16
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00a      	beq.n	80054ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	430a      	orrs	r2, r1
 80054b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054be:	f003 0320 	and.w	r3, r3, #32
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00a      	beq.n	80054dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	430a      	orrs	r2, r1
 80054da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d01a      	beq.n	800551e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	430a      	orrs	r2, r1
 80054fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005502:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005506:	d10a      	bne.n	800551e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	430a      	orrs	r2, r1
 800551c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00a      	beq.n	8005540 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	430a      	orrs	r2, r1
 800553e:	605a      	str	r2, [r3, #4]
  }
}
 8005540:	bf00      	nop
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b086      	sub	sp, #24
 8005550:	af02      	add	r7, sp, #8
 8005552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800555c:	f7fc f9a6 	bl	80018ac <HAL_GetTick>
 8005560:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0308 	and.w	r3, r3, #8
 800556c:	2b08      	cmp	r3, #8
 800556e:	d10e      	bne.n	800558e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005570:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005574:	9300      	str	r3, [sp, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 f82f 	bl	80055e2 <UART_WaitOnFlagUntilTimeout>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d001      	beq.n	800558e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e025      	b.n	80055da <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0304 	and.w	r3, r3, #4
 8005598:	2b04      	cmp	r3, #4
 800559a:	d10e      	bne.n	80055ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800559c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055a0:	9300      	str	r3, [sp, #0]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 f819 	bl	80055e2 <UART_WaitOnFlagUntilTimeout>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d001      	beq.n	80055ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e00f      	b.n	80055da <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2220      	movs	r2, #32
 80055be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2220      	movs	r2, #32
 80055c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b09c      	sub	sp, #112	; 0x70
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	60f8      	str	r0, [r7, #12]
 80055ea:	60b9      	str	r1, [r7, #8]
 80055ec:	603b      	str	r3, [r7, #0]
 80055ee:	4613      	mov	r3, r2
 80055f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055f2:	e0a9      	b.n	8005748 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055fa:	f000 80a5 	beq.w	8005748 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055fe:	f7fc f955 	bl	80018ac <HAL_GetTick>
 8005602:	4602      	mov	r2, r0
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800560a:	429a      	cmp	r2, r3
 800560c:	d302      	bcc.n	8005614 <UART_WaitOnFlagUntilTimeout+0x32>
 800560e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005610:	2b00      	cmp	r3, #0
 8005612:	d140      	bne.n	8005696 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800561c:	e853 3f00 	ldrex	r3, [r3]
 8005620:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005624:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005628:	667b      	str	r3, [r7, #100]	; 0x64
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	461a      	mov	r2, r3
 8005630:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005632:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005634:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005636:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005638:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800563a:	e841 2300 	strex	r3, r2, [r1]
 800563e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005640:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1e6      	bne.n	8005614 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	3308      	adds	r3, #8
 800564c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005650:	e853 3f00 	ldrex	r3, [r3]
 8005654:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005658:	f023 0301 	bic.w	r3, r3, #1
 800565c:	663b      	str	r3, [r7, #96]	; 0x60
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	3308      	adds	r3, #8
 8005664:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005666:	64ba      	str	r2, [r7, #72]	; 0x48
 8005668:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800566a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800566c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800566e:	e841 2300 	strex	r3, r2, [r1]
 8005672:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1e5      	bne.n	8005646 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2220      	movs	r2, #32
 800567e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2220      	movs	r2, #32
 8005686:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e069      	b.n	800576a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 0304 	and.w	r3, r3, #4
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d051      	beq.n	8005748 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	69db      	ldr	r3, [r3, #28]
 80056aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056b2:	d149      	bne.n	8005748 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056bc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c6:	e853 3f00 	ldrex	r3, [r3]
 80056ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	461a      	mov	r2, r3
 80056da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056dc:	637b      	str	r3, [r7, #52]	; 0x34
 80056de:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056e4:	e841 2300 	strex	r3, r2, [r1]
 80056e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80056ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1e6      	bne.n	80056be <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	3308      	adds	r3, #8
 80056f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	e853 3f00 	ldrex	r3, [r3]
 80056fe:	613b      	str	r3, [r7, #16]
   return(result);
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	f023 0301 	bic.w	r3, r3, #1
 8005706:	66bb      	str	r3, [r7, #104]	; 0x68
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	3308      	adds	r3, #8
 800570e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005710:	623a      	str	r2, [r7, #32]
 8005712:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005714:	69f9      	ldr	r1, [r7, #28]
 8005716:	6a3a      	ldr	r2, [r7, #32]
 8005718:	e841 2300 	strex	r3, r2, [r1]
 800571c:	61bb      	str	r3, [r7, #24]
   return(result);
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1e5      	bne.n	80056f0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2220      	movs	r2, #32
 8005728:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2220      	movs	r2, #32
 8005730:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2220      	movs	r2, #32
 8005738:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e010      	b.n	800576a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	69da      	ldr	r2, [r3, #28]
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	4013      	ands	r3, r2
 8005752:	68ba      	ldr	r2, [r7, #8]
 8005754:	429a      	cmp	r2, r3
 8005756:	bf0c      	ite	eq
 8005758:	2301      	moveq	r3, #1
 800575a:	2300      	movne	r3, #0
 800575c:	b2db      	uxtb	r3, r3
 800575e:	461a      	mov	r2, r3
 8005760:	79fb      	ldrb	r3, [r7, #7]
 8005762:	429a      	cmp	r2, r3
 8005764:	f43f af46 	beq.w	80055f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3770      	adds	r7, #112	; 0x70
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
	...

08005774 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b096      	sub	sp, #88	; 0x58
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	4613      	mov	r3, r2
 8005780:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	68ba      	ldr	r2, [r7, #8]
 8005786:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	88fa      	ldrh	r2, [r7, #6]
 800578c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2222      	movs	r2, #34	; 0x22
 800579c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d02c      	beq.n	8005802 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057ac:	4a42      	ldr	r2, [pc, #264]	; (80058b8 <UART_Start_Receive_DMA+0x144>)
 80057ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057b4:	4a41      	ldr	r2, [pc, #260]	; (80058bc <UART_Start_Receive_DMA+0x148>)
 80057b6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057bc:	4a40      	ldr	r2, [pc, #256]	; (80058c0 <UART_Start_Receive_DMA+0x14c>)
 80057be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057c4:	2200      	movs	r2, #0
 80057c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	3324      	adds	r3, #36	; 0x24
 80057d2:	4619      	mov	r1, r3
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057d8:	461a      	mov	r2, r3
 80057da:	88fb      	ldrh	r3, [r7, #6]
 80057dc:	f7fc fc28 	bl	8002030 <HAL_DMA_Start_IT>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00d      	beq.n	8005802 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2210      	movs	r2, #16
 80057ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2220      	movs	r2, #32
 80057fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e055      	b.n	80058ae <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d018      	beq.n	8005844 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800581a:	e853 3f00 	ldrex	r3, [r3]
 800581e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005826:	657b      	str	r3, [r7, #84]	; 0x54
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	461a      	mov	r2, r3
 800582e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005830:	64bb      	str	r3, [r7, #72]	; 0x48
 8005832:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005834:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005836:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005838:	e841 2300 	strex	r3, r2, [r1]
 800583c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800583e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005840:	2b00      	cmp	r3, #0
 8005842:	d1e6      	bne.n	8005812 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	3308      	adds	r3, #8
 800584a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584e:	e853 3f00 	ldrex	r3, [r3]
 8005852:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005856:	f043 0301 	orr.w	r3, r3, #1
 800585a:	653b      	str	r3, [r7, #80]	; 0x50
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	3308      	adds	r3, #8
 8005862:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005864:	637a      	str	r2, [r7, #52]	; 0x34
 8005866:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005868:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800586a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800586c:	e841 2300 	strex	r3, r2, [r1]
 8005870:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1e5      	bne.n	8005844 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	3308      	adds	r3, #8
 800587e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	e853 3f00 	ldrex	r3, [r3]
 8005886:	613b      	str	r3, [r7, #16]
   return(result);
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800588e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	3308      	adds	r3, #8
 8005896:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005898:	623a      	str	r2, [r7, #32]
 800589a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589c:	69f9      	ldr	r1, [r7, #28]
 800589e:	6a3a      	ldr	r2, [r7, #32]
 80058a0:	e841 2300 	strex	r3, r2, [r1]
 80058a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d1e5      	bne.n	8005878 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3758      	adds	r7, #88	; 0x58
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	08005a13 	.word	0x08005a13
 80058bc:	08005b39 	.word	0x08005b39
 80058c0:	08005b71 	.word	0x08005b71

080058c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b08f      	sub	sp, #60	; 0x3c
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d2:	6a3b      	ldr	r3, [r7, #32]
 80058d4:	e853 3f00 	ldrex	r3, [r3]
 80058d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80058e0:	637b      	str	r3, [r7, #52]	; 0x34
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	461a      	mov	r2, r3
 80058e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058ec:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058f2:	e841 2300 	strex	r3, r2, [r1]
 80058f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1e6      	bne.n	80058cc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	3308      	adds	r3, #8
 8005904:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	e853 3f00 	ldrex	r3, [r3]
 800590c:	60bb      	str	r3, [r7, #8]
   return(result);
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005914:	633b      	str	r3, [r7, #48]	; 0x30
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	3308      	adds	r3, #8
 800591c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800591e:	61ba      	str	r2, [r7, #24]
 8005920:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005922:	6979      	ldr	r1, [r7, #20]
 8005924:	69ba      	ldr	r2, [r7, #24]
 8005926:	e841 2300 	strex	r3, r2, [r1]
 800592a:	613b      	str	r3, [r7, #16]
   return(result);
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d1e5      	bne.n	80058fe <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2220      	movs	r2, #32
 8005936:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800593a:	bf00      	nop
 800593c:	373c      	adds	r7, #60	; 0x3c
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr

08005946 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005946:	b480      	push	{r7}
 8005948:	b095      	sub	sp, #84	; 0x54
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005956:	e853 3f00 	ldrex	r3, [r3]
 800595a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800595c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005962:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	461a      	mov	r2, r3
 800596a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800596c:	643b      	str	r3, [r7, #64]	; 0x40
 800596e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005970:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005972:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005974:	e841 2300 	strex	r3, r2, [r1]
 8005978:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800597a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597c:	2b00      	cmp	r3, #0
 800597e:	d1e6      	bne.n	800594e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	3308      	adds	r3, #8
 8005986:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005988:	6a3b      	ldr	r3, [r7, #32]
 800598a:	e853 3f00 	ldrex	r3, [r3]
 800598e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005996:	f023 0301 	bic.w	r3, r3, #1
 800599a:	64bb      	str	r3, [r7, #72]	; 0x48
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	3308      	adds	r3, #8
 80059a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059ac:	e841 2300 	strex	r3, r2, [r1]
 80059b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1e3      	bne.n	8005980 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d118      	bne.n	80059f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	e853 3f00 	ldrex	r3, [r3]
 80059cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	f023 0310 	bic.w	r3, r3, #16
 80059d4:	647b      	str	r3, [r7, #68]	; 0x44
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	461a      	mov	r2, r3
 80059dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059de:	61bb      	str	r3, [r7, #24]
 80059e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e2:	6979      	ldr	r1, [r7, #20]
 80059e4:	69ba      	ldr	r2, [r7, #24]
 80059e6:	e841 2300 	strex	r3, r2, [r1]
 80059ea:	613b      	str	r3, [r7, #16]
   return(result);
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d1e6      	bne.n	80059c0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2220      	movs	r2, #32
 80059f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005a06:	bf00      	nop
 8005a08:	3754      	adds	r7, #84	; 0x54
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr

08005a12 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b09c      	sub	sp, #112	; 0x70
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0320 	and.w	r3, r3, #32
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d171      	bne.n	8005b12 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8005a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a30:	2200      	movs	r2, #0
 8005a32:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a3e:	e853 3f00 	ldrex	r3, [r3]
 8005a42:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005a44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	461a      	mov	r2, r3
 8005a52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a54:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a56:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a5c:	e841 2300 	strex	r3, r2, [r1]
 8005a60:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1e6      	bne.n	8005a36 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	3308      	adds	r3, #8
 8005a6e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a72:	e853 3f00 	ldrex	r3, [r3]
 8005a76:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a7a:	f023 0301 	bic.w	r3, r3, #1
 8005a7e:	667b      	str	r3, [r7, #100]	; 0x64
 8005a80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	3308      	adds	r3, #8
 8005a86:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005a88:	647a      	str	r2, [r7, #68]	; 0x44
 8005a8a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a90:	e841 2300 	strex	r3, r2, [r1]
 8005a94:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1e5      	bne.n	8005a68 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	3308      	adds	r3, #8
 8005aa2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa6:	e853 3f00 	ldrex	r3, [r3]
 8005aaa:	623b      	str	r3, [r7, #32]
   return(result);
 8005aac:	6a3b      	ldr	r3, [r7, #32]
 8005aae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ab2:	663b      	str	r3, [r7, #96]	; 0x60
 8005ab4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	3308      	adds	r3, #8
 8005aba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005abc:	633a      	str	r2, [r7, #48]	; 0x30
 8005abe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ac2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ac4:	e841 2300 	strex	r3, r2, [r1]
 8005ac8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1e5      	bne.n	8005a9c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005ad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ad2:	2220      	movs	r2, #32
 8005ad4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d118      	bne.n	8005b12 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ae0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	e853 3f00 	ldrex	r3, [r3]
 8005aec:	60fb      	str	r3, [r7, #12]
   return(result);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f023 0310 	bic.w	r3, r3, #16
 8005af4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	461a      	mov	r2, r3
 8005afc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005afe:	61fb      	str	r3, [r7, #28]
 8005b00:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b02:	69b9      	ldr	r1, [r7, #24]
 8005b04:	69fa      	ldr	r2, [r7, #28]
 8005b06:	e841 2300 	strex	r3, r2, [r1]
 8005b0a:	617b      	str	r3, [r7, #20]
   return(result);
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1e6      	bne.n	8005ae0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d107      	bne.n	8005b2a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005b20:	4619      	mov	r1, r3
 8005b22:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005b24:	f7ff f998 	bl	8004e58 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b28:	e002      	b.n	8005b30 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005b2a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005b2c:	f7fb f804 	bl	8000b38 <HAL_UART_RxCpltCallback>
}
 8005b30:	bf00      	nop
 8005b32:	3770      	adds	r7, #112	; 0x70
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b44:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d109      	bne.n	8005b62 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005b54:	085b      	lsrs	r3, r3, #1
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	4619      	mov	r1, r3
 8005b5a:	68f8      	ldr	r0, [r7, #12]
 8005b5c:	f7ff f97c 	bl	8004e58 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b60:	e002      	b.n	8005b68 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8005b62:	68f8      	ldr	r0, [r7, #12]
 8005b64:	f7ff f964 	bl	8004e30 <HAL_UART_RxHalfCpltCallback>
}
 8005b68:	bf00      	nop
 8005b6a:	3710      	adds	r7, #16
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b086      	sub	sp, #24
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b84:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b8c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b98:	2b80      	cmp	r3, #128	; 0x80
 8005b9a:	d109      	bne.n	8005bb0 <UART_DMAError+0x40>
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	2b21      	cmp	r3, #33	; 0x21
 8005ba0:	d106      	bne.n	8005bb0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8005baa:	6978      	ldr	r0, [r7, #20]
 8005bac:	f7ff fe8a 	bl	80058c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bba:	2b40      	cmp	r3, #64	; 0x40
 8005bbc:	d109      	bne.n	8005bd2 <UART_DMAError+0x62>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2b22      	cmp	r3, #34	; 0x22
 8005bc2:	d106      	bne.n	8005bd2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8005bcc:	6978      	ldr	r0, [r7, #20]
 8005bce:	f7ff feba 	bl	8005946 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bd8:	f043 0210 	orr.w	r2, r3, #16
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005be2:	6978      	ldr	r0, [r7, #20]
 8005be4:	f7ff f92e 	bl	8004e44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005be8:	bf00      	nop
 8005bea:	3718      	adds	r7, #24
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d101      	bne.n	8005c06 <HAL_UARTEx_DisableFifoMode+0x16>
 8005c02:	2302      	movs	r3, #2
 8005c04:	e027      	b.n	8005c56 <HAL_UARTEx_DisableFifoMode+0x66>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2224      	movs	r2, #36	; 0x24
 8005c12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f022 0201 	bic.w	r2, r2, #1
 8005c2c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005c34:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2220      	movs	r2, #32
 8005c48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3714      	adds	r7, #20
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr

08005c62 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c62:	b580      	push	{r7, lr}
 8005c64:	b084      	sub	sp, #16
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
 8005c6a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d101      	bne.n	8005c7a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005c76:	2302      	movs	r3, #2
 8005c78:	e02d      	b.n	8005cd6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2224      	movs	r2, #36	; 0x24
 8005c86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f022 0201 	bic.w	r2, r2, #1
 8005ca0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	683a      	ldr	r2, [r7, #0]
 8005cb2:	430a      	orrs	r2, r1
 8005cb4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 f850 	bl	8005d5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2220      	movs	r2, #32
 8005cc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3710      	adds	r7, #16
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}

08005cde <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005cde:	b580      	push	{r7, lr}
 8005ce0:	b084      	sub	sp, #16
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
 8005ce6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d101      	bne.n	8005cf6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005cf2:	2302      	movs	r3, #2
 8005cf4:	e02d      	b.n	8005d52 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2224      	movs	r2, #36	; 0x24
 8005d02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f022 0201 	bic.w	r2, r2, #1
 8005d1c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	683a      	ldr	r2, [r7, #0]
 8005d2e:	430a      	orrs	r2, r1
 8005d30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f812 	bl	8005d5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2220      	movs	r2, #32
 8005d44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
	...

08005d5c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b085      	sub	sp, #20
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d108      	bne.n	8005d7e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005d7c:	e031      	b.n	8005de2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005d7e:	2308      	movs	r3, #8
 8005d80:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005d82:	2308      	movs	r3, #8
 8005d84:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	0e5b      	lsrs	r3, r3, #25
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	f003 0307 	and.w	r3, r3, #7
 8005d94:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	0f5b      	lsrs	r3, r3, #29
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	f003 0307 	and.w	r3, r3, #7
 8005da4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005da6:	7bbb      	ldrb	r3, [r7, #14]
 8005da8:	7b3a      	ldrb	r2, [r7, #12]
 8005daa:	4911      	ldr	r1, [pc, #68]	; (8005df0 <UARTEx_SetNbDataToProcess+0x94>)
 8005dac:	5c8a      	ldrb	r2, [r1, r2]
 8005dae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005db2:	7b3a      	ldrb	r2, [r7, #12]
 8005db4:	490f      	ldr	r1, [pc, #60]	; (8005df4 <UARTEx_SetNbDataToProcess+0x98>)
 8005db6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005db8:	fb93 f3f2 	sdiv	r3, r3, r2
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005dc4:	7bfb      	ldrb	r3, [r7, #15]
 8005dc6:	7b7a      	ldrb	r2, [r7, #13]
 8005dc8:	4909      	ldr	r1, [pc, #36]	; (8005df0 <UARTEx_SetNbDataToProcess+0x94>)
 8005dca:	5c8a      	ldrb	r2, [r1, r2]
 8005dcc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005dd0:	7b7a      	ldrb	r2, [r7, #13]
 8005dd2:	4908      	ldr	r1, [pc, #32]	; (8005df4 <UARTEx_SetNbDataToProcess+0x98>)
 8005dd4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005dd6:	fb93 f3f2 	sdiv	r3, r3, r2
 8005dda:	b29a      	uxth	r2, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005de2:	bf00      	nop
 8005de4:	3714      	adds	r7, #20
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	08005e98 	.word	0x08005e98
 8005df4:	08005ea0 	.word	0x08005ea0

08005df8 <__libc_init_array>:
 8005df8:	b570      	push	{r4, r5, r6, lr}
 8005dfa:	4d0d      	ldr	r5, [pc, #52]	; (8005e30 <__libc_init_array+0x38>)
 8005dfc:	4c0d      	ldr	r4, [pc, #52]	; (8005e34 <__libc_init_array+0x3c>)
 8005dfe:	1b64      	subs	r4, r4, r5
 8005e00:	10a4      	asrs	r4, r4, #2
 8005e02:	2600      	movs	r6, #0
 8005e04:	42a6      	cmp	r6, r4
 8005e06:	d109      	bne.n	8005e1c <__libc_init_array+0x24>
 8005e08:	4d0b      	ldr	r5, [pc, #44]	; (8005e38 <__libc_init_array+0x40>)
 8005e0a:	4c0c      	ldr	r4, [pc, #48]	; (8005e3c <__libc_init_array+0x44>)
 8005e0c:	f000 f820 	bl	8005e50 <_init>
 8005e10:	1b64      	subs	r4, r4, r5
 8005e12:	10a4      	asrs	r4, r4, #2
 8005e14:	2600      	movs	r6, #0
 8005e16:	42a6      	cmp	r6, r4
 8005e18:	d105      	bne.n	8005e26 <__libc_init_array+0x2e>
 8005e1a:	bd70      	pop	{r4, r5, r6, pc}
 8005e1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e20:	4798      	blx	r3
 8005e22:	3601      	adds	r6, #1
 8005e24:	e7ee      	b.n	8005e04 <__libc_init_array+0xc>
 8005e26:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e2a:	4798      	blx	r3
 8005e2c:	3601      	adds	r6, #1
 8005e2e:	e7f2      	b.n	8005e16 <__libc_init_array+0x1e>
 8005e30:	08005eb0 	.word	0x08005eb0
 8005e34:	08005eb0 	.word	0x08005eb0
 8005e38:	08005eb0 	.word	0x08005eb0
 8005e3c:	08005eb4 	.word	0x08005eb4

08005e40 <memset>:
 8005e40:	4402      	add	r2, r0
 8005e42:	4603      	mov	r3, r0
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d100      	bne.n	8005e4a <memset+0xa>
 8005e48:	4770      	bx	lr
 8005e4a:	f803 1b01 	strb.w	r1, [r3], #1
 8005e4e:	e7f9      	b.n	8005e44 <memset+0x4>

08005e50 <_init>:
 8005e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e52:	bf00      	nop
 8005e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e56:	bc08      	pop	{r3}
 8005e58:	469e      	mov	lr, r3
 8005e5a:	4770      	bx	lr

08005e5c <_fini>:
 8005e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e5e:	bf00      	nop
 8005e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e62:	bc08      	pop	{r3}
 8005e64:	469e      	mov	lr, r3
 8005e66:	4770      	bx	lr
